import { BigInteger } from "big-integer";
import { EntityLike, MessageIDLike } from "../define";
import { CustomMessage } from "./custom/message";

export namespace Api {
    type AnyLiteral = Record<string, any> | void;
    type Reader = any;
    type Client = any;
    type Utils = any;
    type X = unknown;
    type Type = unknown;
    type Bool = boolean;
    type int = number;
    type double = number;
    type float = number;
    type int128 = BigInteger;
    type int256 = BigInteger;
    type long = BigInteger;
    type bytes = Buffer;

    abstract class VirtualClass<Args extends AnyLiteral> {
        static CONSTRUCTOR_ID: number;
        static SUBCLASS_OF_ID: number;
        static className: string;
        static classType: "constructor"|"request";
        CONSTRUCTOR_ID: number;
        SUBCLASS_OF_ID: number;
        className: string;
        classType: "constructor"|"request";
        originalArgs: Args;
        constructor(args: Args);
        static serializeBytes(data: Buffer|string): Buffer;
        static serializeDate(date: Date|number): Buffer;
        getBytes(): Buffer;
        toJSON(): Args;
    }

    abstract class Request<Args, Response> extends VirtualClass<Partial<Args>> {
        __response: Response;
        static readResult(reader: Reader): Buffer;
        resolve(client: Client, utils: Utils): Promise<void>;
    }
    /** An empty constructor, no user or chat is defined.<br> */
    export class InputPeerEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 2134579434;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerEmpty";
        fromReader(reader: Reader): InputPeerEmpty;
    }

    /** Defines the current user.<br> */
    export class InputPeerSelf extends VirtualClass<void> {
        CONSTRUCTOR_id: 2107670217;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerSelf";
        fromReader(reader: Reader): InputPeerSelf;
    }

    export interface InputPeerChatArgs {
        /** Chat idientifier */
        chatId: int;
    }

    /** Defines a chat for further interaction.<br> */
    export class InputPeerChat extends VirtualClass<InputPeerChatArgs> implements InputPeerChatArgs {
        CONSTRUCTOR_id: 396093539;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerChat";
        chatId: int;
        fromReader(reader: Reader): InputPeerChat;
    }

    export interface InputPeerUserArgs {
        /** User identifier */
        userId: int;
        /** <strong>access_hash</strong> value from the <a href="https://corefork.telegram.org/constructor/user">user</a> constructor */
        accessHash: long;
    }

    /**
     * Defines a user for further interaction.<br>
     * @link https://corefork.telegram.org/constructor/user
     */
    export class InputPeerUser extends VirtualClass<InputPeerUserArgs> implements InputPeerUserArgs {
        CONSTRUCTOR_id: 2072935910;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerUser";
        userId: int;
        accessHash: long;
        fromReader(reader: Reader): InputPeerUser;
    }

    export interface InputPeerChannelArgs {
        /** Channel identifier */
        channelId: int;
        /** <strong>access_hash</strong> value from the <a href="https://corefork.telegram.org/constructor/channel">channel</a> constructor */
        accessHash: long;
    }

    /**
     * Defines a channel for further interaction.<br>
     * @link https://corefork.telegram.org/constructor/channel
     */
    export class InputPeerChannel extends VirtualClass<InputPeerChannelArgs> implements InputPeerChannelArgs {
        CONSTRUCTOR_id: 548253432;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerChannel";
        channelId: int;
        accessHash: long;
        fromReader(reader: Reader): InputPeerChannel;
    }

    export interface InputPeerUserFromMessageArgs {
        /** The chat where the user was seen */
        peer: TypeInputPeer;
        /** The message ID */
        msgId: MessageIDLike;
        /** The identifier of the user that was seen */
        userId: int;
    }

    /**
     * Defines a <a href="https://corefork.telegram.org/api/min">min</a> user that was seen in a certain message of a certain chat.<br>
     * @link https://corefork.telegram.org/api/min
     */
    export class InputPeerUserFromMessage extends VirtualClass<InputPeerUserFromMessageArgs> implements InputPeerUserFromMessageArgs {
        CONSTRUCTOR_id: 398123750;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerUserFromMessage";
        peer: TypeInputPeer;
        msgId: MessageIDLike;
        userId: int;
        fromReader(reader: Reader): InputPeerUserFromMessage;
    }

    export interface InputPeerChannelFromMessageArgs {
        /** The chat where the channel's message was seen */
        peer: TypeInputPeer;
        /** The message ID */
        msgId: MessageIDLike;
        /** The identifier of the channel that was seen */
        channelId: int;
    }

    /**
     * Defines a <a href="https://corefork.telegram.org/api/min">min</a> channel that was seen in a certain message of a certain chat.<br>
     * @link https://corefork.telegram.org/api/min
     */
    export class InputPeerChannelFromMessage extends VirtualClass<InputPeerChannelFromMessageArgs> implements InputPeerChannelFromMessageArgs {
        CONSTRUCTOR_id: -1667893317;
        SUBCLASS_OF_ID: 3374092470;
        classType: "constructor";
        className: "InputPeerChannelFromMessage";
        peer: TypeInputPeer;
        msgId: MessageIDLike;
        channelId: int;
        fromReader(reader: Reader): InputPeerChannelFromMessage;
    }

    /** Empty constructor, does not define a user.<br> */
    export class InputUserEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1182234929;
        SUBCLASS_OF_ID: 3865689926;
        classType: "constructor";
        className: "InputUserEmpty";
        fromReader(reader: Reader): InputUserEmpty;
    }

    /** Defines the current user.<br> */
    export class InputUserSelf extends VirtualClass<void> {
        CONSTRUCTOR_id: -138301121;
        SUBCLASS_OF_ID: 3865689926;
        classType: "constructor";
        className: "InputUserSelf";
        fromReader(reader: Reader): InputUserSelf;
    }

    export interface InputUserArgs {
        /** User identifier */
        userId: int;
        /** <strong>access_hash</strong> value from the <a href="https://corefork.telegram.org/constructor/user">user</a> constructor */
        accessHash: long;
    }

    /**
     * Defines a user for further interaction.<br>
     * @link https://corefork.telegram.org/constructor/user
     */
    export class InputUser extends VirtualClass<InputUserArgs> implements InputUserArgs {
        CONSTRUCTOR_id: -668391402;
        SUBCLASS_OF_ID: 3865689926;
        classType: "constructor";
        className: "InputUser";
        userId: int;
        accessHash: long;
        fromReader(reader: Reader): InputUser;
    }

    export interface InputUserFromMessageArgs {
        /** The chat where the user was seen */
        peer: TypeInputPeer;
        /** The message ID */
        msgId: MessageIDLike;
        /** The identifier of the user that was seen */
        userId: int;
    }

    /**
     * Defines a <a href="https://corefork.telegram.org/api/min">min</a> user that was seen in a certain message of a certain chat.<br>
     * @link https://corefork.telegram.org/api/min
     */
    export class InputUserFromMessage extends VirtualClass<InputUserFromMessageArgs> implements InputUserFromMessageArgs {
        CONSTRUCTOR_id: 756118935;
        SUBCLASS_OF_ID: 3865689926;
        classType: "constructor";
        className: "InputUserFromMessage";
        peer: TypeInputPeer;
        msgId: MessageIDLike;
        userId: int;
        fromReader(reader: Reader): InputUserFromMessage;
    }

    export interface InputPhoneContactArgs {
        /** User identifier on the client */
        clientId: long;
        /** Phone number */
        phone: string;
        /** Contact's first name */
        firstName: string;
        /** Contact's last name */
        lastName: string;
    }

    /**
     * Phone contact. The <code>client_id</code> is just an arbitrary contact ID: it should be set, for example, to an incremental number when using <a href="https://corefork.telegram.org/method/contacts.importContacts">contacts.importContacts</a>, in order to retry importing only the contacts that weren't imported successfully.<br>
     * @link https://corefork.telegram.org/method/contacts.importContacts
     * @link https://corefork.telegram.org/method/contacts.addContact
     */
    export class InputPhoneContact extends VirtualClass<InputPhoneContactArgs> implements InputPhoneContactArgs {
        CONSTRUCTOR_id: -208488460;
        SUBCLASS_OF_ID: 2926144130;
        classType: "constructor";
        className: "InputPhoneContact";
        clientId: long;
        phone: string;
        firstName: string;
        lastName: string;
        fromReader(reader: Reader): InputPhoneContact;
    }

    export interface InputFileArgs {
        /** Random file identifier created by the client */
        id: long;
        /** Number of parts saved */
        parts: int;
        /** Full name of the file */
        name: string;
        /** In case the file's <a href="https://en.wikipedia.org/wiki/MD5#MD5_hashes">md5-hash</a> was passed, contents of the file will be checked prior to use */
        md5Checksum: string;
    }

    /**
     * Defines a file saved in parts using the method <a href="https://corefork.telegram.org/method/upload.saveFilePart">upload.saveFilePart</a>.<br>
     * @link https://corefork.telegram.org/method/upload.saveFilePart
     */
    export class InputFile extends VirtualClass<InputFileArgs> implements InputFileArgs {
        CONSTRUCTOR_id: -181407105;
        SUBCLASS_OF_ID: 3882180383;
        classType: "constructor";
        className: "InputFile";
        id: long;
        parts: int;
        name: string;
        md5Checksum: string;
        fromReader(reader: Reader): InputFile;
    }

    export interface InputFileBigArgs {
        /** Random file id, created by the client */
        id: long;
        /** Number of parts saved */
        parts: int;
        /** Full file name */
        name: string;
    }

    /**
     * Assigns a big file (over 10Mb in size), saved in part using the method <a href="https://corefork.telegram.org/method/upload.saveBigFilePart">upload.saveBigFilePart</a>.<br>
     * @link https://corefork.telegram.org/method/upload.saveBigFilePart
     */
    export class InputFileBig extends VirtualClass<InputFileBigArgs> implements InputFileBigArgs {
        CONSTRUCTOR_id: -95482955;
        SUBCLASS_OF_ID: 3882180383;
        classType: "constructor";
        className: "InputFileBig";
        id: long;
        parts: int;
        name: string;
        fromReader(reader: Reader): InputFileBig;
    }

    /** Empty media content of a message.<br> */
    export class InputMediaEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1771768449;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaEmpty";
        fromReader(reader: Reader): InputMediaEmpty;
    }

    export interface InputMediaUploadedPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The <a href="https://corefork.telegram.org/api/files">uploaded file</a> */
        file: TypeInputFile;
        /** Attached mask stickers */
        stickers?: TypeInputDocument[];
        /** Time to live in seconds of self-destructing photo */
        ttlSeconds?: int;
    }

    /**
     * Photo<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class InputMediaUploadedPhoto extends VirtualClass<InputMediaUploadedPhotoArgs> implements InputMediaUploadedPhotoArgs {
        CONSTRUCTOR_id: 505969924;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaUploadedPhoto";
        flags: number;
        file: TypeInputFile;
        stickers?: TypeInputDocument[];
        ttlSeconds?: int;
        fromReader(reader: Reader): InputMediaUploadedPhoto;
    }

    export interface InputMediaPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Photo to be forwarded */
        id: TypeInputPhoto;
        /** Time to live in seconds of self-destructing photo */
        ttlSeconds?: int;
    }

    /** Forwarded photo<br> */
    export class InputMediaPhoto extends VirtualClass<InputMediaPhotoArgs> implements InputMediaPhotoArgs {
        CONSTRUCTOR_id: -1279654347;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaPhoto";
        flags: number;
        id: TypeInputPhoto;
        ttlSeconds?: int;
        fromReader(reader: Reader): InputMediaPhoto;
    }

    export interface InputMediaGeoPointArgs {
        /** GeoPoint */
        geoPoint: TypeInputGeoPoint;
    }

    /** Map.<br> */
    export class InputMediaGeoPoint extends VirtualClass<InputMediaGeoPointArgs> implements InputMediaGeoPointArgs {
        CONSTRUCTOR_id: -104578748;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaGeoPoint";
        geoPoint: TypeInputGeoPoint;
        fromReader(reader: Reader): InputMediaGeoPoint;
    }

    export interface InputMediaContactArgs {
        /** Phone number */
        phoneNumber: string;
        /** Contact's first name */
        firstName: string;
        /** Contact's last name */
        lastName: string;
        /** Contact vcard */
        vcard: string;
    }

    /** Phonebook contact<br> */
    export class InputMediaContact extends VirtualClass<InputMediaContactArgs> implements InputMediaContactArgs {
        CONSTRUCTOR_id: -122978821;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaContact";
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        fromReader(reader: Reader): InputMediaContact;
    }

    export interface InputMediaUploadedDocumentArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example) */
        nosoundVideo?: true;
        /** Force the media file to be uploaded as document */
        forceFile?: true;
        /** The <a href="https://corefork.telegram.org/api/files">uploaded file</a> */
        file: TypeInputFile;
        /** Thumbnail of the document, uploaded as for the file */
        thumb?: TypeInputFile;
        /** MIME type of document */
        mimeType: string;
        /** Attributes that specify the type of the document (video, audio, voice, sticker, etc.) */
        attributes: TypeDocumentAttribute[];
        /** Attached stickers */
        stickers?: TypeInputDocument[];
        /** Time to live in seconds of self-destructing document */
        ttlSeconds?: int;
    }

    /**
     * New document<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class InputMediaUploadedDocument extends VirtualClass<InputMediaUploadedDocumentArgs> implements InputMediaUploadedDocumentArgs {
        CONSTRUCTOR_id: 1530447553;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaUploadedDocument";
        flags: number;
        nosoundVideo?: true;
        forceFile?: true;
        file: TypeInputFile;
        thumb?: TypeInputFile;
        mimeType: string;
        attributes: TypeDocumentAttribute[];
        stickers?: TypeInputDocument[];
        ttlSeconds?: int;
        fromReader(reader: Reader): InputMediaUploadedDocument;
    }

    export interface InputMediaDocumentArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The document to be forwarded. */
        id: TypeInputDocument;
        /** Time to live of self-destructing document */
        ttlSeconds?: int;
        /** Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance. */
        query?: string;
    }

    /** Forwarded document<br> */
    export class InputMediaDocument extends VirtualClass<InputMediaDocumentArgs> implements InputMediaDocumentArgs {
        CONSTRUCTOR_id: 860303448;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaDocument";
        flags: number;
        id: TypeInputDocument;
        ttlSeconds?: int;
        query?: string;
        fromReader(reader: Reader): InputMediaDocument;
    }

    export interface InputMediaVenueArgs {
        /** Geolocation */
        geoPoint: TypeInputGeoPoint;
        /** Venue name */
        title: string;
        /** Physical address of the venue */
        address: string;
        /** Venue provider: currently only "foursquare" needs to be supported */
        provider: string;
        /** Venue ID in the provider's database */
        venueId: string;
        /** Venue type in the provider's database */
        venueType: string;
    }

    /** Can be used to send a venue geolocation.<br> */
    export class InputMediaVenue extends VirtualClass<InputMediaVenueArgs> implements InputMediaVenueArgs {
        CONSTRUCTOR_id: -1052959727;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaVenue";
        geoPoint: TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        fromReader(reader: Reader): InputMediaVenue;
    }

    export interface InputMediaPhotoExternalArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** URL of the photo */
        url: string;
        /** Self-destruct time to live of photo */
        ttlSeconds?: int;
    }

    /** New photo that will be uploaded by the server using the specified URL<br> */
    export class InputMediaPhotoExternal extends VirtualClass<InputMediaPhotoExternalArgs> implements InputMediaPhotoExternalArgs {
        CONSTRUCTOR_id: -440664550;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaPhotoExternal";
        flags: number;
        url: string;
        ttlSeconds?: int;
        fromReader(reader: Reader): InputMediaPhotoExternal;
    }

    export interface InputMediaDocumentExternalArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** URL of the document */
        url: string;
        /** Self-destruct time to live of document */
        ttlSeconds?: int;
    }

    /** Document that will be downloaded by the telegram servers<br> */
    export class InputMediaDocumentExternal extends VirtualClass<InputMediaDocumentExternalArgs> implements InputMediaDocumentExternalArgs {
        CONSTRUCTOR_id: -78455655;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaDocumentExternal";
        flags: number;
        url: string;
        ttlSeconds?: int;
        fromReader(reader: Reader): InputMediaDocumentExternal;
    }

    export interface InputMediaGameArgs {
        /** The game to forward */
        id: TypeInputGame;
    }

    /** A game<br> */
    export class InputMediaGame extends VirtualClass<InputMediaGameArgs> implements InputMediaGameArgs {
        CONSTRUCTOR_id: -750828557;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaGame";
        id: TypeInputGame;
        fromReader(reader: Reader): InputMediaGame;
    }

    export interface InputMediaInvoiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Product name, 1-32 characters */
        title: string;
        /** Product description, 1-255 characters */
        description: string;
        /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
        photo?: TypeInputWebDocument;
        /** The actual invoice */
        invoice: TypeInvoice;
        /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
        payload: bytes;
        /** Payments provider token, obtained via <a href="https://t.me/botfather">Botfather</a> */
        provider: string;
        /** JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider. */
        providerData: TypeDataJSON;
        /** Start parameter */
        startParam?: string;
    }

    /**
     * Generated invoice of a <a href="https://corefork.telegram.org/bots/payments">bot payment</a><br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class InputMediaInvoice extends VirtualClass<InputMediaInvoiceArgs> implements InputMediaInvoiceArgs {
        CONSTRUCTOR_id: -646342540;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaInvoice";
        flags: number;
        title: string;
        description: string;
        photo?: TypeInputWebDocument;
        invoice: TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: TypeDataJSON;
        startParam?: string;
        fromReader(reader: Reader): InputMediaInvoice;
    }

    export interface InputMediaGeoLiveArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether sending of the geolocation was stopped */
        stopped?: true;
        /** Current geolocation */
        geoPoint: TypeInputGeoPoint;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a direction in which the location moves, in degrees; 1-360. */
        heading?: int;
        /** Validity period of the current location */
        period?: int;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
        proximityNotificationRadius?: int;
    }

    /**
     * <a href="https://corefork.telegram.org/api/live-location">Live geolocation</a><br>
     * @link https://corefork.telegram.org/api/live-location
     */
    export class InputMediaGeoLive extends VirtualClass<InputMediaGeoLiveArgs> implements InputMediaGeoLiveArgs {
        CONSTRUCTOR_id: -1759532989;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaGeoLive";
        flags: number;
        stopped?: true;
        geoPoint: TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        fromReader(reader: Reader): InputMediaGeoLive;
    }

    export interface InputMediaPollArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The poll to send */
        poll: TypePoll;
        /** Correct answer IDs (for quiz polls) */
        correctAnswers?: bytes[];
        /** Explanation of quiz solution */
        solution?: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        solutionEntities?: TypeMessageEntity[];
    }

    /**
     * A poll<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class InputMediaPoll extends VirtualClass<InputMediaPollArgs> implements InputMediaPollArgs {
        CONSTRUCTOR_id: 261416433;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaPoll";
        flags: number;
        poll: TypePoll;
        correctAnswers?: bytes[];
        solution?: string;
        solutionEntities?: TypeMessageEntity[];
        fromReader(reader: Reader): InputMediaPoll;
    }

    export interface InputMediaDiceArgs {
        /** The emoji, for now <img class="emoji" src="//telegram.org/img/emoji/40/F09F8F80.png" width="20" height="20" alt="🏀">, <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EB2.png" width="20" height="20" alt="🎲"> and <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EAF.png" width="20" height="20" alt="🎯"> are supported */
        emoticon: string;
    }

    /**
     * Send a <a href="https://corefork.telegram.org/api/dice">dice-based animated sticker</a><br>
     * @link https://corefork.telegram.org/api/dice
     */
    export class InputMediaDice extends VirtualClass<InputMediaDiceArgs> implements InputMediaDiceArgs {
        CONSTRUCTOR_id: -428884101;
        SUBCLASS_OF_ID: 4210575092;
        classType: "constructor";
        className: "InputMediaDice";
        emoticon: string;
        fromReader(reader: Reader): InputMediaDice;
    }

    /** Empty constructor, remove group photo.<br> */
    export class InputChatPhotoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 480546647;
        SUBCLASS_OF_ID: 3572182388;
        classType: "constructor";
        className: "InputChatPhotoEmpty";
        fromReader(reader: Reader): InputChatPhotoEmpty;
    }

    export interface InputChatUploadedPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** File saved in parts using the method <a href="https://corefork.telegram.org/method/upload.saveFilePart">upload.saveFilePart</a> */
        file?: TypeInputFile;
        /** Square video for animated profile picture */
        video?: TypeInputFile;
        /** Timestamp that should be shown as static preview to the user (seconds) */
        videoStartTs?: double;
    }

    /**
     * New photo to be set as group profile photo.<br>
     * @link https://corefork.telegram.org/method/upload.saveFilePart
     */
    export class InputChatUploadedPhoto extends VirtualClass<InputChatUploadedPhotoArgs> implements InputChatUploadedPhotoArgs {
        CONSTRUCTOR_id: -968723890;
        SUBCLASS_OF_ID: 3572182388;
        classType: "constructor";
        className: "InputChatUploadedPhoto";
        flags: number;
        file?: TypeInputFile;
        video?: TypeInputFile;
        videoStartTs?: double;
        fromReader(reader: Reader): InputChatUploadedPhoto;
    }

    export interface InputChatPhotoArgs {
        /** Existing photo */
        id: TypeInputPhoto;
    }

    /** Existing photo to be set as a chat profile photo.<br> */
    export class InputChatPhoto extends VirtualClass<InputChatPhotoArgs> implements InputChatPhotoArgs {
        CONSTRUCTOR_id: -1991004873;
        SUBCLASS_OF_ID: 3572182388;
        classType: "constructor";
        className: "InputChatPhoto";
        id: TypeInputPhoto;
        fromReader(reader: Reader): InputChatPhoto;
    }

    /** Empty GeoPoint constructor.<br> */
    export class InputGeoPointEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -457104426;
        SUBCLASS_OF_ID: 70308389;
        classType: "constructor";
        className: "InputGeoPointEmpty";
        fromReader(reader: Reader): InputGeoPointEmpty;
    }

    export interface InputGeoPointArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Latitide */
        lat: double;
        /** Longtitude */
        long: double;
        /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
        accuracyRadius?: int;
    }

    /** Defines a GeoPoint by its coordinates.<br> */
    export class InputGeoPoint extends VirtualClass<InputGeoPointArgs> implements InputGeoPointArgs {
        CONSTRUCTOR_id: 1210199983;
        SUBCLASS_OF_ID: 70308389;
        classType: "constructor";
        className: "InputGeoPoint";
        flags: number;
        lat: double;
        long: double;
        accuracyRadius?: int;
        fromReader(reader: Reader): InputGeoPoint;
    }

    /** Empty constructor.<br> */
    export class InputPhotoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 483901197;
        SUBCLASS_OF_ID: 2221106144;
        classType: "constructor";
        className: "InputPhotoEmpty";
        fromReader(reader: Reader): InputPhotoEmpty;
    }

    export interface InputPhotoArgs {
        /** Photo identifier */
        id: long;
        /** <strong>access_hash</strong> value from the <a href="https://corefork.telegram.org/constructor/photo">photo</a> constructor */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
    }

    /**
     * Defines a photo for further interaction.<br>
     * @link https://corefork.telegram.org/constructor/photo
     * @link https://corefork.telegram.org/api/file_reference
     */
    export class InputPhoto extends VirtualClass<InputPhotoArgs> implements InputPhotoArgs {
        CONSTRUCTOR_id: 1001634122;
        SUBCLASS_OF_ID: 2221106144;
        classType: "constructor";
        className: "InputPhoto";
        id: long;
        accessHash: long;
        fileReference: bytes;
        fromReader(reader: Reader): InputPhoto;
    }

    export interface InputFileLocationArgs {
        /** Server volume */
        volumeId: long;
        /** File identifier */
        localId: int;
        /** Check sum to access the file */
        secret: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
    }

    /**
     * DEPRECATED location of a photo<br>
     * @link https://corefork.telegram.org/api/file_reference
     */
    export class InputFileLocation extends VirtualClass<InputFileLocationArgs> implements InputFileLocationArgs {
        CONSTRUCTOR_id: -539317279;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputFileLocation";
        volumeId: long;
        localId: int;
        secret: long;
        fileReference: bytes;
        fromReader(reader: Reader): InputFileLocation;
    }

    export interface InputEncryptedFileLocationArgs {
        /** File ID, <strong>id</strong> parameter value from <a href="https://corefork.telegram.org/constructor/encryptedFile">encryptedFile</a> */
        id: long;
        /** Checksum, <strong>access_hash</strong> parameter value from <a href="https://corefork.telegram.org/constructor/encryptedFile">encryptedFile</a> */
        accessHash: long;
    }

    /**
     * Location of encrypted secret chat file.<br>
     * @link https://corefork.telegram.org/constructor/encryptedFile
     */
    export class InputEncryptedFileLocation extends VirtualClass<InputEncryptedFileLocationArgs> implements InputEncryptedFileLocationArgs {
        CONSTRUCTOR_id: -182231723;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputEncryptedFileLocation";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputEncryptedFileLocation;
    }

    export interface InputDocumentFileLocationArgs {
        /** Document ID */
        id: long;
        /** <strong>access_hash</strong> parameter from the <a href="https://corefork.telegram.org/constructor/document">document</a> constructor */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
        /** Thumbnail size to download the thumbnail */
        thumbSize: string;
    }

    /**
     * Document location (video, voice, audio, basically every type except photo)<br>
     * @link https://corefork.telegram.org/constructor/document
     * @link https://corefork.telegram.org/api/file_reference
     */
    export class InputDocumentFileLocation extends VirtualClass<InputDocumentFileLocationArgs> implements InputDocumentFileLocationArgs {
        CONSTRUCTOR_id: -1160743548;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputDocumentFileLocation";
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
        fromReader(reader: Reader): InputDocumentFileLocation;
    }

    export interface InputSecureFileLocationArgs {
        /** File ID, <strong>id</strong> parameter value from <a href="https://corefork.telegram.org/constructor/secureFile">secureFile</a> */
        id: long;
        /** Checksum, <strong>access_hash</strong> parameter value from <a href="https://corefork.telegram.org/constructor/secureFile">secureFile</a> */
        accessHash: long;
    }

    /**
     * Location of encrypted telegram <a href="https://corefork.telegram.org/passport">passport</a> file.<br>
     * @link https://corefork.telegram.org/constructor/secureFile
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport
     */
    export class InputSecureFileLocation extends VirtualClass<InputSecureFileLocationArgs> implements InputSecureFileLocationArgs {
        CONSTRUCTOR_id: -876089816;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputSecureFileLocation";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputSecureFileLocation;
    }

    /** Empty constructor for takeout<br> */
    export class InputTakeoutFileLocation extends VirtualClass<void> {
        CONSTRUCTOR_id: 700340377;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputTakeoutFileLocation";
        fromReader(reader: Reader): InputTakeoutFileLocation;
    }

    export interface InputPhotoFileLocationArgs {
        /** Photo ID, obtained from the <a href="https://corefork.telegram.org/constructor/photo">photo</a> object */
        id: long;
        /** Photo's access hash, obtained from the <a href="https://corefork.telegram.org/constructor/photo">photo</a> object */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
        /** The <a href="https://corefork.telegram.org/type/PhotoSize">PhotoSize</a> to download: must be set to the <code>type</code> field of the desired PhotoSize object of the <a href="https://corefork.telegram.org/constructor/photo">photo</a> */
        thumbSize: string;
    }

    /**
     * Use this object to download a photo with <a href="https://corefork.telegram.org/method/upload.getFile">upload.getFile</a> method<br>
     * @link https://corefork.telegram.org/constructor/photo
     * @link https://corefork.telegram.org/api/file_reference
     * @link https://corefork.telegram.org/type/PhotoSize
     * @link https://corefork.telegram.org/method/upload.getFile
     */
    export class InputPhotoFileLocation extends VirtualClass<InputPhotoFileLocationArgs> implements InputPhotoFileLocationArgs {
        CONSTRUCTOR_id: 1075322878;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputPhotoFileLocation";
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
        fromReader(reader: Reader): InputPhotoFileLocation;
    }

    export interface InputPhotoLegacyFileLocationArgs {
        /** Photo ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** File reference */
        fileReference: bytes;
        /** Volume ID */
        volumeId: long;
        /** Local ID */
        localId: int;
        /** Secret */
        secret: long;
    }

    /** DEPRECATED legacy photo file location<br> */
    export class InputPhotoLegacyFileLocation extends VirtualClass<InputPhotoLegacyFileLocationArgs> implements InputPhotoLegacyFileLocationArgs {
        CONSTRUCTOR_id: -667654413;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputPhotoLegacyFileLocation";
        id: long;
        accessHash: long;
        fileReference: bytes;
        volumeId: long;
        localId: int;
        secret: long;
        fromReader(reader: Reader): InputPhotoLegacyFileLocation;
    }

    export interface InputPeerPhotoFileLocationArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to download the high-quality version of the picture */
        big?: true;
        /** The peer whose profile picture should be downloaded */
        peer: TypeInputPeer;
        /** Photo ID */
        photoId: long;
    }

    /** Location of profile photo of channel/group/supergroup/user<br> */
    export class InputPeerPhotoFileLocation extends VirtualClass<InputPeerPhotoFileLocationArgs> implements InputPeerPhotoFileLocationArgs {
        CONSTRUCTOR_id: 925204121;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputPeerPhotoFileLocation";
        flags: number;
        big?: true;
        peer: TypeInputPeer;
        photoId: long;
        fromReader(reader: Reader): InputPeerPhotoFileLocation;
    }

    export interface InputStickerSetThumbArgs {
        /** Sticker set */
        stickerset: TypeInputStickerSet;
        /** Thumbnail version */
        thumbVersion: int;
    }

    /**
     * Location of stickerset thumbnail (see <a href="https://corefork.telegram.org/api/files">files</a>)<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class InputStickerSetThumb extends VirtualClass<InputStickerSetThumbArgs> implements InputStickerSetThumbArgs {
        CONSTRUCTOR_id: -1652231205;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputStickerSetThumb";
        stickerset: TypeInputStickerSet;
        thumbVersion: int;
        fromReader(reader: Reader): InputStickerSetThumb;
    }

    export interface InputGroupCallStreamArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        call: TypeInputGroupCall;
        /** Livestream info */
        timeMs: long;
        /** Timestamp in milliseconds */
        scale: int;
    }

    /** Chunk of a livestream<br> */
    export class InputGroupCallStream extends VirtualClass<InputGroupCallStreamArgs> implements InputGroupCallStreamArgs {
        CONSTRUCTOR_id: -1146808775;
        SUBCLASS_OF_ID: 354669666;
        classType: "constructor";
        className: "InputGroupCallStream";
        call: TypeInputGroupCall;
        timeMs: long;
        scale: int;
        fromReader(reader: Reader): InputGroupCallStream;
    }

    export interface PeerUserArgs {
        /** User identifier */
        userId: int;
    }

    /** Chat partner<br> */
    export class PeerUser extends VirtualClass<PeerUserArgs> implements PeerUserArgs {
        CONSTRUCTOR_id: -1649296275;
        SUBCLASS_OF_ID: 47470215;
        classType: "constructor";
        className: "PeerUser";
        userId: int;
        fromReader(reader: Reader): PeerUser;
    }

    export interface PeerChatArgs {
        /** Group identifier */
        chatId: int;
    }

    /** Group.<br> */
    export class PeerChat extends VirtualClass<PeerChatArgs> implements PeerChatArgs {
        CONSTRUCTOR_id: -1160714821;
        SUBCLASS_OF_ID: 47470215;
        classType: "constructor";
        className: "PeerChat";
        chatId: int;
        fromReader(reader: Reader): PeerChat;
    }

    export interface PeerChannelArgs {
        /** Channel ID */
        channelId: int;
    }

    /** Channel/supergroup<br> */
    export class PeerChannel extends VirtualClass<PeerChannelArgs> implements PeerChannelArgs {
        CONSTRUCTOR_id: -1109531342;
        SUBCLASS_OF_ID: 47470215;
        classType: "constructor";
        className: "PeerChannel";
        channelId: int;
        fromReader(reader: Reader): PeerChannel;
    }

    export interface UserEmptyArgs {
        /** User identifier or <code>0</code> */
        id: int;
    }

    /** Empty constructor, non-existent user.<br> */
    export class UserEmpty extends VirtualClass<UserEmptyArgs> implements UserEmptyArgs {
        CONSTRUCTOR_id: 537022650;
        SUBCLASS_OF_ID: 765557111;
        classType: "constructor";
        className: "UserEmpty";
        id: int;
        fromReader(reader: Reader): UserEmpty;
    }

    export interface UserArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this user indicates the currently logged in user */
        self?: true;
        /** Whether this user is a contact */
        contact?: true;
        /** Whether this user is a mutual contact */
        mutualContact?: true;
        /** Whether the account of this user was deleted */
        deleted?: true;
        /** Is this user a bot? */
        bot?: true;
        /** Can the bot see all messages in groups? */
        botChatHistory?: true;
        /** Can the bot be added to groups? */
        botNochats?: true;
        /** Whether this user is verified */
        verified?: true;
        /** Access to this user must be restricted for the reason specified in <code>restriction_reason</code> */
        restricted?: true;
        /** See <a href="https://corefork.telegram.org/api/min">min</a> */
        min?: true;
        /** Whether the bot can request our geolocation in inline mode */
        botInlineGeo?: true;
        /** Whether this is an official support user */
        support?: true;
        /** This may be a scam user */
        scam?: true;
        /** If set, the profile picture for this user should be refetched */
        applyMinPhoto?: true;
        /** If set, this user was reported by many users as a fake or scam user: be careful when interacting with them. */
        fake?: true;
        /** ID of the user */
        id: int;
        /** Access hash of the user */
        accessHash?: long;
        /** First name */
        firstName?: string;
        /** Last name */
        lastName?: string;
        /** Username */
        username?: string;
        /** Phone number */
        phone?: string;
        /** Profile picture of user */
        photo?: TypeUserProfilePhoto;
        /** Online status of user */
        status?: TypeUserStatus;
        /** Version of the <a href="https://corefork.telegram.org/constructor/userFull">bot_info field in userFull</a>, incremented every time it changes */
        botInfoVersion?: int;
        /** Contains the reason why access to this user must be restricted. */
        restrictionReason?: TypeRestrictionReason[];
        /** Inline placeholder for this inline bot */
        botInlinePlaceholder?: string;
        /** Language code of the user */
        langCode?: string;
    }

    /**
     * Indicates info about a certain user<br>
     * @link https://corefork.telegram.org/api/min
     * @link https://corefork.telegram.org/constructor/userFull
     */
    export class User extends VirtualClass<UserArgs> implements UserArgs {
        CONSTRUCTOR_id: -1820043071;
        SUBCLASS_OF_ID: 765557111;
        classType: "constructor";
        className: "User";
        flags: number;
        self?: true;
        contact?: true;
        mutualContact?: true;
        deleted?: true;
        bot?: true;
        botChatHistory?: true;
        botNochats?: true;
        verified?: true;
        restricted?: true;
        min?: true;
        botInlineGeo?: true;
        support?: true;
        scam?: true;
        applyMinPhoto?: true;
        fake?: true;
        id: int;
        accessHash?: long;
        firstName?: string;
        lastName?: string;
        username?: string;
        phone?: string;
        photo?: TypeUserProfilePhoto;
        status?: TypeUserStatus;
        botInfoVersion?: int;
        restrictionReason?: TypeRestrictionReason[];
        botInlinePlaceholder?: string;
        langCode?: string;
        fromReader(reader: Reader): User;
    }

    /** Profile photo has not been set, or was hidden.<br> */
    export class UserProfilePhotoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1326562017;
        SUBCLASS_OF_ID: 3325267837;
        classType: "constructor";
        className: "UserProfilePhotoEmpty";
        fromReader(reader: Reader): UserProfilePhotoEmpty;
    }

    export interface UserProfilePhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether an <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">animated profile picture</a> is available for this user */
        hasVideo?: true;
        /** Identifier of the respective photo<br>Parameter added in <a href="https://corefork.telegram.org/api/layers#layer-2">Layer 2</a> */
        photoId: long;
        /** <a href="https://corefork.telegram.org/api/files#stripped-thumbnails">Stripped thumbnail</a> */
        strippedThumb?: bytes;
        /** DC ID where the photo is stored */
        dcId: int;
    }

    /**
     * User profile photo.<br>
     * @link https://corefork.telegram.org/api/files
     * @link https://corefork.telegram.org/api/layers
     */
    export class UserProfilePhoto extends VirtualClass<UserProfilePhotoArgs> implements UserProfilePhotoArgs {
        CONSTRUCTOR_id: -2100168954;
        SUBCLASS_OF_ID: 3325267837;
        classType: "constructor";
        className: "UserProfilePhoto";
        flags: number;
        hasVideo?: true;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
        fromReader(reader: Reader): UserProfilePhoto;
    }

    /** User status has not been set yet.<br> */
    export class UserStatusEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 164646985;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusEmpty";
        fromReader(reader: Reader): UserStatusEmpty;
    }

    export interface UserStatusOnlineArgs {
        /** Time to expiration of the current online status */
        expires: int;
    }

    /** Online status of the user.<br> */
    export class UserStatusOnline extends VirtualClass<UserStatusOnlineArgs> implements UserStatusOnlineArgs {
        CONSTRUCTOR_id: -306628279;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusOnline";
        expires: int;
        fromReader(reader: Reader): UserStatusOnline;
    }

    export interface UserStatusOfflineArgs {
        /** Time the user was last seen online */
        wasOnline: int;
    }

    /** The user's offline status.<br> */
    export class UserStatusOffline extends VirtualClass<UserStatusOfflineArgs> implements UserStatusOfflineArgs {
        CONSTRUCTOR_id: -7573441;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusOffline";
        wasOnline: int;
        fromReader(reader: Reader): UserStatusOffline;
    }

    /** Online status: last seen recently<br> */
    export class UserStatusRecently extends VirtualClass<void> {
        CONSTRUCTOR_id: -496024847;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusRecently";
        fromReader(reader: Reader): UserStatusRecently;
    }

    /** Online status: last seen last week<br> */
    export class UserStatusLastWeek extends VirtualClass<void> {
        CONSTRUCTOR_id: 129960444;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusLastWeek";
        fromReader(reader: Reader): UserStatusLastWeek;
    }

    /** Online status: last seen last month<br> */
    export class UserStatusLastMonth extends VirtualClass<void> {
        CONSTRUCTOR_id: 2011940674;
        SUBCLASS_OF_ID: 1527477310;
        classType: "constructor";
        className: "UserStatusLastMonth";
        fromReader(reader: Reader): UserStatusLastMonth;
    }

    export interface ChatEmptyArgs {
        /** Group identifier */
        id: int;
    }

    /** Empty constructor, group doesn't exist<br> */
    export class ChatEmpty extends VirtualClass<ChatEmptyArgs> implements ChatEmptyArgs {
        CONSTRUCTOR_id: -1683826688;
        SUBCLASS_OF_ID: 3316604308;
        classType: "constructor";
        className: "ChatEmpty";
        id: int;
        fromReader(reader: Reader): ChatEmpty;
    }

    export interface ChatArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the current user is the creator of the group */
        creator?: true;
        /** Whether the current user was kicked from the group */
        kicked?: true;
        /** Whether the current user has left the group */
        left?: true;
        /** Whether the group was <a href="https://corefork.telegram.org/api/channel">migrated</a> */
        deactivated?: true;
        /** Whether a group call is currently active */
        callActive?: true;
        /** Whether there's anyone in the group call */
        callNotEmpty?: true;
        /** ID of the group */
        id: int;
        /** Title */
        title: string;
        /** Chat photo */
        photo: TypeChatPhoto;
        /** Participant count */
        participantsCount: int;
        /** Date of creation of the group */
        date: int;
        /** Used in basic groups to reorder updates and make sure that all of them were received. */
        version: int;
        /** Means this chat was <a href="https://corefork.telegram.org/api/channel">upgraded</a> to a supergroup */
        migratedTo?: TypeInputChannel;
        /** <a href="https://corefork.telegram.org/api/rights">Admin rights</a> of the user in the group */
        adminRights?: TypeChatAdminRights;
        /** <a href="https://corefork.telegram.org/api/rights">Default banned rights</a> of all users in the group */
        defaultBannedRights?: TypeChatBannedRights;
    }

    /**
     * Info about a group<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/rights
     */
    export class Chat extends VirtualClass<ChatArgs> implements ChatArgs {
        CONSTRUCTOR_id: 1004149726;
        SUBCLASS_OF_ID: 3316604308;
        classType: "constructor";
        className: "Chat";
        flags: number;
        creator?: true;
        kicked?: true;
        left?: true;
        deactivated?: true;
        callActive?: true;
        callNotEmpty?: true;
        id: int;
        title: string;
        photo: TypeChatPhoto;
        participantsCount: int;
        date: int;
        version: int;
        migratedTo?: TypeInputChannel;
        adminRights?: TypeChatAdminRights;
        defaultBannedRights?: TypeChatBannedRights;
        fromReader(reader: Reader): Chat;
    }

    export interface ChatForbiddenArgs {
        /** User identifier */
        id: int;
        /** Group name */
        title: string;
    }

    /** A group to which the user has no access. E.g., because the user was kicked from the group.<br> */
    export class ChatForbidden extends VirtualClass<ChatForbiddenArgs> implements ChatForbiddenArgs {
        CONSTRUCTOR_id: 120753115;
        SUBCLASS_OF_ID: 3316604308;
        classType: "constructor";
        className: "ChatForbidden";
        id: int;
        title: string;
        fromReader(reader: Reader): ChatForbidden;
    }

    export interface ChannelArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the current user is the creator of this channel */
        creator?: true;
        /** Whether the current user has left this channel */
        left?: true;
        /** Is this a channel? */
        broadcast?: true;
        /** Is this channel verified by telegram? */
        verified?: true;
        /** Is this a supergroup? */
        megagroup?: true;
        /** Whether viewing/writing in this channel for a reason (see <code>restriction_reason</code> */
        restricted?: true;
        /** Whether signatures are enabled (channels) */
        signatures?: true;
        /** See <a href="https://corefork.telegram.org/api/min">min</a> */
        min?: true;
        /** This channel/supergroup is probably a scam */
        scam?: true;
        /** Whether this channel has a private join link */
        hasLink?: true;
        /** Whether this chanel has a geoposition */
        hasGeo?: true;
        /** Whether slow mode is enabled for groups to prevent flood in chat */
        slowmodeEnabled?: true;
        /** Whether a group call or livestream is currently active */
        callActive?: true;
        /** Whether there's anyone in the group call or livestream */
        callNotEmpty?: true;
        /** If set, this <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> was reported by many users as a fake or scam: be careful when interacting with it. */
        fake?: true;
        /** Whether this <a href="https://corefork.telegram.org/api/channel">supergroup</a> is a gigagroup */
        gigagroup?: true;
        /** ID of the channel */
        id: int;
        /** Access hash */
        accessHash?: long;
        /** Title */
        title: string;
        /** Username */
        username?: string;
        /** Profile photo */
        photo: TypeChatPhoto;
        /** Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date */
        date: int;
        /** Contains the reason why access to this channel must be restricted. */
        version: int;
        /** Admin rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>) */
        restrictionReason?: TypeRestrictionReason[];
        /** Banned rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>) */
        adminRights?: TypeChatAdminRights;
        /** Default chat rights (see <a href="https://corefork.telegram.org/api/rights">rights</a>) */
        bannedRights?: TypeChatBannedRights;
        /** Participant count */
        defaultBannedRights?: TypeChatBannedRights;
        /** */
        participantsCount?: int;
    }

    /**
     * Channel/supergroup info<br>
     * @link https://corefork.telegram.org/api/min
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/rights
     */
    export class Channel extends VirtualClass<ChannelArgs> implements ChannelArgs {
        CONSTRUCTOR_id: -753232354;
        SUBCLASS_OF_ID: 3316604308;
        classType: "constructor";
        className: "Channel";
        flags: number;
        creator?: true;
        left?: true;
        broadcast?: true;
        verified?: true;
        megagroup?: true;
        restricted?: true;
        signatures?: true;
        min?: true;
        scam?: true;
        hasLink?: true;
        hasGeo?: true;
        slowmodeEnabled?: true;
        callActive?: true;
        callNotEmpty?: true;
        fake?: true;
        gigagroup?: true;
        id: int;
        accessHash?: long;
        title: string;
        username?: string;
        photo: TypeChatPhoto;
        date: int;
        version: int;
        restrictionReason?: TypeRestrictionReason[];
        adminRights?: TypeChatAdminRights;
        bannedRights?: TypeChatBannedRights;
        defaultBannedRights?: TypeChatBannedRights;
        participantsCount?: int;
        fromReader(reader: Reader): Channel;
    }

    export interface ChannelForbiddenArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this a channel */
        broadcast?: true;
        /** Is this a supergroup */
        megagroup?: true;
        /** Channel ID */
        id: int;
        /** Access hash */
        accessHash: long;
        /** Title */
        title: string;
        /** The ban is valid until the specified date */
        untilDate?: int;
    }

    /** Indicates a channel/supergroup we can't access because we were banned, or for some other reason.<br> */
    export class ChannelForbidden extends VirtualClass<ChannelForbiddenArgs> implements ChannelForbiddenArgs {
        CONSTRUCTOR_id: 681420594;
        SUBCLASS_OF_ID: 3316604308;
        classType: "constructor";
        className: "ChannelForbidden";
        flags: number;
        broadcast?: true;
        megagroup?: true;
        id: int;
        accessHash: long;
        title: string;
        untilDate?: int;
        fromReader(reader: Reader): ChannelForbidden;
    }

    export interface ChatFullArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Can we change the username of this chat */
        canSetUsername?: true;
        /** Whether <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> are available */
        hasScheduled?: true;
        /** ID of the chat */
        id: int;
        /** About string for this chat */
        about: string;
        /** Participant list */
        participants: TypeChatParticipants;
        /** Chat photo */
        chatPhoto?: TypePhoto;
        /** Notification settings */
        notifySettings: TypePeerNotifySettings;
        /** Chat invite */
        exportedInvite?: TypeExportedChatInvite;
        /** Info about bots that are in this chat */
        botInfo?: TypeBotInfo[];
        /** Message ID of the last <a href="https://corefork.telegram.org/api/pin">pinned message</a> */
        pinnedMsgId?: MessageIDLike;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Group call information */
        call?: TypeInputGroupCall;
        /** Time-To-Live of messages sent by the current user to this chat */
        ttlPeriod?: int;
        /** When using <a href="https://corefork.telegram.org/method/phone.getGroupCallJoinAs">phone.getGroupCallJoinAs</a> to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
        groupcallDefaultJoinAs?: TypePeer;
    }

    /**
     * Detailed chat info<br>
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @link https://corefork.telegram.org/api/pin
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/method/phone.getGroupCallJoinAs
     */
    export class ChatFull extends VirtualClass<ChatFullArgs> implements ChatFullArgs {
        CONSTRUCTOR_id: -1977734781;
        SUBCLASS_OF_ID: 3566872215;
        classType: "constructor";
        className: "ChatFull";
        flags: number;
        canSetUsername?: true;
        hasScheduled?: true;
        id: int;
        about: string;
        participants: TypeChatParticipants;
        chatPhoto?: TypePhoto;
        notifySettings: TypePeerNotifySettings;
        exportedInvite?: TypeExportedChatInvite;
        botInfo?: TypeBotInfo[];
        pinnedMsgId?: MessageIDLike;
        folderId?: int;
        call?: TypeInputGroupCall;
        ttlPeriod?: int;
        groupcallDefaultJoinAs?: TypePeer;
        fromReader(reader: Reader): ChatFull;
    }

    export interface ChannelFullArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Can we vew the participant list? */
        canViewParticipants?: true;
        /** Can we set the channel's username? */
        canSetUsername?: true;
        /** Can we <a href="https://corefork.telegram.org/method/channels.setStickers">associate</a> a stickerpack to the supergroup? */
        canSetStickers?: true;
        /** Is the history before we joined hidden to us? */
        hiddenPrehistory?: true;
        /** Can we set the geolocation of this group (for geogroups) */
        canSetLocation?: true;
        /** Whether scheduled messages are available */
        hasScheduled?: true;
        /** Can the user view <a href="https://corefork.telegram.org/api/stats">channel/supergroup statistics</a> */
        canViewStats?: true;
        /** Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in <a href="https://corefork.telegram.org/api/discussion">discussion replies via @replies</a> */
        blocked?: true;
        /** ID of the channel */
        id: int;
        /** Info about the channel */
        about: string;
        /** Number of participants of the channel */
        participantsCount?: int;
        /** Number of channel admins */
        adminsCount?: int;
        /** Number of users <a href="https://corefork.telegram.org/api/rights">kicked</a> from the channel */
        kickedCount?: int;
        /** Number of users <a href="https://corefork.telegram.org/api/rights">banned</a> from the channel */
        bannedCount?: int;
        /** Number of users currently online */
        onlineCount?: int;
        /** Position up to which all incoming messages are read. */
        readInboxMaxId: int;
        /** Position up to which all outgoing messages are read. */
        readOutboxMaxId: int;
        /** Count of unread messages */
        unreadCount: int;
        /** Channel picture */
        chatPhoto: TypePhoto;
        /** Notification settings */
        notifySettings: TypePeerNotifySettings;
        /** Invite link */
        exportedInvite?: TypeExportedChatInvite;
        /** Info about bots in the channel/supergrup */
        botInfo: TypeBotInfo[];
        /** The chat ID from which this group was <a href="https://corefork.telegram.org/api/channel">migrated</a> */
        migratedFromChatId?: int;
        /** The message ID in the original chat at which this group was <a href="https://corefork.telegram.org/api/channel">migrated</a> */
        migratedFromMaxId?: int;
        /** Message ID of the last <a href="https://corefork.telegram.org/api/pin">pinned message</a> */
        pinnedMsgId?: MessageIDLike;
        /** Associated stickerset */
        stickerset?: TypeStickerSet;
        /** Identifier of a maximum unavailable message in a channel due to hidden history. */
        availableMinId?: int;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** ID of the linked <a href="https://corefork.telegram.org/api/discussion">discussion chat</a> for channels */
        linkedChatId?: int;
        /** Location of the geogroup */
        location?: TypeChannelLocation;
        /** If specified, users in supergroups will only be able to send one message every <code>slowmode_seconds</code> seconds */
        slowmodeSeconds?: int;
        /** Indicates when the user will be allowed to send another message in the supergroup (unixdate) */
        slowmodeNextSendDate?: int;
        /** If set, specifies the DC to use for fetching channel statistics */
        statsDc?: int;
        /** Latest <a href="https://corefork.telegram.org/api/updates">PTS</a> for this channel */
        pts: int;
        /** Livestream or group call information */
        call?: TypeInputGroupCall;
        /** Time-To-Live of messages in this channel or supergroup */
        ttlPeriod?: int;
        /** A list of <a href="https://corefork.telegram.org/api/config#suggestions">suggested actions</a> for the supergroup admin, <a href="https://corefork.telegram.org/api/config#suggestions">see here for more info »</a>. */
        pendingSuggestions?: string[];
        /** When using <a href="https://corefork.telegram.org/method/phone.getGroupCallJoinAs">phone.getGroupCallJoinAs</a> to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
        groupcallDefaultJoinAs?: TypePeer;
    }

    /**
     * Full info about a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/method/channels.setStickers
     * @link https://corefork.telegram.org/api/stats
     * @link https://corefork.telegram.org/api/discussion
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://telegram.org/blog/privacy-discussions-web-bots
     * @link https://corefork.telegram.org/api/rights
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/pin
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/config
     * @link https://corefork.telegram.org/method/phone.getGroupCallJoinAs
     */
    export class ChannelFull extends VirtualClass<ChannelFullArgs> implements ChannelFullArgs {
        CONSTRUCTOR_id: 1418477459;
        SUBCLASS_OF_ID: 3566872215;
        classType: "constructor";
        className: "ChannelFull";
        flags: number;
        canViewParticipants?: true;
        canSetUsername?: true;
        canSetStickers?: true;
        hiddenPrehistory?: true;
        canSetLocation?: true;
        hasScheduled?: true;
        canViewStats?: true;
        blocked?: true;
        id: int;
        about: string;
        participantsCount?: int;
        adminsCount?: int;
        kickedCount?: int;
        bannedCount?: int;
        onlineCount?: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        chatPhoto: TypePhoto;
        notifySettings: TypePeerNotifySettings;
        exportedInvite?: TypeExportedChatInvite;
        botInfo: TypeBotInfo[];
        migratedFromChatId?: int;
        migratedFromMaxId?: int;
        pinnedMsgId?: MessageIDLike;
        stickerset?: TypeStickerSet;
        availableMinId?: int;
        folderId?: int;
        linkedChatId?: int;
        location?: TypeChannelLocation;
        slowmodeSeconds?: int;
        slowmodeNextSendDate?: int;
        statsDc?: int;
        pts: int;
        call?: TypeInputGroupCall;
        ttlPeriod?: int;
        pendingSuggestions?: string[];
        groupcallDefaultJoinAs?: TypePeer;
        fromReader(reader: Reader): ChannelFull;
    }

    export interface ChatParticipantArgs {
        /** Member user ID */
        userId: int;
        /** ID of the user that added the member to the group */
        inviterId: int;
        /** Date added to the group */
        date: int;
    }

    /** Group member.<br> */
    export class ChatParticipant extends VirtualClass<ChatParticipantArgs> implements ChatParticipantArgs {
        CONSTRUCTOR_id: -925415106;
        SUBCLASS_OF_ID: 2105307014;
        classType: "constructor";
        className: "ChatParticipant";
        userId: int;
        inviterId: int;
        date: int;
        fromReader(reader: Reader): ChatParticipant;
    }

    export interface ChatParticipantCreatorArgs {
        /** ID of the user that created the group */
        userId: int;
    }

    /** Represents the creator of the group<br> */
    export class ChatParticipantCreator extends VirtualClass<ChatParticipantCreatorArgs> implements ChatParticipantCreatorArgs {
        CONSTRUCTOR_id: -636267638;
        SUBCLASS_OF_ID: 2105307014;
        classType: "constructor";
        className: "ChatParticipantCreator";
        userId: int;
        fromReader(reader: Reader): ChatParticipantCreator;
    }

    export interface ChatParticipantAdminArgs {
        /** ID of a group member that is admin */
        userId: int;
        /** ID of the user that added the member to the group */
        inviterId: int;
        /** Date when the user was added */
        date: int;
    }

    /** Chat admin<br> */
    export class ChatParticipantAdmin extends VirtualClass<ChatParticipantAdminArgs> implements ChatParticipantAdminArgs {
        CONSTRUCTOR_id: -489233354;
        SUBCLASS_OF_ID: 2105307014;
        classType: "constructor";
        className: "ChatParticipantAdmin";
        userId: int;
        inviterId: int;
        date: int;
        fromReader(reader: Reader): ChatParticipantAdmin;
    }

    export interface ChatParticipantsForbiddenArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Group ID */
        chatId: int;
        /** Info about the group membership of the current user */
        selfParticipant?: TypeChatParticipant;
    }

    /** Info on members is unavailable<br> */
    export class ChatParticipantsForbidden extends VirtualClass<ChatParticipantsForbiddenArgs> implements ChatParticipantsForbiddenArgs {
        CONSTRUCTOR_id: -57668565;
        SUBCLASS_OF_ID: 531142001;
        classType: "constructor";
        className: "ChatParticipantsForbidden";
        flags: number;
        chatId: int;
        selfParticipant?: TypeChatParticipant;
        fromReader(reader: Reader): ChatParticipantsForbidden;
    }

    export interface ChatParticipantsArgs {
        /** Group identifier */
        chatId: int;
        /** List of group members */
        participants: TypeChatParticipant[];
        /** Group version number */
        version: int;
    }

    /** Group members.<br> */
    export class ChatParticipants extends VirtualClass<ChatParticipantsArgs> implements ChatParticipantsArgs {
        CONSTRUCTOR_id: 1061556205;
        SUBCLASS_OF_ID: 531142001;
        classType: "constructor";
        className: "ChatParticipants";
        chatId: int;
        participants: TypeChatParticipant[];
        version: int;
        fromReader(reader: Reader): ChatParticipants;
    }

    /** Group photo is not set.<br> */
    export class ChatPhotoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 935395612;
        SUBCLASS_OF_ID: 2889794789;
        classType: "constructor";
        className: "ChatPhotoEmpty";
        fromReader(reader: Reader): ChatPhotoEmpty;
    }

    export interface ChatPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user has an animated profile picture */
        hasVideo?: true;
        /** Photo ID */
        photoId: long;
        /** <a href="https://corefork.telegram.org/api/files#stripped-thumbnails">Stripped thumbnail</a> */
        strippedThumb?: bytes;
        /** DC where this photo is stored */
        dcId: int;
    }

    /**
     * Group profile photo.<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class ChatPhoto extends VirtualClass<ChatPhotoArgs> implements ChatPhotoArgs {
        CONSTRUCTOR_id: 476978193;
        SUBCLASS_OF_ID: 2889794789;
        classType: "constructor";
        className: "ChatPhoto";
        flags: number;
        hasVideo?: true;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
        fromReader(reader: Reader): ChatPhoto;
    }

    export interface MessageEmptyArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Message identifier */
        id: int;
        /** Peer ID, the chat where this message was sent */
        peerId?: TypePeer;
    }

    /** Empty constructor, non-existent message.<br> */
    export class MessageEmpty extends VirtualClass<MessageEmptyArgs> implements MessageEmptyArgs {
        CONSTRUCTOR_id: -1868117372;
        SUBCLASS_OF_ID: 2030045667;
        classType: "constructor";
        className: "MessageEmpty";
        flags: number;
        id: int;
        peerId?: TypePeer;
        fromReader(reader: Reader): MessageEmpty;
    }

    export interface MessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this an outgoing message */
        out?: true;
        /** Whether we were <a href="https://corefork.telegram.org/api/mentions">mentioned</a> in this message */
        mentioned?: true;
        /** Whether there are unread media attachments in this message */
        mediaUnread?: true;
        /** Whether this is a silent message (no notification triggered) */
        silent?: true;
        /** Whether this is a channel post */
        post?: true;
        /** Whether this is a <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled message</a> */
        fromScheduled?: true;
        /** This is a legacy message: it has to be refetched with the new layer */
        legacy?: true;
        /** Whether the message should be shown as not modified to the user, even if an edit date is present */
        editHide?: true;
        /** Whether this message is <a href="https://corefork.telegram.org/api/pin">pinned</a> */
        pinned?: true;
        /** ID of the message */
        id: int;
        /** ID of the sender of the message */
        fromId?: TypePeer;
        /** Peer ID, the chat where this message was sent */
        peerId: TypePeer;
        /** Info about forwarded messages */
        fwdFrom?: TypeMessageFwdHeader;
        /** ID of the inline bot that generated the message */
        viaBotId?: int;
        /** Reply information */
        replyTo?: TypeMessageReplyHeader;
        /** Date of the message */
        date: int;
        /** The message */
        message: string;
        /** Media attachment */
        media?: TypeMessageMedia;
        /** Reply markup (bot/inline keyboards) */
        replyMarkup?: TypeReplyMarkup;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text */
        entities?: TypeMessageEntity[];
        /** View count for channel posts */
        views?: int;
        /** Forward counter */
        forwards?: int;
        /** Info about <a href="https://corefork.telegram.org/api/threads">post comments (for channels) or message replies (for groups)</a> */
        replies?: TypeMessageReplies;
        /** Last edit date of this message */
        editDate?: int;
        /** Name of the author of this message for channel posts (with signatures enabled) */
        postAuthor?: string;
        /** Multiple media messages sent using <a href="https://corefork.telegram.org/method/messages.sendMultiMedia">messages.sendMultiMedia</a> with the same grouped ID indicate an <a href="https://corefork.telegram.org/api/files#albums-grouped-media">album or media group</a> */
        groupedId?: long;
        /** Contains the reason why access to this message must be restricted. */
        restrictionReason?: TypeRestrictionReason[];
        /** Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        ttlPeriod?: int;
    }

    /**
     * A message<br>
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @link https://corefork.telegram.org/api/pin
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/method/messages.sendMultiMedia
     * @link https://corefork.telegram.org/api/files
     */
    export class Message extends VirtualClass<MessageArgs> implements MessageArgs {
        CONSTRUCTOR_id: -1125940270;
        SUBCLASS_OF_ID: 2030045667;
        classType: "constructor";
        className: "Message";
        flags: number;
        out?: true;
        mentioned?: true;
        mediaUnread?: true;
        silent?: true;
        post?: true;
        fromScheduled?: true;
        legacy?: true;
        editHide?: true;
        pinned?: true;
        id: int;
        fromId?: TypePeer;
        peerId: TypePeer;
        fwdFrom?: TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: TypeMessageReplyHeader;
        date: int;
        message: string;
        media?: TypeMessageMedia;
        replyMarkup?: TypeReplyMarkup;
        entities?: TypeMessageEntity[];
        views?: int;
        forwards?: int;
        replies?: TypeMessageReplies;
        editDate?: int;
        postAuthor?: string;
        groupedId?: long;
        restrictionReason?: TypeRestrictionReason[];
        ttlPeriod?: int;
        fromReader(reader: Reader): Message;
    }

    export interface MessageServiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the message is outgoing */
        out?: true;
        /** Whether we were mentioned in the message */
        mentioned?: true;
        /** Whether the message contains unread media */
        mediaUnread?: true;
        /** Whether the message is silent */
        silent?: true;
        /** Whether it's a channel post */
        post?: true;
        /** This is a legacy message: it has to be refetched with the new layer */
        legacy?: true;
        /** Message ID */
        id: int;
        /** ID of the sender of this message */
        fromId?: TypePeer;
        /** Sender of service message */
        peerId: TypePeer;
        /** Reply (thread) information */
        replyTo?: TypeMessageReplyHeader;
        /** Message date */
        date: int;
        /** Event connected with the service message */
        action: TypeMessageAction;
        /** Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        ttlPeriod?: int;
    }

    /** Indicates a service message<br> */
    export class MessageService extends VirtualClass<MessageServiceArgs> implements MessageServiceArgs {
        CONSTRUCTOR_id: 721967202;
        SUBCLASS_OF_ID: 2030045667;
        classType: "constructor";
        className: "MessageService";
        flags: number;
        out?: true;
        mentioned?: true;
        mediaUnread?: true;
        silent?: true;
        post?: true;
        legacy?: true;
        id: int;
        fromId?: TypePeer;
        peerId: TypePeer;
        replyTo?: TypeMessageReplyHeader;
        date: int;
        action: TypeMessageAction;
        ttlPeriod?: int;
        fromReader(reader: Reader): MessageService;
    }

    /** Empty constructor.<br> */
    export class MessageMediaEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1038967584;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaEmpty";
        fromReader(reader: Reader): MessageMediaEmpty;
    }

    export interface MessageMediaPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Photo */
        photo?: TypePhoto;
        /** Time to live in seconds of self-destructing photo */
        ttlSeconds?: int;
    }

    /** Attached photo.<br> */
    export class MessageMediaPhoto extends VirtualClass<MessageMediaPhotoArgs> implements MessageMediaPhotoArgs {
        CONSTRUCTOR_id: 1766936791;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaPhoto";
        flags: number;
        photo?: TypePhoto;
        ttlSeconds?: int;
        fromReader(reader: Reader): MessageMediaPhoto;
    }

    export interface MessageMediaGeoArgs {
        /** GeoPoint */
        geo: TypeGeoPoint;
    }

    /** Attached map.<br> */
    export class MessageMediaGeo extends VirtualClass<MessageMediaGeoArgs> implements MessageMediaGeoArgs {
        CONSTRUCTOR_id: 1457575028;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaGeo";
        geo: TypeGeoPoint;
        fromReader(reader: Reader): MessageMediaGeo;
    }

    export interface MessageMediaContactArgs {
        /** Phone number */
        phoneNumber: string;
        /** Contact's first name */
        firstName: string;
        /** Contact's last name */
        lastName: string;
        /** VCARD of contact */
        vcard: string;
        /** User identifier or <code>0</code>, if the user with the given phone number is not registered */
        userId: int;
    }

    /** Attached contact.<br> */
    export class MessageMediaContact extends VirtualClass<MessageMediaContactArgs> implements MessageMediaContactArgs {
        CONSTRUCTOR_id: -873313984;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaContact";
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        userId: int;
        fromReader(reader: Reader): MessageMediaContact;
    }

    /** Current version of the client does not support this media type.<br> */
    export class MessageMediaUnsupported extends VirtualClass<void> {
        CONSTRUCTOR_id: -1618676578;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaUnsupported";
        fromReader(reader: Reader): MessageMediaUnsupported;
    }

    export interface MessageMediaDocumentArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Attached document */
        document?: TypeDocument;
        /** Time to live of self-destructing document */
        ttlSeconds?: int;
    }

    /** Document (video, audio, voice, sticker, any media type except photo)<br> */
    export class MessageMediaDocument extends VirtualClass<MessageMediaDocumentArgs> implements MessageMediaDocumentArgs {
        CONSTRUCTOR_id: -1666158377;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaDocument";
        flags: number;
        document?: TypeDocument;
        ttlSeconds?: int;
        fromReader(reader: Reader): MessageMediaDocument;
    }

    export interface MessageMediaWebPageArgs {
        /** Webpage preview */
        webpage: TypeWebPage;
    }

    /** Preview of webpage<br> */
    export class MessageMediaWebPage extends VirtualClass<MessageMediaWebPageArgs> implements MessageMediaWebPageArgs {
        CONSTRUCTOR_id: -1557277184;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaWebPage";
        webpage: TypeWebPage;
        fromReader(reader: Reader): MessageMediaWebPage;
    }

    export interface MessageMediaVenueArgs {
        /** Geolocation of venue */
        geo: TypeGeoPoint;
        /** Venue name */
        title: string;
        /** Address */
        address: string;
        /** Venue provider: currently only "foursquare" needs to be supported */
        provider: string;
        /** Venue ID in the provider's database */
        venueId: string;
        /** Venue type in the provider's database */
        venueType: string;
    }

    /** Venue<br> */
    export class MessageMediaVenue extends VirtualClass<MessageMediaVenueArgs> implements MessageMediaVenueArgs {
        CONSTRUCTOR_id: 784356159;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaVenue";
        geo: TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        fromReader(reader: Reader): MessageMediaVenue;
    }

    export interface MessageMediaGameArgs {
        /** Game */
        game: TypeGame;
    }

    /** Telegram game<br> */
    export class MessageMediaGame extends VirtualClass<MessageMediaGameArgs> implements MessageMediaGameArgs {
        CONSTRUCTOR_id: -38694904;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaGame";
        game: TypeGame;
        fromReader(reader: Reader): MessageMediaGame;
    }

    export interface MessageMediaInvoiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the shipping address was requested */
        shippingAddressRequested?: true;
        /** Whether this is an example invoice */
        test?: true;
        /** Product name, 1-32 characters */
        title: string;
        /** Product description, 1-255 characters */
        description: string;
        /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
        photo?: TypeWebDocument;
        /** Message ID of receipt: if set, clients should change the text of the first <a href="https://corefork.telegram.org/constructor/keyboardButtonBuy">keyboardButtonBuy</a> button always attached to the <a href="https://corefork.telegram.org/constructor/message">message</a> to a localized version of the word <code>Receipt</code> */
        receiptMsgId?: MessageIDLike;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
        /** Unique bot deep-linking parameter that can be used to generate this invoice */
        startParam: string;
    }

    /**
     * Invoice<br>
     * @link https://corefork.telegram.org/constructor/keyboardButtonBuy
     * @link https://corefork.telegram.org/constructor/message
     * @link https://corefork.telegram.org/bots/payments
     */
    export class MessageMediaInvoice extends VirtualClass<MessageMediaInvoiceArgs> implements MessageMediaInvoiceArgs {
        CONSTRUCTOR_id: -2074799289;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaInvoice";
        flags: number;
        shippingAddressRequested?: true;
        test?: true;
        title: string;
        description: string;
        photo?: TypeWebDocument;
        receiptMsgId?: MessageIDLike;
        currency: string;
        totalAmount: long;
        startParam: string;
        fromReader(reader: Reader): MessageMediaInvoice;
    }

    export interface MessageMediaGeoLiveArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Geolocation */
        geo: TypeGeoPoint;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a direction in which the location moves, in degrees; 1-360 */
        heading?: int;
        /** Validity period of provided geolocation */
        period: int;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
        proximityNotificationRadius?: int;
    }

    /**
     * Indicates a <a href="https://corefork.telegram.org/api/live-location">live geolocation</a><br>
     * @link https://corefork.telegram.org/api/live-location
     */
    export class MessageMediaGeoLive extends VirtualClass<MessageMediaGeoLiveArgs> implements MessageMediaGeoLiveArgs {
        CONSTRUCTOR_id: -1186937242;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaGeoLive";
        flags: number;
        geo: TypeGeoPoint;
        heading?: int;
        period: int;
        proximityNotificationRadius?: int;
        fromReader(reader: Reader): MessageMediaGeoLive;
    }

    export interface MessageMediaPollArgs {
        /** The poll */
        poll: TypePoll;
        /** The results of the poll */
        results: TypePollResults;
    }

    /** Poll<br> */
    export class MessageMediaPoll extends VirtualClass<MessageMediaPollArgs> implements MessageMediaPollArgs {
        CONSTRUCTOR_id: 1272375192;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaPoll";
        poll: TypePoll;
        results: TypePollResults;
        fromReader(reader: Reader): MessageMediaPoll;
    }

    export interface MessageMediaDiceArgs {
        /** <a href="https://corefork.telegram.org/api/dice">Dice value</a> */
        value: int;
        /** The emoji, for now <img class="emoji" src="//telegram.org/img/emoji/40/F09F8F80.png" width="20" height="20" alt="🏀">, <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EB2.png" width="20" height="20" alt="🎲"> and <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EAF.png" width="20" height="20" alt="🎯"> are supported */
        emoticon: string;
    }

    /**
     * <a href="https://corefork.telegram.org/api/dice">Dice-based animated sticker</a><br>
     * @link https://corefork.telegram.org/api/dice
     */
    export class MessageMediaDice extends VirtualClass<MessageMediaDiceArgs> implements MessageMediaDiceArgs {
        CONSTRUCTOR_id: 1065280907;
        SUBCLASS_OF_ID: 1198308914;
        classType: "constructor";
        className: "MessageMediaDice";
        value: int;
        emoticon: string;
        fromReader(reader: Reader): MessageMediaDice;
    }

    /** Empty constructor.<br> */
    export class MessageActionEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1230047312;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionEmpty";
        fromReader(reader: Reader): MessageActionEmpty;
    }

    export interface MessageActionChatCreateArgs {
        /** Group name */
        title: string;
        /** List of group members */
        users: int[];
    }

    /** Group created<br> */
    export class MessageActionChatCreate extends VirtualClass<MessageActionChatCreateArgs> implements MessageActionChatCreateArgs {
        CONSTRUCTOR_id: -1503425638;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatCreate";
        title: string;
        users: int[];
        fromReader(reader: Reader): MessageActionChatCreate;
    }

    export interface MessageActionChatEditTitleArgs {
        /** New group name */
        title: string;
    }

    /** Group name changed.<br> */
    export class MessageActionChatEditTitle extends VirtualClass<MessageActionChatEditTitleArgs> implements MessageActionChatEditTitleArgs {
        CONSTRUCTOR_id: -1247687078;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatEditTitle";
        title: string;
        fromReader(reader: Reader): MessageActionChatEditTitle;
    }

    export interface MessageActionChatEditPhotoArgs {
        /** New group pofile photo */
        photo: TypePhoto;
    }

    /** Group profile changed<br> */
    export class MessageActionChatEditPhoto extends VirtualClass<MessageActionChatEditPhotoArgs> implements MessageActionChatEditPhotoArgs {
        CONSTRUCTOR_id: 2144015272;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatEditPhoto";
        photo: TypePhoto;
        fromReader(reader: Reader): MessageActionChatEditPhoto;
    }

    /** Group profile photo removed.<br> */
    export class MessageActionChatDeletePhoto extends VirtualClass<void> {
        CONSTRUCTOR_id: -1780220945;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatDeletePhoto";
        fromReader(reader: Reader): MessageActionChatDeletePhoto;
    }

    export interface MessageActionChatAddUserArgs {
        /** Users that were invited to the chat */
        users: int[];
    }

    /** New member in the group<br> */
    export class MessageActionChatAddUser extends VirtualClass<MessageActionChatAddUserArgs> implements MessageActionChatAddUserArgs {
        CONSTRUCTOR_id: 1217033015;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatAddUser";
        users: int[];
        fromReader(reader: Reader): MessageActionChatAddUser;
    }

    export interface MessageActionChatDeleteUserArgs {
        /** Leaving user ID */
        userId: int;
    }

    /** User left the group.<br> */
    export class MessageActionChatDeleteUser extends VirtualClass<MessageActionChatDeleteUserArgs> implements MessageActionChatDeleteUserArgs {
        CONSTRUCTOR_id: -1297179892;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatDeleteUser";
        userId: int;
        fromReader(reader: Reader): MessageActionChatDeleteUser;
    }

    export interface MessageActionChatJoinedByLinkArgs {
        /** ID of the user that created the invite link */
        inviterId: int;
    }

    /** A user joined the chat via an invite link<br> */
    export class MessageActionChatJoinedByLink extends VirtualClass<MessageActionChatJoinedByLinkArgs> implements MessageActionChatJoinedByLinkArgs {
        CONSTRUCTOR_id: -123931160;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatJoinedByLink";
        inviterId: int;
        fromReader(reader: Reader): MessageActionChatJoinedByLink;
    }

    export interface MessageActionChannelCreateArgs {
        /** Original channel/supergroup title */
        title: string;
    }

    /** The channel was created<br> */
    export class MessageActionChannelCreate extends VirtualClass<MessageActionChannelCreateArgs> implements MessageActionChannelCreateArgs {
        CONSTRUCTOR_id: -1781355374;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChannelCreate";
        title: string;
        fromReader(reader: Reader): MessageActionChannelCreate;
    }

    export interface MessageActionChatMigrateToArgs {
        /** The supergroup it was migrated to */
        channelId: int;
    }

    /**
     * Indicates the chat was <a href="https://corefork.telegram.org/api/channel">migrated</a> to the specified supergroup<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class MessageActionChatMigrateTo extends VirtualClass<MessageActionChatMigrateToArgs> implements MessageActionChatMigrateToArgs {
        CONSTRUCTOR_id: 1371385889;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChatMigrateTo";
        channelId: int;
        fromReader(reader: Reader): MessageActionChatMigrateTo;
    }

    export interface MessageActionChannelMigrateFromArgs {
        /** The old chat tite */
        title: string;
        /** The old chat ID */
        chatId: int;
    }

    /**
     * Indicates the channel was <a href="https://corefork.telegram.org/api/channel">migrated</a> from the specified chat<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class MessageActionChannelMigrateFrom extends VirtualClass<MessageActionChannelMigrateFromArgs> implements MessageActionChannelMigrateFromArgs {
        CONSTRUCTOR_id: -1336546578;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionChannelMigrateFrom";
        title: string;
        chatId: int;
        fromReader(reader: Reader): MessageActionChannelMigrateFrom;
    }

    /** A message was pinned<br> */
    export class MessageActionPinMessage extends VirtualClass<void> {
        CONSTRUCTOR_id: -1799538451;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionPinMessage";
        fromReader(reader: Reader): MessageActionPinMessage;
    }

    /** Chat history was cleared<br> */
    export class MessageActionHistoryClear extends VirtualClass<void> {
        CONSTRUCTOR_id: -1615153660;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionHistoryClear";
        fromReader(reader: Reader): MessageActionHistoryClear;
    }

    export interface MessageActionGameScoreArgs {
        /** Game ID */
        gameId: long;
        /** Score */
        score: int;
    }

    /** Someone scored in a game<br> */
    export class MessageActionGameScore extends VirtualClass<MessageActionGameScoreArgs> implements MessageActionGameScoreArgs {
        CONSTRUCTOR_id: -1834538890;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionGameScore";
        gameId: long;
        score: int;
        fromReader(reader: Reader): MessageActionGameScore;
    }

    export interface MessageActionPaymentSentMeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
        /** Bot specified invoice payload */
        payload: bytes;
        /** Order info provided by the user */
        info?: TypePaymentRequestedInfo;
        /** Identifier of the shipping option chosen by the user */
        shippingOptionId?: string;
        /** Provider payment identifier */
        charge: TypePaymentCharge;
    }

    /**
     * A user just sent a payment to me (a bot)<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class MessageActionPaymentSentMe extends VirtualClass<MessageActionPaymentSentMeArgs> implements MessageActionPaymentSentMeArgs {
        CONSTRUCTOR_id: -1892568281;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionPaymentSentMe";
        flags: number;
        currency: string;
        totalAmount: long;
        payload: bytes;
        info?: TypePaymentRequestedInfo;
        shippingOptionId?: string;
        charge: TypePaymentCharge;
        fromReader(reader: Reader): MessageActionPaymentSentMe;
    }

    export interface MessageActionPaymentSentArgs {
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
    }

    /**
     * A payment was sent<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class MessageActionPaymentSent extends VirtualClass<MessageActionPaymentSentArgs> implements MessageActionPaymentSentArgs {
        CONSTRUCTOR_id: 1080663248;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionPaymentSent";
        currency: string;
        totalAmount: long;
        fromReader(reader: Reader): MessageActionPaymentSent;
    }

    export interface MessageActionPhoneCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this a video call? */
        video?: true;
        /** Call ID */
        callId: long;
        /** If the call has ended, the reason why it ended */
        reason?: TypePhoneCallDiscardReason;
        /** Duration of the call in seconds */
        duration?: int;
    }

    /** A phone call<br> */
    export class MessageActionPhoneCall extends VirtualClass<MessageActionPhoneCallArgs> implements MessageActionPhoneCallArgs {
        CONSTRUCTOR_id: -2132731265;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionPhoneCall";
        flags: number;
        video?: true;
        callId: long;
        reason?: TypePhoneCallDiscardReason;
        duration?: int;
        fromReader(reader: Reader): MessageActionPhoneCall;
    }

    /** A screenshot of the chat was taken<br> */
    export class MessageActionScreenshotTaken extends VirtualClass<void> {
        CONSTRUCTOR_id: 1200788123;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionScreenshotTaken";
        fromReader(reader: Reader): MessageActionScreenshotTaken;
    }

    export interface MessageActionCustomActionArgs {
        /** Action message */
        message: string;
    }

    /** Custom action (most likely not supported by the current layer, an upgrade might be needed)<br> */
    export class MessageActionCustomAction extends VirtualClass<MessageActionCustomActionArgs> implements MessageActionCustomActionArgs {
        CONSTRUCTOR_id: -85549226;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionCustomAction";
        message: string;
        fromReader(reader: Reader): MessageActionCustomAction;
    }

    export interface MessageActionBotAllowedArgs {
        /** The domain name of the website on which the user has logged in. */
        domain: string;
    }

    /**
     * The domain name of the website on which the user has logged in. <a href="https://corefork.telegram.org/widgets/login">More about Telegram Login »</a><br>
     * @link https://corefork.telegram.org/widgets/login
     */
    export class MessageActionBotAllowed extends VirtualClass<MessageActionBotAllowedArgs> implements MessageActionBotAllowedArgs {
        CONSTRUCTOR_id: -1410748418;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionBotAllowed";
        domain: string;
        fromReader(reader: Reader): MessageActionBotAllowed;
    }

    export interface MessageActionSecureValuesSentMeArgs {
        /** Vector with information about documents and other Telegram Passport elements that were shared with the bot */
        values: TypeSecureValue[];
        /** Encrypted credentials required to decrypt the data */
        credentials: TypeSecureCredentialsEncrypted;
    }

    /**
     * Secure <a href="https://corefork.telegram.org/passport">telegram passport</a> values were received<br>
     * @link https://corefork.telegram.org/passport
     */
    export class MessageActionSecureValuesSentMe extends VirtualClass<MessageActionSecureValuesSentMeArgs> implements MessageActionSecureValuesSentMeArgs {
        CONSTRUCTOR_id: 455635795;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionSecureValuesSentMe";
        values: TypeSecureValue[];
        credentials: TypeSecureCredentialsEncrypted;
        fromReader(reader: Reader): MessageActionSecureValuesSentMe;
    }

    export interface MessageActionSecureValuesSentArgs {
        /** Secure value types */
        types: TypeSecureValueType[];
    }

    /**
     * Request for secure <a href="https://corefork.telegram.org/passport">telegram passport</a> values was sent<br>
     * @link https://corefork.telegram.org/passport
     */
    export class MessageActionSecureValuesSent extends VirtualClass<MessageActionSecureValuesSentArgs> implements MessageActionSecureValuesSentArgs {
        CONSTRUCTOR_id: -648257196;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionSecureValuesSent";
        types: TypeSecureValueType[];
        fromReader(reader: Reader): MessageActionSecureValuesSent;
    }

    /** A contact just signed up to telegram<br> */
    export class MessageActionContactSignUp extends VirtualClass<void> {
        CONSTRUCTOR_id: -202219658;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionContactSignUp";
        fromReader(reader: Reader): MessageActionContactSignUp;
    }

    export interface MessageActionGeoProximityReachedArgs {
        /** The user or chat that is now in proximity of <code>to_id</code> */
        fromId: TypePeer;
        /** The user or chat that subscribed to <a href="https://corefork.telegram.org/api/live-location#proximity-alert">live geolocation proximity alerts</a> */
        toId: TypePeer;
        /** Distance, in meters (0-100000) */
        distance: int;
    }

    /**
     * A user of the chat is now in proximity of another user<br>
     * @link https://corefork.telegram.org/api/live-location
     */
    export class MessageActionGeoProximityReached extends VirtualClass<MessageActionGeoProximityReachedArgs> implements MessageActionGeoProximityReachedArgs {
        CONSTRUCTOR_id: -1730095465;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionGeoProximityReached";
        fromId: TypePeer;
        toId: TypePeer;
        distance: int;
        fromReader(reader: Reader): MessageActionGeoProximityReached;
    }

    export interface MessageActionGroupCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Group call */
        call: TypeInputGroupCall;
        /** Group call duration */
        duration?: int;
    }

    /** The group call has ended<br> */
    export class MessageActionGroupCall extends VirtualClass<MessageActionGroupCallArgs> implements MessageActionGroupCallArgs {
        CONSTRUCTOR_id: 2047704898;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionGroupCall";
        flags: number;
        call: TypeInputGroupCall;
        duration?: int;
        fromReader(reader: Reader): MessageActionGroupCall;
    }

    export interface MessageActionInviteToGroupCallArgs {
        /** The group call */
        call: TypeInputGroupCall;
        /** The invited users */
        users: int[];
    }

    /** A set of users was invited to the group call<br> */
    export class MessageActionInviteToGroupCall extends VirtualClass<MessageActionInviteToGroupCallArgs> implements MessageActionInviteToGroupCallArgs {
        CONSTRUCTOR_id: 1991897370;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionInviteToGroupCall";
        call: TypeInputGroupCall;
        users: int[];
        fromReader(reader: Reader): MessageActionInviteToGroupCall;
    }

    export interface MessageActionSetMessagesTTLArgs {
        /** New Time-To-Live */
        period: int;
    }

    /** The Time-To-Live of messages in this chat was changed.<br> */
    export class MessageActionSetMessagesTTL extends VirtualClass<MessageActionSetMessagesTTLArgs> implements MessageActionSetMessagesTTLArgs {
        CONSTRUCTOR_id: -1441072131;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionSetMessagesTTL";
        period: int;
        fromReader(reader: Reader): MessageActionSetMessagesTTL;
    }

    export interface MessageActionGroupCallScheduledArgs {
        /** The group call */
        call: TypeInputGroupCall;
        /** When is this group call scheduled to start */
        scheduleDate: int;
    }

    /** A group call was scheduled<br> */
    export class MessageActionGroupCallScheduled extends VirtualClass<MessageActionGroupCallScheduledArgs> implements MessageActionGroupCallScheduledArgs {
        CONSTRUCTOR_id: -1281329567;
        SUBCLASS_OF_ID: 2256589094;
        classType: "constructor";
        className: "MessageActionGroupCallScheduled";
        call: TypeInputGroupCall;
        scheduleDate: int;
        fromReader(reader: Reader): MessageActionGroupCallScheduled;
    }

    export interface DialogArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is the dialog pinned */
        pinned?: true;
        /** Whether the chat was manually marked as unread */
        unreadMark?: true;
        /** The chat */
        peer: TypePeer;
        /** The latest message ID */
        topMessage: int;
        /** Position up to which all incoming messages are read. */
        readInboxMaxId: int;
        /** Position up to which all outgoing messages are read. */
        readOutboxMaxId: int;
        /** Number of unread messages */
        unreadCount: int;
        /** Number of <a href="https://corefork.telegram.org/api/mentions">unread mentions</a> */
        unreadMentionsCount: int;
        /** Notification settings */
        notifySettings: TypePeerNotifySettings;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts?: int;
        /** Message draft */
        draft?: TypeDraftMessage;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
    }

    /**
     * Chat<br>
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/folders
     */
    export class Dialog extends VirtualClass<DialogArgs> implements DialogArgs {
        CONSTRUCTOR_id: 739712882;
        SUBCLASS_OF_ID: 1120787796;
        classType: "constructor";
        className: "Dialog";
        flags: number;
        pinned?: true;
        unreadMark?: true;
        peer: TypePeer;
        topMessage: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        unreadMentionsCount: int;
        notifySettings: TypePeerNotifySettings;
        pts?: int;
        draft?: TypeDraftMessage;
        folderId?: int;
        fromReader(reader: Reader): Dialog;
    }

    export interface DialogFolderArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this folder pinned */
        pinned?: true;
        /** The folder */
        folder: TypeFolder;
        /** Peer in folder */
        peer: TypePeer;
        /** Latest message ID of dialog */
        topMessage: int;
        /** Number of unread muted peers in folder */
        unreadMutedPeersCount: int;
        /** Number of unread unmuted peers in folder */
        unreadUnmutedPeersCount: int;
        /** Number of unread messages from muted peers in folder */
        unreadMutedMessagesCount: int;
        /** Number of unread messages from unmuted peers in folder */
        unreadUnmutedMessagesCount: int;
    }

    /** Dialog in folder<br> */
    export class DialogFolder extends VirtualClass<DialogFolderArgs> implements DialogFolderArgs {
        CONSTRUCTOR_id: 1908216652;
        SUBCLASS_OF_ID: 1120787796;
        classType: "constructor";
        className: "DialogFolder";
        flags: number;
        pinned?: true;
        folder: TypeFolder;
        peer: TypePeer;
        topMessage: int;
        unreadMutedPeersCount: int;
        unreadUnmutedPeersCount: int;
        unreadMutedMessagesCount: int;
        unreadUnmutedMessagesCount: int;
        fromReader(reader: Reader): DialogFolder;
    }

    export interface PhotoEmptyArgs {
        /** Photo identifier */
        id: long;
    }

    /** Empty constructor, non-existent photo<br> */
    export class PhotoEmpty extends VirtualClass<PhotoEmptyArgs> implements PhotoEmptyArgs {
        CONSTRUCTOR_id: 590459437;
        SUBCLASS_OF_ID: 3581324060;
        classType: "constructor";
        className: "PhotoEmpty";
        id: long;
        fromReader(reader: Reader): PhotoEmpty;
    }

    export interface PhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the photo has mask stickers attached to it */
        hasStickers?: true;
        /** ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">file reference</a> */
        fileReference: bytes;
        /** Date of upload */
        date: int;
        /** Available sizes for download */
        sizes: TypePhotoSize[];
        /** <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">For animated profiles</a>, the MPEG4 videos */
        videoSizes?: TypeVideoSize[];
        /** DC ID to use for download */
        dcId: int;
    }

    /**
     * Photo<br>
     * @link https://corefork.telegram.org/api/file_reference
     * @link https://corefork.telegram.org/api/files
     */
    export class Photo extends VirtualClass<PhotoArgs> implements PhotoArgs {
        CONSTRUCTOR_id: -82216347;
        SUBCLASS_OF_ID: 3581324060;
        classType: "constructor";
        className: "Photo";
        flags: number;
        hasStickers?: true;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        sizes: TypePhotoSize[];
        videoSizes?: TypeVideoSize[];
        dcId: int;
        fromReader(reader: Reader): Photo;
    }

    export interface PhotoSizeEmptyArgs {
        /** Thumbnail type (see. <a href="https://corefork.telegram.org/constructor/photoSize">photoSize</a>) */
        type: string;
    }

    /**
     * Empty constructor. Image with this thumbnail is unavailable.<br>
     * @link https://corefork.telegram.org/constructor/photoSize
     */
    export class PhotoSizeEmpty extends VirtualClass<PhotoSizeEmptyArgs> implements PhotoSizeEmptyArgs {
        CONSTRUCTOR_id: 236446268;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoSizeEmpty";
        type: string;
        fromReader(reader: Reader): PhotoSizeEmpty;
    }

    export interface PhotoSizeArgs {
        /** Thumbnail type */
        type: string;
        /** Image width */
        w: int;
        /** Image height */
        h: int;
        /** File size */
        size: int;
    }

    /**
     * Image description.<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class PhotoSize extends VirtualClass<PhotoSizeArgs> implements PhotoSizeArgs {
        CONSTRUCTOR_id: 1976012384;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoSize";
        type: string;
        w: int;
        h: int;
        size: int;
        fromReader(reader: Reader): PhotoSize;
    }

    export interface PhotoCachedSizeArgs {
        /** Thumbnail type */
        type: string;
        /** Image width */
        w: int;
        /** Image height */
        h: int;
        /** Binary data, file content */
        bytes: bytes;
    }

    /**
     * Description of an image and its content.<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class PhotoCachedSize extends VirtualClass<PhotoCachedSizeArgs> implements PhotoCachedSizeArgs {
        CONSTRUCTOR_id: 35527382;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoCachedSize";
        type: string;
        w: int;
        h: int;
        bytes: bytes;
        fromReader(reader: Reader): PhotoCachedSize;
    }

    export interface PhotoStrippedSizeArgs {
        /** Thumbnail type */
        type: string;
        /** Thumbnail data, see <a href="https://corefork.telegram.org/api/files#stripped-thumbnails">here for more info on decompression »</a> */
        bytes: bytes;
    }

    /**
     * A low-resolution compressed JPG payload<br>
     * @link https://corefork.telegram.org/api/files
     * @link https://corefork.telegram.org/constructor/photoSize
     */
    export class PhotoStrippedSize extends VirtualClass<PhotoStrippedSizeArgs> implements PhotoStrippedSizeArgs {
        CONSTRUCTOR_id: -525288402;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoStrippedSize";
        type: string;
        bytes: bytes;
        fromReader(reader: Reader): PhotoStrippedSize;
    }

    export interface PhotoSizeProgressiveArgs {
        /** Photosize type */
        type: string;
        /** Photo width */
        w: int;
        /** Photo height */
        h: int;
        /** Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image. */
        sizes: int[];
    }

    /**
     * Progressively encoded photosize<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class PhotoSizeProgressive extends VirtualClass<PhotoSizeProgressiveArgs> implements PhotoSizeProgressiveArgs {
        CONSTRUCTOR_id: -96535659;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoSizeProgressive";
        type: string;
        w: int;
        h: int;
        sizes: int[];
        fromReader(reader: Reader): PhotoSizeProgressive;
    }

    export interface PhotoPathSizeArgs {
        /** Always <code>j</code> */
        type: string;
        /** Compressed SVG path payload, <a href="https://corefork.telegram.org/api/files#vector-thumbnails">see here for decompression instructions</a> */
        bytes: bytes;
    }

    /**
     * Messages with animated stickers can have a compressed svg (&lt; 300 bytes) to show the outline of the sticker before fetching the actual lottie animation.<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class PhotoPathSize extends VirtualClass<PhotoPathSizeArgs> implements PhotoPathSizeArgs {
        CONSTRUCTOR_id: -668906175;
        SUBCLASS_OF_ID: 399256025;
        classType: "constructor";
        className: "PhotoPathSize";
        type: string;
        bytes: bytes;
        fromReader(reader: Reader): PhotoPathSize;
    }

    /** Empty constructor.<br> */
    export class GeoPointEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 286776671;
        SUBCLASS_OF_ID: 3591430509;
        classType: "constructor";
        className: "GeoPointEmpty";
        fromReader(reader: Reader): GeoPointEmpty;
    }

    export interface GeoPointArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Longtitude */
        long: double;
        /** Latitude */
        lat: double;
        /** Access hash */
        accessHash: long;
        /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
        accuracyRadius?: int;
    }

    /** GeoPoint.<br> */
    export class GeoPoint extends VirtualClass<GeoPointArgs> implements GeoPointArgs {
        CONSTRUCTOR_id: -1297942941;
        SUBCLASS_OF_ID: 3591430509;
        classType: "constructor";
        className: "GeoPoint";
        flags: number;
        long: double;
        lat: double;
        accessHash: long;
        accuracyRadius?: int;
        fromReader(reader: Reader): GeoPoint;
    }

    export interface InputNotifyPeerArgs {
        /** User or group */
        peer: TypeInputPeer;
    }

    /** Notifications generated by a certain user or group.<br> */
    export class InputNotifyPeer extends VirtualClass<InputNotifyPeerArgs> implements InputNotifyPeerArgs {
        CONSTRUCTOR_id: -1195615476;
        SUBCLASS_OF_ID: 1486362133;
        classType: "constructor";
        className: "InputNotifyPeer";
        peer: TypeInputPeer;
        fromReader(reader: Reader): InputNotifyPeer;
    }

    /** Notifications generated by all users.<br> */
    export class InputNotifyUsers extends VirtualClass<void> {
        CONSTRUCTOR_id: 423314455;
        SUBCLASS_OF_ID: 1486362133;
        classType: "constructor";
        className: "InputNotifyUsers";
        fromReader(reader: Reader): InputNotifyUsers;
    }

    /** Notifications generated by all groups.<br> */
    export class InputNotifyChats extends VirtualClass<void> {
        CONSTRUCTOR_id: 1251338318;
        SUBCLASS_OF_ID: 1486362133;
        classType: "constructor";
        className: "InputNotifyChats";
        fromReader(reader: Reader): InputNotifyChats;
    }

    /**
     * All <a href="https://corefork.telegram.org/api/channel">channels</a><br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class InputNotifyBroadcasts extends VirtualClass<void> {
        CONSTRUCTOR_id: -1311015810;
        SUBCLASS_OF_ID: 1486362133;
        classType: "constructor";
        className: "InputNotifyBroadcasts";
        fromReader(reader: Reader): InputNotifyBroadcasts;
    }

    export interface InputPeerNotifySettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If the text of the message shall be displayed in notification */
        showPreviews?: Bool;
        /** Peer was muted? */
        silent?: Bool;
        /** Date until which all notifications shall be switched off */
        muteUntil?: int;
        /** Name of an audio file for notification */
        sound?: string;
    }

    /** Notification settings.<br> */
    export class InputPeerNotifySettings extends VirtualClass<InputPeerNotifySettingsArgs> implements InputPeerNotifySettingsArgs {
        CONSTRUCTOR_id: -1673717362;
        SUBCLASS_OF_ID: 2430274317;
        classType: "constructor";
        className: "InputPeerNotifySettings";
        flags: number;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
        fromReader(reader: Reader): InputPeerNotifySettings;
    }

    export interface PeerNotifySettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Display text in notifications */
        showPreviews?: Bool;
        /** Mute peer? */
        silent?: Bool;
        /** Mute all notifications until this date */
        muteUntil?: int;
        /** Audio file name for notifications */
        sound?: string;
    }

    /** Notification settings.<br> */
    export class PeerNotifySettings extends VirtualClass<PeerNotifySettingsArgs> implements PeerNotifySettingsArgs {
        CONSTRUCTOR_id: -1353671392;
        SUBCLASS_OF_ID: 3475030132;
        classType: "constructor";
        className: "PeerNotifySettings";
        flags: number;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
        fromReader(reader: Reader): PeerNotifySettings;
    }

    export interface PeerSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether we can still report the user for spam */
        reportSpam?: true;
        /** Whether we can add the user as contact */
        addContact?: true;
        /** Whether we can block the user */
        blockContact?: true;
        /** Whether we can share the user's contact */
        shareContact?: true;
        /** Whether a special exception for contacts is needed */
        needContactsException?: true;
        /** Whether we can report a geogroup is irrelevant for this location */
        reportGeo?: true;
        /** Whether this peer was automatically archived according to <a href="https://corefork.telegram.org/constructor/globalPrivacySettings">privacy settings</a> */
        autoarchived?: true;
        /** Whether we can invite members to a <a href="https://corefork.telegram.org/api/channel">group or channel</a> */
        inviteMembers?: true;
        /** Distance in meters between us and this peer */
        geoDistance?: int;
    }

    /**
     * Peer settings<br>
     * @link https://corefork.telegram.org/constructor/globalPrivacySettings
     * @link https://corefork.telegram.org/api/channel
     */
    export class PeerSettings extends VirtualClass<PeerSettingsArgs> implements PeerSettingsArgs {
        CONSTRUCTOR_id: 1933519201;
        SUBCLASS_OF_ID: 4138180484;
        classType: "constructor";
        className: "PeerSettings";
        flags: number;
        reportSpam?: true;
        addContact?: true;
        blockContact?: true;
        shareContact?: true;
        needContactsException?: true;
        reportGeo?: true;
        autoarchived?: true;
        inviteMembers?: true;
        geoDistance?: int;
        fromReader(reader: Reader): PeerSettings;
    }

    export interface WallPaperArgs {
        /** Identifier */
        id: long;
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Creator of the wallpaper */
        creator?: true;
        /** Whether this is the default wallpaper */
        default?: true;
        /** Pattern */
        pattern?: true;
        /** Dark mode */
        dark?: true;
        /** Access hash */
        accessHash: long;
        /** Unique wallpaper ID */
        slug: string;
        /** The actual wallpaper */
        document: TypeDocument;
        /** Wallpaper settings */
        settings?: TypeWallPaperSettings;
    }

    /** Wallpaper settings.<br> */
    export class WallPaper extends VirtualClass<WallPaperArgs> implements WallPaperArgs {
        CONSTRUCTOR_id: -1539849235;
        SUBCLASS_OF_ID: 2527250827;
        classType: "constructor";
        className: "WallPaper";
        id: long;
        flags: number;
        creator?: true;
        default?: true;
        pattern?: true;
        dark?: true;
        accessHash: long;
        slug: string;
        document: TypeDocument;
        settings?: TypeWallPaperSettings;
        fromReader(reader: Reader): WallPaper;
    }

    export interface WallPaperNoFileArgs {
        /** Wallpaper ID */
        id: long;
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is the default wallpaper */
        default?: true;
        /** Dark mode */
        dark?: true;
        /** Wallpaper settings */
        settings?: TypeWallPaperSettings;
    }

    /**
     * Wallpaper with no file access hash, used for example when deleting (<code>unsave=true</code>) wallpapers using <a href="https://corefork.telegram.org/method/account.saveWallPaper">account.saveWallPaper</a>, specifying just the wallpaper ID.<br>
     * Also used for some default wallpapers which contain only colours.<br>
     * @link https://corefork.telegram.org/method/account.saveWallPaper
     */
    export class WallPaperNoFile extends VirtualClass<WallPaperNoFileArgs> implements WallPaperNoFileArgs {
        CONSTRUCTOR_id: -528465642;
        SUBCLASS_OF_ID: 2527250827;
        classType: "constructor";
        className: "WallPaperNoFile";
        id: long;
        flags: number;
        default?: true;
        dark?: true;
        settings?: TypeWallPaperSettings;
        fromReader(reader: Reader): WallPaperNoFile;
    }

    /** Report for spam<br> */
    export class InputReportReasonSpam extends VirtualClass<void> {
        CONSTRUCTOR_id: 1490799288;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonSpam";
        fromReader(reader: Reader): InputReportReasonSpam;
    }

    /** Report for violence<br> */
    export class InputReportReasonViolence extends VirtualClass<void> {
        CONSTRUCTOR_id: 505595789;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonViolence";
        fromReader(reader: Reader): InputReportReasonViolence;
    }

    /** Report for pornography<br> */
    export class InputReportReasonPornography extends VirtualClass<void> {
        CONSTRUCTOR_id: 777640226;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonPornography";
        fromReader(reader: Reader): InputReportReasonPornography;
    }

    /** Report for child abuse<br> */
    export class InputReportReasonChildAbuse extends VirtualClass<void> {
        CONSTRUCTOR_id: -1376497949;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonChildAbuse";
        fromReader(reader: Reader): InputReportReasonChildAbuse;
    }

    /** Other<br> */
    export class InputReportReasonOther extends VirtualClass<void> {
        CONSTRUCTOR_id: -1041980751;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonOther";
        fromReader(reader: Reader): InputReportReasonOther;
    }

    /** Report for copyrighted content<br> */
    export class InputReportReasonCopyright extends VirtualClass<void> {
        CONSTRUCTOR_id: -1685456582;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonCopyright";
        fromReader(reader: Reader): InputReportReasonCopyright;
    }

    /** Report an irrelevant geogroup<br> */
    export class InputReportReasonGeoIrrelevant extends VirtualClass<void> {
        CONSTRUCTOR_id: -606798099;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonGeoIrrelevant";
        fromReader(reader: Reader): InputReportReasonGeoIrrelevant;
    }

    /** Report for impersonation<br> */
    export class InputReportReasonFake extends VirtualClass<void> {
        CONSTRUCTOR_id: -170010905;
        SUBCLASS_OF_ID: 2214706471;
        classType: "constructor";
        className: "InputReportReasonFake";
        fromReader(reader: Reader): InputReportReasonFake;
    }

    export interface UserFullArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether you have blocked this user */
        blocked?: true;
        /** Whether this user can make VoIP calls */
        phoneCallsAvailable?: true;
        /** Whether this user's privacy settings allow you to call him */
        phoneCallsPrivate?: true;
        /** Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself */
        canPinMessage?: true;
        /** Whether <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> are available */
        hasScheduled?: true;
        /** Whether the user can receive video calls */
        videoCallsAvailable?: true;
        /** Remaining user info */
        user: TypeUser;
        /** Bio of the user */
        about?: string;
        /** Peer settings */
        settings: TypePeerSettings;
        /** Profile photo */
        profilePhoto?: TypePhoto;
        /** Notification settings */
        notifySettings: TypePeerNotifySettings;
        /** For bots, info about the bot (bot commands, etc) */
        botInfo?: TypeBotInfo;
        /** Message ID of the last <a href="https://corefork.telegram.org/api/pin">pinned message</a> */
        pinnedMsgId?: MessageIDLike;
        /** Chats in common with this user */
        commonChatsCount: int;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted. */
        ttlPeriod?: int;
    }

    /**
     * Extended user info<br>
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @link https://corefork.telegram.org/api/pin
     * @link https://corefork.telegram.org/api/folders
     */
    export class UserFull extends VirtualClass<UserFullArgs> implements UserFullArgs {
        CONSTRUCTOR_id: 328899191;
        SUBCLASS_OF_ID: 524706233;
        classType: "constructor";
        className: "UserFull";
        flags: number;
        blocked?: true;
        phoneCallsAvailable?: true;
        phoneCallsPrivate?: true;
        canPinMessage?: true;
        hasScheduled?: true;
        videoCallsAvailable?: true;
        user: TypeUser;
        about?: string;
        settings: TypePeerSettings;
        profilePhoto?: TypePhoto;
        notifySettings: TypePeerNotifySettings;
        botInfo?: TypeBotInfo;
        pinnedMsgId?: MessageIDLike;
        commonChatsCount: int;
        folderId?: int;
        ttlPeriod?: int;
        fromReader(reader: Reader): UserFull;
    }

    export interface ContactArgs {
        /** User identifier */
        userId: int;
        /** Current user is in the user's contact list */
        mutual: Bool;
    }

    /** A contact of the current user that is registered in the system.<br> */
    export class Contact extends VirtualClass<ContactArgs> implements ContactArgs {
        CONSTRUCTOR_id: -116274796;
        SUBCLASS_OF_ID: 2212487076;
        classType: "constructor";
        className: "Contact";
        userId: int;
        mutual: Bool;
        fromReader(reader: Reader): Contact;
    }

    export interface ImportedContactArgs {
        /** User identifier */
        userId: int;
        /** The contact's client identifier (passed to one of the <a href="https://corefork.telegram.org/type/InputContact">InputContact</a> constructors) */
        clientId: long;
    }

    /**
     * Successfully imported contact.<br>
     * @link https://corefork.telegram.org/type/InputContact
     */
    export class ImportedContact extends VirtualClass<ImportedContactArgs> implements ImportedContactArgs {
        CONSTRUCTOR_id: -805141448;
        SUBCLASS_OF_ID: 3041246170;
        classType: "constructor";
        className: "ImportedContact";
        userId: int;
        clientId: long;
        fromReader(reader: Reader): ImportedContact;
    }

    export interface ContactStatusArgs {
        /** User identifier */
        userId: int;
        /** Online status */
        status: TypeUserStatus;
    }

    /** Contact status: online / offline.<br> */
    export class ContactStatus extends VirtualClass<ContactStatusArgs> implements ContactStatusArgs {
        CONSTRUCTOR_id: -748155807;
        SUBCLASS_OF_ID: 1757468492;
        classType: "constructor";
        className: "ContactStatus";
        userId: int;
        status: TypeUserStatus;
        fromReader(reader: Reader): ContactStatus;
    }

    /** Filter is absent.<br> */
    export class InputMessagesFilterEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1474492012;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterEmpty";
        fromReader(reader: Reader): InputMessagesFilterEmpty;
    }

    /** Filter for messages containing photos.<br> */
    export class InputMessagesFilterPhotos extends VirtualClass<void> {
        CONSTRUCTOR_id: -1777752804;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterPhotos";
        fromReader(reader: Reader): InputMessagesFilterPhotos;
    }

    /** Filter for messages containing videos.<br> */
    export class InputMessagesFilterVideo extends VirtualClass<void> {
        CONSTRUCTOR_id: -1614803355;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterVideo";
        fromReader(reader: Reader): InputMessagesFilterVideo;
    }

    /** Filter for messages containing photos or videos.<br> */
    export class InputMessagesFilterPhotoVideo extends VirtualClass<void> {
        CONSTRUCTOR_id: 1458172132;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterPhotoVideo";
        fromReader(reader: Reader): InputMessagesFilterPhotoVideo;
    }

    /** Filter for messages containing documents.<br> */
    export class InputMessagesFilterDocument extends VirtualClass<void> {
        CONSTRUCTOR_id: -1629621880;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterDocument";
        fromReader(reader: Reader): InputMessagesFilterDocument;
    }

    /** Return only messages containing URLs<br> */
    export class InputMessagesFilterUrl extends VirtualClass<void> {
        CONSTRUCTOR_id: 2129714567;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterUrl";
        fromReader(reader: Reader): InputMessagesFilterUrl;
    }

    /** Return only messages containing gifs<br> */
    export class InputMessagesFilterGif extends VirtualClass<void> {
        CONSTRUCTOR_id: -3644025;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterGif";
        fromReader(reader: Reader): InputMessagesFilterGif;
    }

    /** Return only messages containing voice notes<br> */
    export class InputMessagesFilterVoice extends VirtualClass<void> {
        CONSTRUCTOR_id: 1358283666;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterVoice";
        fromReader(reader: Reader): InputMessagesFilterVoice;
    }

    /** Return only messages containing audio files<br> */
    export class InputMessagesFilterMusic extends VirtualClass<void> {
        CONSTRUCTOR_id: 928101534;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterMusic";
        fromReader(reader: Reader): InputMessagesFilterMusic;
    }

    /** Return only chat photo changes<br> */
    export class InputMessagesFilterChatPhotos extends VirtualClass<void> {
        CONSTRUCTOR_id: 975236280;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterChatPhotos";
        fromReader(reader: Reader): InputMessagesFilterChatPhotos;
    }

    export interface InputMessagesFilterPhoneCallsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Return only missed phone calls */
        missed?: true;
    }

    /** Return only phone calls<br> */
    export class InputMessagesFilterPhoneCalls extends VirtualClass<InputMessagesFilterPhoneCallsArgs> implements InputMessagesFilterPhoneCallsArgs {
        CONSTRUCTOR_id: -2134272152;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterPhoneCalls";
        flags: number;
        missed?: true;
        fromReader(reader: Reader): InputMessagesFilterPhoneCalls;
    }

    /** Return only round videos and voice notes<br> */
    export class InputMessagesFilterRoundVoice extends VirtualClass<void> {
        CONSTRUCTOR_id: 2054952868;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterRoundVoice";
        fromReader(reader: Reader): InputMessagesFilterRoundVoice;
    }

    /** Return only round videos<br> */
    export class InputMessagesFilterRoundVideo extends VirtualClass<void> {
        CONSTRUCTOR_id: -1253451181;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterRoundVideo";
        fromReader(reader: Reader): InputMessagesFilterRoundVideo;
    }

    /**
     * Return only messages where the current user was <a href="https://corefork.telegram.org/api/mentions">mentioned</a>.<br>
     * @link https://corefork.telegram.org/api/mentions
     */
    export class InputMessagesFilterMyMentions extends VirtualClass<void> {
        CONSTRUCTOR_id: -1040652646;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterMyMentions";
        fromReader(reader: Reader): InputMessagesFilterMyMentions;
    }

    /** Return only messages containing geolocations<br> */
    export class InputMessagesFilterGeo extends VirtualClass<void> {
        CONSTRUCTOR_id: -419271411;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterGeo";
        fromReader(reader: Reader): InputMessagesFilterGeo;
    }

    /** Return only messages containing contacts<br> */
    export class InputMessagesFilterContacts extends VirtualClass<void> {
        CONSTRUCTOR_id: -530392189;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterContacts";
        fromReader(reader: Reader): InputMessagesFilterContacts;
    }

    /** Fetch only pinned messages<br> */
    export class InputMessagesFilterPinned extends VirtualClass<void> {
        CONSTRUCTOR_id: 464520273;
        SUBCLASS_OF_ID: 2318855188;
        classType: "constructor";
        className: "InputMessagesFilterPinned";
        fromReader(reader: Reader): InputMessagesFilterPinned;
    }

    export interface UpdateNewMessageArgs {
        /** Message */
        message: TypeMessage;
        /** New quantity of actions in a message box */
        pts: int;
        /** Number of generated events */
        ptsCount: int;
    }

    /** New message in a private chat or in a <a href="https://core.telegram.org/api/channel">legacy group</a>.<br> */
    export class UpdateNewMessage extends VirtualClass<UpdateNewMessageArgs> implements UpdateNewMessageArgs {
        CONSTRUCTOR_id: 522914557;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNewMessage";
        message: TypeMessage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateNewMessage;
    }

    export interface UpdateMessageIDArgs {
        /** <strong>id</strong> identifier of a respective <a href="https://corefork.telegram.org/type/Message">Message</a> */
        id: int;
        /** Previuosly transferred client <strong>random_id</strong> identifier */
        randomId: long;
    }

    /**
     * Sent message with <strong>random_id</strong> client identifier was assigned an identifier.<br>
     * @link https://corefork.telegram.org/type/Message
     */
    export class UpdateMessageID extends VirtualClass<UpdateMessageIDArgs> implements UpdateMessageIDArgs {
        CONSTRUCTOR_id: 1318109142;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateMessageID";
        id: int;
        randomId: long;
        fromReader(reader: Reader): UpdateMessageID;
    }

    export interface UpdateDeleteMessagesArgs {
        /** List of identifiers of deleted messages */
        messages: int[];
        /** New quality of actions in a message box */
        pts: int;
        /** Number of generated <a href="https://corefork.telegram.org/api/updates">events</a> */
        ptsCount: int;
    }

    /**
     * Messages were deleted.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateDeleteMessages extends VirtualClass<UpdateDeleteMessagesArgs> implements UpdateDeleteMessagesArgs {
        CONSTRUCTOR_id: -1576161051;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDeleteMessages";
        messages: int[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateDeleteMessages;
    }

    export interface UpdateUserTypingArgs {
        /** User id */
        userId: int;
        /** Action type<br>Param added in <a href="https://corefork.telegram.org/api/layers#layer-17">Layer 17</a>. */
        action: TypeSendMessageAction;
    }

    /**
     * The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he's been doing.<br>
     * @link https://corefork.telegram.org/api/layers
     */
    export class UpdateUserTyping extends VirtualClass<UpdateUserTypingArgs> implements UpdateUserTypingArgs {
        CONSTRUCTOR_id: 1548249383;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateUserTyping";
        userId: int;
        action: TypeSendMessageAction;
        fromReader(reader: Reader): UpdateUserTyping;
    }

    export interface UpdateChatUserTypingArgs {
        /** Group id */
        chatId: int;
        /** Peer that started typing (can be the chat itself, in case of anonymous admins). */
        fromId: TypePeer;
        /** Type of action<br>Parameter added in <a href="https://corefork.telegram.org/api/layers#layer-17">Layer 17</a>. */
        action: TypeSendMessageAction;
    }

    /**
     * The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no repeated update received after 6 seconds, it should be considered that the user stopped doing whatever he's been doing.<br>
     * @link https://corefork.telegram.org/api/layers
     */
    export class UpdateChatUserTyping extends VirtualClass<UpdateChatUserTypingArgs> implements UpdateChatUserTypingArgs {
        CONSTRUCTOR_id: -2033525908;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatUserTyping";
        chatId: int;
        fromId: TypePeer;
        action: TypeSendMessageAction;
        fromReader(reader: Reader): UpdateChatUserTyping;
    }

    export interface UpdateChatParticipantsArgs {
        /** Updated chat participants */
        participants: TypeChatParticipants;
    }

    /** Composition of chat participants changed.<br> */
    export class UpdateChatParticipants extends VirtualClass<UpdateChatParticipantsArgs> implements UpdateChatParticipantsArgs {
        CONSTRUCTOR_id: 125178264;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatParticipants";
        participants: TypeChatParticipants;
        fromReader(reader: Reader): UpdateChatParticipants;
    }

    export interface UpdateUserStatusArgs {
        /** User identifier */
        userId: int;
        /** New status */
        status: TypeUserStatus;
    }

    /** Contact status update.<br> */
    export class UpdateUserStatus extends VirtualClass<UpdateUserStatusArgs> implements UpdateUserStatusArgs {
        CONSTRUCTOR_id: 469489699;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateUserStatus";
        userId: int;
        status: TypeUserStatus;
        fromReader(reader: Reader): UpdateUserStatus;
    }

    export interface UpdateUserNameArgs {
        /** User identifier */
        userId: int;
        /** New first name. Corresponds to the new value of <strong>real_first_name</strong> field of the <a href="https://corefork.telegram.org/constructor/userFull">userFull</a> constructor. */
        firstName: string;
        /** New last name. Corresponds to the new value of <strong>real_last_name</strong> field of the <a href="https://corefork.telegram.org/constructor/userFull">userFull</a> constructor. */
        lastName: string;
        /** New username.<br>Parameter added in <a href="https://corefork.telegram.org/api/layers#layer-18">Layer 18</a>. */
        username: string;
    }

    /**
     * Changes the user's first name, last name and username.<br>
     * @link https://corefork.telegram.org/constructor/userFull
     * @link https://corefork.telegram.org/api/layers
     */
    export class UpdateUserName extends VirtualClass<UpdateUserNameArgs> implements UpdateUserNameArgs {
        CONSTRUCTOR_id: -1489818765;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateUserName";
        userId: int;
        firstName: string;
        lastName: string;
        username: string;
        fromReader(reader: Reader): UpdateUserName;
    }

    export interface UpdateUserPhotoArgs {
        /** User identifier */
        userId: int;
        /** Date of photo update. */
        date: int;
        /** New profile photo */
        photo: TypeUserProfilePhoto;
        /** (<a href="https://corefork.telegram.org/constructor/boolTrue">boolTrue</a>), if one of the previously used photos is set a profile photo. */
        previous: Bool;
    }

    /**
     * Change of contact's profile photo.<br>
     * @link https://corefork.telegram.org/constructor/boolTrue
     */
    export class UpdateUserPhoto extends VirtualClass<UpdateUserPhotoArgs> implements UpdateUserPhotoArgs {
        CONSTRUCTOR_id: -1791935732;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateUserPhoto";
        userId: int;
        date: int;
        photo: TypeUserProfilePhoto;
        previous: Bool;
        fromReader(reader: Reader): UpdateUserPhoto;
    }

    export interface UpdateNewEncryptedMessageArgs {
        /** Message */
        message: TypeEncryptedMessage;
        /** New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info. */
        qts: int;
    }

    /**
     * New encrypted message.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateNewEncryptedMessage extends VirtualClass<UpdateNewEncryptedMessageArgs> implements UpdateNewEncryptedMessageArgs {
        CONSTRUCTOR_id: 314359194;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNewEncryptedMessage";
        message: TypeEncryptedMessage;
        qts: int;
        fromReader(reader: Reader): UpdateNewEncryptedMessage;
    }

    export interface UpdateEncryptedChatTypingArgs {
        /** Chat ID */
        chatId: int;
    }

    /** Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.<br> */
    export class UpdateEncryptedChatTyping extends VirtualClass<UpdateEncryptedChatTypingArgs> implements UpdateEncryptedChatTypingArgs {
        CONSTRUCTOR_id: 386986326;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateEncryptedChatTyping";
        chatId: int;
        fromReader(reader: Reader): UpdateEncryptedChatTyping;
    }

    export interface UpdateEncryptionArgs {
        /** Encrypted chat */
        chat: TypeEncryptedChat;
        /** Date of change */
        date: int;
    }

    /** Change of state in an encrypted chat.<br> */
    export class UpdateEncryption extends VirtualClass<UpdateEncryptionArgs> implements UpdateEncryptionArgs {
        CONSTRUCTOR_id: -1264392051;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateEncryption";
        chat: TypeEncryptedChat;
        date: int;
        fromReader(reader: Reader): UpdateEncryption;
    }

    export interface UpdateEncryptedMessagesReadArgs {
        /** Chat ID */
        chatId: int;
        /** Maximum value of data for read messages */
        maxDate: int;
        /** Time when messages were read */
        date: int;
    }

    /** Communication history in an encrypted chat was marked as read.<br> */
    export class UpdateEncryptedMessagesRead extends VirtualClass<UpdateEncryptedMessagesReadArgs> implements UpdateEncryptedMessagesReadArgs {
        CONSTRUCTOR_id: 956179895;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateEncryptedMessagesRead";
        chatId: int;
        maxDate: int;
        date: int;
        fromReader(reader: Reader): UpdateEncryptedMessagesRead;
    }

    export interface UpdateChatParticipantAddArgs {
        /** Group ID */
        chatId: int;
        /** ID of the new member */
        userId: int;
        /** ID of the user, who added member to the group */
        inviterId: int;
        /** When was the participant added */
        date: int;
        /** Chat version number */
        version: int;
    }

    /** New group member.<br> */
    export class UpdateChatParticipantAdd extends VirtualClass<UpdateChatParticipantAddArgs> implements UpdateChatParticipantAddArgs {
        CONSTRUCTOR_id: -364179876;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatParticipantAdd";
        chatId: int;
        userId: int;
        inviterId: int;
        date: int;
        version: int;
        fromReader(reader: Reader): UpdateChatParticipantAdd;
    }

    export interface UpdateChatParticipantDeleteArgs {
        /** Group ID */
        chatId: int;
        /** ID of the user */
        userId: int;
        /** Used in basic groups to reorder updates and make sure that all of them was received. */
        version: int;
    }

    /** A member has left the group.<br> */
    export class UpdateChatParticipantDelete extends VirtualClass<UpdateChatParticipantDeleteArgs> implements UpdateChatParticipantDeleteArgs {
        CONSTRUCTOR_id: 1851755554;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatParticipantDelete";
        chatId: int;
        userId: int;
        version: int;
        fromReader(reader: Reader): UpdateChatParticipantDelete;
    }

    export interface UpdateDcOptionsArgs {
        /** New connection options */
        dcOptions: TypeDcOption[];
    }

    /** Changes in the data center configuration options.<br> */
    export class UpdateDcOptions extends VirtualClass<UpdateDcOptionsArgs> implements UpdateDcOptionsArgs {
        CONSTRUCTOR_id: -1906403213;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDcOptions";
        dcOptions: TypeDcOption[];
        fromReader(reader: Reader): UpdateDcOptions;
    }

    export interface UpdateNotifySettingsArgs {
        /** Nofication source */
        peer: TypeNotifyPeer;
        /** New notification settings */
        notifySettings: TypePeerNotifySettings;
    }

    /** Changes in notification settings.<br> */
    export class UpdateNotifySettings extends VirtualClass<UpdateNotifySettingsArgs> implements UpdateNotifySettingsArgs {
        CONSTRUCTOR_id: -1094555409;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNotifySettings";
        peer: TypeNotifyPeer;
        notifySettings: TypePeerNotifySettings;
        fromReader(reader: Reader): UpdateNotifySettings;
    }

    export interface UpdateServiceNotificationArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** (boolTrue) if the message must be displayed in a popup. */
        popup?: true;
        /** When was the notification received<br>The message must also be stored locally as part of the message history with the user id <code>777000</code> (Telegram Notifications). */
        inboxDate?: int;
        /** String, identical in format and contents to the <a href="https://corefork.telegram.org/api/errors#error-type"><strong>type</strong></a> field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same <strong>type</strong> within a short period of time (15 minutes). */
        type: string;
        /** Message text */
        message: string;
        /** Media content (optional) */
        media: TypeMessageMedia;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities: TypeMessageEntity[];
    }

    /**
     * A service message for the user.<br>The app must show the message to the user upon receiving this update. In case the <strong>popup</strong> parameter was passed, the text message must be displayed in a popup alert immediately upon receipt. It is recommended to handle the text as you would an ordinary message in terms of highlighting links, etc. The message must also be stored locally as part of the message history with the user id <code>777000</code> (Telegram Notifications).<br>
     * @link https://corefork.telegram.org/api/errors
     * @link https://corefork.telegram.org/api/entities
     */
    export class UpdateServiceNotification extends VirtualClass<UpdateServiceNotificationArgs> implements UpdateServiceNotificationArgs {
        CONSTRUCTOR_id: -337352679;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateServiceNotification";
        flags: number;
        popup?: true;
        inboxDate?: int;
        type: string;
        message: string;
        media: TypeMessageMedia;
        entities: TypeMessageEntity[];
        fromReader(reader: Reader): UpdateServiceNotification;
    }

    export interface UpdatePrivacyArgs {
        /** Peers to which the privacy rules apply */
        key: TypePrivacyKey;
        /** New privacy rules */
        rules: TypePrivacyRule[];
    }

    /** Privacy rules were changed<br> */
    export class UpdatePrivacy extends VirtualClass<UpdatePrivacyArgs> implements UpdatePrivacyArgs {
        CONSTRUCTOR_id: -298113238;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePrivacy";
        key: TypePrivacyKey;
        rules: TypePrivacyRule[];
        fromReader(reader: Reader): UpdatePrivacy;
    }

    export interface UpdateUserPhoneArgs {
        /** User ID */
        userId: int;
        /** New phone number */
        phone: string;
    }

    /** A user's phone number was changed<br> */
    export class UpdateUserPhone extends VirtualClass<UpdateUserPhoneArgs> implements UpdateUserPhoneArgs {
        CONSTRUCTOR_id: 314130811;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateUserPhone";
        userId: int;
        phone: string;
        fromReader(reader: Reader): UpdateUserPhone;
    }

    export interface UpdateReadHistoryInboxArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Peer */
        peer: TypePeer;
        /** Maximum ID of messages read */
        maxId: int;
        /** Number of messages that are still unread */
        stillUnreadCount: int;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Incoming messages were read<br>
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateReadHistoryInbox extends VirtualClass<UpdateReadHistoryInboxArgs> implements UpdateReadHistoryInboxArgs {
        CONSTRUCTOR_id: -1667805217;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadHistoryInbox";
        flags: number;
        folderId?: int;
        peer: TypePeer;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateReadHistoryInbox;
    }

    export interface UpdateReadHistoryOutboxArgs {
        /** Peer */
        peer: TypePeer;
        /** Maximum ID of read outgoing messages */
        maxId: int;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Outgoing messages were read<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateReadHistoryOutbox extends VirtualClass<UpdateReadHistoryOutboxArgs> implements UpdateReadHistoryOutboxArgs {
        CONSTRUCTOR_id: 791617983;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadHistoryOutbox";
        peer: TypePeer;
        maxId: int;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateReadHistoryOutbox;
    }

    export interface UpdateWebPageArgs {
        /** Webpage preview */
        webpage: TypeWebPage;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * An <a href="https://instantview.telegram.org/">instant view</a> webpage preview was generated<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateWebPage extends VirtualClass<UpdateWebPageArgs> implements UpdateWebPageArgs {
        CONSTRUCTOR_id: 2139689491;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateWebPage";
        webpage: TypeWebPage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateWebPage;
    }

    export interface UpdateReadMessagesContentsArgs {
        /** IDs of read messages */
        messages: int[];
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Contents of messages in the common <a href="https://corefork.telegram.org/api/updates">message box</a> were read<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateReadMessagesContents extends VirtualClass<UpdateReadMessagesContentsArgs> implements UpdateReadMessagesContentsArgs {
        CONSTRUCTOR_id: 1757493555;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadMessagesContents";
        messages: int[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateReadMessagesContents;
    }

    export interface UpdateChannelTooLongArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The channel */
        channelId: int;
        /** The <a href="https://corefork.telegram.org/api/updates">PTS</a>. */
        pts?: int;
    }

    /**
     * There are new updates in the specified channel, the client must fetch them.<br>
     * If the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateChannelTooLong extends VirtualClass<UpdateChannelTooLongArgs> implements UpdateChannelTooLongArgs {
        CONSTRUCTOR_id: -352032773;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelTooLong";
        flags: number;
        channelId: int;
        pts?: int;
        fromReader(reader: Reader): UpdateChannelTooLong;
    }

    export interface UpdateChannelArgs {
        /** Channel ID */
        channelId: int;
    }

    /** A new channel is available<br> */
    export class UpdateChannel extends VirtualClass<UpdateChannelArgs> implements UpdateChannelArgs {
        CONSTRUCTOR_id: -1227598250;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannel";
        channelId: int;
        fromReader(reader: Reader): UpdateChannel;
    }

    export interface UpdateNewChannelMessageArgs {
        /** New message */
        message: TypeMessage;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * A new message was sent in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateNewChannelMessage extends VirtualClass<UpdateNewChannelMessageArgs> implements UpdateNewChannelMessageArgs {
        CONSTRUCTOR_id: 1656358105;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNewChannelMessage";
        message: TypeMessage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateNewChannelMessage;
    }

    export interface UpdateReadChannelInboxArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Channel/supergroup ID */
        channelId: int;
        /** Position up to which all incoming messages are read. */
        maxId: int;
        /** Count of messages weren't read yet */
        stillUnreadCount: int;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
    }

    /**
     * Incoming messages in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> were read<br>
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateReadChannelInbox extends VirtualClass<UpdateReadChannelInboxArgs> implements UpdateReadChannelInboxArgs {
        CONSTRUCTOR_id: 856380452;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadChannelInbox";
        flags: number;
        folderId?: int;
        channelId: int;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        fromReader(reader: Reader): UpdateReadChannelInbox;
    }

    export interface UpdateDeleteChannelMessagesArgs {
        /** Channel ID */
        channelId: int;
        /** IDs of messages that were deleted */
        messages: int[];
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Some messages in a <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> were deleted<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateDeleteChannelMessages extends VirtualClass<UpdateDeleteChannelMessagesArgs> implements UpdateDeleteChannelMessagesArgs {
        CONSTRUCTOR_id: -1015733815;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDeleteChannelMessages";
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateDeleteChannelMessages;
    }

    export interface UpdateChannelMessageViewsArgs {
        /** Channel ID */
        channelId: int;
        /** ID of the message */
        id: int;
        /** New view counter */
        views: int;
    }

    /** The view counter of a message in a channel has changed<br> */
    export class UpdateChannelMessageViews extends VirtualClass<UpdateChannelMessageViewsArgs> implements UpdateChannelMessageViewsArgs {
        CONSTRUCTOR_id: -1734268085;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelMessageViews";
        channelId: int;
        id: int;
        views: int;
        fromReader(reader: Reader): UpdateChannelMessageViews;
    }

    export interface UpdateChatParticipantAdminArgs {
        /** Chat ID */
        chatId: int;
        /** ID of the (de)admined user */
        userId: int;
        /** Whether the user was rendered admin */
        isAdmin: Bool;
        /** Used in basic groups to reorder updates and make sure that all of them was received. */
        version: int;
    }

    /**
     * Admin permissions of a user in a <a href="https://corefork.telegram.org/api/channel">legacy group</a> were changed<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateChatParticipantAdmin extends VirtualClass<UpdateChatParticipantAdminArgs> implements UpdateChatParticipantAdminArgs {
        CONSTRUCTOR_id: -1232070311;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatParticipantAdmin";
        chatId: int;
        userId: int;
        isAdmin: Bool;
        version: int;
        fromReader(reader: Reader): UpdateChatParticipantAdmin;
    }

    export interface UpdateNewStickerSetArgs {
        /** The installed stickerset */
        stickerset: messages.TypeStickerSet;
    }

    /** A new stickerset was installed<br> */
    export class UpdateNewStickerSet extends VirtualClass<UpdateNewStickerSetArgs> implements UpdateNewStickerSetArgs {
        CONSTRUCTOR_id: 1753886890;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNewStickerSet";
        stickerset: messages.TypeStickerSet;
        fromReader(reader: Reader): UpdateNewStickerSet;
    }

    export interface UpdateStickerSetsOrderArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the updated stickers are mask stickers */
        masks?: true;
        /** New sticker order by sticker ID */
        order: long[];
    }

    /** The order of stickersets was changed<br> */
    export class UpdateStickerSetsOrder extends VirtualClass<UpdateStickerSetsOrderArgs> implements UpdateStickerSetsOrderArgs {
        CONSTRUCTOR_id: 196268545;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateStickerSetsOrder";
        flags: number;
        masks?: true;
        order: long[];
        fromReader(reader: Reader): UpdateStickerSetsOrder;
    }

    /** Installed stickersets have changed, the client should refetch them using <a href="https://core.telegram.org/method/messages.getAllStickers">messages.getAllStickers</a><br> */
    export class UpdateStickerSets extends VirtualClass<void> {
        CONSTRUCTOR_id: 1135492588;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateStickerSets";
        fromReader(reader: Reader): UpdateStickerSets;
    }

    /** The saved gif list has changed, the client should refetch it using <a href="https://core.telegram.org/method/messages.getSavedGifs">messages.getSavedGifs</a><br> */
    export class UpdateSavedGifs extends VirtualClass<void> {
        CONSTRUCTOR_id: -1821035490;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateSavedGifs";
        fromReader(reader: Reader): UpdateSavedGifs;
    }

    export interface UpdateBotInlineQueryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Query ID */
        queryId: long;
        /** User that sent the query */
        userId: int;
        /** Text of query */
        query: string;
        /** Attached geolocation */
        geo?: TypeGeoPoint;
        /** Type of the chat from which the inline query was sent. */
        peerType?: TypeInlineQueryPeerType;
        /** Offset to navigate through results */
        offset: string;
    }

    /** An incoming inline query<br> */
    export class UpdateBotInlineQuery extends VirtualClass<UpdateBotInlineQueryArgs> implements UpdateBotInlineQueryArgs {
        CONSTRUCTOR_id: 1059076315;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotInlineQuery";
        flags: number;
        queryId: long;
        userId: int;
        query: string;
        geo?: TypeGeoPoint;
        peerType?: TypeInlineQueryPeerType;
        offset: string;
        fromReader(reader: Reader): UpdateBotInlineQuery;
    }

    export interface UpdateBotInlineSendArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The user that chose the result */
        userId: int;
        /** The query that was used to obtain the result */
        query: string;
        /** Optional. Sender location, only for bots that require user location */
        geo?: TypeGeoPoint;
        /** The unique identifier for the result that was chosen */
        id: string;
        /** Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. */
        msgId?: TypeInputBotInlineMessageID;
    }

    /** The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the <a href="https://core.telegram.org/bots/inline#collecting-feedback">feedback collecting</a> for details on how to enable these updates for your bot.<br> */
    export class UpdateBotInlineSend extends VirtualClass<UpdateBotInlineSendArgs> implements UpdateBotInlineSendArgs {
        CONSTRUCTOR_id: 239663460;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotInlineSend";
        flags: number;
        userId: int;
        query: string;
        geo?: TypeGeoPoint;
        id: string;
        msgId?: TypeInputBotInlineMessageID;
        fromReader(reader: Reader): UpdateBotInlineSend;
    }

    export interface UpdateEditChannelMessageArgs {
        /** The new message */
        message: TypeMessage;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * A message was edited in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateEditChannelMessage extends VirtualClass<UpdateEditChannelMessageArgs> implements UpdateEditChannelMessageArgs {
        CONSTRUCTOR_id: 457133559;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateEditChannelMessage";
        message: TypeMessage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateEditChannelMessage;
    }

    export interface UpdateBotCallbackQueryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Query ID */
        queryId: long;
        /** ID of the user that pressed the button */
        userId: int;
        /** Chat where the inline keyboard was sent */
        peer: TypePeer;
        /** Message ID */
        msgId: MessageIDLike;
        /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
        chatInstance: long;
        /** Callback data */
        data?: bytes;
        /** Short name of a Game to be returned, serves as the unique identifier for the game */
        gameShortName?: string;
    }

    /** A callback button was pressed, and the button data was sent to the bot that created the button<br> */
    export class UpdateBotCallbackQuery extends VirtualClass<UpdateBotCallbackQueryArgs> implements UpdateBotCallbackQueryArgs {
        CONSTRUCTOR_id: -415938591;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotCallbackQuery";
        flags: number;
        queryId: long;
        userId: int;
        peer: TypePeer;
        msgId: MessageIDLike;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
        fromReader(reader: Reader): UpdateBotCallbackQuery;
    }

    export interface UpdateEditMessageArgs {
        /** The new edited message */
        message: TypeMessage;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS count</a> */
        ptsCount: int;
    }

    /**
     * A message was edited<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateEditMessage extends VirtualClass<UpdateEditMessageArgs> implements UpdateEditMessageArgs {
        CONSTRUCTOR_id: -469536605;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateEditMessage";
        message: TypeMessage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateEditMessage;
    }

    export interface UpdateInlineBotCallbackQueryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Query ID */
        queryId: long;
        /** ID of the user that pressed the button */
        userId: int;
        /** ID of the inline message with the button */
        msgId: TypeInputBotInlineMessageID;
        /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
        chatInstance: long;
        /** Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field. */
        data?: bytes;
        /** Short name of a Game to be returned, serves as the unique identifier for the game */
        gameShortName?: string;
    }

    /** This notification is received by bots when a button is pressed<br> */
    export class UpdateInlineBotCallbackQuery extends VirtualClass<UpdateInlineBotCallbackQueryArgs> implements UpdateInlineBotCallbackQueryArgs {
        CONSTRUCTOR_id: -103646630;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateInlineBotCallbackQuery";
        flags: number;
        queryId: long;
        userId: int;
        msgId: TypeInputBotInlineMessageID;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
        fromReader(reader: Reader): UpdateInlineBotCallbackQuery;
    }

    export interface UpdateReadChannelOutboxArgs {
        /** Channel/supergroup ID */
        channelId: int;
        /** Position up to which all outgoing messages are read. */
        maxId: int;
    }

    /**
     * Outgoing messages in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> were read<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateReadChannelOutbox extends VirtualClass<UpdateReadChannelOutboxArgs> implements UpdateReadChannelOutboxArgs {
        CONSTRUCTOR_id: 634833351;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadChannelOutbox";
        channelId: int;
        maxId: int;
        fromReader(reader: Reader): UpdateReadChannelOutbox;
    }

    export interface UpdateDraftMessageArgs {
        /** The peer to which the draft is associated */
        peer: TypePeer;
        /** The draft */
        draft: TypeDraftMessage;
    }

    /**
     * Notifies a change of a message <a href="https://corefork.telegram.org/api/drafts">draft</a>.<br>
     * @link https://corefork.telegram.org/api/drafts
     */
    export class UpdateDraftMessage extends VirtualClass<UpdateDraftMessageArgs> implements UpdateDraftMessageArgs {
        CONSTRUCTOR_id: -299124375;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDraftMessage";
        peer: TypePeer;
        draft: TypeDraftMessage;
        fromReader(reader: Reader): UpdateDraftMessage;
    }

    /** Some featured stickers were marked as read<br> */
    export class UpdateReadFeaturedStickers extends VirtualClass<void> {
        CONSTRUCTOR_id: 1461528386;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadFeaturedStickers";
        fromReader(reader: Reader): UpdateReadFeaturedStickers;
    }

    /** The recent sticker list was updated<br> */
    export class UpdateRecentStickers extends VirtualClass<void> {
        CONSTRUCTOR_id: -1706939360;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateRecentStickers";
        fromReader(reader: Reader): UpdateRecentStickers;
    }

    /**
     * The server-side configuration has changed; the client should re-fetch the config using <a href="https://corefork.telegram.org/method/help.getConfig">help.getConfig</a><br>
     * @link https://corefork.telegram.org/method/help.getConfig
     */
    export class UpdateConfig extends VirtualClass<void> {
        CONSTRUCTOR_id: -1574314746;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateConfig";
        fromReader(reader: Reader): UpdateConfig;
    }

    /**
     * <a href="https://corefork.telegram.org/api/updates">Common message box sequence PTS</a> has changed, <a href="https://corefork.telegram.org/api/updates#fetching-state">state has to be refetched using updates.getState</a><br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdatePtsChanged extends VirtualClass<void> {
        CONSTRUCTOR_id: 861169551;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePtsChanged";
        fromReader(reader: Reader): UpdatePtsChanged;
    }

    export interface UpdateChannelWebPageArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> ID */
        channelId: int;
        /** Generated webpage preview */
        webpage: TypeWebPage;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * A webpage preview of a link in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> message was generated<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateChannelWebPage extends VirtualClass<UpdateChannelWebPageArgs> implements UpdateChannelWebPageArgs {
        CONSTRUCTOR_id: 1081547008;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelWebPage";
        channelId: int;
        webpage: TypeWebPage;
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateChannelWebPage;
    }

    export interface UpdateDialogPinnedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the dialog was pinned */
        pinned?: true;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** The dialog */
        peer: TypeDialogPeer;
    }

    /**
     * A dialog was pinned/unpinned<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateDialogPinned extends VirtualClass<UpdateDialogPinnedArgs> implements UpdateDialogPinnedArgs {
        CONSTRUCTOR_id: 1852826908;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDialogPinned";
        flags: number;
        pinned?: true;
        folderId?: int;
        peer: TypeDialogPeer;
        fromReader(reader: Reader): UpdateDialogPinned;
    }

    export interface UpdatePinnedDialogsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** New order of pinned dialogs */
        order?: TypeDialogPeer[];
    }

    /**
     * Pinned dialogs were updated<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdatePinnedDialogs extends VirtualClass<UpdatePinnedDialogsArgs> implements UpdatePinnedDialogsArgs {
        CONSTRUCTOR_id: -99664734;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePinnedDialogs";
        flags: number;
        folderId?: int;
        order?: TypeDialogPeer[];
        fromReader(reader: Reader): UpdatePinnedDialogs;
    }

    export interface UpdateBotWebhookJSONArgs {
        /** The event */
        data: TypeDataJSON;
    }

    /** A new incoming event; for bots only<br> */
    export class UpdateBotWebhookJSON extends VirtualClass<UpdateBotWebhookJSONArgs> implements UpdateBotWebhookJSONArgs {
        CONSTRUCTOR_id: -2095595325;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotWebhookJSON";
        data: TypeDataJSON;
        fromReader(reader: Reader): UpdateBotWebhookJSON;
    }

    export interface UpdateBotWebhookJSONQueryArgs {
        /** Query identifier */
        queryId: long;
        /** Query data */
        data: TypeDataJSON;
        /** Query timeout */
        timeout: int;
    }

    /** A new incoming query; for bots only<br> */
    export class UpdateBotWebhookJSONQuery extends VirtualClass<UpdateBotWebhookJSONQueryArgs> implements UpdateBotWebhookJSONQueryArgs {
        CONSTRUCTOR_id: -1684914010;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotWebhookJSONQuery";
        queryId: long;
        data: TypeDataJSON;
        timeout: int;
        fromReader(reader: Reader): UpdateBotWebhookJSONQuery;
    }

    export interface UpdateBotShippingQueryArgs {
        /** Unique query identifier */
        queryId: long;
        /** User who sent the query */
        userId: int;
        /** Bot specified invoice payload */
        payload: bytes;
        /** User specified shipping address */
        shippingAddress: TypePostAddress;
    }

    /** This object contains information about an incoming shipping query.<br> */
    export class UpdateBotShippingQuery extends VirtualClass<UpdateBotShippingQueryArgs> implements UpdateBotShippingQueryArgs {
        CONSTRUCTOR_id: -523384512;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotShippingQuery";
        queryId: long;
        userId: int;
        payload: bytes;
        shippingAddress: TypePostAddress;
        fromReader(reader: Reader): UpdateBotShippingQuery;
    }

    export interface UpdateBotPrecheckoutQueryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Unique query identifier */
        queryId: long;
        /** User who sent the query */
        userId: int;
        /** Bot specified invoice payload */
        payload: bytes;
        /** Order info provided by the user */
        info?: TypePaymentRequestedInfo;
        /** Identifier of the shipping option chosen by the user */
        shippingOptionId?: string;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
    }

    /**
     * This object contains information about an incoming pre-checkout query.<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class UpdateBotPrecheckoutQuery extends VirtualClass<UpdateBotPrecheckoutQueryArgs> implements UpdateBotPrecheckoutQueryArgs {
        CONSTRUCTOR_id: 1563376297;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotPrecheckoutQuery";
        flags: number;
        queryId: long;
        userId: int;
        payload: bytes;
        info?: TypePaymentRequestedInfo;
        shippingOptionId?: string;
        currency: string;
        totalAmount: long;
        fromReader(reader: Reader): UpdateBotPrecheckoutQuery;
    }

    export interface UpdatePhoneCallArgs {
        /** Phone call */
        phoneCall: TypePhoneCall;
    }

    /** An incoming phone call<br> */
    export class UpdatePhoneCall extends VirtualClass<UpdatePhoneCallArgs> implements UpdatePhoneCallArgs {
        CONSTRUCTOR_id: -1425052898;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePhoneCall";
        phoneCall: TypePhoneCall;
        fromReader(reader: Reader): UpdatePhoneCall;
    }

    export interface UpdateLangPackTooLongArgs {
        /** Language code */
        langCode: string;
    }

    /**
     * A language pack has changed, the client should manually fetch the changed strings using <a href="https://corefork.telegram.org/method/langpack.getDifference">langpack.getDifference</a><br>
     * @link https://corefork.telegram.org/method/langpack.getDifference
     */
    export class UpdateLangPackTooLong extends VirtualClass<UpdateLangPackTooLongArgs> implements UpdateLangPackTooLongArgs {
        CONSTRUCTOR_id: 1180041828;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateLangPackTooLong";
        langCode: string;
        fromReader(reader: Reader): UpdateLangPackTooLong;
    }

    export interface UpdateLangPackArgs {
        /** Changed strings */
        difference: TypeLangPackDifference;
    }

    /** Language pack updated<br> */
    export class UpdateLangPack extends VirtualClass<UpdateLangPackArgs> implements UpdateLangPackArgs {
        CONSTRUCTOR_id: 1442983757;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateLangPack";
        difference: TypeLangPackDifference;
        fromReader(reader: Reader): UpdateLangPack;
    }

    /**
     * The list of favorited stickers was changed, the client should call <a href="https://corefork.telegram.org/method/messages.getFavedStickers">messages.getFavedStickers</a> to refetch the new list<br>
     * @link https://corefork.telegram.org/method/messages.getFavedStickers
     */
    export class UpdateFavedStickers extends VirtualClass<void> {
        CONSTRUCTOR_id: -451831443;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateFavedStickers";
        fromReader(reader: Reader): UpdateFavedStickers;
    }

    export interface UpdateChannelReadMessagesContentsArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> ID */
        channelId: int;
        /** IDs of messages that were read */
        messages: int[];
    }

    /**
     * The specified <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> messages were read<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateChannelReadMessagesContents extends VirtualClass<UpdateChannelReadMessagesContentsArgs> implements UpdateChannelReadMessagesContentsArgs {
        CONSTRUCTOR_id: -1987495099;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelReadMessagesContents";
        channelId: int;
        messages: int[];
        fromReader(reader: Reader): UpdateChannelReadMessagesContents;
    }

    /** All contacts were deleted<br> */
    export class UpdateContactsReset extends VirtualClass<void> {
        CONSTRUCTOR_id: 1887741886;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateContactsReset";
        fromReader(reader: Reader): UpdateContactsReset;
    }

    export interface UpdateChannelAvailableMessagesArgs {
        /** Channel/supergroup ID */
        channelId: int;
        /** Identifier of a maximum unavailable message in a channel due to hidden history. */
        availableMinId: int;
    }

    /**
     * The history of a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> was hidden.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateChannelAvailableMessages extends VirtualClass<UpdateChannelAvailableMessagesArgs> implements UpdateChannelAvailableMessagesArgs {
        CONSTRUCTOR_id: 1893427255;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelAvailableMessages";
        channelId: int;
        availableMinId: int;
        fromReader(reader: Reader): UpdateChannelAvailableMessages;
    }

    export interface UpdateDialogUnreadMarkArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Was the chat marked or unmarked as read */
        unread?: true;
        /** The dialog */
        peer: TypeDialogPeer;
    }

    /** The manual unread mark of a chat was changed<br> */
    export class UpdateDialogUnreadMark extends VirtualClass<UpdateDialogUnreadMarkArgs> implements UpdateDialogUnreadMarkArgs {
        CONSTRUCTOR_id: -513517117;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDialogUnreadMark";
        flags: number;
        unread?: true;
        peer: TypeDialogPeer;
        fromReader(reader: Reader): UpdateDialogUnreadMark;
    }

    export interface UpdateMessagePollArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Poll ID */
        pollId: long;
        /** If the server knows the client hasn't cached this poll yet, the poll itself */
        poll?: TypePoll;
        /** New poll results */
        results: TypePollResults;
    }

    /** The results of a poll have changed<br> */
    export class UpdateMessagePoll extends VirtualClass<UpdateMessagePollArgs> implements UpdateMessagePollArgs {
        CONSTRUCTOR_id: -1398708869;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateMessagePoll";
        flags: number;
        pollId: long;
        poll?: TypePoll;
        results: TypePollResults;
        fromReader(reader: Reader): UpdateMessagePoll;
    }

    export interface UpdateChatDefaultBannedRightsArgs {
        /** The chat */
        peer: TypePeer;
        /** New default banned rights */
        defaultBannedRights: TypeChatBannedRights;
        /** Version */
        version: int;
    }

    /**
     * Default banned rights in a <a href="https://corefork.telegram.org/api/channel">normal chat</a> were updated<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateChatDefaultBannedRights extends VirtualClass<UpdateChatDefaultBannedRightsArgs> implements UpdateChatDefaultBannedRightsArgs {
        CONSTRUCTOR_id: 1421875280;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatDefaultBannedRights";
        peer: TypePeer;
        defaultBannedRights: TypeChatBannedRights;
        version: int;
        fromReader(reader: Reader): UpdateChatDefaultBannedRights;
    }

    export interface UpdateFolderPeersArgs {
        /** New peer list */
        folderPeers: TypeFolderPeer[];
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * The peer list of a <a href="https://corefork.telegram.org/api/folders#peer-folders">peer folder</a> was updated<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateFolderPeers extends VirtualClass<UpdateFolderPeersArgs> implements UpdateFolderPeersArgs {
        CONSTRUCTOR_id: 422972864;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateFolderPeers";
        folderPeers: TypeFolderPeer[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdateFolderPeers;
    }

    export interface UpdatePeerSettingsArgs {
        /** The peer */
        peer: TypePeer;
        /** Associated peer settings */
        settings: TypePeerSettings;
    }

    /** Settings of a certain peer have changed<br> */
    export class UpdatePeerSettings extends VirtualClass<UpdatePeerSettingsArgs> implements UpdatePeerSettingsArgs {
        CONSTRUCTOR_id: 1786671974;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePeerSettings";
        peer: TypePeer;
        settings: TypePeerSettings;
        fromReader(reader: Reader): UpdatePeerSettings;
    }

    export interface UpdatePeerLocatedArgs {
        /** Geolocated peer list update */
        peers: TypePeerLocated[];
    }

    /** List of peers near you was updated<br> */
    export class UpdatePeerLocated extends VirtualClass<UpdatePeerLocatedArgs> implements UpdatePeerLocatedArgs {
        CONSTRUCTOR_id: -1263546448;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePeerLocated";
        peers: TypePeerLocated[];
        fromReader(reader: Reader): UpdatePeerLocated;
    }

    export interface UpdateNewScheduledMessageArgs {
        /** Message */
        message: TypeMessage;
    }

    /**
     * A message was added to the <a href="https://corefork.telegram.org/api/scheduled-messages">schedule queue of a chat</a><br>
     * @link https://corefork.telegram.org/api/scheduled-messages
     */
    export class UpdateNewScheduledMessage extends VirtualClass<UpdateNewScheduledMessageArgs> implements UpdateNewScheduledMessageArgs {
        CONSTRUCTOR_id: 967122427;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateNewScheduledMessage";
        message: TypeMessage;
        fromReader(reader: Reader): UpdateNewScheduledMessage;
    }

    export interface UpdateDeleteScheduledMessagesArgs {
        /** Peer */
        peer: TypePeer;
        /** Deleted scheduled messages */
        messages: int[];
    }

    /**
     * Some <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> were deleted from the schedule queue of a chat<br>
     * @link https://corefork.telegram.org/api/scheduled-messages
     */
    export class UpdateDeleteScheduledMessages extends VirtualClass<UpdateDeleteScheduledMessagesArgs> implements UpdateDeleteScheduledMessagesArgs {
        CONSTRUCTOR_id: -1870238482;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDeleteScheduledMessages";
        peer: TypePeer;
        messages: int[];
        fromReader(reader: Reader): UpdateDeleteScheduledMessages;
    }

    export interface UpdateThemeArgs {
        /** Theme */
        theme: TypeTheme;
    }

    /** A cloud theme was updated<br> */
    export class UpdateTheme extends VirtualClass<UpdateThemeArgs> implements UpdateThemeArgs {
        CONSTRUCTOR_id: -2112423005;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateTheme";
        theme: TypeTheme;
        fromReader(reader: Reader): UpdateTheme;
    }

    export interface UpdateGeoLiveViewedArgs {
        /** The user that viewed the live geoposition */
        peer: TypePeer;
        /** Message ID of geoposition message */
        msgId: MessageIDLike;
    }

    /** Live geoposition message was viewed<br> */
    export class UpdateGeoLiveViewed extends VirtualClass<UpdateGeoLiveViewedArgs> implements UpdateGeoLiveViewedArgs {
        CONSTRUCTOR_id: -2027964103;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateGeoLiveViewed";
        peer: TypePeer;
        msgId: MessageIDLike;
        fromReader(reader: Reader): UpdateGeoLiveViewed;
    }

    /** A login token (for login via QR code) was accepted.<br> */
    export class UpdateLoginToken extends VirtualClass<void> {
        CONSTRUCTOR_id: 1448076945;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateLoginToken";
        fromReader(reader: Reader): UpdateLoginToken;
    }

    export interface UpdateMessagePollVoteArgs {
        /** Poll ID */
        pollId: long;
        /** User ID */
        userId: int;
        /** Chosen option(s) */
        options: bytes[];
        /** New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info. */
        qts: int;
    }

    /**
     * A specific user has voted in a poll<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateMessagePollVote extends VirtualClass<UpdateMessagePollVoteArgs> implements UpdateMessagePollVoteArgs {
        CONSTRUCTOR_id: 938909451;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateMessagePollVote";
        pollId: long;
        userId: int;
        options: bytes[];
        qts: int;
        fromReader(reader: Reader): UpdateMessagePollVote;
    }

    export interface UpdateDialogFilterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> ID */
        id: int;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> info */
        filter?: TypeDialogFilter;
    }

    /**
     * A new <a href="https://corefork.telegram.org/api/folders">folder</a> was added<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateDialogFilter extends VirtualClass<UpdateDialogFilterArgs> implements UpdateDialogFilterArgs {
        CONSTRUCTOR_id: 654302845;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDialogFilter";
        flags: number;
        id: int;
        filter?: TypeDialogFilter;
        fromReader(reader: Reader): UpdateDialogFilter;
    }

    export interface UpdateDialogFilterOrderArgs {
        /** Ordered <a href="https://corefork.telegram.org/api/folders">folder IDs</a> */
        order: int[];
    }

    /**
     * New <a href="https://corefork.telegram.org/api/folders">folder</a> order<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateDialogFilterOrder extends VirtualClass<UpdateDialogFilterOrderArgs> implements UpdateDialogFilterOrderArgs {
        CONSTRUCTOR_id: -1512627963;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDialogFilterOrder";
        order: int[];
        fromReader(reader: Reader): UpdateDialogFilterOrder;
    }

    /**
     * Clients should update <a href="https://corefork.telegram.org/api/folders">folder</a> info<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateDialogFilters extends VirtualClass<void> {
        CONSTRUCTOR_id: 889491791;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateDialogFilters";
        fromReader(reader: Reader): UpdateDialogFilters;
    }

    export interface UpdatePhoneCallSignalingDataArgs {
        /** Phone call ID */
        phoneCallId: long;
        /** Signaling payload */
        data: bytes;
    }

    /** Incoming phone call signaling payload<br> */
    export class UpdatePhoneCallSignalingData extends VirtualClass<UpdatePhoneCallSignalingDataArgs> implements UpdatePhoneCallSignalingDataArgs {
        CONSTRUCTOR_id: 643940105;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePhoneCallSignalingData";
        phoneCallId: long;
        data: bytes;
        fromReader(reader: Reader): UpdatePhoneCallSignalingData;
    }

    export interface UpdateChannelMessageForwardsArgs {
        /** Channel ID */
        channelId: int;
        /** ID of the message */
        id: int;
        /** New forward counter */
        forwards: int;
    }

    /** The forward counter of a message in a channel has changed<br> */
    export class UpdateChannelMessageForwards extends VirtualClass<UpdateChannelMessageForwardsArgs> implements UpdateChannelMessageForwardsArgs {
        CONSTRUCTOR_id: 1854571743;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelMessageForwards";
        channelId: int;
        id: int;
        forwards: int;
        fromReader(reader: Reader): UpdateChannelMessageForwards;
    }

    export interface UpdateReadChannelDiscussionInboxArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/channel">Discussion group ID</a> */
        channelId: int;
        /** ID of the group message that started the <a href="https://corefork.telegram.org/api/threads">thread</a> (message in linked discussion group) */
        topMsgId: MessageIDLike;
        /** Message ID of latest read incoming message for this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        readMaxId: int;
        /** If set, contains the ID of the <a href="https://corefork.telegram.org/api/channel">channel</a> that contains the post that started the <a href="https://corefork.telegram.org/api/threads">comment thread</a> in the discussion group (<code>channel_id</code>) */
        broadcastId?: int;
        /** If set, contains the ID of the channel post that started the the <a href="https://corefork.telegram.org/api/threads">comment thread</a> */
        broadcastPost?: int;
    }

    /**
     * Incoming comments in a <a href="https://corefork.telegram.org/api/threads">discussion thread</a> were marked as read<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateReadChannelDiscussionInbox extends VirtualClass<UpdateReadChannelDiscussionInboxArgs> implements UpdateReadChannelDiscussionInboxArgs {
        CONSTRUCTOR_id: 482860628;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadChannelDiscussionInbox";
        flags: number;
        channelId: int;
        topMsgId: MessageIDLike;
        readMaxId: int;
        broadcastId?: int;
        broadcastPost?: int;
        fromReader(reader: Reader): UpdateReadChannelDiscussionInbox;
    }

    export interface UpdateReadChannelDiscussionOutboxArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Supergroup ID</a> */
        channelId: int;
        /** ID of the group message that started the <a href="https://corefork.telegram.org/api/threads">thread</a> */
        topMsgId: MessageIDLike;
        /** Message ID of latest read outgoing message for this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        readMaxId: int;
    }

    /**
     * Outgoing comments in a <a href="https://corefork.telegram.org/api/threads">discussion thread</a> were marked as read<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateReadChannelDiscussionOutbox extends VirtualClass<UpdateReadChannelDiscussionOutboxArgs> implements UpdateReadChannelDiscussionOutboxArgs {
        CONSTRUCTOR_id: 1178116716;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateReadChannelDiscussionOutbox";
        channelId: int;
        topMsgId: MessageIDLike;
        readMaxId: int;
        fromReader(reader: Reader): UpdateReadChannelDiscussionOutbox;
    }

    export interface UpdatePeerBlockedArgs {
        /** The blocked peer */
        peerId: TypePeer;
        /** Whether the peer was blocked or unblocked */
        blocked: Bool;
    }

    /** A peer was blocked<br> */
    export class UpdatePeerBlocked extends VirtualClass<UpdatePeerBlockedArgs> implements UpdatePeerBlockedArgs {
        CONSTRUCTOR_id: 610945826;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePeerBlocked";
        peerId: TypePeer;
        blocked: Bool;
        fromReader(reader: Reader): UpdatePeerBlocked;
    }

    export interface UpdateChannelUserTypingArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Channel ID */
        channelId: int;
        /** <a href="https://corefork.telegram.org/api/threads">Thread ID</a> */
        topMsgId?: MessageIDLike;
        /** The peer that is typing */
        fromId: TypePeer;
        /** Whether the user is typing, sending a media or doing something else */
        action: TypeSendMessageAction;
    }

    /**
     * A user is typing in a <a href="https://corefork.telegram.org/api/channel">supergroup, channel</a> or <a href="https://corefork.telegram.org/api/threads">message thread</a><br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateChannelUserTyping extends VirtualClass<UpdateChannelUserTypingArgs> implements UpdateChannelUserTypingArgs {
        CONSTRUCTOR_id: 1796675352;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelUserTyping";
        flags: number;
        channelId: int;
        topMsgId?: MessageIDLike;
        fromId: TypePeer;
        action: TypeSendMessageAction;
        fromReader(reader: Reader): UpdateChannelUserTyping;
    }

    export interface UpdatePinnedMessagesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the messages were pinned or unpinned */
        pinned?: true;
        /** Peer */
        peer: TypePeer;
        /** Message IDs */
        messages: int[];
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Some messages were pinned in a chat<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdatePinnedMessages extends VirtualClass<UpdatePinnedMessagesArgs> implements UpdatePinnedMessagesArgs {
        CONSTRUCTOR_id: -309990731;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePinnedMessages";
        flags: number;
        pinned?: true;
        peer: TypePeer;
        messages: int[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdatePinnedMessages;
    }

    export interface UpdatePinnedChannelMessagesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the messages were pinned or unpinned */
        pinned?: true;
        /** Channel ID */
        channelId: int;
        /** Messages */
        messages: int[];
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Messages were pinned/unpinned in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdatePinnedChannelMessages extends VirtualClass<UpdatePinnedChannelMessagesArgs> implements UpdatePinnedChannelMessagesArgs {
        CONSTRUCTOR_id: -2054649973;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePinnedChannelMessages";
        flags: number;
        pinned?: true;
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): UpdatePinnedChannelMessages;
    }

    export interface UpdateChatArgs {
        /** Chat ID */
        chatId: int;
    }

    /** A new chat is available<br> */
    export class UpdateChat extends VirtualClass<UpdateChatArgs> implements UpdateChatArgs {
        CONSTRUCTOR_id: 321954198;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChat";
        chatId: int;
        fromReader(reader: Reader): UpdateChat;
    }

    export interface UpdateGroupCallParticipantsArgs {
        /** Group call */
        call: TypeInputGroupCall;
        /** New participant list */
        participants: TypeGroupCallParticipant[];
        /** Version */
        version: int;
    }

    /** The participant list of a certain group call has changed<br> */
    export class UpdateGroupCallParticipants extends VirtualClass<UpdateGroupCallParticipantsArgs> implements UpdateGroupCallParticipantsArgs {
        CONSTRUCTOR_id: -219423922;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateGroupCallParticipants";
        call: TypeInputGroupCall;
        participants: TypeGroupCallParticipant[];
        version: int;
        fromReader(reader: Reader): UpdateGroupCallParticipants;
    }

    export interface UpdateGroupCallArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> where this group call or livestream takes place */
        chatId: int;
        /** Info about the group call or livestream */
        call: TypeGroupCall;
    }

    /**
     * A new groupcall was started<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class UpdateGroupCall extends VirtualClass<UpdateGroupCallArgs> implements UpdateGroupCallArgs {
        CONSTRUCTOR_id: -1537295973;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateGroupCall";
        chatId: int;
        call: TypeGroupCall;
        fromReader(reader: Reader): UpdateGroupCall;
    }

    export interface UpdatePeerHistoryTTLArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The chat */
        peer: TypePeer;
        /** The new Time-To-Live */
        ttlPeriod?: int;
    }

    /** The Time-To-Live for messages sent by the current user in a specific chat has changed<br> */
    export class UpdatePeerHistoryTTL extends VirtualClass<UpdatePeerHistoryTTLArgs> implements UpdatePeerHistoryTTLArgs {
        CONSTRUCTOR_id: -1147422299;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdatePeerHistoryTTL";
        flags: number;
        peer: TypePeer;
        ttlPeriod?: int;
        fromReader(reader: Reader): UpdatePeerHistoryTTL;
    }

    export interface UpdateChatParticipantArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/channel">Chat</a> ID */
        chatId: int;
        /** When did this event occur */
        date: int;
        /** User that triggered the change (inviter, admin that kicked the user, or the even the <strong>user_id</strong> itself) */
        actorId: int;
        /** User that was affected by the change */
        userId: int;
        /** Previous participant info (empty if this participant just joined) */
        prevParticipant?: TypeChatParticipant;
        /** New participant info (empty if this participant just left) */
        newParticipant?: TypeChatParticipant;
        /** The invite that was used to join the group */
        invite?: TypeExportedChatInvite;
        /** New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info. */
        qts: int;
    }

    /**
     * A user has joined or left a specific chat<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateChatParticipant extends VirtualClass<UpdateChatParticipantArgs> implements UpdateChatParticipantArgs {
        CONSTRUCTOR_id: -206342113;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChatParticipant";
        flags: number;
        chatId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: TypeChatParticipant;
        newParticipant?: TypeChatParticipant;
        invite?: TypeExportedChatInvite;
        qts: int;
        fromReader(reader: Reader): UpdateChatParticipant;
    }

    export interface UpdateChannelParticipantArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Channel ID */
        channelId: int;
        /** Date of the event */
        date: int;
        /** User that triggered the change (inviter, admin that kicked the user, or the even the <strong>user_id</strong> itself) */
        actorId: int;
        /** User that was affected by the change */
        userId: int;
        /** Previous participant status */
        prevParticipant?: TypeChannelParticipant;
        /** New participant status */
        newParticipant?: TypeChannelParticipant;
        /** Chat invite used to join the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        invite?: TypeExportedChatInvite;
        /** New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info. */
        qts: int;
    }

    /**
     * A participant has left, joined, was banned or admined in a <a href="https://corefork.telegram.org/api/channel">channel or supergroup</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateChannelParticipant extends VirtualClass<UpdateChannelParticipantArgs> implements UpdateChannelParticipantArgs {
        CONSTRUCTOR_id: 2146218476;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateChannelParticipant";
        flags: number;
        channelId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: TypeChannelParticipant;
        newParticipant?: TypeChannelParticipant;
        invite?: TypeExportedChatInvite;
        qts: int;
        fromReader(reader: Reader): UpdateChannelParticipant;
    }

    export interface UpdateBotStoppedArgs {
        /** The bot ID */
        userId: int;
        /** When did this action occur */
        date: int;
        /** Whether the bot was stopped or started */
        stopped: Bool;
        /** New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info. */
        qts: int;
    }

    /**
     * A bot was stopped or re-started.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdateBotStopped extends VirtualClass<UpdateBotStoppedArgs> implements UpdateBotStoppedArgs {
        CONSTRUCTOR_id: 133777546;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotStopped";
        userId: int;
        date: int;
        stopped: Bool;
        qts: int;
        fromReader(reader: Reader): UpdateBotStopped;
    }

    export interface UpdateGroupCallConnectionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Are these parameters related to the screen capture session currently in progress? */
        presentation?: true;
        /** WebRTC parameters */
        params: TypeDataJSON;
    }

    /** New WebRTC parameters<br> */
    export class UpdateGroupCallConnection extends VirtualClass<UpdateGroupCallConnectionArgs> implements UpdateGroupCallConnectionArgs {
        CONSTRUCTOR_id: 192428418;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateGroupCallConnection";
        flags: number;
        presentation?: true;
        params: TypeDataJSON;
        fromReader(reader: Reader): UpdateGroupCallConnection;
    }

    export interface UpdateBotCommandsArgs {
        /** The affected chat */
        peer: TypePeer;
        /** ID of the bot that changed its command set */
        botId: int;
        /** New bot commands */
        commands: TypeBotCommand[];
    }

    /**
     * The <a href="https://corefork.telegram.org/bots/api#june-25-2021">command set</a> of a certain bot in a certain chat has changed.<br>
     * @link https://corefork.telegram.org/bots/api
     */
    export class UpdateBotCommands extends VirtualClass<UpdateBotCommandsArgs> implements UpdateBotCommandsArgs {
        CONSTRUCTOR_id: -813823885;
        SUBCLASS_OF_ID: 2676568142;
        classType: "constructor";
        className: "UpdateBotCommands";
        peer: TypePeer;
        botId: int;
        commands: TypeBotCommand[];
        fromReader(reader: Reader): UpdateBotCommands;
    }

    /**
     * Too many updates, it is necessary to execute <a href="https://corefork.telegram.org/method/updates.getDifference">updates.getDifference</a>.<br>
     * @link https://corefork.telegram.org/method/updates.getDifference
     * @link https://corefork.telegram.org/api/updates
     */
    export class UpdatesTooLong extends VirtualClass<void> {
        CONSTRUCTOR_id: -484987010;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdatesTooLong";
        fromReader(reader: Reader): UpdatesTooLong;
    }

    export interface UpdateShortMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the message is outgoing */
        out?: true;
        /** Whether we were mentioned in the message */
        mentioned?: true;
        /** Whether there are some <strong>unread</strong> mentions in this message */
        mediaUnread?: true;
        /** If true, the message is a silent message, no notifications should be triggered */
        silent?: true;
        /** The message ID */
        id: int;
        /** The ID of the sender (if <code>outgoing</code> will be the ID of the destination) of the message */
        userId: int;
        /** The message */
        message: string;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS count</a> */
        ptsCount: int;
        /** <a href="https://corefork.telegram.org/api/updates">date</a> */
        date: int;
        /** Info about a forwarded message */
        fwdFrom?: TypeMessageFwdHeader;
        /** Info about the inline bot used to generate this message */
        viaBotId?: int;
        /** Reply and <a href="https://corefork.telegram.org/api/threads">thread</a> information */
        replyTo?: TypeMessageReplyHeader;
        /** <a href="https://corefork.telegram.org/api/entities">Entities</a> for styled text */
        entities?: TypeMessageEntity[];
        /** Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        ttlPeriod?: int;
    }

    /**
     * Info about a message sent to (received from) another user<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/entities
     */
    export class UpdateShortMessage extends VirtualClass<UpdateShortMessageArgs> implements UpdateShortMessageArgs {
        CONSTRUCTOR_id: -84936653;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdateShortMessage";
        flags: number;
        out?: true;
        mentioned?: true;
        mediaUnread?: true;
        silent?: true;
        id: int;
        userId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: TypeMessageReplyHeader;
        entities?: TypeMessageEntity[];
        ttlPeriod?: int;
        fromReader(reader: Reader): UpdateShortMessage;
    }

    export interface UpdateShortChatMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the message is outgoing */
        out?: true;
        /** Whether we were mentioned in this message */
        mentioned?: true;
        /** Whether the message contains some <strong>unread</strong> mentions */
        mediaUnread?: true;
        /** If true, the message is a silent message, no notifications should be triggered */
        silent?: true;
        /** ID of the message */
        id: int;
        /** ID of the sender of the message */
        fromId: int;
        /** ID of the chat where the message was sent */
        chatId: int;
        /** Message */
        message: string;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS count</a> */
        ptsCount: int;
        /** <a href="https://corefork.telegram.org/api/updates">date</a> */
        date: int;
        /** Info about a forwarded message */
        fwdFrom?: TypeMessageFwdHeader;
        /** Info about the inline bot used to generate this message */
        viaBotId?: int;
        /** Reply (thread) information */
        replyTo?: TypeMessageReplyHeader;
        /** <a href="https://corefork.telegram.org/api/entities">Entities</a> for styled text */
        entities?: TypeMessageEntity[];
        /** Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        ttlPeriod?: int;
    }

    /**
     * Shortened constructor containing info on one new incoming text message from a chat<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/entities
     */
    export class UpdateShortChatMessage extends VirtualClass<UpdateShortChatMessageArgs> implements UpdateShortChatMessageArgs {
        CONSTRUCTOR_id: 290961496;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdateShortChatMessage";
        flags: number;
        out?: true;
        mentioned?: true;
        mediaUnread?: true;
        silent?: true;
        id: int;
        fromId: int;
        chatId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: TypeMessageReplyHeader;
        entities?: TypeMessageEntity[];
        ttlPeriod?: int;
        fromReader(reader: Reader): UpdateShortChatMessage;
    }

    export interface UpdateShortArgs {
        /** Update */
        update: TypeUpdate;
        /** Date of event */
        date: int;
    }

    /** Shortened constructor containing info on one update not requiring auxiliary data<br> */
    export class UpdateShort extends VirtualClass<UpdateShortArgs> implements UpdateShortArgs {
        CONSTRUCTOR_id: 2027216577;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdateShort";
        update: TypeUpdate;
        date: int;
        fromReader(reader: Reader): UpdateShort;
    }

    export interface UpdatesCombinedArgs {
        /** List of updates */
        updates: TypeUpdate[];
        /** List of users mentioned in updates */
        users: TypeUser[];
        /** List of chats mentioned in updates */
        chats: TypeChat[];
        /** Current date */
        date: int;
        /** Value <strong>seq</strong> for the earliest update in a group */
        seqStart: int;
        /** Value <strong>seq</strong> for the latest update in a group */
        seq: int;
    }

    /** Constructor for a group of updates.<br> */
    export class UpdatesCombined extends VirtualClass<UpdatesCombinedArgs> implements UpdatesCombinedArgs {
        CONSTRUCTOR_id: 1918567619;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdatesCombined";
        updates: TypeUpdate[];
        users: TypeUser[];
        chats: TypeChat[];
        date: int;
        seqStart: int;
        seq: int;
        fromReader(reader: Reader): UpdatesCombined;
    }

    export interface UpdatesArgs {
        /** List of updates */
        updates: TypeUpdate[];
        /** List of users mentioned in updates */
        users: TypeUser[];
        /** List of chats mentioned in updates */
        chats: TypeChat[];
        /** Current date */
        date: int;
        /** Total number of sent updates */
        seq: int;
    }

    /** Full constructor of updates<br> */
    export class Updates extends VirtualClass<UpdatesArgs> implements UpdatesArgs {
        CONSTRUCTOR_id: 1957577280;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "Updates";
        updates: TypeUpdate[];
        users: TypeUser[];
        chats: TypeChat[];
        date: int;
        seq: int;
        fromReader(reader: Reader): Updates;
    }

    export interface UpdateShortSentMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the message is outgoing */
        out?: true;
        /** ID of the sent message */
        id: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS count</a> */
        ptsCount: int;
        /** <a href="https://corefork.telegram.org/api/updates">date</a> */
        date: int;
        /** Attached media */
        media?: TypeMessageMedia;
        /** <a href="https://corefork.telegram.org/api/entities">Entities</a> for styled text */
        entities?: TypeMessageEntity[];
        /** Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        ttlPeriod?: int;
    }

    /**
     * Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/entities
     */
    export class UpdateShortSentMessage extends VirtualClass<UpdateShortSentMessageArgs> implements UpdateShortSentMessageArgs {
        CONSTRUCTOR_id: -1877614335;
        SUBCLASS_OF_ID: 2331323052;
        classType: "constructor";
        className: "UpdateShortSentMessage";
        flags: number;
        out?: true;
        id: int;
        pts: int;
        ptsCount: int;
        date: int;
        media?: TypeMessageMedia;
        entities?: TypeMessageEntity[];
        ttlPeriod?: int;
        fromReader(reader: Reader): UpdateShortSentMessage;
    }

    export interface DcOptionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the specified IP is an IPv6 address */
        ipv6?: true;
        /** Whether this DC should only be used to <a href="https://corefork.telegram.org/api/files">download or upload files</a> */
        mediaOnly?: true;
        /** Whether this DC only supports connection with <a href="https://corefork.telegram.org/mtproto/mtproto-transports#transport-obfuscation">transport obfuscation</a> */
        tcpoOnly?: true;
        /** Whether this is a <a href="https://corefork.telegram.org/cdn">CDN DC</a>. */
        cdn?: true;
        /** If set, this IP should be used when connecting through a proxy */
        static?: true;
        /** DC ID */
        id: int;
        /** IP address of DC */
        ipAddress: string;
        /** Port */
        port: int;
        /** If the <code>tcpo_only</code> flag is set, specifies the secret to use when connecting using <a href="https://corefork.telegram.org/mtproto/mtproto-transports#transport-obfuscation">transport obfuscation</a> */
        secret?: bytes;
    }

    /**
     * Data centre<br>
     * @link https://corefork.telegram.org/api/files
     * @link https://corefork.telegram.org/mtproto/mtproto-transports
     * @link https://corefork.telegram.org/cdn
     */
    export class DcOption extends VirtualClass<DcOptionArgs> implements DcOptionArgs {
        CONSTRUCTOR_id: 414687501;
        SUBCLASS_OF_ID: 2655248675;
        classType: "constructor";
        className: "DcOption";
        flags: number;
        ipv6?: true;
        mediaOnly?: true;
        tcpoOnly?: true;
        cdn?: true;
        static?: true;
        id: int;
        ipAddress: string;
        port: int;
        secret?: bytes;
        fromReader(reader: Reader): DcOption;
    }

    export interface ConfigArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether phone calls can be used */
        phonecallsEnabled?: true;
        /** Whether the client should use P2P by default for phone calls with contacts */
        defaultP2pContacts?: true;
        /** Whether the client should preload featured stickers */
        preloadFeaturedStickers?: true;
        /** Whether the client should ignore phone <a href="https://corefork.telegram.org/api/entities">entities</a> */
        ignorePhoneEntities?: true;
        /** Whether incoming private messages can be deleted for both participants */
        revokePmInbox?: true;
        /** Indicates that telegram is <em>probably</em> censored by governments/ISPs in the current region */
        blockedMode?: true;
        /** Whether <a href="https://corefork.telegram.org/api/pfs">pfs</a> was used */
        pfsEnabled?: true;
        /** Current date at the server */
        date: int;
        /** Expiration date of this config: when it expires it'll have to be refetched using <a href="https://corefork.telegram.org/method/help.getConfig">help.getConfig</a> */
        expires: int;
        /** Whether we're connected to the test DCs */
        testMode: Bool;
        /** ID of the DC that returned the reply */
        thisDc: int;
        /** DC IP list */
        dcOptions: TypeDcOption[];
        /** Domain name for fetching encrypted DC list from DNS TXT record */
        dcTxtDomainName: string;
        /** Maximum member count for normal <a href="https://corefork.telegram.org/api/channel">groups</a> */
        chatSizeMax: int;
        /** Maximum member count for <a href="https://corefork.telegram.org/api/channel">supergroups</a> */
        megagroupSizeMax: int;
        /** Maximum number of messages that can be forwarded at once using <a href="https://corefork.telegram.org/method/messages.forwardMessages">messages.forwardMessages</a>. */
        forwardedCountMax: int;
        /** The client should <a href="https://corefork.telegram.org/method/account.updateStatus">update its online status</a> every N milliseconds */
        onlineUpdatePeriodMs: int;
        /** Delay before offline status needs to be sent to the server */
        offlineBlurTimeoutMs: int;
        /** Time without any user activity after which it should be treated offline */
        offlineIdleTimeoutMs: int;
        /** If we are offline, but were online from some other client in last <code>online_cloud_timeout_ms</code> milliseconds after we had gone offline, then delay offline notification for <code>notify_cloud_delay_ms</code> milliseconds. */
        onlineCloudTimeoutMs: int;
        /** If we are offline, but online from some other client then delay sending the offline notification for <code>notify_cloud_delay_ms</code> milliseconds. */
        notifyCloudDelayMs: int;
        /** If some other client is online, then delay notification for <code>notification_default_delay_ms</code> milliseconds */
        notifyDefaultDelayMs: int;
        /** Not for client use */
        pushChatPeriodMs: int;
        /** Not for client use */
        pushChatLimit: int;
        /** Maximum count of saved gifs */
        savedGifsLimit: int;
        /** Only messages with age smaller than the one specified can be edited */
        editTimeLimit: int;
        /** Only channel/supergroup messages with age smaller than the specified can be deleted */
        revokeTimeLimit: int;
        /** Only private messages with age smaller than the specified can be deleted */
        revokePmTimeLimit: int;
        /** Exponential decay rate for computing <a href="https://corefork.telegram.org/api/top-rating">top peer rating</a> */
        ratingEDecay: int;
        /** Maximum number of recent stickers */
        stickersRecentLimit: int;
        /** Maximum number of faved stickers */
        stickersFavedLimit: int;
        /** Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read */
        channelsReadMediaPeriod: int;
        /** Temporary <a href="https://corefork.telegram.org/passport">passport</a> sessions */
        tmpSessions?: int;
        /** Maximum count of pinned dialogs */
        pinnedDialogsCountMax: int;
        /** Maximum count of dialogs per folder */
        pinnedInfolderCountMax: int;
        /** Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call */
        callReceiveTimeoutMs: int;
        /** Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused */
        callRingTimeoutMs: int;
        /** VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted */
        callConnectTimeoutMs: int;
        /** If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted */
        callPacketTimeoutMs: int;
        /** The domain to use to parse in-app links.<br>For example t.me indicates that t.me/username links should parsed to @username, t.me/addsticker/name should be parsed to the appropriate stickerset and so on... */
        meUrlPrefix: string;
        /** URL to use to auto-update the current app */
        autoupdateUrlPrefix?: string;
        /** Username of the bot to use to search for GIFs */
        gifSearchUsername?: string;
        /** Username of the bot to use to search for venues */
        venueSearchUsername?: string;
        /** Username of the bot to use for image search */
        imgSearchUsername?: string;
        /** ID of the map provider to use for venues */
        staticMapsProvider?: string;
        /** Maximum length of caption (length in utf8 codepoints) */
        captionLengthMax: int;
        /** Maximum length of messages (length in utf8 codepoints) */
        messageLengthMax: int;
        /** DC ID to use to download <a href="https://corefork.telegram.org/api/files">webfiles</a> */
        webfileDcId: int;
        /** Suggested language code */
        suggestedLangCode?: string;
        /** Language pack version */
        langPackVersion?: int;
        /** Basic language pack version */
        baseLangPackVersion?: int;
    }

    /**
     * Current configuration<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/pfs
     * @link https://corefork.telegram.org/method/help.getConfig
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/method/messages.forwardMessages
     * @link https://corefork.telegram.org/method/account.updateStatus
     * @link https://corefork.telegram.org/api/top-rating
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/api/files
     */
    export class Config extends VirtualClass<ConfigArgs> implements ConfigArgs {
        CONSTRUCTOR_id: 856375399;
        SUBCLASS_OF_ID: 3542493770;
        classType: "constructor";
        className: "Config";
        flags: number;
        phonecallsEnabled?: true;
        defaultP2pContacts?: true;
        preloadFeaturedStickers?: true;
        ignorePhoneEntities?: true;
        revokePmInbox?: true;
        blockedMode?: true;
        pfsEnabled?: true;
        date: int;
        expires: int;
        testMode: Bool;
        thisDc: int;
        dcOptions: TypeDcOption[];
        dcTxtDomainName: string;
        chatSizeMax: int;
        megagroupSizeMax: int;
        forwardedCountMax: int;
        onlineUpdatePeriodMs: int;
        offlineBlurTimeoutMs: int;
        offlineIdleTimeoutMs: int;
        onlineCloudTimeoutMs: int;
        notifyCloudDelayMs: int;
        notifyDefaultDelayMs: int;
        pushChatPeriodMs: int;
        pushChatLimit: int;
        savedGifsLimit: int;
        editTimeLimit: int;
        revokeTimeLimit: int;
        revokePmTimeLimit: int;
        ratingEDecay: int;
        stickersRecentLimit: int;
        stickersFavedLimit: int;
        channelsReadMediaPeriod: int;
        tmpSessions?: int;
        pinnedDialogsCountMax: int;
        pinnedInfolderCountMax: int;
        callReceiveTimeoutMs: int;
        callRingTimeoutMs: int;
        callConnectTimeoutMs: int;
        callPacketTimeoutMs: int;
        meUrlPrefix: string;
        autoupdateUrlPrefix?: string;
        gifSearchUsername?: string;
        venueSearchUsername?: string;
        imgSearchUsername?: string;
        staticMapsProvider?: string;
        captionLengthMax: int;
        messageLengthMax: int;
        webfileDcId: int;
        suggestedLangCode?: string;
        langPackVersion?: int;
        baseLangPackVersion?: int;
        fromReader(reader: Reader): Config;
    }

    export interface NearestDcArgs {
        /** Country code determined by geo-ip */
        country: string;
        /** Number of current data centre */
        thisDc: int;
        /** Number of nearest data centre */
        nearestDc: int;
    }

    /** Nearest data centre, according to geo-ip.<br> */
    export class NearestDc extends VirtualClass<NearestDcArgs> implements NearestDcArgs {
        CONSTRUCTOR_id: -1910892683;
        SUBCLASS_OF_ID: 947323999;
        classType: "constructor";
        className: "NearestDc";
        country: string;
        thisDc: int;
        nearestDc: int;
        fromReader(reader: Reader): NearestDc;
    }

    export interface EncryptedChatEmptyArgs {
        /** Chat ID */
        id: int;
    }

    /** Empty constructor.<br> */
    export class EncryptedChatEmpty extends VirtualClass<EncryptedChatEmptyArgs> implements EncryptedChatEmptyArgs {
        CONSTRUCTOR_id: -1417756512;
        SUBCLASS_OF_ID: 1831379834;
        classType: "constructor";
        className: "EncryptedChatEmpty";
        id: int;
        fromReader(reader: Reader): EncryptedChatEmpty;
    }

    export interface EncryptedChatWaitingArgs {
        /** Chat ID */
        id: int;
        /** Checking sum depending on user ID */
        accessHash: long;
        /** Date of chat creation */
        date: int;
        /** Chat creator ID */
        adminId: int;
        /** ID of second chat participant */
        participantId: int;
    }

    /** Chat waiting for approval of second participant.<br> */
    export class EncryptedChatWaiting extends VirtualClass<EncryptedChatWaitingArgs> implements EncryptedChatWaitingArgs {
        CONSTRUCTOR_id: 1006044124;
        SUBCLASS_OF_ID: 1831379834;
        classType: "constructor";
        className: "EncryptedChatWaiting";
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        fromReader(reader: Reader): EncryptedChatWaiting;
    }

    export interface EncryptedChatRequestedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Chat ID */
        id: int;
        /** Check sum depending on user ID */
        accessHash: long;
        /** Chat creation date */
        date: int;
        /** Chat creator ID */
        adminId: int;
        /** ID of second chat participant */
        participantId: int;
        /** <code>A = g ^ a mod p</code>, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> */
        gA: bytes;
    }

    /**
     * Request to create an encrypted chat.<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class EncryptedChatRequested extends VirtualClass<EncryptedChatRequestedArgs> implements EncryptedChatRequestedArgs {
        CONSTRUCTOR_id: 1651608194;
        SUBCLASS_OF_ID: 1831379834;
        classType: "constructor";
        className: "EncryptedChatRequested";
        flags: number;
        folderId?: int;
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gA: bytes;
        fromReader(reader: Reader): EncryptedChatRequested;
    }

    export interface EncryptedChatArgs {
        /** Chat ID */
        id: int;
        /** Check sum dependant on the user ID */
        accessHash: long;
        /** Date chat was created */
        date: int;
        /** Chat creator ID */
        adminId: int;
        /** ID of the second chat participant */
        participantId: int;
        /** <code>B = g ^ b mod p</code>, if the currently authorized user is the chat's creator,<br>or <code>A = g ^ a mod p</code> otherwise<br>See <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> for more info */
        gAOrB: bytes;
        /** 64-bit fingerprint of received key */
        keyFingerprint: long;
    }

    /** Encrypted chat<br> */
    export class EncryptedChat extends VirtualClass<EncryptedChatArgs> implements EncryptedChatArgs {
        CONSTRUCTOR_id: -94974410;
        SUBCLASS_OF_ID: 1831379834;
        classType: "constructor";
        className: "EncryptedChat";
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
        fromReader(reader: Reader): EncryptedChat;
    }

    export interface EncryptedChatDiscardedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether both users of this secret chat should also remove all of its messages */
        historyDeleted?: true;
        /** Chat ID */
        id: int;
    }

    /** Discarded or deleted chat.<br> */
    export class EncryptedChatDiscarded extends VirtualClass<EncryptedChatDiscardedArgs> implements EncryptedChatDiscardedArgs {
        CONSTRUCTOR_id: 505183301;
        SUBCLASS_OF_ID: 1831379834;
        classType: "constructor";
        className: "EncryptedChatDiscarded";
        flags: number;
        historyDeleted?: true;
        id: int;
        fromReader(reader: Reader): EncryptedChatDiscarded;
    }

    export interface InputEncryptedChatArgs {
        /** Chat ID */
        chatId: int;
        /** Checking sum from constructor <a href="https://corefork.telegram.org/constructor/encryptedChat">encryptedChat</a>, <a href="https://corefork.telegram.org/constructor/encryptedChatWaiting">encryptedChatWaiting</a> or <a href="https://corefork.telegram.org/constructor/encryptedChatRequested">encryptedChatRequested</a> */
        accessHash: long;
    }

    /**
     * Creates an encrypted chat.<br>
     * @link https://corefork.telegram.org/constructor/encryptedChat
     * @link https://corefork.telegram.org/constructor/encryptedChatWaiting
     * @link https://corefork.telegram.org/constructor/encryptedChatRequested
     */
    export class InputEncryptedChat extends VirtualClass<InputEncryptedChatArgs> implements InputEncryptedChatArgs {
        CONSTRUCTOR_id: -247351839;
        SUBCLASS_OF_ID: 1819674304;
        classType: "constructor";
        className: "InputEncryptedChat";
        chatId: int;
        accessHash: long;
        fromReader(reader: Reader): InputEncryptedChat;
    }

    /** Empty constructor, unexisitng file.<br> */
    export class EncryptedFileEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1038136962;
        SUBCLASS_OF_ID: 2217371584;
        classType: "constructor";
        className: "EncryptedFileEmpty";
        fromReader(reader: Reader): EncryptedFileEmpty;
    }

    export interface EncryptedFileArgs {
        /** File ID */
        id: long;
        /** Checking sum depending on user ID */
        accessHash: long;
        /** File size in bytes */
        size: int;
        /** Number of data centre */
        dcId: int;
        /** 32-bit fingerprint of key used for file encryption */
        keyFingerprint: int;
    }

    /** Encrypted file.<br> */
    export class EncryptedFile extends VirtualClass<EncryptedFileArgs> implements EncryptedFileArgs {
        CONSTRUCTOR_id: 1248893260;
        SUBCLASS_OF_ID: 2217371584;
        classType: "constructor";
        className: "EncryptedFile";
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        keyFingerprint: int;
        fromReader(reader: Reader): EncryptedFile;
    }

    /** Empty constructor.<br> */
    export class InputEncryptedFileEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 406307684;
        SUBCLASS_OF_ID: 2239021690;
        classType: "constructor";
        className: "InputEncryptedFileEmpty";
        fromReader(reader: Reader): InputEncryptedFileEmpty;
    }

    export interface InputEncryptedFileUploadedArgs {
        /** Random file ID created by clien */
        id: long;
        /** Number of saved parts */
        parts: int;
        /** In case <a href="https://en.wikipedia.org/wiki/MD5">md5-HASH</a> of the (already encrypted) file was transmitted, file content will be checked prior to use */
        md5Checksum: string;
        /** 32-bit fingerprint of the key used to encrypt a file */
        keyFingerprint: int;
    }

    /** Sets new encrypted file saved by parts using upload.saveFilePart method.<br> */
    export class InputEncryptedFileUploaded extends VirtualClass<InputEncryptedFileUploadedArgs> implements InputEncryptedFileUploadedArgs {
        CONSTRUCTOR_id: 1690108678;
        SUBCLASS_OF_ID: 2239021690;
        classType: "constructor";
        className: "InputEncryptedFileUploaded";
        id: long;
        parts: int;
        md5Checksum: string;
        keyFingerprint: int;
        fromReader(reader: Reader): InputEncryptedFileUploaded;
    }

    export interface InputEncryptedFileArgs {
        /** File ID, value of <strong>id</strong> parameter from <a href="https://corefork.telegram.org/constructor/encryptedFile">encryptedFile</a> */
        id: long;
        /** Checking sum, value of <strong>access_hash</strong> parameter from <a href="https://corefork.telegram.org/constructor/encryptedFile">encryptedFile</a> */
        accessHash: long;
    }

    /**
     * Sets forwarded encrypted file for attachment.<br>
     * @link https://corefork.telegram.org/constructor/encryptedFile
     */
    export class InputEncryptedFile extends VirtualClass<InputEncryptedFileArgs> implements InputEncryptedFileArgs {
        CONSTRUCTOR_id: 1511503333;
        SUBCLASS_OF_ID: 2239021690;
        classType: "constructor";
        className: "InputEncryptedFile";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputEncryptedFile;
    }

    export interface InputEncryptedFileBigUploadedArgs {
        /** Random file id, created by the client */
        id: long;
        /** Number of saved parts */
        parts: int;
        /** 32-bit imprint of the key used to encrypt the file */
        keyFingerprint: int;
    }

    /**
     * Assigns a new big encrypted file (over 10Mb in size), saved in parts using the method <a href="https://corefork.telegram.org/method/upload.saveBigFilePart">upload.saveBigFilePart</a>.<br>
     * @link https://corefork.telegram.org/method/upload.saveBigFilePart
     */
    export class InputEncryptedFileBigUploaded extends VirtualClass<InputEncryptedFileBigUploadedArgs> implements InputEncryptedFileBigUploadedArgs {
        CONSTRUCTOR_id: 767652808;
        SUBCLASS_OF_ID: 2239021690;
        classType: "constructor";
        className: "InputEncryptedFileBigUploaded";
        id: long;
        parts: int;
        keyFingerprint: int;
        fromReader(reader: Reader): InputEncryptedFileBigUploaded;
    }

    export interface EncryptedMessageArgs {
        /** Random message ID, assigned by the author of message */
        randomId: long;
        /** ID of encrypted chat */
        chatId: int;
        /** Date of sending */
        date: int;
        /** TL-serialising of <a href="https://corefork.telegram.org/type/DecryptedMessage">DecryptedMessage</a> type, encrypted with the key creatied at stage of chat initialization */
        bytes: bytes;
        /** Attached encrypted file */
        file: TypeEncryptedFile;
    }

    /**
     * Encrypted message.<br>
     * @link https://corefork.telegram.org/type/DecryptedMessage
     */
    export class EncryptedMessage extends VirtualClass<EncryptedMessageArgs> implements EncryptedMessageArgs {
        CONSTRUCTOR_id: -317144808;
        SUBCLASS_OF_ID: 597634641;
        classType: "constructor";
        className: "EncryptedMessage";
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        file: TypeEncryptedFile;
        fromReader(reader: Reader): EncryptedMessage;
    }

    export interface EncryptedMessageServiceArgs {
        /** Random message ID, assigned by the author of message */
        randomId: long;
        /** ID of encrypted chat */
        chatId: int;
        /** Date of sending */
        date: int;
        /** TL-serialising of <a href="https://corefork.telegram.org/type/DecryptedMessage">DecryptedMessage</a> type, encrypted with the key creatied at stage of chat initialization */
        bytes: bytes;
    }

    /**
     * Encrypted service message<br>
     * @link https://corefork.telegram.org/type/DecryptedMessage
     */
    export class EncryptedMessageService extends VirtualClass<EncryptedMessageServiceArgs> implements EncryptedMessageServiceArgs {
        CONSTRUCTOR_id: 594758406;
        SUBCLASS_OF_ID: 597634641;
        classType: "constructor";
        className: "EncryptedMessageService";
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        fromReader(reader: Reader): EncryptedMessageService;
    }

    /** Empty constructor.<br> */
    export class InputDocumentEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1928391342;
        SUBCLASS_OF_ID: 4081048424;
        classType: "constructor";
        className: "InputDocumentEmpty";
        fromReader(reader: Reader): InputDocumentEmpty;
    }

    export interface InputDocumentArgs {
        /** Document ID */
        id: long;
        /** <strong>access_hash</strong> parameter from the <a href="https://corefork.telegram.org/constructor/document">document</a> constructor */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
    }

    /**
     * Defines a video for subsequent interaction.<br>
     * @link https://corefork.telegram.org/constructor/document
     * @link https://corefork.telegram.org/api/file_reference
     */
    export class InputDocument extends VirtualClass<InputDocumentArgs> implements InputDocumentArgs {
        CONSTRUCTOR_id: 448771445;
        SUBCLASS_OF_ID: 4081048424;
        classType: "constructor";
        className: "InputDocument";
        id: long;
        accessHash: long;
        fileReference: bytes;
        fromReader(reader: Reader): InputDocument;
    }

    export interface DocumentEmptyArgs {
        /** Document ID or <code>0</code> */
        id: long;
    }

    /** Empty constructor, document doesn't exist.<br> */
    export class DocumentEmpty extends VirtualClass<DocumentEmptyArgs> implements DocumentEmptyArgs {
        CONSTRUCTOR_id: 922273905;
        SUBCLASS_OF_ID: 555739168;
        classType: "constructor";
        className: "DocumentEmpty";
        id: long;
        fromReader(reader: Reader): DocumentEmpty;
    }

    export interface DocumentArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Document ID */
        id: long;
        /** Check sum, dependant on document ID */
        accessHash: long;
        /** <a href="https://corefork.telegram.org/api/file_reference">File reference</a> */
        fileReference: bytes;
        /** Creation date */
        date: int;
        /** MIME type */
        mimeType: string;
        /** Size */
        size: int;
        /** Thumbnails */
        thumbs?: TypePhotoSize[];
        /** Video thumbnails */
        videoThumbs?: TypeVideoSize[];
        /** DC ID */
        dcId: int;
        /** Attributes */
        attributes: TypeDocumentAttribute[];
    }

    /**
     * Document<br>
     * @link https://corefork.telegram.org/api/file_reference
     */
    export class Document extends VirtualClass<DocumentArgs> implements DocumentArgs {
        CONSTRUCTOR_id: 512177195;
        SUBCLASS_OF_ID: 555739168;
        classType: "constructor";
        className: "Document";
        flags: number;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        mimeType: string;
        size: int;
        thumbs?: TypePhotoSize[];
        videoThumbs?: TypeVideoSize[];
        dcId: int;
        attributes: TypeDocumentAttribute[];
        fromReader(reader: Reader): Document;
    }

    export interface NotifyPeerArgs {
        /** user or group */
        peer: TypePeer;
    }

    /** Notifications generated by a certain user or group.<br> */
    export class NotifyPeer extends VirtualClass<NotifyPeerArgs> implements NotifyPeerArgs {
        CONSTRUCTOR_id: -1613493288;
        SUBCLASS_OF_ID: 3756548142;
        classType: "constructor";
        className: "NotifyPeer";
        peer: TypePeer;
        fromReader(reader: Reader): NotifyPeer;
    }

    /** Notifications generated by all users.<br> */
    export class NotifyUsers extends VirtualClass<void> {
        CONSTRUCTOR_id: -1261946036;
        SUBCLASS_OF_ID: 3756548142;
        classType: "constructor";
        className: "NotifyUsers";
        fromReader(reader: Reader): NotifyUsers;
    }

    /** Notifications generated by all groups.<br> */
    export class NotifyChats extends VirtualClass<void> {
        CONSTRUCTOR_id: -1073230141;
        SUBCLASS_OF_ID: 3756548142;
        classType: "constructor";
        className: "NotifyChats";
        fromReader(reader: Reader): NotifyChats;
    }

    /** Channel notification settings<br> */
    export class NotifyBroadcasts extends VirtualClass<void> {
        CONSTRUCTOR_id: -703403793;
        SUBCLASS_OF_ID: 3756548142;
        classType: "constructor";
        className: "NotifyBroadcasts";
        fromReader(reader: Reader): NotifyBroadcasts;
    }

    /** User is typing.<br> */
    export class SendMessageTypingAction extends VirtualClass<void> {
        CONSTRUCTOR_id: 381645902;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageTypingAction";
        fromReader(reader: Reader): SendMessageTypingAction;
    }

    /** Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.<br> */
    export class SendMessageCancelAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -44119819;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageCancelAction";
        fromReader(reader: Reader): SendMessageCancelAction;
    }

    /** User is recording a video.<br> */
    export class SendMessageRecordVideoAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -1584933265;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageRecordVideoAction";
        fromReader(reader: Reader): SendMessageRecordVideoAction;
    }

    export interface SendMessageUploadVideoActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** User is uploading a video.<br> */
    export class SendMessageUploadVideoAction extends VirtualClass<SendMessageUploadVideoActionArgs> implements SendMessageUploadVideoActionArgs {
        CONSTRUCTOR_id: -378127636;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageUploadVideoAction";
        progress: int;
        fromReader(reader: Reader): SendMessageUploadVideoAction;
    }

    /** User is recording a voice message.<br> */
    export class SendMessageRecordAudioAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -718310409;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageRecordAudioAction";
        fromReader(reader: Reader): SendMessageRecordAudioAction;
    }

    export interface SendMessageUploadAudioActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** User is uploading a voice message.<br> */
    export class SendMessageUploadAudioAction extends VirtualClass<SendMessageUploadAudioActionArgs> implements SendMessageUploadAudioActionArgs {
        CONSTRUCTOR_id: -212740181;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageUploadAudioAction";
        progress: int;
        fromReader(reader: Reader): SendMessageUploadAudioAction;
    }

    export interface SendMessageUploadPhotoActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** User is uploading a photo.<br> */
    export class SendMessageUploadPhotoAction extends VirtualClass<SendMessageUploadPhotoActionArgs> implements SendMessageUploadPhotoActionArgs {
        CONSTRUCTOR_id: -774682074;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageUploadPhotoAction";
        progress: int;
        fromReader(reader: Reader): SendMessageUploadPhotoAction;
    }

    export interface SendMessageUploadDocumentActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** User is uploading a file.<br> */
    export class SendMessageUploadDocumentAction extends VirtualClass<SendMessageUploadDocumentActionArgs> implements SendMessageUploadDocumentActionArgs {
        CONSTRUCTOR_id: -1441998364;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageUploadDocumentAction";
        progress: int;
        fromReader(reader: Reader): SendMessageUploadDocumentAction;
    }

    /** User is selecting a location to share.<br> */
    export class SendMessageGeoLocationAction extends VirtualClass<void> {
        CONSTRUCTOR_id: 393186209;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageGeoLocationAction";
        fromReader(reader: Reader): SendMessageGeoLocationAction;
    }

    /** User is selecting a contact to share.<br> */
    export class SendMessageChooseContactAction extends VirtualClass<void> {
        CONSTRUCTOR_id: 1653390447;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageChooseContactAction";
        fromReader(reader: Reader): SendMessageChooseContactAction;
    }

    /** User is playing a game<br> */
    export class SendMessageGamePlayAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -580219064;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageGamePlayAction";
        fromReader(reader: Reader): SendMessageGamePlayAction;
    }

    /** User is recording a round video to share<br> */
    export class SendMessageRecordRoundAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -1997373508;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageRecordRoundAction";
        fromReader(reader: Reader): SendMessageRecordRoundAction;
    }

    export interface SendMessageUploadRoundActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** User is uploading a round video<br> */
    export class SendMessageUploadRoundAction extends VirtualClass<SendMessageUploadRoundActionArgs> implements SendMessageUploadRoundActionArgs {
        CONSTRUCTOR_id: 608050278;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageUploadRoundAction";
        progress: int;
        fromReader(reader: Reader): SendMessageUploadRoundAction;
    }

    /** User is currently speaking in the group call<br> */
    export class SpeakingInGroupCallAction extends VirtualClass<void> {
        CONSTRUCTOR_id: -651419003;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SpeakingInGroupCallAction";
        fromReader(reader: Reader): SpeakingInGroupCallAction;
    }

    export interface SendMessageHistoryImportActionArgs {
        /** Progress percentage */
        progress: int;
    }

    /** Chat history is being imported<br> */
    export class SendMessageHistoryImportAction extends VirtualClass<SendMessageHistoryImportActionArgs> implements SendMessageHistoryImportActionArgs {
        CONSTRUCTOR_id: -606432698;
        SUBCLASS_OF_ID: 548588577;
        classType: "constructor";
        className: "SendMessageHistoryImportAction";
        progress: int;
        fromReader(reader: Reader): SendMessageHistoryImportAction;
    }

    /** Whether we can see the exact last online timestamp of the user<br> */
    export class InputPrivacyKeyStatusTimestamp extends VirtualClass<void> {
        CONSTRUCTOR_id: 1335282456;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyStatusTimestamp";
        fromReader(reader: Reader): InputPrivacyKeyStatusTimestamp;
    }

    /** Whether the user can be invited to chats<br> */
    export class InputPrivacyKeyChatInvite extends VirtualClass<void> {
        CONSTRUCTOR_id: -1107622874;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyChatInvite";
        fromReader(reader: Reader): InputPrivacyKeyChatInvite;
    }

    /** Whether the user will accept phone calls<br> */
    export class InputPrivacyKeyPhoneCall extends VirtualClass<void> {
        CONSTRUCTOR_id: -88417185;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyPhoneCall";
        fromReader(reader: Reader): InputPrivacyKeyPhoneCall;
    }

    /** Whether the user allows P2P communication during VoIP calls<br> */
    export class InputPrivacyKeyPhoneP2P extends VirtualClass<void> {
        CONSTRUCTOR_id: -610373422;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyPhoneP2P";
        fromReader(reader: Reader): InputPrivacyKeyPhoneP2P;
    }

    /** Whether messages forwarded from this user will be <a href="https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding">anonymous</a><br> */
    export class InputPrivacyKeyForwards extends VirtualClass<void> {
        CONSTRUCTOR_id: -1529000952;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyForwards";
        fromReader(reader: Reader): InputPrivacyKeyForwards;
    }

    /** Whether people will be able to see the user's profile picture<br> */
    export class InputPrivacyKeyProfilePhoto extends VirtualClass<void> {
        CONSTRUCTOR_id: 1461304012;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyProfilePhoto";
        fromReader(reader: Reader): InputPrivacyKeyProfilePhoto;
    }

    /** Whether people will be able to see the user's phone number<br> */
    export class InputPrivacyKeyPhoneNumber extends VirtualClass<void> {
        CONSTRUCTOR_id: 55761658;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyPhoneNumber";
        fromReader(reader: Reader): InputPrivacyKeyPhoneNumber;
    }

    /** Whether people can add you to their contact list by your phone number<br> */
    export class InputPrivacyKeyAddedByPhone extends VirtualClass<void> {
        CONSTRUCTOR_id: -786326563;
        SUBCLASS_OF_ID: 87435256;
        classType: "constructor";
        className: "InputPrivacyKeyAddedByPhone";
        fromReader(reader: Reader): InputPrivacyKeyAddedByPhone;
    }

    /** Whether we can see the last online timestamp<br> */
    export class PrivacyKeyStatusTimestamp extends VirtualClass<void> {
        CONSTRUCTOR_id: -1137792208;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyStatusTimestamp";
        fromReader(reader: Reader): PrivacyKeyStatusTimestamp;
    }

    /** Whether the user can be invited to chats<br> */
    export class PrivacyKeyChatInvite extends VirtualClass<void> {
        CONSTRUCTOR_id: 1343122938;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyChatInvite";
        fromReader(reader: Reader): PrivacyKeyChatInvite;
    }

    /** Whether the user accepts phone calls<br> */
    export class PrivacyKeyPhoneCall extends VirtualClass<void> {
        CONSTRUCTOR_id: 1030105979;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyPhoneCall";
        fromReader(reader: Reader): PrivacyKeyPhoneCall;
    }

    /** Whether P2P connections in phone calls are allowed<br> */
    export class PrivacyKeyPhoneP2P extends VirtualClass<void> {
        CONSTRUCTOR_id: 961092808;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyPhoneP2P";
        fromReader(reader: Reader): PrivacyKeyPhoneP2P;
    }

    /** Whether messages forwarded from the user will be <a href="https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding">anonymously forwarded</a><br> */
    export class PrivacyKeyForwards extends VirtualClass<void> {
        CONSTRUCTOR_id: 1777096355;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyForwards";
        fromReader(reader: Reader): PrivacyKeyForwards;
    }

    /** Whether the profile picture of the user is visible<br> */
    export class PrivacyKeyProfilePhoto extends VirtualClass<void> {
        CONSTRUCTOR_id: -1777000467;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyProfilePhoto";
        fromReader(reader: Reader): PrivacyKeyProfilePhoto;
    }

    /** Whether the user allows us to see his phone number<br> */
    export class PrivacyKeyPhoneNumber extends VirtualClass<void> {
        CONSTRUCTOR_id: -778378131;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyPhoneNumber";
        fromReader(reader: Reader): PrivacyKeyPhoneNumber;
    }

    /** Whether people can add you to their contact list by your phone number<br> */
    export class PrivacyKeyAddedByPhone extends VirtualClass<void> {
        CONSTRUCTOR_id: 1124062251;
        SUBCLASS_OF_ID: 2185646531;
        classType: "constructor";
        className: "PrivacyKeyAddedByPhone";
        fromReader(reader: Reader): PrivacyKeyAddedByPhone;
    }

    /** Allow only contacts<br> */
    export class InputPrivacyValueAllowContacts extends VirtualClass<void> {
        CONSTRUCTOR_id: 218751099;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueAllowContacts";
        fromReader(reader: Reader): InputPrivacyValueAllowContacts;
    }

    /** Allow all users<br> */
    export class InputPrivacyValueAllowAll extends VirtualClass<void> {
        CONSTRUCTOR_id: 407582158;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueAllowAll";
        fromReader(reader: Reader): InputPrivacyValueAllowAll;
    }

    export interface InputPrivacyValueAllowUsersArgs {
        /** Allowed users */
        users: TypeInputUser[];
    }

    /** Allow only certain users<br> */
    export class InputPrivacyValueAllowUsers extends VirtualClass<InputPrivacyValueAllowUsersArgs> implements InputPrivacyValueAllowUsersArgs {
        CONSTRUCTOR_id: 320652927;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueAllowUsers";
        users: TypeInputUser[];
        fromReader(reader: Reader): InputPrivacyValueAllowUsers;
    }

    /** Disallow only contacts<br> */
    export class InputPrivacyValueDisallowContacts extends VirtualClass<void> {
        CONSTRUCTOR_id: 195371015;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueDisallowContacts";
        fromReader(reader: Reader): InputPrivacyValueDisallowContacts;
    }

    /** Disallow all<br> */
    export class InputPrivacyValueDisallowAll extends VirtualClass<void> {
        CONSTRUCTOR_id: -697604407;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueDisallowAll";
        fromReader(reader: Reader): InputPrivacyValueDisallowAll;
    }

    export interface InputPrivacyValueDisallowUsersArgs {
        /** Users to disallow */
        users: TypeInputUser[];
    }

    /** Disallow only certain users<br> */
    export class InputPrivacyValueDisallowUsers extends VirtualClass<InputPrivacyValueDisallowUsersArgs> implements InputPrivacyValueDisallowUsersArgs {
        CONSTRUCTOR_id: -1877932953;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueDisallowUsers";
        users: TypeInputUser[];
        fromReader(reader: Reader): InputPrivacyValueDisallowUsers;
    }

    export interface InputPrivacyValueAllowChatParticipantsArgs {
        /** Allowed chat IDs */
        chats: int[];
    }

    /** Allow only participants of certain chats<br> */
    export class InputPrivacyValueAllowChatParticipants extends VirtualClass<InputPrivacyValueAllowChatParticipantsArgs> implements InputPrivacyValueAllowChatParticipantsArgs {
        CONSTRUCTOR_id: 1283572154;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueAllowChatParticipants";
        chats: int[];
        fromReader(reader: Reader): InputPrivacyValueAllowChatParticipants;
    }

    export interface InputPrivacyValueDisallowChatParticipantsArgs {
        /** Disallowed chat IDs */
        chats: int[];
    }

    /** Disallow only participants of certain chats<br> */
    export class InputPrivacyValueDisallowChatParticipants extends VirtualClass<InputPrivacyValueDisallowChatParticipantsArgs> implements InputPrivacyValueDisallowChatParticipantsArgs {
        CONSTRUCTOR_id: -668769361;
        SUBCLASS_OF_ID: 1513843490;
        classType: "constructor";
        className: "InputPrivacyValueDisallowChatParticipants";
        chats: int[];
        fromReader(reader: Reader): InputPrivacyValueDisallowChatParticipants;
    }

    /** Allow all contacts<br> */
    export class PrivacyValueAllowContacts extends VirtualClass<void> {
        CONSTRUCTOR_id: -123988;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueAllowContacts";
        fromReader(reader: Reader): PrivacyValueAllowContacts;
    }

    /** Allow all users<br> */
    export class PrivacyValueAllowAll extends VirtualClass<void> {
        CONSTRUCTOR_id: 1698855810;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueAllowAll";
        fromReader(reader: Reader): PrivacyValueAllowAll;
    }

    export interface PrivacyValueAllowUsersArgs {
        /** Allowed users */
        users: int[];
    }

    /** Allow only certain users<br> */
    export class PrivacyValueAllowUsers extends VirtualClass<PrivacyValueAllowUsersArgs> implements PrivacyValueAllowUsersArgs {
        CONSTRUCTOR_id: 1297858060;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueAllowUsers";
        users: int[];
        fromReader(reader: Reader): PrivacyValueAllowUsers;
    }

    /** Disallow only contacts<br> */
    export class PrivacyValueDisallowContacts extends VirtualClass<void> {
        CONSTRUCTOR_id: -125240806;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueDisallowContacts";
        fromReader(reader: Reader): PrivacyValueDisallowContacts;
    }

    /** Disallow all users<br> */
    export class PrivacyValueDisallowAll extends VirtualClass<void> {
        CONSTRUCTOR_id: -1955338397;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueDisallowAll";
        fromReader(reader: Reader): PrivacyValueDisallowAll;
    }

    export interface PrivacyValueDisallowUsersArgs {
        /** Disallowed users */
        users: int[];
    }

    /** Disallow only certain users<br> */
    export class PrivacyValueDisallowUsers extends VirtualClass<PrivacyValueDisallowUsersArgs> implements PrivacyValueDisallowUsersArgs {
        CONSTRUCTOR_id: 209668535;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueDisallowUsers";
        users: int[];
        fromReader(reader: Reader): PrivacyValueDisallowUsers;
    }

    export interface PrivacyValueAllowChatParticipantsArgs {
        /** Allowed chats */
        chats: int[];
    }

    /** Allow all participants of certain chats<br> */
    export class PrivacyValueAllowChatParticipants extends VirtualClass<PrivacyValueAllowChatParticipantsArgs> implements PrivacyValueAllowChatParticipantsArgs {
        CONSTRUCTOR_id: 415136107;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueAllowChatParticipants";
        chats: int[];
        fromReader(reader: Reader): PrivacyValueAllowChatParticipants;
    }

    export interface PrivacyValueDisallowChatParticipantsArgs {
        /** Disallowed chats */
        chats: int[];
    }

    /** Disallow only participants of certain chats<br> */
    export class PrivacyValueDisallowChatParticipants extends VirtualClass<PrivacyValueDisallowChatParticipantsArgs> implements PrivacyValueDisallowChatParticipantsArgs {
        CONSTRUCTOR_id: -1397881200;
        SUBCLASS_OF_ID: 3954700912;
        classType: "constructor";
        className: "PrivacyValueDisallowChatParticipants";
        chats: int[];
        fromReader(reader: Reader): PrivacyValueDisallowChatParticipants;
    }

    export interface AccountDaysTTLArgs {
        /** This account will self-destruct in the specified number of days */
        days: int;
    }

    /** Time to live in days of the current account<br> */
    export class AccountDaysTTL extends VirtualClass<AccountDaysTTLArgs> implements AccountDaysTTLArgs {
        CONSTRUCTOR_id: -1194283041;
        SUBCLASS_OF_ID: 3131284872;
        classType: "constructor";
        className: "AccountDaysTTL";
        days: int;
        fromReader(reader: Reader): AccountDaysTTL;
    }

    export interface DocumentAttributeImageSizeArgs {
        /** Width of image */
        w: int;
        /** Height of image */
        h: int;
    }

    /** Defines the width and height of an image uploaded as document<br> */
    export class DocumentAttributeImageSize extends VirtualClass<DocumentAttributeImageSizeArgs> implements DocumentAttributeImageSizeArgs {
        CONSTRUCTOR_id: 1815593308;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeImageSize";
        w: int;
        h: int;
        fromReader(reader: Reader): DocumentAttributeImageSize;
    }

    /** Defines an animated GIF<br> */
    export class DocumentAttributeAnimated extends VirtualClass<void> {
        CONSTRUCTOR_id: 297109817;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeAnimated";
        fromReader(reader: Reader): DocumentAttributeAnimated;
    }

    export interface DocumentAttributeStickerArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a mask sticker */
        mask?: true;
        /** Alternative emoji representation of sticker */
        alt: string;
        /** Associated stickerset */
        stickerset: TypeInputStickerSet;
        /** Mask coordinates (if this is a mask sticker, attached to a photo) */
        maskCoords?: TypeMaskCoords;
    }

    /** Defines a sticker<br> */
    export class DocumentAttributeSticker extends VirtualClass<DocumentAttributeStickerArgs> implements DocumentAttributeStickerArgs {
        CONSTRUCTOR_id: 1662637586;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeSticker";
        flags: number;
        mask?: true;
        alt: string;
        stickerset: TypeInputStickerSet;
        maskCoords?: TypeMaskCoords;
        fromReader(reader: Reader): DocumentAttributeSticker;
    }

    export interface DocumentAttributeVideoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a round video */
        roundMessage?: true;
        /** Whether the video supports streaming */
        supportsStreaming?: true;
        /** Duration in seconds */
        duration: int;
        /** Video width */
        w: int;
        /** Video height */
        h: int;
    }

    /** Defines a video<br> */
    export class DocumentAttributeVideo extends VirtualClass<DocumentAttributeVideoArgs> implements DocumentAttributeVideoArgs {
        CONSTRUCTOR_id: 250621158;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeVideo";
        flags: number;
        roundMessage?: true;
        supportsStreaming?: true;
        duration: int;
        w: int;
        h: int;
        fromReader(reader: Reader): DocumentAttributeVideo;
    }

    export interface DocumentAttributeAudioArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a voice message */
        voice?: true;
        /** Duration in seconds */
        duration: int;
        /** Name of song */
        title?: string;
        /** Performer */
        performer?: string;
        /** Waveform */
        waveform?: bytes;
    }

    /** Represents an audio file<br> */
    export class DocumentAttributeAudio extends VirtualClass<DocumentAttributeAudioArgs> implements DocumentAttributeAudioArgs {
        CONSTRUCTOR_id: -1739392570;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeAudio";
        flags: number;
        voice?: true;
        duration: int;
        title?: string;
        performer?: string;
        waveform?: bytes;
        fromReader(reader: Reader): DocumentAttributeAudio;
    }

    export interface DocumentAttributeFilenameArgs {
        /** The file name */
        fileName: string;
    }

    /** A simple document with a file name<br> */
    export class DocumentAttributeFilename extends VirtualClass<DocumentAttributeFilenameArgs> implements DocumentAttributeFilenameArgs {
        CONSTRUCTOR_id: 358154344;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeFilename";
        fileName: string;
        fromReader(reader: Reader): DocumentAttributeFilename;
    }

    /** Whether the current document has stickers attached<br> */
    export class DocumentAttributeHasStickers extends VirtualClass<void> {
        CONSTRUCTOR_id: -1744710921;
        SUBCLASS_OF_ID: 4146719643;
        classType: "constructor";
        className: "DocumentAttributeHasStickers";
        fromReader(reader: Reader): DocumentAttributeHasStickers;
    }

    export interface StickerPackArgs {
        /** Emoji */
        emoticon: string;
        /** Stickers */
        documents: long[];
    }

    /**
     * A stickerpack is a group of stickers associated to the same emoji.<br>
     * It is <strong>not</strong> a sticker pack the way it is usually intended, you may be looking for a <a href="https://corefork.telegram.org/type/StickerSet">StickerSet</a>.<br>
     * @link https://corefork.telegram.org/type/StickerSet
     */
    export class StickerPack extends VirtualClass<StickerPackArgs> implements StickerPackArgs {
        CONSTRUCTOR_id: 313694676;
        SUBCLASS_OF_ID: 2683282644;
        classType: "constructor";
        className: "StickerPack";
        emoticon: string;
        documents: long[];
        fromReader(reader: Reader): StickerPack;
    }

    export interface WebPageEmptyArgs {
        /** Preview ID */
        id: long;
    }

    /** No preview is available for the webpage<br> */
    export class WebPageEmpty extends VirtualClass<WebPageEmptyArgs> implements WebPageEmptyArgs {
        CONSTRUCTOR_id: -350980120;
        SUBCLASS_OF_ID: 1437168769;
        classType: "constructor";
        className: "WebPageEmpty";
        id: long;
        fromReader(reader: Reader): WebPageEmpty;
    }

    export interface WebPagePendingArgs {
        /** ID of preview */
        id: long;
        /** When was the processing started */
        date: int;
    }

    /** A preview of the webpage is currently being generated<br> */
    export class WebPagePending extends VirtualClass<WebPagePendingArgs> implements WebPagePendingArgs {
        CONSTRUCTOR_id: -981018084;
        SUBCLASS_OF_ID: 1437168769;
        classType: "constructor";
        className: "WebPagePending";
        id: long;
        date: int;
        fromReader(reader: Reader): WebPagePending;
    }

    export interface WebPageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Preview ID */
        id: long;
        /** URL of previewed webpage */
        url: string;
        /** Webpage URL to be displayed to the user */
        displayUrl: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else */
        type?: string;
        /** Short name of the site (e.g., Google Docs, App Store) */
        siteName?: string;
        /** Title of the content */
        title?: string;
        /** Content description */
        description?: string;
        /** Image representing the content */
        photo?: TypePhoto;
        /** URL to show in the embedded preview */
        embedUrl?: string;
        /** MIME type of the embedded preview, (e.g., text/html or video/mp4) */
        embedType?: string;
        /** Width of the embedded preview */
        embedWidth?: int;
        /** Height of the embedded preview */
        embedHeight?: int;
        /** Duration of the content, in seconds */
        duration?: int;
        /** Author of the content */
        author?: string;
        /** Preview of the content as a media file */
        document?: TypeDocument;
        /** Page contents in <a href="https://instantview.telegram.org/">instant view</a> format */
        cachedPage?: TypePage;
        /** Webpage attributes */
        attributes?: TypeWebPageAttribute[];
    }

    /**
     * Webpage preview<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class WebPage extends VirtualClass<WebPageArgs> implements WebPageArgs {
        CONSTRUCTOR_id: -392411726;
        SUBCLASS_OF_ID: 1437168769;
        classType: "constructor";
        className: "WebPage";
        flags: number;
        id: long;
        url: string;
        displayUrl: string;
        hash: int;
        type?: string;
        siteName?: string;
        title?: string;
        description?: string;
        photo?: TypePhoto;
        embedUrl?: string;
        embedType?: string;
        embedWidth?: int;
        embedHeight?: int;
        duration?: int;
        author?: string;
        document?: TypeDocument;
        cachedPage?: TypePage;
        attributes?: TypeWebPageAttribute[];
        fromReader(reader: Reader): WebPage;
    }

    export interface WebPageNotModifiedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Page view count */
        cachedPageViews?: int;
    }

    /** The preview of the webpage hasn't changed<br> */
    export class WebPageNotModified extends VirtualClass<WebPageNotModifiedArgs> implements WebPageNotModifiedArgs {
        CONSTRUCTOR_id: 1930545681;
        SUBCLASS_OF_ID: 1437168769;
        classType: "constructor";
        className: "WebPageNotModified";
        flags: number;
        cachedPageViews?: int;
        fromReader(reader: Reader): WebPageNotModified;
    }

    export interface AuthorizationArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is the current session */
        current?: true;
        /** Whether the session is from an official app */
        officialApp?: true;
        /** Whether the session is still waiting for a 2FA password */
        passwordPending?: true;
        /** Identifier */
        hash: long;
        /** Device model */
        deviceModel: string;
        /** Platform */
        platform: string;
        /** System version */
        systemVersion: string;
        /** <a href="https://corefork.telegram.org/api/obtaining_api_id">API ID</a> */
        apiId: int;
        /** App name */
        appName: string;
        /** App version */
        appVersion: string;
        /** When was the session created */
        dateCreated: int;
        /** When was the session last active */
        dateActive: int;
        /** Last known IP */
        ip: string;
        /** Country determined from IP */
        country: string;
        /** Region determined from IP */
        region: string;
    }

    /**
     * Logged-in session<br>
     * @link https://corefork.telegram.org/api/obtaining_api_id
     */
    export class Authorization extends VirtualClass<AuthorizationArgs> implements AuthorizationArgs {
        CONSTRUCTOR_id: -1392388579;
        SUBCLASS_OF_ID: 3373514778;
        classType: "constructor";
        className: "Authorization";
        flags: number;
        current?: true;
        officialApp?: true;
        passwordPending?: true;
        hash: long;
        deviceModel: string;
        platform: string;
        systemVersion: string;
        apiId: int;
        appName: string;
        appVersion: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        country: string;
        region: string;
        fromReader(reader: Reader): Authorization;
    }

    export interface ReceivedNotifyMessageArgs {
        /** Message ID, for which PUSH-notifications were canceled */
        id: int;
        /** Reserved for future use */
        flags: int;
    }

    /** Message ID, for which PUSH-notifications were cancelled.<br> */
    export class ReceivedNotifyMessage extends VirtualClass<ReceivedNotifyMessageArgs> implements ReceivedNotifyMessageArgs {
        CONSTRUCTOR_id: -1551583367;
        SUBCLASS_OF_ID: 2841786398;
        classType: "constructor";
        className: "ReceivedNotifyMessage";
        id: int;
        flags: int;
        fromReader(reader: Reader): ReceivedNotifyMessage;
    }

    export interface ChatInviteExportedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this chat invite was revoked */
        revoked?: true;
        /** Whether this chat invite has no expiration */
        permanent?: true;
        /** Chat invitation link */
        link: string;
        /** ID of the admin that created this chat invite */
        adminId: int;
        /** When was this chat invite created */
        date: int;
        /** When was this chat invite last modified */
        startDate?: int;
        /** When does this chat invite expire */
        expireDate?: int;
        /** Maximum number of users that can join using this link */
        usageLimit?: int;
        /** How many users joined using this link */
        usage?: int;
    }

    /** Exported chat invite<br> */
    export class ChatInviteExported extends VirtualClass<ChatInviteExportedArgs> implements ChatInviteExportedArgs {
        CONSTRUCTOR_id: 1847917725;
        SUBCLASS_OF_ID: 3027536472;
        classType: "constructor";
        className: "ChatInviteExported";
        flags: number;
        revoked?: true;
        permanent?: true;
        link: string;
        adminId: int;
        date: int;
        startDate?: int;
        expireDate?: int;
        usageLimit?: int;
        usage?: int;
        fromReader(reader: Reader): ChatInviteExported;
    }

    export interface ChatInviteAlreadyArgs {
        /** The chat connected to the invite */
        chat: TypeChat;
    }

    /** The user has already joined this chat<br> */
    export class ChatInviteAlready extends VirtualClass<ChatInviteAlreadyArgs> implements ChatInviteAlreadyArgs {
        CONSTRUCTOR_id: 1516793212;
        SUBCLASS_OF_ID: 72750902;
        classType: "constructor";
        className: "ChatInviteAlready";
        chat: TypeChat;
        fromReader(reader: Reader): ChatInviteAlready;
    }

    export interface ChatInviteArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> or a <a href="https://corefork.telegram.org/api/channel">normal group</a> */
        channel?: true;
        /** Whether this is a <a href="https://corefork.telegram.org/api/channel">channel</a> */
        broadcast?: true;
        /** Whether this is a public <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        public?: true;
        /** Whether this is a <a href="https://corefork.telegram.org/api/channel">supergroup</a> */
        megagroup?: true;
        /** Chat/supergroup/channel title */
        title: string;
        /** Chat/supergroup/channel photo */
        photo: TypePhoto;
        /** Participant count */
        participantsCount: int;
        /** A few of the participants that are in the group */
        participants?: TypeUser[];
    }

    /**
     * Chat invite info<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class ChatInvite extends VirtualClass<ChatInviteArgs> implements ChatInviteArgs {
        CONSTRUCTOR_id: -540871282;
        SUBCLASS_OF_ID: 72750902;
        classType: "constructor";
        className: "ChatInvite";
        flags: number;
        channel?: true;
        broadcast?: true;
        public?: true;
        megagroup?: true;
        title: string;
        photo: TypePhoto;
        participantsCount: int;
        participants?: TypeUser[];
        fromReader(reader: Reader): ChatInvite;
    }

    export interface ChatInvitePeekArgs {
        /** Chat information */
        chat: TypeChat;
        /** Read-only anonymous access to this group will be revoked at this date */
        expires: int;
    }

    /** A chat invitation that also allows peeking into the group to read messages without joining it.<br> */
    export class ChatInvitePeek extends VirtualClass<ChatInvitePeekArgs> implements ChatInvitePeekArgs {
        CONSTRUCTOR_id: 1634294960;
        SUBCLASS_OF_ID: 72750902;
        classType: "constructor";
        className: "ChatInvitePeek";
        chat: TypeChat;
        expires: int;
        fromReader(reader: Reader): ChatInvitePeek;
    }

    /** Empty constructor<br> */
    export class InputStickerSetEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -4838507;
        SUBCLASS_OF_ID: 1034127786;
        classType: "constructor";
        className: "InputStickerSetEmpty";
        fromReader(reader: Reader): InputStickerSetEmpty;
    }

    export interface InputStickerSetIDArgs {
        /** ID */
        id: long;
        /** Access hash */
        accessHash: long;
    }

    /** Stickerset by ID<br> */
    export class InputStickerSetID extends VirtualClass<InputStickerSetIDArgs> implements InputStickerSetIDArgs {
        CONSTRUCTOR_id: -1645763991;
        SUBCLASS_OF_ID: 1034127786;
        classType: "constructor";
        className: "InputStickerSetID";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputStickerSetID;
    }

    export interface InputStickerSetShortNameArgs {
        /** From <code>tg://addstickers?set=short_name</code> */
        shortName: string;
    }

    /** Stickerset by short name, from <code>tg://addstickers?set=short_name</code><br> */
    export class InputStickerSetShortName extends VirtualClass<InputStickerSetShortNameArgs> implements InputStickerSetShortNameArgs {
        CONSTRUCTOR_id: -2044933984;
        SUBCLASS_OF_ID: 1034127786;
        classType: "constructor";
        className: "InputStickerSetShortName";
        shortName: string;
        fromReader(reader: Reader): InputStickerSetShortName;
    }

    /** Animated emojis stickerset<br> */
    export class InputStickerSetAnimatedEmoji extends VirtualClass<void> {
        CONSTRUCTOR_id: 42402760;
        SUBCLASS_OF_ID: 1034127786;
        classType: "constructor";
        className: "InputStickerSetAnimatedEmoji";
        fromReader(reader: Reader): InputStickerSetAnimatedEmoji;
    }

    export interface InputStickerSetDiceArgs {
        /** The emoji, for now <img class="emoji" src="//telegram.org/img/emoji/40/F09F8F80.png" width="20" height="20" alt="🏀">, <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EB2.png" width="20" height="20" alt="🎲"> and <img class="emoji" src="//telegram.org/img/emoji/40/F09F8EAF.png" width="20" height="20" alt="🎯"> are supported */
        emoticon: string;
    }

    /**
     * Used for fetching <a href="https://corefork.telegram.org/api/dice">animated dice stickers</a><br>
     * @link https://corefork.telegram.org/api/dice
     */
    export class InputStickerSetDice extends VirtualClass<InputStickerSetDiceArgs> implements InputStickerSetDiceArgs {
        CONSTRUCTOR_id: -427863538;
        SUBCLASS_OF_ID: 1034127786;
        classType: "constructor";
        className: "InputStickerSetDice";
        emoticon: string;
        fromReader(reader: Reader): InputStickerSetDice;
    }

    export interface StickerSetArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this stickerset was archived (due to too many saved stickers in the current account) */
        archived?: true;
        /** Is this stickerset official */
        official?: true;
        /** Is this a mask stickerset */
        masks?: true;
        /** Is this an animated stickerpack */
        animated?: true;
        /** When was this stickerset installed */
        installedDate?: int;
        /** ID of the stickerset */
        id: long;
        /** Access hash of stickerset */
        accessHash: long;
        /** Title of stickerset */
        title: string;
        /** Short name of stickerset to use in <code>tg://addstickers?set=short_name</code> */
        shortName: string;
        /** Stickerset thumbnail */
        thumbs?: TypePhotoSize[];
        /** DC ID of thumbnail */
        thumbDcId?: int;
        /** Thumbnail version */
        thumbVersion?: int;
        /** Number of stickers in pack */
        count: int;
        /** Hash */
        hash: int;
    }

    /** Represents a stickerset (stickerpack)<br> */
    export class StickerSet extends VirtualClass<StickerSetArgs> implements StickerSetArgs {
        CONSTRUCTOR_id: -673242758;
        SUBCLASS_OF_ID: 3134455697;
        classType: "constructor";
        className: "StickerSet";
        flags: number;
        archived?: true;
        official?: true;
        masks?: true;
        animated?: true;
        installedDate?: int;
        id: long;
        accessHash: long;
        title: string;
        shortName: string;
        thumbs?: TypePhotoSize[];
        thumbDcId?: int;
        thumbVersion?: int;
        count: int;
        hash: int;
        fromReader(reader: Reader): StickerSet;
    }

    export interface BotCommandArgs {
        /** <code>/command</code> name */
        command: string;
        /** Description of the command */
        description: string;
    }

    /** Describes a bot command that can be used in a chat<br> */
    export class BotCommand extends VirtualClass<BotCommandArgs> implements BotCommandArgs {
        CONSTRUCTOR_id: -1032140601;
        SUBCLASS_OF_ID: 236872386;
        classType: "constructor";
        className: "BotCommand";
        command: string;
        description: string;
        fromReader(reader: Reader): BotCommand;
    }

    export interface BotInfoArgs {
        /** ID of the bot */
        userId: int;
        /** Description of the bot */
        description: string;
        /** Bot commands that can be used in the chat */
        commands: TypeBotCommand[];
    }

    /** Info about bots (available bot commands, etc)<br> */
    export class BotInfo extends VirtualClass<BotInfoArgs> implements BotInfoArgs {
        CONSTRUCTOR_id: -1729618630;
        SUBCLASS_OF_ID: 4059496923;
        classType: "constructor";
        className: "BotInfo";
        userId: int;
        description: string;
        commands: TypeBotCommand[];
        fromReader(reader: Reader): BotInfo;
    }

    export interface KeyboardButtonArgs {
        /** Button text */
        text: string;
    }

    /** Bot keyboard button<br> */
    export class KeyboardButton extends VirtualClass<KeyboardButtonArgs> implements KeyboardButtonArgs {
        CONSTRUCTOR_id: -1560655744;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButton";
        text: string;
        fromReader(reader: Reader): KeyboardButton;
    }

    export interface KeyboardButtonUrlArgs {
        /** Button label */
        text: string;
        /** URL */
        url: string;
    }

    /** URL button<br> */
    export class KeyboardButtonUrl extends VirtualClass<KeyboardButtonUrlArgs> implements KeyboardButtonUrlArgs {
        CONSTRUCTOR_id: 629866245;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonUrl";
        text: string;
        url: string;
        fromReader(reader: Reader): KeyboardButtonUrl;
    }

    export interface KeyboardButtonCallbackArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user should verify his identity by entering his <a href="https://corefork.telegram.org/api/srp">2FA SRP parameters</a> to the <a href="https://corefork.telegram.org/method/messages.getBotCallbackAnswer">messages.getBotCallbackAnswer</a> method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to <a href="https://corefork.telegram.org/api/srp">SRP</a>. This button is mainly used by the official <a href="https://t.me/botfather">@botfather</a> bot, for verifying the user's identity before transferring ownership of a bot to another user. */
        requiresPassword?: true;
        /** Button text */
        text: string;
        /** Callback data */
        data: bytes;
    }

    /**
     * Callback button<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/messages.getBotCallbackAnswer
     */
    export class KeyboardButtonCallback extends VirtualClass<KeyboardButtonCallbackArgs> implements KeyboardButtonCallbackArgs {
        CONSTRUCTOR_id: 901503851;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonCallback";
        flags: number;
        requiresPassword?: true;
        text: string;
        data: bytes;
        fromReader(reader: Reader): KeyboardButtonCallback;
    }

    export interface KeyboardButtonRequestPhoneArgs {
        /** Button text */
        text: string;
    }

    /** Button to request a user's phone number<br> */
    export class KeyboardButtonRequestPhone extends VirtualClass<KeyboardButtonRequestPhoneArgs> implements KeyboardButtonRequestPhoneArgs {
        CONSTRUCTOR_id: -1318425559;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonRequestPhone";
        text: string;
        fromReader(reader: Reader): KeyboardButtonRequestPhone;
    }

    export interface KeyboardButtonRequestGeoLocationArgs {
        /** Button text */
        text: string;
    }

    /** Button to request a user's geolocation<br> */
    export class KeyboardButtonRequestGeoLocation extends VirtualClass<KeyboardButtonRequestGeoLocationArgs> implements KeyboardButtonRequestGeoLocationArgs {
        CONSTRUCTOR_id: -59151553;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonRequestGeoLocation";
        text: string;
        fromReader(reader: Reader): KeyboardButtonRequestGeoLocation;
    }

    export interface KeyboardButtonSwitchInlineArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, pressing the button will insert the bot‘s username and the specified inline <code>query</code> in the current chat's input field. */
        samePeer?: true;
        /** Button label */
        text: string;
        /** The inline query to use */
        query: string;
    }

    /** Button to force a user to switch to inline mode Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field.<br> */
    export class KeyboardButtonSwitchInline extends VirtualClass<KeyboardButtonSwitchInlineArgs> implements KeyboardButtonSwitchInlineArgs {
        CONSTRUCTOR_id: 90744648;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonSwitchInline";
        flags: number;
        samePeer?: true;
        text: string;
        query: string;
        fromReader(reader: Reader): KeyboardButtonSwitchInline;
    }

    export interface KeyboardButtonGameArgs {
        /** Button text */
        text: string;
    }

    /** Button to start a game<br> */
    export class KeyboardButtonGame extends VirtualClass<KeyboardButtonGameArgs> implements KeyboardButtonGameArgs {
        CONSTRUCTOR_id: 1358175439;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonGame";
        text: string;
        fromReader(reader: Reader): KeyboardButtonGame;
    }

    export interface KeyboardButtonBuyArgs {
        /** Button text */
        text: string;
    }

    /** Button to buy a product<br> */
    export class KeyboardButtonBuy extends VirtualClass<KeyboardButtonBuyArgs> implements KeyboardButtonBuyArgs {
        CONSTRUCTOR_id: -1344716869;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonBuy";
        text: string;
        fromReader(reader: Reader): KeyboardButtonBuy;
    }

    export interface KeyboardButtonUrlAuthArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Button label */
        text: string;
        /** New text of the button in forwarded messages. */
        fwdText?: string;
        /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in <a href="https://corefork.telegram.org/widgets/login#receiving-authorization-data">Receiving authorization data</a>.<br><br><strong>NOTE</strong>: Services must <strong>always</strong> check the hash of the received data to verify the authentication and the integrity of the data as described in <a href="https://corefork.telegram.org/widgets/login#checking-authorization">Checking authorization</a>. */
        url: string;
        /** ID of the button to pass to <a href="https://corefork.telegram.org/method/messages.requestUrlAuth">messages.requestUrlAuth</a> */
        buttonId: int;
    }

    /**
     * Button to request a user to authorize via URL using <a href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">Seamless Telegram Login</a>. When the user clicks on such a button, <a href="https://corefork.telegram.org/method/messages.requestUrlAuth">messages.requestUrlAuth</a> should be called, providing the <code>button_id</code> and the ID of the container message. The returned <a href="https://corefork.telegram.org/constructor/urlAuthResultRequest">urlAuthResultRequest</a> object will contain more details about the authorization request (<code>request_write_access</code> if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call <a href="https://corefork.telegram.org/method/messages.acceptUrlAuth">messages.acceptUrlAuth</a> to get a <a href="https://corefork.telegram.org/constructor/urlAuthResultAccepted">urlAuthResultAccepted</a> with the URL to open instead of the <code>url</code> of this constructor, or a <a href="https://corefork.telegram.org/constructor/urlAuthResultDefault">urlAuthResultDefault</a>, in which case the <code>url</code> of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the <code>url</code> of this constructor must be used.<br>
     * @link https://corefork.telegram.org/widgets/login
     * @link https://corefork.telegram.org/method/messages.requestUrlAuth
     * @link https://corefork.telegram.org/api/url-authorization
     * @link https://corefork.telegram.org/constructor/urlAuthResultRequest
     * @link https://corefork.telegram.org/api/url-authorization
     * @link https://corefork.telegram.org/method/messages.acceptUrlAuth
     * @link https://corefork.telegram.org/api/url-authorization
     * @link https://corefork.telegram.org/constructor/urlAuthResultAccepted
     * @link https://corefork.telegram.org/api/url-authorization
     * @link https://corefork.telegram.org/constructor/urlAuthResultDefault
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class KeyboardButtonUrlAuth extends VirtualClass<KeyboardButtonUrlAuthArgs> implements KeyboardButtonUrlAuthArgs {
        CONSTRUCTOR_id: 280464681;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonUrlAuth";
        flags: number;
        text: string;
        fwdText?: string;
        url: string;
        buttonId: int;
        fromReader(reader: Reader): KeyboardButtonUrlAuth;
    }

    export interface InputKeyboardButtonUrlAuthArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag to request the permission for your bot to send messages to the user. */
        requestWriteAccess?: true;
        /** Button text */
        text: string;
        /** New text of the button in forwarded messages. */
        fwdText?: string;
        /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in <a href="https://corefork.telegram.org/widgets/login#receiving-authorization-data">Receiving authorization data</a>.<br>NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in <a href="https://corefork.telegram.org/widgets/login#checking-authorization">Checking authorization</a>. */
        url: string;
        /** Username of a bot, which will be used for user authorization. See <a href="https://corefork.telegram.org/widgets/login#setting-up-a-bot">Setting up a bot</a> for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See <a href="https://corefork.telegram.org/widgets/login#linking-your-domain-to-the-bot">Linking your domain to the bot</a> for more details. */
        bot: TypeInputUser;
    }

    /**
     * Button to request a user to <a href="https://corefork.telegram.org/method/messages.acceptUrlAuth">authorize</a> via URL using <a href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">Seamless Telegram Login</a>.<br>
     * @link https://corefork.telegram.org/widgets/login
     * @link https://corefork.telegram.org/method/messages.acceptUrlAuth
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class InputKeyboardButtonUrlAuth extends VirtualClass<InputKeyboardButtonUrlAuthArgs> implements InputKeyboardButtonUrlAuthArgs {
        CONSTRUCTOR_id: -802258988;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "InputKeyboardButtonUrlAuth";
        flags: number;
        requestWriteAccess?: true;
        text: string;
        fwdText?: string;
        url: string;
        bot: TypeInputUser;
        fromReader(reader: Reader): InputKeyboardButtonUrlAuth;
    }

    export interface KeyboardButtonRequestPollArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, only quiz polls can be sent */
        quiz?: Bool;
        /** Button text */
        text: string;
    }

    /** A button that allows the user to create and send a poll when pressed; available only in private<br> */
    export class KeyboardButtonRequestPoll extends VirtualClass<KeyboardButtonRequestPollArgs> implements KeyboardButtonRequestPollArgs {
        CONSTRUCTOR_id: -1144565411;
        SUBCLASS_OF_ID: 195916963;
        classType: "constructor";
        className: "KeyboardButtonRequestPoll";
        flags: number;
        quiz?: Bool;
        text: string;
        fromReader(reader: Reader): KeyboardButtonRequestPoll;
    }

    export interface KeyboardButtonRowArgs {
        /** Bot or inline keyboard buttons */
        buttons: TypeKeyboardButton[];
    }

    /** Inline keyboard row<br> */
    export class KeyboardButtonRow extends VirtualClass<KeyboardButtonRowArgs> implements KeyboardButtonRowArgs {
        CONSTRUCTOR_id: 2002815875;
        SUBCLASS_OF_ID: 2222403758;
        classType: "constructor";
        className: "KeyboardButtonRow";
        buttons: TypeKeyboardButton[];
        fromReader(reader: Reader): KeyboardButtonRow;
    }

    export interface ReplyKeyboardHideArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.<br><br>Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet */
        selective?: true;
    }

    /** Hide sent bot keyboard<br> */
    export class ReplyKeyboardHide extends VirtualClass<ReplyKeyboardHideArgs> implements ReplyKeyboardHideArgs {
        CONSTRUCTOR_id: -1606526075;
        SUBCLASS_OF_ID: 3806400242;
        classType: "constructor";
        className: "ReplyKeyboardHide";
        flags: number;
        selective?: true;
        fromReader(reader: Reader): ReplyKeyboardHide;
    }

    export interface ReplyKeyboardForceReplyArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
        singleUse?: true;
        /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. <br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard. */
        selective?: true;
        /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
        placeholder?: string;
    }

    /** Force the user to send a reply<br> */
    export class ReplyKeyboardForceReply extends VirtualClass<ReplyKeyboardForceReplyArgs> implements ReplyKeyboardForceReplyArgs {
        CONSTRUCTOR_id: -2035021048;
        SUBCLASS_OF_ID: 3806400242;
        classType: "constructor";
        className: "ReplyKeyboardForceReply";
        flags: number;
        singleUse?: true;
        selective?: true;
        placeholder?: string;
        fromReader(reader: Reader): ReplyKeyboardForceReply;
    }

    export interface ReplyKeyboardMarkupArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard. */
        resize?: true;
        /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
        singleUse?: true;
        /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.<br><br>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard. */
        selective?: true;
        /** Button row */
        rows: TypeKeyboardButtonRow[];
        /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
        placeholder?: string;
    }

    /** Bot keyboard<br> */
    export class ReplyKeyboardMarkup extends VirtualClass<ReplyKeyboardMarkupArgs> implements ReplyKeyboardMarkupArgs {
        CONSTRUCTOR_id: -2049074735;
        SUBCLASS_OF_ID: 3806400242;
        classType: "constructor";
        className: "ReplyKeyboardMarkup";
        flags: number;
        resize?: true;
        singleUse?: true;
        selective?: true;
        rows: TypeKeyboardButtonRow[];
        placeholder?: string;
        fromReader(reader: Reader): ReplyKeyboardMarkup;
    }

    export interface ReplyInlineMarkupArgs {
        /** Bot or inline keyboard rows */
        rows: TypeKeyboardButtonRow[];
    }

    /** Bot or inline keyboard<br> */
    export class ReplyInlineMarkup extends VirtualClass<ReplyInlineMarkupArgs> implements ReplyInlineMarkupArgs {
        CONSTRUCTOR_id: 1218642516;
        SUBCLASS_OF_ID: 3806400242;
        classType: "constructor";
        className: "ReplyInlineMarkup";
        rows: TypeKeyboardButtonRow[];
        fromReader(reader: Reader): ReplyInlineMarkup;
    }

    export interface MessageEntityUnknownArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Unknown message entity<br> */
    export class MessageEntityUnknown extends VirtualClass<MessageEntityUnknownArgs> implements MessageEntityUnknownArgs {
        CONSTRUCTOR_id: -1148011883;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityUnknown";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityUnknown;
    }

    export interface MessageEntityMentionArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /**
     * Message entity <a href="https://corefork.telegram.org/api/mentions">mentioning</a> the current user<br>
     * @link https://corefork.telegram.org/api/mentions
     */
    export class MessageEntityMention extends VirtualClass<MessageEntityMentionArgs> implements MessageEntityMentionArgs {
        CONSTRUCTOR_id: -100378723;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityMention";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityMention;
    }

    export interface MessageEntityHashtagArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** <strong>#hashtag</strong> message entity<br> */
    export class MessageEntityHashtag extends VirtualClass<MessageEntityHashtagArgs> implements MessageEntityHashtagArgs {
        CONSTRUCTOR_id: 1868782349;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityHashtag";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityHashtag;
    }

    export interface MessageEntityBotCommandArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing a bot /command<br> */
    export class MessageEntityBotCommand extends VirtualClass<MessageEntityBotCommandArgs> implements MessageEntityBotCommandArgs {
        CONSTRUCTOR_id: 1827637959;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityBotCommand";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityBotCommand;
    }

    export interface MessageEntityUrlArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /**
     * Message entity representing an in-text url: <a href="https://google.com/">https://google.com</a>; for <a href="https://google.com/">text urls</a>, use <a href="https://corefork.telegram.org/constructor/messageEntityTextUrl">messageEntityTextUrl</a>.<br>
     * @link https://corefork.telegram.org/constructor/messageEntityTextUrl
     * @link https://google.com/
     * @link https://google.com/
     * @link https://corefork.telegram.org/constructor/messageEntityUrl
     */
    export class MessageEntityUrl extends VirtualClass<MessageEntityUrlArgs> implements MessageEntityUrlArgs {
        CONSTRUCTOR_id: 1859134776;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityUrl";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityUrl;
    }

    export interface MessageEntityEmailArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing an <a href="mailto:email@example.com">email@example.com</a>.<br> */
    export class MessageEntityEmail extends VirtualClass<MessageEntityEmailArgs> implements MessageEntityEmailArgs {
        CONSTRUCTOR_id: 1692693954;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityEmail";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityEmail;
    }

    export interface MessageEntityBoldArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing <strong>bold text</strong>.<br> */
    export class MessageEntityBold extends VirtualClass<MessageEntityBoldArgs> implements MessageEntityBoldArgs {
        CONSTRUCTOR_id: -1117713463;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityBold";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityBold;
    }

    export interface MessageEntityItalicArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing <em>italic text</em>.<br> */
    export class MessageEntityItalic extends VirtualClass<MessageEntityItalicArgs> implements MessageEntityItalicArgs {
        CONSTRUCTOR_id: -2106619040;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityItalic";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityItalic;
    }

    export interface MessageEntityCodeArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing a <code>codeblock</code>.<br> */
    export class MessageEntityCode extends VirtualClass<MessageEntityCodeArgs> implements MessageEntityCodeArgs {
        CONSTRUCTOR_id: 681706865;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityCode";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityCode;
    }

    export interface MessageEntityPreArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
        /** Programming language of the code */
        language: string;
    }

    /** Message entity representing a preformatted <code>codeblock</code>, allowing the user to specify a programming language for the codeblock.<br> */
    export class MessageEntityPre extends VirtualClass<MessageEntityPreArgs> implements MessageEntityPreArgs {
        CONSTRUCTOR_id: 1938967520;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityPre";
        offset: int;
        length: int;
        language: string;
        fromReader(reader: Reader): MessageEntityPre;
    }

    export interface MessageEntityTextUrlArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
        /** The actual URL */
        url: string;
    }

    /**
     * Message entity representing a <a href="https://google.com/">text url</a>: for in-text urls like <a href="https://google.com/">https://google.com</a> use <a href="https://corefork.telegram.org/constructor/messageEntityUrl">messageEntityUrl</a>.<br>
     * @link https://corefork.telegram.org/constructor/messageEntityUrl
     * @link https://google.com/
     * @link https://google.com/
     * @link https://corefork.telegram.org/constructor/messageEntityTextUrl
     */
    export class MessageEntityTextUrl extends VirtualClass<MessageEntityTextUrlArgs> implements MessageEntityTextUrlArgs {
        CONSTRUCTOR_id: 1990644519;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityTextUrl";
        offset: int;
        length: int;
        url: string;
        fromReader(reader: Reader): MessageEntityTextUrl;
    }

    export interface MessageEntityMentionNameArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
        /** Identifier of the user that was mentioned */
        userId: int;
    }

    /**
     * Message entity representing a <a href="https://corefork.telegram.org/api/mentions">user mention</a>: for <em>creating</em> a mention use <a href="https://corefork.telegram.org/constructor/inputMessageEntityMentionName">inputMessageEntityMentionName</a>.<br>
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/constructor/inputMessageEntityMentionName
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/constructor/messageEntityMentionName
     */
    export class MessageEntityMentionName extends VirtualClass<MessageEntityMentionNameArgs> implements MessageEntityMentionNameArgs {
        CONSTRUCTOR_id: 892193368;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityMentionName";
        offset: int;
        length: int;
        userId: int;
        fromReader(reader: Reader): MessageEntityMentionName;
    }

    export interface InputMessageEntityMentionNameArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
        /** Identifier of the user that was mentioned */
        userId: TypeInputUser;
    }

    /**
     * Message entity that can be used to create a user <a href="https://corefork.telegram.org/api/mentions">user mention</a>: received mentions use the <a href="https://corefork.telegram.org/constructor/messageEntityMentionName">messageEntityMentionName</a> constructor, instead.<br>
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/constructor/messageEntityMentionName
     * @link https://corefork.telegram.org/api/mentions
     * @link https://corefork.telegram.org/constructor/inputMessageEntityMentionName
     */
    export class InputMessageEntityMentionName extends VirtualClass<InputMessageEntityMentionNameArgs> implements InputMessageEntityMentionNameArgs {
        CONSTRUCTOR_id: 546203849;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "InputMessageEntityMentionName";
        offset: int;
        length: int;
        userId: TypeInputUser;
        fromReader(reader: Reader): InputMessageEntityMentionName;
    }

    export interface MessageEntityPhoneArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing a phone number.<br> */
    export class MessageEntityPhone extends VirtualClass<MessageEntityPhoneArgs> implements MessageEntityPhoneArgs {
        CONSTRUCTOR_id: -1687559349;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityPhone";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityPhone;
    }

    export interface MessageEntityCashtagArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing a <strong>$cashtag</strong>.<br> */
    export class MessageEntityCashtag extends VirtualClass<MessageEntityCashtagArgs> implements MessageEntityCashtagArgs {
        CONSTRUCTOR_id: 1280209983;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityCashtag";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityCashtag;
    }

    export interface MessageEntityUnderlineArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing underlined text.<br> */
    export class MessageEntityUnderline extends VirtualClass<MessageEntityUnderlineArgs> implements MessageEntityUnderlineArgs {
        CONSTRUCTOR_id: -1672577397;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityUnderline";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityUnderline;
    }

    export interface MessageEntityStrikeArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing <del>strikethrough</del> text.<br> */
    export class MessageEntityStrike extends VirtualClass<MessageEntityStrikeArgs> implements MessageEntityStrikeArgs {
        CONSTRUCTOR_id: -1090087980;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityStrike";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityStrike;
    }

    export interface MessageEntityBlockquoteArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Message entity representing a block quote.<br> */
    export class MessageEntityBlockquote extends VirtualClass<MessageEntityBlockquoteArgs> implements MessageEntityBlockquoteArgs {
        CONSTRUCTOR_id: 34469328;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityBlockquote";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityBlockquote;
    }

    export interface MessageEntityBankCardArgs {
        /** Offset of message entity within message (in UTF-8 codepoints) */
        offset: int;
        /** Length of message entity within message (in UTF-8 codepoints) */
        length: int;
    }

    /** Indicates a credit card number<br> */
    export class MessageEntityBankCard extends VirtualClass<MessageEntityBankCardArgs> implements MessageEntityBankCardArgs {
        CONSTRUCTOR_id: 1981704948;
        SUBCLASS_OF_ID: 3479443932;
        classType: "constructor";
        className: "MessageEntityBankCard";
        offset: int;
        length: int;
        fromReader(reader: Reader): MessageEntityBankCard;
    }

    /** Represents the absence of a channel<br> */
    export class InputChannelEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -292807034;
        SUBCLASS_OF_ID: 1089602301;
        classType: "constructor";
        className: "InputChannelEmpty";
        fromReader(reader: Reader): InputChannelEmpty;
    }

    export interface InputChannelArgs {
        /** Channel ID */
        channelId: int;
        /** Access hash taken from the <a href="https://corefork.telegram.org/constructor/channel">channel</a> constructor */
        accessHash: long;
    }

    /**
     * Represents a channel<br>
     * @link https://corefork.telegram.org/constructor/channel
     */
    export class InputChannel extends VirtualClass<InputChannelArgs> implements InputChannelArgs {
        CONSTRUCTOR_id: -1343524562;
        SUBCLASS_OF_ID: 1089602301;
        classType: "constructor";
        className: "InputChannel";
        channelId: int;
        accessHash: long;
        fromReader(reader: Reader): InputChannel;
    }

    export interface InputChannelFromMessageArgs {
        /** The chat where the channel was seen */
        peer: TypeInputPeer;
        /** The message ID in the chat where the channel was seen */
        msgId: MessageIDLike;
        /** The channel ID */
        channelId: int;
    }

    /**
     * Defines a <a href="https://corefork.telegram.org/api/min">min</a> channel that was seen in a certain message of a certain chat.<br>
     * @link https://corefork.telegram.org/api/min
     */
    export class InputChannelFromMessage extends VirtualClass<InputChannelFromMessageArgs> implements InputChannelFromMessageArgs {
        CONSTRUCTOR_id: 707290417;
        SUBCLASS_OF_ID: 1089602301;
        classType: "constructor";
        className: "InputChannelFromMessage";
        peer: TypeInputPeer;
        msgId: MessageIDLike;
        channelId: int;
        fromReader(reader: Reader): InputChannelFromMessage;
    }

    export interface MessageRangeArgs {
        /** Start of range (message ID) */
        minId: int;
        /** End of range (message ID) */
        maxId: int;
    }

    /** Indicates a range of chat messages<br> */
    export class MessageRange extends VirtualClass<MessageRangeArgs> implements MessageRangeArgs {
        CONSTRUCTOR_id: 182649427;
        SUBCLASS_OF_ID: 3200730487;
        classType: "constructor";
        className: "MessageRange";
        minId: int;
        maxId: int;
        fromReader(reader: Reader): MessageRange;
    }

    /** No filter<br> */
    export class ChannelMessagesFilterEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1798033689;
        SUBCLASS_OF_ID: 322136662;
        classType: "constructor";
        className: "ChannelMessagesFilterEmpty";
        fromReader(reader: Reader): ChannelMessagesFilterEmpty;
    }

    export interface ChannelMessagesFilterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to exclude new messages from the search */
        excludeNewMessages?: true;
        /** A range of messages to fetch */
        ranges: TypeMessageRange[];
    }

    /** Filter for getting only certain types of channel messages<br> */
    export class ChannelMessagesFilter extends VirtualClass<ChannelMessagesFilterArgs> implements ChannelMessagesFilterArgs {
        CONSTRUCTOR_id: -847783593;
        SUBCLASS_OF_ID: 322136662;
        classType: "constructor";
        className: "ChannelMessagesFilter";
        flags: number;
        excludeNewMessages?: true;
        ranges: TypeMessageRange[];
        fromReader(reader: Reader): ChannelMessagesFilter;
    }

    export interface ChannelParticipantArgs {
        /** Pariticipant user ID */
        userId: int;
        /** Date joined */
        date: int;
    }

    /** Channel/supergroup participant<br> */
    export class ChannelParticipant extends VirtualClass<ChannelParticipantArgs> implements ChannelParticipantArgs {
        CONSTRUCTOR_id: 367766557;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipant";
        userId: int;
        date: int;
        fromReader(reader: Reader): ChannelParticipant;
    }

    export interface ChannelParticipantSelfArgs {
        /** User ID */
        userId: int;
        /** User that invited me to the channel/supergroup */
        inviterId: int;
        /** When did I join the channel/supergroup */
        date: int;
    }

    /** Myself<br> */
    export class ChannelParticipantSelf extends VirtualClass<ChannelParticipantSelfArgs> implements ChannelParticipantSelfArgs {
        CONSTRUCTOR_id: -1557620115;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipantSelf";
        userId: int;
        inviterId: int;
        date: int;
        fromReader(reader: Reader): ChannelParticipantSelf;
    }

    export interface ChannelParticipantCreatorArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** User ID */
        userId: int;
        /** Creator admin rights */
        adminRights: TypeChatAdminRights;
        /** The role (rank) of the group creator in the group: just an arbitrary string, <code>admin</code> by default */
        rank?: string;
    }

    /** Channel/supergroup creator<br> */
    export class ChannelParticipantCreator extends VirtualClass<ChannelParticipantCreatorArgs> implements ChannelParticipantCreatorArgs {
        CONSTRUCTOR_id: 1149094475;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipantCreator";
        flags: number;
        userId: int;
        adminRights: TypeChatAdminRights;
        rank?: string;
        fromReader(reader: Reader): ChannelParticipantCreator;
    }

    export interface ChannelParticipantAdminArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Can this admin promote other admins with the same permissions? */
        canEdit?: true;
        /** Is this the current user */
        self?: true;
        /** Admin user ID */
        userId: int;
        /** User that invited the admin to the channel/group */
        inviterId?: int;
        /** User that promoted the user to admin */
        promotedBy: int;
        /** When did the user join */
        date: int;
        /** Admin <a href="https://corefork.telegram.org/api/rights">rights</a> */
        adminRights: TypeChatAdminRights;
        /** The role (rank) of the admin in the group: just an arbitrary string, <code>admin</code> by default */
        rank?: string;
    }

    /**
     * Admin<br>
     * @link https://corefork.telegram.org/api/rights
     */
    export class ChannelParticipantAdmin extends VirtualClass<ChannelParticipantAdminArgs> implements ChannelParticipantAdminArgs {
        CONSTRUCTOR_id: -859915345;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipantAdmin";
        flags: number;
        canEdit?: true;
        self?: true;
        userId: int;
        inviterId?: int;
        promotedBy: int;
        date: int;
        adminRights: TypeChatAdminRights;
        rank?: string;
        fromReader(reader: Reader): ChannelParticipantAdmin;
    }

    export interface ChannelParticipantBannedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user has left the group */
        left?: true;
        /** The banned peer */
        peer: TypePeer;
        /** User was kicked by the specified admin */
        kickedBy: int;
        /** When did the user join the group */
        date: int;
        /** Banned <a href="https://corefork.telegram.org/api/rights">rights</a> */
        bannedRights: TypeChatBannedRights;
    }

    /**
     * Banned/kicked user<br>
     * @link https://corefork.telegram.org/api/rights
     */
    export class ChannelParticipantBanned extends VirtualClass<ChannelParticipantBannedArgs> implements ChannelParticipantBannedArgs {
        CONSTRUCTOR_id: 1352785878;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipantBanned";
        flags: number;
        left?: true;
        peer: TypePeer;
        kickedBy: int;
        date: int;
        bannedRights: TypeChatBannedRights;
        fromReader(reader: Reader): ChannelParticipantBanned;
    }

    export interface ChannelParticipantLeftArgs {
        /** The peer that left */
        peer: TypePeer;
    }

    /** A participant that left the channel/supergroup<br> */
    export class ChannelParticipantLeft extends VirtualClass<ChannelParticipantLeftArgs> implements ChannelParticipantLeftArgs {
        CONSTRUCTOR_id: 453242886;
        SUBCLASS_OF_ID: 3653762072;
        classType: "constructor";
        className: "ChannelParticipantLeft";
        peer: TypePeer;
        fromReader(reader: Reader): ChannelParticipantLeft;
    }

    /** Fetch only recent participants<br> */
    export class ChannelParticipantsRecent extends VirtualClass<void> {
        CONSTRUCTOR_id: -566281095;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsRecent";
        fromReader(reader: Reader): ChannelParticipantsRecent;
    }

    /** Fetch only admin participants<br> */
    export class ChannelParticipantsAdmins extends VirtualClass<void> {
        CONSTRUCTOR_id: -1268741783;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsAdmins";
        fromReader(reader: Reader): ChannelParticipantsAdmins;
    }

    export interface ChannelParticipantsKickedArgs {
        /** Optional filter for searching kicked participants by name (otherwise empty) */
        q: string;
    }

    /** Fetch only kicked participants<br> */
    export class ChannelParticipantsKicked extends VirtualClass<ChannelParticipantsKickedArgs> implements ChannelParticipantsKickedArgs {
        CONSTRUCTOR_id: -1548400251;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsKicked";
        q: string;
        fromReader(reader: Reader): ChannelParticipantsKicked;
    }

    /** Fetch only bot participants<br> */
    export class ChannelParticipantsBots extends VirtualClass<void> {
        CONSTRUCTOR_id: -1328445861;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsBots";
        fromReader(reader: Reader): ChannelParticipantsBots;
    }

    export interface ChannelParticipantsBannedArgs {
        /** Optional filter for searching banned participants by name (otherwise empty) */
        q: string;
    }

    /** Fetch only banned participants<br> */
    export class ChannelParticipantsBanned extends VirtualClass<ChannelParticipantsBannedArgs> implements ChannelParticipantsBannedArgs {
        CONSTRUCTOR_id: 338142689;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsBanned";
        q: string;
        fromReader(reader: Reader): ChannelParticipantsBanned;
    }

    export interface ChannelParticipantsSearchArgs {
        /** Search query */
        q: string;
    }

    /** Query participants by name<br> */
    export class ChannelParticipantsSearch extends VirtualClass<ChannelParticipantsSearchArgs> implements ChannelParticipantsSearchArgs {
        CONSTRUCTOR_id: 106343499;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsSearch";
        q: string;
        fromReader(reader: Reader): ChannelParticipantsSearch;
    }

    export interface ChannelParticipantsContactsArgs {
        /** Optional search query for searching contact participants by name */
        q: string;
    }

    /** Fetch only participants that are also contacts<br> */
    export class ChannelParticipantsContacts extends VirtualClass<ChannelParticipantsContactsArgs> implements ChannelParticipantsContactsArgs {
        CONSTRUCTOR_id: -1150621555;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsContacts";
        q: string;
        fromReader(reader: Reader): ChannelParticipantsContacts;
    }

    export interface ChannelParticipantsMentionsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Filter by user name or username */
        q?: string;
        /** Look only for users that posted in this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        topMsgId?: MessageIDLike;
    }

    /**
     * This filter is used when looking for supergroup members to mention.<br>
     * This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific <a href="https://corefork.telegram.org/api/threads">thread</a> through the <a href="https://corefork.telegram.org/api/threads#channel-comments">comment section</a> of a channel.<br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class ChannelParticipantsMentions extends VirtualClass<ChannelParticipantsMentionsArgs> implements ChannelParticipantsMentionsArgs {
        CONSTRUCTOR_id: -531931925;
        SUBCLASS_OF_ID: 3209570131;
        classType: "constructor";
        className: "ChannelParticipantsMentions";
        flags: number;
        q?: string;
        topMsgId?: MessageIDLike;
        fromReader(reader: Reader): ChannelParticipantsMentions;
    }

    export interface InputBotInlineMessageMediaAutoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Caption */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * A media<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class InputBotInlineMessageMediaAuto extends VirtualClass<InputBotInlineMessageMediaAutoArgs> implements InputBotInlineMessageMediaAutoArgs {
        CONSTRUCTOR_id: 864077702;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageMediaAuto";
        flags: number;
        message: string;
        entities?: TypeMessageEntity[];
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageMediaAuto;
    }

    export interface InputBotInlineMessageTextArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable webpage preview */
        noWebpage?: true;
        /** Message */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Simple text message<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class InputBotInlineMessageText extends VirtualClass<InputBotInlineMessageTextArgs> implements InputBotInlineMessageTextArgs {
        CONSTRUCTOR_id: 1036876423;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageText";
        flags: number;
        noWebpage?: true;
        message: string;
        entities?: TypeMessageEntity[];
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageText;
    }

    export interface InputBotInlineMessageMediaGeoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Geolocation */
        geoPoint: TypeInputGeoPoint;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a direction in which the location moves, in degrees; 1-360 */
        heading?: int;
        /** Validity period */
        period?: int;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
        proximityNotificationRadius?: int;
        /** Reply markup for bot/inline keyboards */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Geolocation<br>
     * @link https://corefork.telegram.org/api/live-location
     */
    export class InputBotInlineMessageMediaGeo extends VirtualClass<InputBotInlineMessageMediaGeoArgs> implements InputBotInlineMessageMediaGeoArgs {
        CONSTRUCTOR_id: -1768777083;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageMediaGeo";
        flags: number;
        geoPoint: TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageMediaGeo;
    }

    export interface InputBotInlineMessageMediaVenueArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Geolocation */
        geoPoint: TypeInputGeoPoint;
        /** Venue name */
        title: string;
        /** Address */
        address: string;
        /** Venue provider: currently only "foursquare" needs to be supported */
        provider: string;
        /** Venue ID in the provider's database */
        venueId: string;
        /** Venue type in the provider's database */
        venueType: string;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** Venue<br> */
    export class InputBotInlineMessageMediaVenue extends VirtualClass<InputBotInlineMessageMediaVenueArgs> implements InputBotInlineMessageMediaVenueArgs {
        CONSTRUCTOR_id: 1098628881;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageMediaVenue";
        flags: number;
        geoPoint: TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageMediaVenue;
    }

    export interface InputBotInlineMessageMediaContactArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Phone number */
        phoneNumber: string;
        /** First name */
        firstName: string;
        /** Last name */
        lastName: string;
        /** VCard info */
        vcard: string;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** A contact<br> */
    export class InputBotInlineMessageMediaContact extends VirtualClass<InputBotInlineMessageMediaContactArgs> implements InputBotInlineMessageMediaContactArgs {
        CONSTRUCTOR_id: -1494368259;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageMediaContact";
        flags: number;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageMediaContact;
    }

    export interface InputBotInlineMessageGameArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** A game<br> */
    export class InputBotInlineMessageGame extends VirtualClass<InputBotInlineMessageGameArgs> implements InputBotInlineMessageGameArgs {
        CONSTRUCTOR_id: 1262639204;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageGame";
        flags: number;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageGame;
    }

    export interface InputBotInlineMessageMediaInvoiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Product name, 1-32 characters */
        title: string;
        /** Product description, 1-255 characters */
        description: string;
        /** Invoice photo */
        photo?: TypeInputWebDocument;
        /** The invoice */
        invoice: TypeInvoice;
        /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
        payload: bytes;
        /** Payments provider token, obtained via <a href="https://t.me/botfather">Botfather</a> */
        provider: string;
        /** A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. */
        providerData: TypeDataJSON;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** An invoice<br> */
    export class InputBotInlineMessageMediaInvoice extends VirtualClass<InputBotInlineMessageMediaInvoiceArgs> implements InputBotInlineMessageMediaInvoiceArgs {
        CONSTRUCTOR_id: -672693723;
        SUBCLASS_OF_ID: 1408974864;
        classType: "constructor";
        className: "InputBotInlineMessageMediaInvoice";
        flags: number;
        title: string;
        description: string;
        photo?: TypeInputWebDocument;
        invoice: TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: TypeDataJSON;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): InputBotInlineMessageMediaInvoice;
    }

    export interface InputBotInlineResultArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** ID of result */
        id: string;
        /** Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>) */
        type: string;
        /** Result title */
        title?: string;
        /** Result description */
        description?: string;
        /** URL of result */
        url?: string;
        /** Thumbnail for result */
        thumb?: TypeInputWebDocument;
        /** Result contents */
        content?: TypeInputWebDocument;
        /** Message to send when the result is selected */
        sendMessage: TypeInputBotInlineMessage;
    }

    /**
     * An inline bot result<br>
     * @link https://corefork.telegram.org/bots/api
     */
    export class InputBotInlineResult extends VirtualClass<InputBotInlineResultArgs> implements InputBotInlineResultArgs {
        CONSTRUCTOR_id: -2000710887;
        SUBCLASS_OF_ID: 2158273502;
        classType: "constructor";
        className: "InputBotInlineResult";
        flags: number;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: TypeInputWebDocument;
        content?: TypeInputWebDocument;
        sendMessage: TypeInputBotInlineMessage;
        fromReader(reader: Reader): InputBotInlineResult;
    }

    export interface InputBotInlineResultPhotoArgs {
        /** Result ID */
        id: string;
        /** Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>) */
        type: string;
        /** Photo to send */
        photo: TypeInputPhoto;
        /** Message to send when the result is selected */
        sendMessage: TypeInputBotInlineMessage;
    }

    /**
     * Photo<br>
     * @link https://corefork.telegram.org/bots/api
     */
    export class InputBotInlineResultPhoto extends VirtualClass<InputBotInlineResultPhotoArgs> implements InputBotInlineResultPhotoArgs {
        CONSTRUCTOR_id: -1462213465;
        SUBCLASS_OF_ID: 2158273502;
        classType: "constructor";
        className: "InputBotInlineResultPhoto";
        id: string;
        type: string;
        photo: TypeInputPhoto;
        sendMessage: TypeInputBotInlineMessage;
        fromReader(reader: Reader): InputBotInlineResultPhoto;
    }

    export interface InputBotInlineResultDocumentArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Result ID */
        id: string;
        /** Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>) */
        type: string;
        /** Result title */
        title?: string;
        /** Result description */
        description?: string;
        /** Document to send */
        document: TypeInputDocument;
        /** Message to send when the result is selected */
        sendMessage: TypeInputBotInlineMessage;
    }

    /**
     * Document (media of any type except for photos)<br>
     * @link https://corefork.telegram.org/bots/api
     */
    export class InputBotInlineResultDocument extends VirtualClass<InputBotInlineResultDocumentArgs> implements InputBotInlineResultDocumentArgs {
        CONSTRUCTOR_id: -459324;
        SUBCLASS_OF_ID: 2158273502;
        classType: "constructor";
        className: "InputBotInlineResultDocument";
        flags: number;
        id: string;
        type: string;
        title?: string;
        description?: string;
        document: TypeInputDocument;
        sendMessage: TypeInputBotInlineMessage;
        fromReader(reader: Reader): InputBotInlineResultDocument;
    }

    export interface InputBotInlineResultGameArgs {
        /** Result ID */
        id: string;
        /** Game short name */
        shortName: string;
        /** Message to send when the result is selected */
        sendMessage: TypeInputBotInlineMessage;
    }

    /** Game<br> */
    export class InputBotInlineResultGame extends VirtualClass<InputBotInlineResultGameArgs> implements InputBotInlineResultGameArgs {
        CONSTRUCTOR_id: 1336154098;
        SUBCLASS_OF_ID: 2158273502;
        classType: "constructor";
        className: "InputBotInlineResultGame";
        id: string;
        shortName: string;
        sendMessage: TypeInputBotInlineMessage;
        fromReader(reader: Reader): InputBotInlineResultGame;
    }

    export interface BotInlineMessageMediaAutoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Caption */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Send whatever media is attached to the <a href="https://corefork.telegram.org/constructor/botInlineMediaResult">botInlineMediaResult</a><br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/constructor/botInlineMediaResult
     */
    export class BotInlineMessageMediaAuto extends VirtualClass<BotInlineMessageMediaAutoArgs> implements BotInlineMessageMediaAutoArgs {
        CONSTRUCTOR_id: 1984755728;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageMediaAuto";
        flags: number;
        message: string;
        entities?: TypeMessageEntity[];
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageMediaAuto;
    }

    export interface BotInlineMessageTextArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable webpage preview */
        noWebpage?: true;
        /** The message */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Send a simple text message<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class BotInlineMessageText extends VirtualClass<BotInlineMessageTextArgs> implements BotInlineMessageTextArgs {
        CONSTRUCTOR_id: -1937807902;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageText";
        flags: number;
        noWebpage?: true;
        message: string;
        entities?: TypeMessageEntity[];
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageText;
    }

    export interface BotInlineMessageMediaGeoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Geolocation */
        geo: TypeGeoPoint;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a direction in which the location moves, in degrees; 1-360. */
        heading?: int;
        /** Validity period */
        period?: int;
        /** For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
        proximityNotificationRadius?: int;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Send a geolocation<br>
     * @link https://corefork.telegram.org/api/live-location
     */
    export class BotInlineMessageMediaGeo extends VirtualClass<BotInlineMessageMediaGeoArgs> implements BotInlineMessageMediaGeoArgs {
        CONSTRUCTOR_id: 85477117;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageMediaGeo";
        flags: number;
        geo: TypeGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageMediaGeo;
    }

    export interface BotInlineMessageMediaVenueArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Geolocation of venue */
        geo: TypeGeoPoint;
        /** Venue name */
        title: string;
        /** Address */
        address: string;
        /** Venue provider: currently only "foursquare" needs to be supported */
        provider: string;
        /** Venue ID in the provider's database */
        venueId: string;
        /** Venue type in the provider's database */
        venueType: string;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** Send a venue<br> */
    export class BotInlineMessageMediaVenue extends VirtualClass<BotInlineMessageMediaVenueArgs> implements BotInlineMessageMediaVenueArgs {
        CONSTRUCTOR_id: -1970903652;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageMediaVenue";
        flags: number;
        geo: TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageMediaVenue;
    }

    export interface BotInlineMessageMediaContactArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Phone number */
        phoneNumber: string;
        /** First name */
        firstName: string;
        /** Last name */
        lastName: string;
        /** VCard info */
        vcard: string;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /** Send a contact<br> */
    export class BotInlineMessageMediaContact extends VirtualClass<BotInlineMessageMediaContactArgs> implements BotInlineMessageMediaContactArgs {
        CONSTRUCTOR_id: 416402882;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageMediaContact";
        flags: number;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageMediaContact;
    }

    export interface BotInlineMessageMediaInvoiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag if you require the user's shipping address to complete the order */
        shippingAddressRequested?: true;
        /** Test invoice */
        test?: true;
        /** Product name, 1-32 characters */
        title: string;
        /** Product description, 1-255 characters */
        description: string;
        /** Product photo */
        photo?: TypeWebDocument;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
        /** Inline keyboard */
        replyMarkup?: TypeReplyMarkup;
    }

    /**
     * Send an invoice<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class BotInlineMessageMediaInvoice extends VirtualClass<BotInlineMessageMediaInvoiceArgs> implements BotInlineMessageMediaInvoiceArgs {
        CONSTRUCTOR_id: 894081801;
        SUBCLASS_OF_ID: 3297841032;
        classType: "constructor";
        className: "BotInlineMessageMediaInvoice";
        flags: number;
        shippingAddressRequested?: true;
        test?: true;
        title: string;
        description: string;
        photo?: TypeWebDocument;
        currency: string;
        totalAmount: long;
        replyMarkup?: TypeReplyMarkup;
        fromReader(reader: Reader): BotInlineMessageMediaInvoice;
    }

    export interface BotInlineResultArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Result ID */
        id: string;
        /** Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>) */
        type: string;
        /** Result title */
        title?: string;
        /** Result description */
        description?: string;
        /** URL of article or webpage */
        url?: string;
        /** Thumbnail for the result */
        thumb?: TypeWebDocument;
        /** Content of the result */
        content?: TypeWebDocument;
        /** Message to send */
        sendMessage: TypeBotInlineMessage;
    }

    /**
     * Generic result<br>
     * @link https://corefork.telegram.org/bots/api
     */
    export class BotInlineResult extends VirtualClass<BotInlineResultArgs> implements BotInlineResultArgs {
        CONSTRUCTOR_id: 295067450;
        SUBCLASS_OF_ID: 942846933;
        classType: "constructor";
        className: "BotInlineResult";
        flags: number;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: TypeWebDocument;
        content?: TypeWebDocument;
        sendMessage: TypeBotInlineMessage;
        fromReader(reader: Reader): BotInlineResult;
    }

    export interface BotInlineMediaResultArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Result ID */
        id: string;
        /** Result type (see <a href="https://corefork.telegram.org/bots/api#inlinequeryresult">bot API docs</a>) */
        type: string;
        /** If type is <code>photo</code>, the photo to send */
        photo?: TypePhoto;
        /** If type is <code>document</code>, the document to send */
        document?: TypeDocument;
        /** Result title */
        title?: string;
        /** Description */
        description?: string;
        /** Depending on the <code>type</code> and on the <a href="https://corefork.telegram.org/type/BotInlineMessage">constructor</a>, contains the caption of the media or the content of the message to be sent <strong>instead</strong> of the media */
        sendMessage: TypeBotInlineMessage;
    }

    /**
     * Media result<br>
     * @link https://corefork.telegram.org/bots/api
     * @link https://corefork.telegram.org/type/BotInlineMessage
     */
    export class BotInlineMediaResult extends VirtualClass<BotInlineMediaResultArgs> implements BotInlineMediaResultArgs {
        CONSTRUCTOR_id: 400266251;
        SUBCLASS_OF_ID: 942846933;
        classType: "constructor";
        className: "BotInlineMediaResult";
        flags: number;
        id: string;
        type: string;
        photo?: TypePhoto;
        document?: TypeDocument;
        title?: string;
        description?: string;
        sendMessage: TypeBotInlineMessage;
        fromReader(reader: Reader): BotInlineMediaResult;
    }

    export interface ExportedMessageLinkArgs {
        /** URL */
        link: string;
        /** Embed code */
        html: string;
    }

    /** Link to a message in a supergroup/channel<br> */
    export class ExportedMessageLink extends VirtualClass<ExportedMessageLinkArgs> implements ExportedMessageLinkArgs {
        CONSTRUCTOR_id: 1571494644;
        SUBCLASS_OF_ID: 3739632844;
        classType: "constructor";
        className: "ExportedMessageLink";
        link: string;
        html: string;
        fromReader(reader: Reader): ExportedMessageLink;
    }

    export interface MessageFwdHeaderArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this message was <a href="https://corefork.telegram.org/api/import">imported from a foreign chat service, click here for more info »</a> */
        imported?: true;
        /** The ID of the user that originally sent the message */
        fromId?: TypePeer;
        /** The name of the user that originally sent the message */
        fromName?: string;
        /** When was the message originally sent */
        date: int;
        /** ID of the channel message that was forwarded */
        channelPost?: int;
        /** For channels and if signatures are enabled, author of the channel message */
        postAuthor?: string;
        /** Only for messages forwarded to the current user (inputPeerSelf), full info about the user/channel that originally sent the message */
        savedFromPeer?: TypePeer;
        /** Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user/channel */
        savedFromMsgId?: MessageIDLike;
        /** PSA type */
        psaType?: string;
    }

    /**
     * Info about a forwarded message<br>
     * @link https://corefork.telegram.org/api/import
     */
    export class MessageFwdHeader extends VirtualClass<MessageFwdHeaderArgs> implements MessageFwdHeaderArgs {
        CONSTRUCTOR_id: 1601666510;
        SUBCLASS_OF_ID: 2049468420;
        classType: "constructor";
        className: "MessageFwdHeader";
        flags: number;
        imported?: true;
        fromId?: TypePeer;
        fromName?: string;
        date: int;
        channelPost?: int;
        postAuthor?: string;
        savedFromPeer?: TypePeer;
        savedFromMsgId?: MessageIDLike;
        psaType?: string;
        fromReader(reader: Reader): MessageFwdHeader;
    }

    export interface InputBotInlineMessageIDArgs {
        /** DC ID to use when working with this inline message */
        dcId: int;
        /** ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID. */
        id: long;
        /** Access hash of message */
        accessHash: long;
    }

    /** Represents a sent inline message from the perspective of a bot (legacy constructor)<br> */
    export class InputBotInlineMessageID extends VirtualClass<InputBotInlineMessageIDArgs> implements InputBotInlineMessageIDArgs {
        CONSTRUCTOR_id: -1995686519;
        SUBCLASS_OF_ID: 768434944;
        classType: "constructor";
        className: "InputBotInlineMessageID";
        dcId: int;
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputBotInlineMessageID;
    }

    export interface InlineBotSwitchPMArgs {
        /** Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter <code>start_parameter</code> (can be empty) */
        text: string;
        /** The parameter for the <code>/start parameter</code> */
        startParam: string;
    }

    /** The bot requested the user to message him in private<br> */
    export class InlineBotSwitchPM extends VirtualClass<InlineBotSwitchPMArgs> implements InlineBotSwitchPMArgs {
        CONSTRUCTOR_id: 1008755359;
        SUBCLASS_OF_ID: 2192701243;
        classType: "constructor";
        className: "InlineBotSwitchPM";
        text: string;
        startParam: string;
        fromReader(reader: Reader): InlineBotSwitchPM;
    }

    export interface TopPeerArgs {
        /** Peer */
        peer: TypePeer;
        /** Rating as computed in <a href="https://corefork.telegram.org/api/top-rating">top peer rating »</a> */
        rating: double;
    }

    /**
     * Top peer<br>
     * @link https://corefork.telegram.org/api/top-rating
     */
    export class TopPeer extends VirtualClass<TopPeerArgs> implements TopPeerArgs {
        CONSTRUCTOR_id: -305282981;
        SUBCLASS_OF_ID: 1763100161;
        classType: "constructor";
        className: "TopPeer";
        peer: TypePeer;
        rating: double;
        fromReader(reader: Reader): TopPeer;
    }

    /** Most used bots<br> */
    export class TopPeerCategoryBotsPM extends VirtualClass<void> {
        CONSTRUCTOR_id: -1419371685;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryBotsPM";
        fromReader(reader: Reader): TopPeerCategoryBotsPM;
    }

    /** Most used inline bots<br> */
    export class TopPeerCategoryBotsInline extends VirtualClass<void> {
        CONSTRUCTOR_id: 344356834;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryBotsInline";
        fromReader(reader: Reader): TopPeerCategoryBotsInline;
    }

    /** Users we've chatted most frequently with<br> */
    export class TopPeerCategoryCorrespondents extends VirtualClass<void> {
        CONSTRUCTOR_id: 104314861;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryCorrespondents";
        fromReader(reader: Reader): TopPeerCategoryCorrespondents;
    }

    /** Often-opened groups and supergroups<br> */
    export class TopPeerCategoryGroups extends VirtualClass<void> {
        CONSTRUCTOR_id: -1122524854;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryGroups";
        fromReader(reader: Reader): TopPeerCategoryGroups;
    }

    /** Most frequently visited channels<br> */
    export class TopPeerCategoryChannels extends VirtualClass<void> {
        CONSTRUCTOR_id: 371037736;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryChannels";
        fromReader(reader: Reader): TopPeerCategoryChannels;
    }

    /** Most frequently called users<br> */
    export class TopPeerCategoryPhoneCalls extends VirtualClass<void> {
        CONSTRUCTOR_id: 511092620;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryPhoneCalls";
        fromReader(reader: Reader): TopPeerCategoryPhoneCalls;
    }

    /** Users to which the users often forwards messages to<br> */
    export class TopPeerCategoryForwardUsers extends VirtualClass<void> {
        CONSTRUCTOR_id: -1472172887;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryForwardUsers";
        fromReader(reader: Reader): TopPeerCategoryForwardUsers;
    }

    /** Chats to which the users often forwards messages to<br> */
    export class TopPeerCategoryForwardChats extends VirtualClass<void> {
        CONSTRUCTOR_id: -68239120;
        SUBCLASS_OF_ID: 3723502850;
        classType: "constructor";
        className: "TopPeerCategoryForwardChats";
        fromReader(reader: Reader): TopPeerCategoryForwardChats;
    }

    export interface TopPeerCategoryPeersArgs {
        /** Top peer category of peers */
        category: TypeTopPeerCategory;
        /** Count of peers */
        count: int;
        /** Peers */
        peers: TypeTopPeer[];
    }

    /** Top peer category<br> */
    export class TopPeerCategoryPeers extends VirtualClass<TopPeerCategoryPeersArgs> implements TopPeerCategoryPeersArgs {
        CONSTRUCTOR_id: -75283823;
        SUBCLASS_OF_ID: 78563632;
        classType: "constructor";
        className: "TopPeerCategoryPeers";
        category: TypeTopPeerCategory;
        count: int;
        peers: TypeTopPeer[];
        fromReader(reader: Reader): TopPeerCategoryPeers;
    }

    export interface DraftMessageEmptyArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** When was the draft last updated */
        date?: int;
    }

    /** Empty draft<br> */
    export class DraftMessageEmpty extends VirtualClass<DraftMessageEmptyArgs> implements DraftMessageEmptyArgs {
        CONSTRUCTOR_id: 453805082;
        SUBCLASS_OF_ID: 869564229;
        classType: "constructor";
        className: "DraftMessageEmpty";
        flags: number;
        date?: int;
        fromReader(reader: Reader): DraftMessageEmpty;
    }

    export interface DraftMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether no webpage preview will be generated */
        noWebpage?: true;
        /** The message this message will reply to */
        replyToMsgId?: MessageIDLike;
        /** The draft */
        message: string;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text. */
        entities?: TypeMessageEntity[];
        /** Date of last update of the draft. */
        date: int;
    }

    /**
     * Represents a message <a href="https://corefork.telegram.org/api/drafts">draft</a>.<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/drafts
     */
    export class DraftMessage extends VirtualClass<DraftMessageArgs> implements DraftMessageArgs {
        CONSTRUCTOR_id: -40996577;
        SUBCLASS_OF_ID: 869564229;
        classType: "constructor";
        className: "DraftMessage";
        flags: number;
        noWebpage?: true;
        replyToMsgId?: MessageIDLike;
        message: string;
        entities?: TypeMessageEntity[];
        date: int;
        fromReader(reader: Reader): DraftMessage;
    }

    export interface StickerSetCoveredArgs {
        /** Stickerset */
        set: TypeStickerSet;
        /** Preview */
        cover: TypeDocument;
    }

    /** Stickerset, with a specific sticker as preview<br> */
    export class StickerSetCovered extends VirtualClass<StickerSetCoveredArgs> implements StickerSetCoveredArgs {
        CONSTRUCTOR_id: 1678812626;
        SUBCLASS_OF_ID: 2139546853;
        classType: "constructor";
        className: "StickerSetCovered";
        set: TypeStickerSet;
        cover: TypeDocument;
        fromReader(reader: Reader): StickerSetCovered;
    }

    export interface StickerSetMultiCoveredArgs {
        /** Stickerset */
        set: TypeStickerSet;
        /** Preview stickers */
        covers: TypeDocument[];
    }

    /** Stickerset, with a specific stickers as preview<br> */
    export class StickerSetMultiCovered extends VirtualClass<StickerSetMultiCoveredArgs> implements StickerSetMultiCoveredArgs {
        CONSTRUCTOR_id: 872932635;
        SUBCLASS_OF_ID: 2139546853;
        classType: "constructor";
        className: "StickerSetMultiCovered";
        set: TypeStickerSet;
        covers: TypeDocument[];
        fromReader(reader: Reader): StickerSetMultiCovered;
    }

    export interface MaskCoordsArgs {
        /** Part of the face, relative to which the mask should be placed */
        n: int;
        /** Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position) */
        x: double;
        /** Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position) */
        y: double;
        /** Mask scaling coefficient. (For example, 2.0 means a doubled size) */
        zoom: double;
    }

    /** Position on a photo where a mask should be placed<br>The <code>n</code> position indicates where the mask should be placed: */
    export class MaskCoords extends VirtualClass<MaskCoordsArgs> implements MaskCoordsArgs {
        CONSTRUCTOR_id: -1361650766;
        SUBCLASS_OF_ID: 112964349;
        classType: "constructor";
        className: "MaskCoords";
        n: int;
        x: double;
        y: double;
        zoom: double;
        fromReader(reader: Reader): MaskCoords;
    }

    export interface InputStickeredMediaPhotoArgs {
        /** The photo */
        id: TypeInputPhoto;
    }

    /** A photo with stickers attached<br> */
    export class InputStickeredMediaPhoto extends VirtualClass<InputStickeredMediaPhotoArgs> implements InputStickeredMediaPhotoArgs {
        CONSTRUCTOR_id: 1251549527;
        SUBCLASS_OF_ID: 1363597726;
        classType: "constructor";
        className: "InputStickeredMediaPhoto";
        id: TypeInputPhoto;
        fromReader(reader: Reader): InputStickeredMediaPhoto;
    }

    export interface InputStickeredMediaDocumentArgs {
        /** The document */
        id: TypeInputDocument;
    }

    /** A document with stickers attached<br> */
    export class InputStickeredMediaDocument extends VirtualClass<InputStickeredMediaDocumentArgs> implements InputStickeredMediaDocumentArgs {
        CONSTRUCTOR_id: 70813275;
        SUBCLASS_OF_ID: 1363597726;
        classType: "constructor";
        className: "InputStickeredMediaDocument";
        id: TypeInputDocument;
        fromReader(reader: Reader): InputStickeredMediaDocument;
    }

    export interface GameArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** ID of the game */
        id: long;
        /** Access hash of the game */
        accessHash: long;
        /** Short name for the game */
        shortName: string;
        /** Title of the game */
        title: string;
        /** Game description */
        description: string;
        /** Game preview */
        photo: TypePhoto;
        /** Optional attached document */
        document?: TypeDocument;
    }

    /** Indicates an already sent game<br> */
    export class Game extends VirtualClass<GameArgs> implements GameArgs {
        CONSTRUCTOR_id: -1107729093;
        SUBCLASS_OF_ID: 2199494322;
        classType: "constructor";
        className: "Game";
        flags: number;
        id: long;
        accessHash: long;
        shortName: string;
        title: string;
        description: string;
        photo: TypePhoto;
        document?: TypeDocument;
        fromReader(reader: Reader): Game;
    }

    export interface InputGameIDArgs {
        /** game ID from <a href="https://corefork.telegram.org/type/Game">Game</a> constructor */
        id: long;
        /** access hash from <a href="https://corefork.telegram.org/type/Game">Game</a> constructor */
        accessHash: long;
    }

    /**
     * Indicates an already sent game<br>
     * @link https://corefork.telegram.org/type/Game
     */
    export class InputGameID extends VirtualClass<InputGameIDArgs> implements InputGameIDArgs {
        CONSTRUCTOR_id: 53231223;
        SUBCLASS_OF_ID: 1221679235;
        classType: "constructor";
        className: "InputGameID";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputGameID;
    }

    export interface InputGameShortNameArgs {
        /** The bot that provides the game */
        botId: TypeInputUser;
        /** The game's short name */
        shortName: string;
    }

    /** Game by short name<br> */
    export class InputGameShortName extends VirtualClass<InputGameShortNameArgs> implements InputGameShortNameArgs {
        CONSTRUCTOR_id: -1020139510;
        SUBCLASS_OF_ID: 1221679235;
        classType: "constructor";
        className: "InputGameShortName";
        botId: TypeInputUser;
        shortName: string;
        fromReader(reader: Reader): InputGameShortName;
    }

    export interface HighScoreArgs {
        /** Position in highscore list */
        pos: int;
        /** User ID */
        userId: int;
        /** Score */
        score: int;
    }

    /** Game highscore<br> */
    export class HighScore extends VirtualClass<HighScoreArgs> implements HighScoreArgs {
        CONSTRUCTOR_id: 1493171408;
        SUBCLASS_OF_ID: 3542818357;
        classType: "constructor";
        className: "HighScore";
        pos: int;
        userId: int;
        score: int;
        fromReader(reader: Reader): HighScore;
    }

    /** Empty rich text element<br> */
    export class TextEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -599948721;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextEmpty";
        fromReader(reader: Reader): TextEmpty;
    }

    export interface TextPlainArgs {
        /** Text */
        text: string;
    }

    /** Plain text<br> */
    export class TextPlain extends VirtualClass<TextPlainArgs> implements TextPlainArgs {
        CONSTRUCTOR_id: 1950782688;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextPlain";
        text: string;
        fromReader(reader: Reader): TextPlain;
    }

    export interface TextBoldArgs {
        /** Text */
        text: TypeRichText;
    }

    /** <strong>Bold</strong> text<br> */
    export class TextBold extends VirtualClass<TextBoldArgs> implements TextBoldArgs {
        CONSTRUCTOR_id: 1730456516;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextBold";
        text: TypeRichText;
        fromReader(reader: Reader): TextBold;
    }

    export interface TextItalicArgs {
        /** Text */
        text: TypeRichText;
    }

    /** <em>Italic</em> text<br> */
    export class TextItalic extends VirtualClass<TextItalicArgs> implements TextItalicArgs {
        CONSTRUCTOR_id: -653089380;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextItalic";
        text: TypeRichText;
        fromReader(reader: Reader): TextItalic;
    }

    export interface TextUnderlineArgs {
        /** Text */
        text: TypeRichText;
    }

    /** Underlined text<br> */
    export class TextUnderline extends VirtualClass<TextUnderlineArgs> implements TextUnderlineArgs {
        CONSTRUCTOR_id: -1054465340;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextUnderline";
        text: TypeRichText;
        fromReader(reader: Reader): TextUnderline;
    }

    export interface TextStrikeArgs {
        /** Text */
        text: TypeRichText;
    }

    /** <del>Strikethrough</del> text<br> */
    export class TextStrike extends VirtualClass<TextStrikeArgs> implements TextStrikeArgs {
        CONSTRUCTOR_id: -1678197867;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextStrike";
        text: TypeRichText;
        fromReader(reader: Reader): TextStrike;
    }

    export interface TextFixedArgs {
        /** Text */
        text: TypeRichText;
    }

    /** <code>fixed-width</code> rich text<br> */
    export class TextFixed extends VirtualClass<TextFixedArgs> implements TextFixedArgs {
        CONSTRUCTOR_id: 1816074681;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextFixed";
        text: TypeRichText;
        fromReader(reader: Reader): TextFixed;
    }

    export interface TextUrlArgs {
        /** Text of link */
        text: TypeRichText;
        /** Webpage HTTP URL */
        url: string;
        /** If a preview was already generated for the page, the page ID */
        webpageId: long;
    }

    /** Link<br> */
    export class TextUrl extends VirtualClass<TextUrlArgs> implements TextUrlArgs {
        CONSTRUCTOR_id: 1009288385;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextUrl";
        text: TypeRichText;
        url: string;
        webpageId: long;
        fromReader(reader: Reader): TextUrl;
    }

    export interface TextEmailArgs {
        /** Link text */
        text: TypeRichText;
        /** Email address */
        email: string;
    }

    /** Rich text email link<br> */
    export class TextEmail extends VirtualClass<TextEmailArgs> implements TextEmailArgs {
        CONSTRUCTOR_id: -564523562;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextEmail";
        text: TypeRichText;
        email: string;
        fromReader(reader: Reader): TextEmail;
    }

    export interface TextConcatArgs {
        /** Concatenated rich texts */
        texts: TypeRichText[];
    }

    /** Concatenation of rich texts<br> */
    export class TextConcat extends VirtualClass<TextConcatArgs> implements TextConcatArgs {
        CONSTRUCTOR_id: 2120376535;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextConcat";
        texts: TypeRichText[];
        fromReader(reader: Reader): TextConcat;
    }

    export interface TextSubscriptArgs {
        /** Text */
        text: TypeRichText;
    }

    /** Subscript text<br> */
    export class TextSubscript extends VirtualClass<TextSubscriptArgs> implements TextSubscriptArgs {
        CONSTRUCTOR_id: -311786236;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextSubscript";
        text: TypeRichText;
        fromReader(reader: Reader): TextSubscript;
    }

    export interface TextSuperscriptArgs {
        /** Text */
        text: TypeRichText;
    }

    /** Superscript text<br> */
    export class TextSuperscript extends VirtualClass<TextSuperscriptArgs> implements TextSuperscriptArgs {
        CONSTRUCTOR_id: -939827711;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextSuperscript";
        text: TypeRichText;
        fromReader(reader: Reader): TextSuperscript;
    }

    export interface TextMarkedArgs {
        /** Text */
        text: TypeRichText;
    }

    /** Highlighted text<br> */
    export class TextMarked extends VirtualClass<TextMarkedArgs> implements TextMarkedArgs {
        CONSTRUCTOR_id: 55281185;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextMarked";
        text: TypeRichText;
        fromReader(reader: Reader): TextMarked;
    }

    export interface TextPhoneArgs {
        /** Text */
        text: TypeRichText;
        /** Phone number */
        phone: string;
    }

    /** Rich text linked to a phone number<br> */
    export class TextPhone extends VirtualClass<TextPhoneArgs> implements TextPhoneArgs {
        CONSTRUCTOR_id: 483104362;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextPhone";
        text: TypeRichText;
        phone: string;
        fromReader(reader: Reader): TextPhone;
    }

    export interface TextImageArgs {
        /** Document ID */
        documentId: long;
        /** Width */
        w: int;
        /** Height */
        h: int;
    }

    /** Inline image<br> */
    export class TextImage extends VirtualClass<TextImageArgs> implements TextImageArgs {
        CONSTRUCTOR_id: 136105807;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextImage";
        documentId: long;
        w: int;
        h: int;
        fromReader(reader: Reader): TextImage;
    }

    export interface TextAnchorArgs {
        /** Text */
        text: TypeRichText;
        /** Section name */
        name: string;
    }

    /** Text linking to another section of the page<br> */
    export class TextAnchor extends VirtualClass<TextAnchorArgs> implements TextAnchorArgs {
        CONSTRUCTOR_id: 894777186;
        SUBCLASS_OF_ID: 4056986745;
        classType: "constructor";
        className: "TextAnchor";
        text: TypeRichText;
        name: string;
        fromReader(reader: Reader): TextAnchor;
    }

    /** Unsupported IV element<br> */
    export class PageBlockUnsupported extends VirtualClass<void> {
        CONSTRUCTOR_id: 324435594;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockUnsupported";
        fromReader(reader: Reader): PageBlockUnsupported;
    }

    export interface PageBlockTitleArgs {
        /** Title */
        text: TypeRichText;
    }

    /** Title<br> */
    export class PageBlockTitle extends VirtualClass<PageBlockTitleArgs> implements PageBlockTitleArgs {
        CONSTRUCTOR_id: 1890305021;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockTitle";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockTitle;
    }

    export interface PageBlockSubtitleArgs {
        /** Text */
        text: TypeRichText;
    }

    /** Subtitle<br> */
    export class PageBlockSubtitle extends VirtualClass<PageBlockSubtitleArgs> implements PageBlockSubtitleArgs {
        CONSTRUCTOR_id: -1879401953;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockSubtitle";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockSubtitle;
    }

    export interface PageBlockAuthorDateArgs {
        /** Author name */
        author: TypeRichText;
        /** Date of pubblication */
        publishedDate: int;
    }

    /** Author and date of creation of article<br> */
    export class PageBlockAuthorDate extends VirtualClass<PageBlockAuthorDateArgs> implements PageBlockAuthorDateArgs {
        CONSTRUCTOR_id: -1162877472;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockAuthorDate";
        author: TypeRichText;
        publishedDate: int;
        fromReader(reader: Reader): PageBlockAuthorDate;
    }

    export interface PageBlockHeaderArgs {
        /** Contents */
        text: TypeRichText;
    }

    /** Page header<br> */
    export class PageBlockHeader extends VirtualClass<PageBlockHeaderArgs> implements PageBlockHeaderArgs {
        CONSTRUCTOR_id: -1076861716;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockHeader";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockHeader;
    }

    export interface PageBlockSubheaderArgs {
        /** Subheader */
        text: TypeRichText;
    }

    /** Subheader<br> */
    export class PageBlockSubheader extends VirtualClass<PageBlockSubheaderArgs> implements PageBlockSubheaderArgs {
        CONSTRUCTOR_id: -248793375;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockSubheader";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockSubheader;
    }

    export interface PageBlockParagraphArgs {
        /** Text */
        text: TypeRichText;
    }

    /** A paragraph<br> */
    export class PageBlockParagraph extends VirtualClass<PageBlockParagraphArgs> implements PageBlockParagraphArgs {
        CONSTRUCTOR_id: 1182402406;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockParagraph";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockParagraph;
    }

    export interface PageBlockPreformattedArgs {
        /** Text */
        text: TypeRichText;
        /** Programming language of preformatted text */
        language: string;
    }

    /** Preformatted (<code>&lt;pre&gt;</code> text)<br> */
    export class PageBlockPreformatted extends VirtualClass<PageBlockPreformattedArgs> implements PageBlockPreformattedArgs {
        CONSTRUCTOR_id: -1066346178;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockPreformatted";
        text: TypeRichText;
        language: string;
        fromReader(reader: Reader): PageBlockPreformatted;
    }

    export interface PageBlockFooterArgs {
        /** Contents */
        text: TypeRichText;
    }

    /** Page footer<br> */
    export class PageBlockFooter extends VirtualClass<PageBlockFooterArgs> implements PageBlockFooterArgs {
        CONSTRUCTOR_id: 1216809369;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockFooter";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockFooter;
    }

    /** An empty block separating a page<br> */
    export class PageBlockDivider extends VirtualClass<void> {
        CONSTRUCTOR_id: -618614392;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockDivider";
        fromReader(reader: Reader): PageBlockDivider;
    }

    export interface PageBlockAnchorArgs {
        /** Name of target section */
        name: string;
    }

    /** Link to section within the page itself (like <code>&lt;a href="#target"&gt;anchor&lt;/a&gt;</code>)<br> */
    export class PageBlockAnchor extends VirtualClass<PageBlockAnchorArgs> implements PageBlockAnchorArgs {
        CONSTRUCTOR_id: -837994576;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockAnchor";
        name: string;
        fromReader(reader: Reader): PageBlockAnchor;
    }

    export interface PageBlockListArgs {
        /** List of blocks in an IV page */
        items: TypePageListItem[];
    }

    /** Unordered list of IV blocks<br> */
    export class PageBlockList extends VirtualClass<PageBlockListArgs> implements PageBlockListArgs {
        CONSTRUCTOR_id: -454524911;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockList";
        items: TypePageListItem[];
        fromReader(reader: Reader): PageBlockList;
    }

    export interface PageBlockBlockquoteArgs {
        /** Quote contents */
        text: TypeRichText;
        /** Caption */
        caption: TypeRichText;
    }

    /** Quote (equivalent to the HTML <code>&lt;blockquote&gt;</code>)<br> */
    export class PageBlockBlockquote extends VirtualClass<PageBlockBlockquoteArgs> implements PageBlockBlockquoteArgs {
        CONSTRUCTOR_id: 641563686;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockBlockquote";
        text: TypeRichText;
        caption: TypeRichText;
        fromReader(reader: Reader): PageBlockBlockquote;
    }

    export interface PageBlockPullquoteArgs {
        /** Text */
        text: TypeRichText;
        /** Caption */
        caption: TypeRichText;
    }

    /** Pullquote<br> */
    export class PageBlockPullquote extends VirtualClass<PageBlockPullquoteArgs> implements PageBlockPullquoteArgs {
        CONSTRUCTOR_id: 1329878739;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockPullquote";
        text: TypeRichText;
        caption: TypeRichText;
        fromReader(reader: Reader): PageBlockPullquote;
    }

    export interface PageBlockPhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Photo ID */
        photoId: long;
        /** Caption */
        caption: TypePageCaption;
        /** HTTP URL of page the photo leads to when clicked */
        url?: string;
        /** ID of preview of the page the photo leads to when clicked */
        webpageId?: long;
    }

    /** A photo<br> */
    export class PageBlockPhoto extends VirtualClass<PageBlockPhotoArgs> implements PageBlockPhotoArgs {
        CONSTRUCTOR_id: 391759200;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockPhoto";
        flags: number;
        photoId: long;
        caption: TypePageCaption;
        url?: string;
        webpageId?: long;
        fromReader(reader: Reader): PageBlockPhoto;
    }

    export interface PageBlockVideoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the video is set to autoplay */
        autoplay?: true;
        /** Whether the video is set to loop */
        loop?: true;
        /** Video ID */
        videoId: long;
        /** Caption */
        caption: TypePageCaption;
    }

    /** Video<br> */
    export class PageBlockVideo extends VirtualClass<PageBlockVideoArgs> implements PageBlockVideoArgs {
        CONSTRUCTOR_id: 2089805750;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockVideo";
        flags: number;
        autoplay?: true;
        loop?: true;
        videoId: long;
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockVideo;
    }

    export interface PageBlockCoverArgs {
        /** Cover */
        cover: TypePageBlock;
    }

    /** A page cover<br> */
    export class PageBlockCover extends VirtualClass<PageBlockCoverArgs> implements PageBlockCoverArgs {
        CONSTRUCTOR_id: 972174080;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockCover";
        cover: TypePageBlock;
        fromReader(reader: Reader): PageBlockCover;
    }

    export interface PageBlockEmbedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the block should be full width */
        fullWidth?: true;
        /** Whether scrolling should be allowed */
        allowScrolling?: true;
        /** Web page URL, if available */
        url?: string;
        /** HTML-markup of the embedded page */
        html?: string;
        /** Poster photo, if available */
        posterPhotoId?: long;
        /** Block width, if known */
        w?: int;
        /** Block height, if known */
        h?: int;
        /** Caption */
        caption: TypePageCaption;
    }

    /** An embedded webpage<br> */
    export class PageBlockEmbed extends VirtualClass<PageBlockEmbedArgs> implements PageBlockEmbedArgs {
        CONSTRUCTOR_id: -1468953147;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockEmbed";
        flags: number;
        fullWidth?: true;
        allowScrolling?: true;
        url?: string;
        html?: string;
        posterPhotoId?: long;
        w?: int;
        h?: int;
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockEmbed;
    }

    export interface PageBlockEmbedPostArgs {
        /** Web page URL */
        url: string;
        /** ID of generated webpage preview */
        webpageId: long;
        /** ID of the author's photo */
        authorPhotoId: long;
        /** Author name */
        author: string;
        /** Creation date */
        date: int;
        /** Post contents */
        blocks: TypePageBlock[];
        /** Caption */
        caption: TypePageCaption;
    }

    /** An embedded post<br> */
    export class PageBlockEmbedPost extends VirtualClass<PageBlockEmbedPostArgs> implements PageBlockEmbedPostArgs {
        CONSTRUCTOR_id: -229005301;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockEmbedPost";
        url: string;
        webpageId: long;
        authorPhotoId: long;
        author: string;
        date: int;
        blocks: TypePageBlock[];
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockEmbedPost;
    }

    export interface PageBlockCollageArgs {
        /** Media elements */
        items: TypePageBlock[];
        /** Caption */
        caption: TypePageCaption;
    }

    /** Collage of media<br> */
    export class PageBlockCollage extends VirtualClass<PageBlockCollageArgs> implements PageBlockCollageArgs {
        CONSTRUCTOR_id: 1705048653;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockCollage";
        items: TypePageBlock[];
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockCollage;
    }

    export interface PageBlockSlideshowArgs {
        /** Slideshow items */
        items: TypePageBlock[];
        /** Caption */
        caption: TypePageCaption;
    }

    /** Slideshow<br> */
    export class PageBlockSlideshow extends VirtualClass<PageBlockSlideshowArgs> implements PageBlockSlideshowArgs {
        CONSTRUCTOR_id: 52401552;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockSlideshow";
        items: TypePageBlock[];
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockSlideshow;
    }

    export interface PageBlockChannelArgs {
        /** The channel/supergroup/chat */
        channel: TypeChat;
    }

    /** Reference to a telegram channel<br> */
    export class PageBlockChannel extends VirtualClass<PageBlockChannelArgs> implements PageBlockChannelArgs {
        CONSTRUCTOR_id: -283684427;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockChannel";
        channel: TypeChat;
        fromReader(reader: Reader): PageBlockChannel;
    }

    export interface PageBlockAudioArgs {
        /** Audio ID (to be fetched from the container <a href="https://corefork.telegram.org/constructor/page">page</a> constructor */
        audioId: long;
        /** Audio caption */
        caption: TypePageCaption;
    }

    /**
     * Audio<br>
     * @link https://corefork.telegram.org/constructor/page
     * @link https://instantview.telegram.org/
     */
    export class PageBlockAudio extends VirtualClass<PageBlockAudioArgs> implements PageBlockAudioArgs {
        CONSTRUCTOR_id: -2143067670;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockAudio";
        audioId: long;
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockAudio;
    }

    export interface PageBlockKickerArgs {
        /** Contents */
        text: TypeRichText;
    }

    /** Kicker<br> */
    export class PageBlockKicker extends VirtualClass<PageBlockKickerArgs> implements PageBlockKickerArgs {
        CONSTRUCTOR_id: 504660880;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockKicker";
        text: TypeRichText;
        fromReader(reader: Reader): PageBlockKicker;
    }

    export interface PageBlockTableArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Does the table have a visible border? */
        bordered?: true;
        /** Is the table striped? */
        striped?: true;
        /** Title */
        title: TypeRichText;
        /** Table rows */
        rows: TypePageTableRow[];
    }

    /** Table<br> */
    export class PageBlockTable extends VirtualClass<PageBlockTableArgs> implements PageBlockTableArgs {
        CONSTRUCTOR_id: -1085412734;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockTable";
        flags: number;
        bordered?: true;
        striped?: true;
        title: TypeRichText;
        rows: TypePageTableRow[];
        fromReader(reader: Reader): PageBlockTable;
    }

    export interface PageBlockOrderedListArgs {
        /** List items */
        items: TypePageListOrderedItem[];
    }

    /** Ordered list of IV blocks<br> */
    export class PageBlockOrderedList extends VirtualClass<PageBlockOrderedListArgs> implements PageBlockOrderedListArgs {
        CONSTRUCTOR_id: -1702174239;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockOrderedList";
        items: TypePageListOrderedItem[];
        fromReader(reader: Reader): PageBlockOrderedList;
    }

    export interface PageBlockDetailsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the block is open by default */
        open?: true;
        /** Block contents */
        blocks: TypePageBlock[];
        /** Always visible heading for the block */
        title: TypeRichText;
    }

    /** A collapsible details block<br> */
    export class PageBlockDetails extends VirtualClass<PageBlockDetailsArgs> implements PageBlockDetailsArgs {
        CONSTRUCTOR_id: 1987480557;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockDetails";
        flags: number;
        open?: true;
        blocks: TypePageBlock[];
        title: TypeRichText;
        fromReader(reader: Reader): PageBlockDetails;
    }

    export interface PageBlockRelatedArticlesArgs {
        /** Title */
        title: TypeRichText;
        /** Related articles */
        articles: TypePageRelatedArticle[];
    }

    /** Related articles<br> */
    export class PageBlockRelatedArticles extends VirtualClass<PageBlockRelatedArticlesArgs> implements PageBlockRelatedArticlesArgs {
        CONSTRUCTOR_id: 370236054;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockRelatedArticles";
        title: TypeRichText;
        articles: TypePageRelatedArticle[];
        fromReader(reader: Reader): PageBlockRelatedArticles;
    }

    export interface PageBlockMapArgs {
        /** Location of the map center */
        geo: TypeGeoPoint;
        /** Map zoom level; 13-20 */
        zoom: int;
        /** Map width in pixels before applying scale; 16-102 */
        w: int;
        /** Map height in pixels before applying scale; 16-1024 */
        h: int;
        /** Caption */
        caption: TypePageCaption;
    }

    /** A map<br> */
    export class PageBlockMap extends VirtualClass<PageBlockMapArgs> implements PageBlockMapArgs {
        CONSTRUCTOR_id: -1538310410;
        SUBCLASS_OF_ID: 449467972;
        classType: "constructor";
        className: "PageBlockMap";
        geo: TypeGeoPoint;
        zoom: int;
        w: int;
        h: int;
        caption: TypePageCaption;
        fromReader(reader: Reader): PageBlockMap;
    }

    /** The phone call was missed<br> */
    export class PhoneCallDiscardReasonMissed extends VirtualClass<void> {
        CONSTRUCTOR_id: -2048646399;
        SUBCLASS_OF_ID: 3634081085;
        classType: "constructor";
        className: "PhoneCallDiscardReasonMissed";
        fromReader(reader: Reader): PhoneCallDiscardReasonMissed;
    }

    /** The phone call was disconnected<br> */
    export class PhoneCallDiscardReasonDisconnect extends VirtualClass<void> {
        CONSTRUCTOR_id: -527056480;
        SUBCLASS_OF_ID: 3634081085;
        classType: "constructor";
        className: "PhoneCallDiscardReasonDisconnect";
        fromReader(reader: Reader): PhoneCallDiscardReasonDisconnect;
    }

    /** The phone call was ended normally<br> */
    export class PhoneCallDiscardReasonHangup extends VirtualClass<void> {
        CONSTRUCTOR_id: 1471006352;
        SUBCLASS_OF_ID: 3634081085;
        classType: "constructor";
        className: "PhoneCallDiscardReasonHangup";
        fromReader(reader: Reader): PhoneCallDiscardReasonHangup;
    }

    /** The phone call was discared because the user is busy in another call<br> */
    export class PhoneCallDiscardReasonBusy extends VirtualClass<void> {
        CONSTRUCTOR_id: -84416311;
        SUBCLASS_OF_ID: 3634081085;
        classType: "constructor";
        className: "PhoneCallDiscardReasonBusy";
        fromReader(reader: Reader): PhoneCallDiscardReasonBusy;
    }

    export interface DataJSONArgs {
        /** JSON-encoded object */
        data: string;
    }

    /** Represents a json-encoded object<br> */
    export class DataJSON extends VirtualClass<DataJSONArgs> implements DataJSONArgs {
        CONSTRUCTOR_id: 2104790276;
        SUBCLASS_OF_ID: 2902676200;
        classType: "constructor";
        className: "DataJSON";
        data: string;
        fromReader(reader: Reader): DataJSON;
    }

    export interface LabeledPriceArgs {
        /** Portion label */
        label: string;
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        amount: long;
    }

    /**
     * This object represents a portion of the price for goods or services.<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class LabeledPrice extends VirtualClass<LabeledPriceArgs> implements LabeledPriceArgs {
        CONSTRUCTOR_id: -886477832;
        SUBCLASS_OF_ID: 478413946;
        classType: "constructor";
        className: "LabeledPrice";
        label: string;
        amount: long;
        fromReader(reader: Reader): LabeledPrice;
    }

    export interface InvoiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Test invoice */
        test?: true;
        /** Set this flag if you require the user's full name to complete the order */
        nameRequested?: true;
        /** Set this flag if you require the user's phone number to complete the order */
        phoneRequested?: true;
        /** Set this flag if you require the user's email address to complete the order */
        emailRequested?: true;
        /** Set this flag if you require the user's shipping address to complete the order */
        shippingAddressRequested?: true;
        /** Set this flag if the final price depends on the shipping method */
        flexible?: true;
        /** Set this flag if user's phone number should be sent to provider */
        phoneToProvider?: true;
        /** Set this flag if user's email address should be sent to provider */
        emailToProvider?: true;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) */
        prices: TypeLabeledPrice[];
        /** The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        maxTipAmount?: long;
        /** A vector of suggested amounts of tips in the <em>smallest units</em> of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <code>max_tip_amount</code>. */
        suggestedTipAmounts?: long[];
    }

    /**
     * Invoice<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class Invoice extends VirtualClass<InvoiceArgs> implements InvoiceArgs {
        CONSTRUCTOR_id: 215516896;
        SUBCLASS_OF_ID: 1608003288;
        classType: "constructor";
        className: "Invoice";
        flags: number;
        test?: true;
        nameRequested?: true;
        phoneRequested?: true;
        emailRequested?: true;
        shippingAddressRequested?: true;
        flexible?: true;
        phoneToProvider?: true;
        emailToProvider?: true;
        currency: string;
        prices: TypeLabeledPrice[];
        maxTipAmount?: long;
        suggestedTipAmounts?: long[];
        fromReader(reader: Reader): Invoice;
    }

    export interface PaymentChargeArgs {
        /** Telegram payment identifier */
        id: string;
        /** Provider payment identifier */
        providerChargeId: string;
    }

    /** Payment identifier<br> */
    export class PaymentCharge extends VirtualClass<PaymentChargeArgs> implements PaymentChargeArgs {
        CONSTRUCTOR_id: -368917890;
        SUBCLASS_OF_ID: 1019752665;
        classType: "constructor";
        className: "PaymentCharge";
        id: string;
        providerChargeId: string;
        fromReader(reader: Reader): PaymentCharge;
    }

    export interface PostAddressArgs {
        /** First line for the address */
        streetLine1: string;
        /** Second line for the address */
        streetLine2: string;
        /** City */
        city: string;
        /** State, if applicable (empty otherwise) */
        state: string;
        /** ISO 3166-1 alpha-2 country code */
        countryIso2: string;
        /** Address post code */
        postCode: string;
    }

    /** Shipping address<br> */
    export class PostAddress extends VirtualClass<PostAddressArgs> implements PostAddressArgs {
        CONSTRUCTOR_id: 512535275;
        SUBCLASS_OF_ID: 2373900844;
        classType: "constructor";
        className: "PostAddress";
        streetLine1: string;
        streetLine2: string;
        city: string;
        state: string;
        countryIso2: string;
        postCode: string;
        fromReader(reader: Reader): PostAddress;
    }

    export interface PaymentRequestedInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** User's full name */
        name?: string;
        /** User's phone number */
        phone?: string;
        /** User's email address */
        email?: string;
        /** User's shipping address */
        shippingAddress?: TypePostAddress;
    }

    /** Order info provided by the user<br> */
    export class PaymentRequestedInfo extends VirtualClass<PaymentRequestedInfoArgs> implements PaymentRequestedInfoArgs {
        CONSTRUCTOR_id: -1868808300;
        SUBCLASS_OF_ID: 2377134406;
        classType: "constructor";
        className: "PaymentRequestedInfo";
        flags: number;
        name?: string;
        phone?: string;
        email?: string;
        shippingAddress?: TypePostAddress;
        fromReader(reader: Reader): PaymentRequestedInfo;
    }

    export interface PaymentSavedCredentialsCardArgs {
        /** Card ID */
        id: string;
        /** Title */
        title: string;
    }

    /** Saved credit card<br> */
    export class PaymentSavedCredentialsCard extends VirtualClass<PaymentSavedCredentialsCardArgs> implements PaymentSavedCredentialsCardArgs {
        CONSTRUCTOR_id: -842892769;
        SUBCLASS_OF_ID: 3009576675;
        classType: "constructor";
        className: "PaymentSavedCredentialsCard";
        id: string;
        title: string;
        fromReader(reader: Reader): PaymentSavedCredentialsCard;
    }

    export interface WebDocumentArgs {
        /** Document URL */
        url: string;
        /** Access hash */
        accessHash: long;
        /** File size */
        size: int;
        /** MIME type */
        mimeType: string;
        /** Attributes for media types */
        attributes: TypeDocumentAttribute[];
    }

    /** Remote document<br> */
    export class WebDocument extends VirtualClass<WebDocumentArgs> implements WebDocumentArgs {
        CONSTRUCTOR_id: 475467473;
        SUBCLASS_OF_ID: 996419604;
        classType: "constructor";
        className: "WebDocument";
        url: string;
        accessHash: long;
        size: int;
        mimeType: string;
        attributes: TypeDocumentAttribute[];
        fromReader(reader: Reader): WebDocument;
    }

    export interface WebDocumentNoProxyArgs {
        /** Document URL */
        url: string;
        /** File size */
        size: int;
        /** MIME type */
        mimeType: string;
        /** Attributes for media types */
        attributes: TypeDocumentAttribute[];
    }

    /**
     * Remote document that can be downloaded without <a href="https://corefork.telegram.org/api/files">proxying through telegram</a><br>
     * @link https://corefork.telegram.org/api/files
     */
    export class WebDocumentNoProxy extends VirtualClass<WebDocumentNoProxyArgs> implements WebDocumentNoProxyArgs {
        CONSTRUCTOR_id: -104284986;
        SUBCLASS_OF_ID: 996419604;
        classType: "constructor";
        className: "WebDocumentNoProxy";
        url: string;
        size: int;
        mimeType: string;
        attributes: TypeDocumentAttribute[];
        fromReader(reader: Reader): WebDocumentNoProxy;
    }

    export interface InputWebDocumentArgs {
        /** Remote document URL to be downloaded using the appropriate <a href="https://corefork.telegram.org/api/files">method</a> */
        url: string;
        /** Remote file size */
        size: int;
        /** Mime type */
        mimeType: string;
        /** Attributes for media types */
        attributes: TypeDocumentAttribute[];
    }

    /**
     * The document<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class InputWebDocument extends VirtualClass<InputWebDocumentArgs> implements InputWebDocumentArgs {
        CONSTRUCTOR_id: -1678949555;
        SUBCLASS_OF_ID: 2330505542;
        classType: "constructor";
        className: "InputWebDocument";
        url: string;
        size: int;
        mimeType: string;
        attributes: TypeDocumentAttribute[];
        fromReader(reader: Reader): InputWebDocument;
    }

    export interface InputWebFileLocationArgs {
        /** HTTP URL of file */
        url: string;
        /** Access hash */
        accessHash: long;
    }

    /** Location of a remote HTTP(s) file<br> */
    export class InputWebFileLocation extends VirtualClass<InputWebFileLocationArgs> implements InputWebFileLocationArgs {
        CONSTRUCTOR_id: -1036396922;
        SUBCLASS_OF_ID: 4147042521;
        classType: "constructor";
        className: "InputWebFileLocation";
        url: string;
        accessHash: long;
        fromReader(reader: Reader): InputWebFileLocation;
    }

    export interface InputWebFileGeoPointLocationArgs {
        /** Geolocation */
        geoPoint: TypeInputGeoPoint;
        /** Access hash */
        accessHash: long;
        /** Map width in pixels before applying scale; 16-1024 */
        w: int;
        /** Map height in pixels before applying scale; 16-1024 */
        h: int;
        /** Map zoom level; 13-20 */
        zoom: int;
        /** Map scale; 1-3 */
        scale: int;
    }

    /** Geolocation<br> */
    export class InputWebFileGeoPointLocation extends VirtualClass<InputWebFileGeoPointLocationArgs> implements InputWebFileGeoPointLocationArgs {
        CONSTRUCTOR_id: -1625153079;
        SUBCLASS_OF_ID: 4147042521;
        classType: "constructor";
        className: "InputWebFileGeoPointLocation";
        geoPoint: TypeInputGeoPoint;
        accessHash: long;
        w: int;
        h: int;
        zoom: int;
        scale: int;
        fromReader(reader: Reader): InputWebFileGeoPointLocation;
    }

    export interface InputPaymentCredentialsSavedArgs {
        /** Credential ID */
        id: string;
        /** Temporary password */
        tmpPassword: bytes;
    }

    /** Saved payment credentials<br> */
    export class InputPaymentCredentialsSaved extends VirtualClass<InputPaymentCredentialsSavedArgs> implements InputPaymentCredentialsSavedArgs {
        CONSTRUCTOR_id: -1056001329;
        SUBCLASS_OF_ID: 681157949;
        classType: "constructor";
        className: "InputPaymentCredentialsSaved";
        id: string;
        tmpPassword: bytes;
        fromReader(reader: Reader): InputPaymentCredentialsSaved;
    }

    export interface InputPaymentCredentialsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Save payment credential for future use */
        save?: true;
        /** Payment credentials */
        data: TypeDataJSON;
    }

    /** Payment credentials<br> */
    export class InputPaymentCredentials extends VirtualClass<InputPaymentCredentialsArgs> implements InputPaymentCredentialsArgs {
        CONSTRUCTOR_id: 873977640;
        SUBCLASS_OF_ID: 681157949;
        classType: "constructor";
        className: "InputPaymentCredentials";
        flags: number;
        save?: true;
        data: TypeDataJSON;
        fromReader(reader: Reader): InputPaymentCredentials;
    }

    export interface InputPaymentCredentialsApplePayArgs {
        /** Payment data */
        paymentData: TypeDataJSON;
    }

    /** Apple pay payment credentials<br> */
    export class InputPaymentCredentialsApplePay extends VirtualClass<InputPaymentCredentialsApplePayArgs> implements InputPaymentCredentialsApplePayArgs {
        CONSTRUCTOR_id: 178373535;
        SUBCLASS_OF_ID: 681157949;
        classType: "constructor";
        className: "InputPaymentCredentialsApplePay";
        paymentData: TypeDataJSON;
        fromReader(reader: Reader): InputPaymentCredentialsApplePay;
    }

    export interface InputPaymentCredentialsGooglePayArgs {
        /** Payment token */
        paymentToken: TypeDataJSON;
    }

    /** Google Pay payment credentials<br> */
    export class InputPaymentCredentialsGooglePay extends VirtualClass<InputPaymentCredentialsGooglePayArgs> implements InputPaymentCredentialsGooglePayArgs {
        CONSTRUCTOR_id: -1966921727;
        SUBCLASS_OF_ID: 681157949;
        classType: "constructor";
        className: "InputPaymentCredentialsGooglePay";
        paymentToken: TypeDataJSON;
        fromReader(reader: Reader): InputPaymentCredentialsGooglePay;
    }

    export interface ShippingOptionArgs {
        /** Option ID */
        id: string;
        /** Title */
        title: string;
        /** List of price portions */
        prices: TypeLabeledPrice[];
    }

    /** Shipping option<br> */
    export class ShippingOption extends VirtualClass<ShippingOptionArgs> implements ShippingOptionArgs {
        CONSTRUCTOR_id: -1239335713;
        SUBCLASS_OF_ID: 4108930168;
        classType: "constructor";
        className: "ShippingOption";
        id: string;
        title: string;
        prices: TypeLabeledPrice[];
        fromReader(reader: Reader): ShippingOption;
    }

    export interface InputStickerSetItemArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The sticker */
        document: TypeInputDocument;
        /** Associated emoji */
        emoji: string;
        /** Coordinates for mask sticker */
        maskCoords?: TypeMaskCoords;
    }

    /** Sticker in a stickerset<br> */
    export class InputStickerSetItem extends VirtualClass<InputStickerSetItemArgs> implements InputStickerSetItemArgs {
        CONSTRUCTOR_id: -6249322;
        SUBCLASS_OF_ID: 2925129845;
        classType: "constructor";
        className: "InputStickerSetItem";
        flags: number;
        document: TypeInputDocument;
        emoji: string;
        maskCoords?: TypeMaskCoords;
        fromReader(reader: Reader): InputStickerSetItem;
    }

    export interface InputPhoneCallArgs {
        /** Call ID */
        id: long;
        /** Access hash */
        accessHash: long;
    }

    /** Phone call<br> */
    export class InputPhoneCall extends VirtualClass<InputPhoneCallArgs> implements InputPhoneCallArgs {
        CONSTRUCTOR_id: 506920429;
        SUBCLASS_OF_ID: 3165319744;
        classType: "constructor";
        className: "InputPhoneCall";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputPhoneCall;
    }

    export interface PhoneCallEmptyArgs {
        /** Call ID */
        id: long;
    }

    /** Empty constructor<br> */
    export class PhoneCallEmpty extends VirtualClass<PhoneCallEmptyArgs> implements PhoneCallEmptyArgs {
        CONSTRUCTOR_id: 1399245077;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCallEmpty";
        id: long;
        fromReader(reader: Reader): PhoneCallEmpty;
    }

    export interface PhoneCallWaitingArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this a video call */
        video?: true;
        /** Call ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** Date */
        date: int;
        /** Admin ID */
        adminId: int;
        /** Participant ID */
        participantId: int;
        /** Phone call protocol info */
        protocol: TypePhoneCallProtocol;
        /** When was the phone call received */
        receiveDate?: int;
    }

    /** Incoming phone call<br> */
    export class PhoneCallWaiting extends VirtualClass<PhoneCallWaitingArgs> implements PhoneCallWaitingArgs {
        CONSTRUCTOR_id: 462375633;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCallWaiting";
        flags: number;
        video?: true;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        protocol: TypePhoneCallProtocol;
        receiveDate?: int;
        fromReader(reader: Reader): PhoneCallWaiting;
    }

    export interface PhoneCallRequestedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a video call */
        video?: true;
        /** Phone call ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** When was the phone call created */
        date: int;
        /** ID of the creator of the phone call */
        adminId: int;
        /** ID of the other participant of the phone call */
        participantId: int;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Parameter for key exchange</a> */
        gAHash: bytes;
        /** Call protocol info to be passed to libtgvoip */
        protocol: TypePhoneCallProtocol;
    }

    /**
     * Requested phone call<br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     */
    export class PhoneCallRequested extends VirtualClass<PhoneCallRequestedArgs> implements PhoneCallRequestedArgs {
        CONSTRUCTOR_id: -2014659757;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCallRequested";
        flags: number;
        video?: true;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAHash: bytes;
        protocol: TypePhoneCallProtocol;
        fromReader(reader: Reader): PhoneCallRequested;
    }

    export interface PhoneCallAcceptedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a video call */
        video?: true;
        /** ID of accepted phone call */
        id: long;
        /** Access hash of phone call */
        accessHash: long;
        /** When was the call accepted */
        date: int;
        /** ID of the call creator */
        adminId: int;
        /** ID of the other user in the call */
        participantId: int;
        /** B parameter for <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">secure E2E phone call key exchange</a> */
        gB: bytes;
        /** Protocol to use for phone call */
        protocol: TypePhoneCallProtocol;
    }

    /**
     * An accepted phone call<br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     */
    export class PhoneCallAccepted extends VirtualClass<PhoneCallAcceptedArgs> implements PhoneCallAcceptedArgs {
        CONSTRUCTOR_id: -1719909046;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCallAccepted";
        flags: number;
        video?: true;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gB: bytes;
        protocol: TypePhoneCallProtocol;
        fromReader(reader: Reader): PhoneCallAccepted;
    }

    export interface PhoneCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether P2P connection to the other peer is allowed */
        p2pAllowed?: true;
        /** Whether this is a video call */
        video?: true;
        /** Call ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** Date of creation of the call */
        date: int;
        /** User ID of the creator of the call */
        adminId: int;
        /** User ID of the other participant in the call */
        participantId: int;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Parameter for key exchange</a> */
        gAOrB: bytes;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Key fingerprint</a> */
        keyFingerprint: long;
        /** Call protocol info to be passed to libtgvoip */
        protocol: TypePhoneCallProtocol;
        /** List of endpoints the user can connect to to exchange call data */
        connections: TypePhoneConnection[];
        /** When was the call actually started */
        startDate: int;
    }

    /**
     * Phone call<br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     */
    export class PhoneCall extends VirtualClass<PhoneCallArgs> implements PhoneCallArgs {
        CONSTRUCTOR_id: -2025673089;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCall";
        flags: number;
        p2pAllowed?: true;
        video?: true;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
        protocol: TypePhoneCallProtocol;
        connections: TypePhoneConnection[];
        startDate: int;
        fromReader(reader: Reader): PhoneCall;
    }

    export interface PhoneCallDiscardedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the server required the user to <a href="https://corefork.telegram.org/method/phone.setCallRating">rate</a> the call */
        needRating?: true;
        /** Whether the server required the client to <a href="https://corefork.telegram.org/method/phone.saveCallDebug">send</a> the libtgvoip call debug data */
        needDebug?: true;
        /** Whether the call was a video call */
        video?: true;
        /** Call ID */
        id: long;
        /** Why was the phone call discarded */
        reason?: TypePhoneCallDiscardReason;
        /** Duration of the phone call in seconds */
        duration?: int;
    }

    /**
     * Indicates a discarded phone call<br>
     * @link https://corefork.telegram.org/method/phone.setCallRating
     * @link https://corefork.telegram.org/method/phone.saveCallDebug
     */
    export class PhoneCallDiscarded extends VirtualClass<PhoneCallDiscardedArgs> implements PhoneCallDiscardedArgs {
        CONSTRUCTOR_id: 1355435489;
        SUBCLASS_OF_ID: 3296664529;
        classType: "constructor";
        className: "PhoneCallDiscarded";
        flags: number;
        needRating?: true;
        needDebug?: true;
        video?: true;
        id: long;
        reason?: TypePhoneCallDiscardReason;
        duration?: int;
        fromReader(reader: Reader): PhoneCallDiscarded;
    }

    export interface PhoneConnectionArgs {
        /** Endpoint ID */
        id: long;
        /** IP address of endpoint */
        ip: string;
        /** IPv6 address of endpoint */
        ipv6: string;
        /** Port ID */
        port: int;
        /** Our peer tag */
        peerTag: bytes;
    }

    /** Identifies an endpoint that can be used to connect to the other user in a phone call<br> */
    export class PhoneConnection extends VirtualClass<PhoneConnectionArgs> implements PhoneConnectionArgs {
        CONSTRUCTOR_id: -1655957568;
        SUBCLASS_OF_ID: 2861425677;
        classType: "constructor";
        className: "PhoneConnection";
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        peerTag: bytes;
        fromReader(reader: Reader): PhoneConnection;
    }

    export interface PhoneConnectionWebrtcArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a TURN endpoint */
        turn?: true;
        /** Whether this is a STUN endpoint */
        stun?: true;
        /** Endpoint ID */
        id: long;
        /** IP address */
        ip: string;
        /** IPv6 address */
        ipv6: string;
        /** Port */
        port: int;
        /** Username */
        username: string;
        /** Password */
        password: string;
    }

    /** WebRTC connection parameters<br> */
    export class PhoneConnectionWebrtc extends VirtualClass<PhoneConnectionWebrtcArgs> implements PhoneConnectionWebrtcArgs {
        CONSTRUCTOR_id: 1667228533;
        SUBCLASS_OF_ID: 2861425677;
        classType: "constructor";
        className: "PhoneConnectionWebrtc";
        flags: number;
        turn?: true;
        stun?: true;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        username: string;
        password: string;
        fromReader(reader: Reader): PhoneConnectionWebrtc;
    }

    export interface PhoneCallProtocolArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to allow P2P connection to the other participant */
        udpP2p?: true;
        /** Whether to allow connection to the other participants through the reflector servers */
        udpReflector?: true;
        /** Minimum layer for remote libtgvoip */
        minLayer: int;
        /** Maximum layer for remote libtgvoip */
        maxLayer: int;
        /** When using <a href="https://corefork.telegram.org/method/phone.requestCall">phone.requestCall</a> and <a href="https://corefork.telegram.org/method/phone.acceptCall">phone.acceptCall</a>, specify all library versions supported by the client. <br>The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's <a href="https://corefork.telegram.org/method/phone.acceptCall">phone.acceptCall</a> and in the <a href="https://corefork.telegram.org/constructor/phoneCallAccepted">phoneCallAccepted</a> update received by the caller. */
        libraryVersions: string[];
    }

    /**
     * Protocol info for libtgvoip<br>
     * @link https://corefork.telegram.org/method/phone.requestCall
     * @link https://corefork.telegram.org/method/phone.acceptCall
     * @link https://corefork.telegram.org/constructor/phoneCallAccepted
     */
    export class PhoneCallProtocol extends VirtualClass<PhoneCallProtocolArgs> implements PhoneCallProtocolArgs {
        CONSTRUCTOR_id: -58224696;
        SUBCLASS_OF_ID: 2017038755;
        classType: "constructor";
        className: "PhoneCallProtocol";
        flags: number;
        udpP2p?: true;
        udpReflector?: true;
        minLayer: int;
        maxLayer: int;
        libraryVersions: string[];
        fromReader(reader: Reader): PhoneCallProtocol;
    }

    export interface CdnPublicKeyArgs {
        /** <a href="https://corefork.telegram.org/cdn">CDN DC</a> ID */
        dcId: int;
        /** RSA public key */
        publicKey: string;
    }

    /**
     * Public key to use <strong>only</strong> during handshakes to <a href="https://corefork.telegram.org/cdn">CDN</a> DCs.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class CdnPublicKey extends VirtualClass<CdnPublicKeyArgs> implements CdnPublicKeyArgs {
        CONSTRUCTOR_id: -914167110;
        SUBCLASS_OF_ID: 383469555;
        classType: "constructor";
        className: "CdnPublicKey";
        dcId: int;
        publicKey: string;
        fromReader(reader: Reader): CdnPublicKey;
    }

    export interface CdnConfigArgs {
        /** Vector of public keys to use <strong>only</strong> during handshakes to <a href="https://corefork.telegram.org/cdn">CDN</a> DCs. */
        publicKeys: TypeCdnPublicKey[];
    }

    /**
     * Configuration for <a href="https://corefork.telegram.org/cdn">CDN</a> file downloads.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class CdnConfig extends VirtualClass<CdnConfigArgs> implements CdnConfigArgs {
        CONSTRUCTOR_id: 1462101002;
        SUBCLASS_OF_ID: 3973724540;
        classType: "constructor";
        className: "CdnConfig";
        publicKeys: TypeCdnPublicKey[];
        fromReader(reader: Reader): CdnConfig;
    }

    export interface LangPackStringArgs {
        /** Language key */
        key: string;
        /** Value */
        value: string;
    }

    /** Translated localization string<br> */
    export class LangPackString extends VirtualClass<LangPackStringArgs> implements LangPackStringArgs {
        CONSTRUCTOR_id: -892239370;
        SUBCLASS_OF_ID: 3692534457;
        classType: "constructor";
        className: "LangPackString";
        key: string;
        value: string;
        fromReader(reader: Reader): LangPackString;
    }

    export interface LangPackStringPluralizedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Localization key */
        key: string;
        /** Value for zero objects */
        zeroValue?: string;
        /** Value for one object */
        oneValue?: string;
        /** Value for two objects */
        twoValue?: string;
        /** Value for a few objects */
        fewValue?: string;
        /** Value for many objects */
        manyValue?: string;
        /** Default value */
        otherValue: string;
    }

    /** A language pack string which has different forms based on the number of some object it mentions. See <a href="https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html">https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a> for more info<br> */
    export class LangPackStringPluralized extends VirtualClass<LangPackStringPluralizedArgs> implements LangPackStringPluralizedArgs {
        CONSTRUCTOR_id: 1816636575;
        SUBCLASS_OF_ID: 3692534457;
        classType: "constructor";
        className: "LangPackStringPluralized";
        flags: number;
        key: string;
        zeroValue?: string;
        oneValue?: string;
        twoValue?: string;
        fewValue?: string;
        manyValue?: string;
        otherValue: string;
        fromReader(reader: Reader): LangPackStringPluralized;
    }

    export interface LangPackStringDeletedArgs {
        /** Localization key */
        key: string;
    }

    /** Deleted localization string<br> */
    export class LangPackStringDeleted extends VirtualClass<LangPackStringDeletedArgs> implements LangPackStringDeletedArgs {
        CONSTRUCTOR_id: 695856818;
        SUBCLASS_OF_ID: 3692534457;
        classType: "constructor";
        className: "LangPackStringDeleted";
        key: string;
        fromReader(reader: Reader): LangPackStringDeleted;
    }

    export interface LangPackDifferenceArgs {
        /** Language code */
        langCode: string;
        /** Previous version number */
        fromVersion: int;
        /** New version number */
        version: int;
        /** Localized strings */
        strings: TypeLangPackString[];
    }

    /** Changes to the app's localization pack<br> */
    export class LangPackDifference extends VirtualClass<LangPackDifferenceArgs> implements LangPackDifferenceArgs {
        CONSTRUCTOR_id: -209337866;
        SUBCLASS_OF_ID: 1382427989;
        classType: "constructor";
        className: "LangPackDifference";
        langCode: string;
        fromVersion: int;
        version: int;
        strings: TypeLangPackString[];
        fromReader(reader: Reader): LangPackDifference;
    }

    export interface LangPackLanguageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the language pack is official */
        official?: true;
        /** Is this a localization pack for an RTL language */
        rtl?: true;
        /** Is this a beta localization pack? */
        beta?: true;
        /** Language name */
        name: string;
        /** Language name in the language itself */
        nativeName: string;
        /** Language code (pack identifier) */
        langCode: string;
        /** Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs */
        baseLangCode?: string;
        /** A language code to be used to apply plural forms. See <a href="https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html">https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a> for more info */
        pluralCode: string;
        /** Total number of non-deleted strings from the language pack */
        stringsCount: int;
        /** Total number of translated strings from the language pack */
        translatedCount: int;
        /** Link to language translation interface; empty for custom local language packs */
        translationsUrl: string;
    }

    /** Identifies a localization pack<br> */
    export class LangPackLanguage extends VirtualClass<LangPackLanguageArgs> implements LangPackLanguageArgs {
        CONSTRUCTOR_id: -288727837;
        SUBCLASS_OF_ID: 2880211383;
        classType: "constructor";
        className: "LangPackLanguage";
        flags: number;
        official?: true;
        rtl?: true;
        beta?: true;
        name: string;
        nativeName: string;
        langCode: string;
        baseLangCode?: string;
        pluralCode: string;
        stringsCount: int;
        translatedCount: int;
        translationsUrl: string;
        fromReader(reader: Reader): LangPackLanguage;
    }

    export interface ChannelAdminLogEventActionChangeTitleArgs {
        /** Previous title */
        prevValue: string;
        /** New title */
        newValue: string;
    }

    /** Channel/supergroup title was changed<br> */
    export class ChannelAdminLogEventActionChangeTitle extends VirtualClass<ChannelAdminLogEventActionChangeTitleArgs> implements ChannelAdminLogEventActionChangeTitleArgs {
        CONSTRUCTOR_id: -421545947;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeTitle";
        prevValue: string;
        newValue: string;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeTitle;
    }

    export interface ChannelAdminLogEventActionChangeAboutArgs {
        /** Previous description */
        prevValue: string;
        /** New description */
        newValue: string;
    }

    /** The description was changed<br> */
    export class ChannelAdminLogEventActionChangeAbout extends VirtualClass<ChannelAdminLogEventActionChangeAboutArgs> implements ChannelAdminLogEventActionChangeAboutArgs {
        CONSTRUCTOR_id: 1427671598;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeAbout";
        prevValue: string;
        newValue: string;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeAbout;
    }

    export interface ChannelAdminLogEventActionChangeUsernameArgs {
        /** Old username */
        prevValue: string;
        /** New username */
        newValue: string;
    }

    /** Channel/supergroup username was changed<br> */
    export class ChannelAdminLogEventActionChangeUsername extends VirtualClass<ChannelAdminLogEventActionChangeUsernameArgs> implements ChannelAdminLogEventActionChangeUsernameArgs {
        CONSTRUCTOR_id: 1783299128;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeUsername";
        prevValue: string;
        newValue: string;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeUsername;
    }

    export interface ChannelAdminLogEventActionChangePhotoArgs {
        /** Previous picture */
        prevPhoto: TypePhoto;
        /** New picture */
        newPhoto: TypePhoto;
    }

    /** The channel/supergroup's picture was changed<br> */
    export class ChannelAdminLogEventActionChangePhoto extends VirtualClass<ChannelAdminLogEventActionChangePhotoArgs> implements ChannelAdminLogEventActionChangePhotoArgs {
        CONSTRUCTOR_id: 1129042607;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangePhoto";
        prevPhoto: TypePhoto;
        newPhoto: TypePhoto;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangePhoto;
    }

    export interface ChannelAdminLogEventActionToggleInvitesArgs {
        /** New value */
        newValue: Bool;
    }

    /** Invites were enabled/disabled<br> */
    export class ChannelAdminLogEventActionToggleInvites extends VirtualClass<ChannelAdminLogEventActionToggleInvitesArgs> implements ChannelAdminLogEventActionToggleInvitesArgs {
        CONSTRUCTOR_id: 460916654;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionToggleInvites";
        newValue: Bool;
        fromReader(reader: Reader): ChannelAdminLogEventActionToggleInvites;
    }

    export interface ChannelAdminLogEventActionToggleSignaturesArgs {
        /** New value */
        newValue: Bool;
    }

    /** Channel signatures were enabled/disabled<br> */
    export class ChannelAdminLogEventActionToggleSignatures extends VirtualClass<ChannelAdminLogEventActionToggleSignaturesArgs> implements ChannelAdminLogEventActionToggleSignaturesArgs {
        CONSTRUCTOR_id: 648939889;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionToggleSignatures";
        newValue: Bool;
        fromReader(reader: Reader): ChannelAdminLogEventActionToggleSignatures;
    }

    export interface ChannelAdminLogEventActionUpdatePinnedArgs {
        /** The message that was pinned */
        message: TypeMessage;
    }

    /** A message was pinned<br> */
    export class ChannelAdminLogEventActionUpdatePinned extends VirtualClass<ChannelAdminLogEventActionUpdatePinnedArgs> implements ChannelAdminLogEventActionUpdatePinnedArgs {
        CONSTRUCTOR_id: -370660328;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionUpdatePinned";
        message: TypeMessage;
        fromReader(reader: Reader): ChannelAdminLogEventActionUpdatePinned;
    }

    export interface ChannelAdminLogEventActionEditMessageArgs {
        /** Old message */
        prevMessage: TypeMessage;
        /** New message */
        newMessage: TypeMessage;
    }

    /** A message was edited<br> */
    export class ChannelAdminLogEventActionEditMessage extends VirtualClass<ChannelAdminLogEventActionEditMessageArgs> implements ChannelAdminLogEventActionEditMessageArgs {
        CONSTRUCTOR_id: 1889215493;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionEditMessage";
        prevMessage: TypeMessage;
        newMessage: TypeMessage;
        fromReader(reader: Reader): ChannelAdminLogEventActionEditMessage;
    }

    export interface ChannelAdminLogEventActionDeleteMessageArgs {
        /** The message that was deleted */
        message: TypeMessage;
    }

    /** A message was deleted<br> */
    export class ChannelAdminLogEventActionDeleteMessage extends VirtualClass<ChannelAdminLogEventActionDeleteMessageArgs> implements ChannelAdminLogEventActionDeleteMessageArgs {
        CONSTRUCTOR_id: 1121994683;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionDeleteMessage";
        message: TypeMessage;
        fromReader(reader: Reader): ChannelAdminLogEventActionDeleteMessage;
    }

    /** A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)<br> */
    export class ChannelAdminLogEventActionParticipantJoin extends VirtualClass<void> {
        CONSTRUCTOR_id: 405815507;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantJoin";
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantJoin;
    }

    /** A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown)<br> */
    export class ChannelAdminLogEventActionParticipantLeave extends VirtualClass<void> {
        CONSTRUCTOR_id: -124291086;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantLeave";
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantLeave;
    }

    export interface ChannelAdminLogEventActionParticipantInviteArgs {
        /** The user that was invited */
        participant: TypeChannelParticipant;
    }

    /** A user was invited to the group<br> */
    export class ChannelAdminLogEventActionParticipantInvite extends VirtualClass<ChannelAdminLogEventActionParticipantInviteArgs> implements ChannelAdminLogEventActionParticipantInviteArgs {
        CONSTRUCTOR_id: -484690728;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantInvite";
        participant: TypeChannelParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantInvite;
    }

    export interface ChannelAdminLogEventActionParticipantToggleBanArgs {
        /** Old banned rights of user */
        prevParticipant: TypeChannelParticipant;
        /** New banned rights of user */
        newParticipant: TypeChannelParticipant;
    }

    /**
     * The banned <a href="https://corefork.telegram.org/api/rights">rights</a> of a user were changed<br>
     * @link https://corefork.telegram.org/api/rights
     */
    export class ChannelAdminLogEventActionParticipantToggleBan extends VirtualClass<ChannelAdminLogEventActionParticipantToggleBanArgs> implements ChannelAdminLogEventActionParticipantToggleBanArgs {
        CONSTRUCTOR_id: -422036098;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantToggleBan";
        prevParticipant: TypeChannelParticipant;
        newParticipant: TypeChannelParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantToggleBan;
    }

    export interface ChannelAdminLogEventActionParticipantToggleAdminArgs {
        /** Previous admin rights */
        prevParticipant: TypeChannelParticipant;
        /** New admin rights */
        newParticipant: TypeChannelParticipant;
    }

    /**
     * The admin <a href="https://corefork.telegram.org/api/rights">rights</a> of a user were changed<br>
     * @link https://corefork.telegram.org/api/rights
     */
    export class ChannelAdminLogEventActionParticipantToggleAdmin extends VirtualClass<ChannelAdminLogEventActionParticipantToggleAdminArgs> implements ChannelAdminLogEventActionParticipantToggleAdminArgs {
        CONSTRUCTOR_id: -714643696;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantToggleAdmin";
        prevParticipant: TypeChannelParticipant;
        newParticipant: TypeChannelParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantToggleAdmin;
    }

    export interface ChannelAdminLogEventActionChangeStickerSetArgs {
        /** Previous stickerset */
        prevStickerset: TypeInputStickerSet;
        /** New stickerset */
        newStickerset: TypeInputStickerSet;
    }

    /** The supergroup's stickerset was changed<br> */
    export class ChannelAdminLogEventActionChangeStickerSet extends VirtualClass<ChannelAdminLogEventActionChangeStickerSetArgs> implements ChannelAdminLogEventActionChangeStickerSetArgs {
        CONSTRUCTOR_id: -1312568665;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeStickerSet";
        prevStickerset: TypeInputStickerSet;
        newStickerset: TypeInputStickerSet;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeStickerSet;
    }

    export interface ChannelAdminLogEventActionTogglePreHistoryHiddenArgs {
        /** New value */
        newValue: Bool;
    }

    /**
     * The hidden prehistory setting was <a href="https://corefork.telegram.org/method/channels.togglePreHistoryHidden">changed</a><br>
     * @link https://corefork.telegram.org/method/channels.togglePreHistoryHidden
     */
    export class ChannelAdminLogEventActionTogglePreHistoryHidden extends VirtualClass<ChannelAdminLogEventActionTogglePreHistoryHiddenArgs> implements ChannelAdminLogEventActionTogglePreHistoryHiddenArgs {
        CONSTRUCTOR_id: 1599903217;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionTogglePreHistoryHidden";
        newValue: Bool;
        fromReader(reader: Reader): ChannelAdminLogEventActionTogglePreHistoryHidden;
    }

    export interface ChannelAdminLogEventActionDefaultBannedRightsArgs {
        /** Previous global <a href="https://corefork.telegram.org/api/rights">banned rights</a> */
        prevBannedRights: TypeChatBannedRights;
        /** New glboal <a href="https://corefork.telegram.org/api/rights">banned rights</a>. */
        newBannedRights: TypeChatBannedRights;
    }

    /**
     * The default banned rights were modified<br>
     * @link https://corefork.telegram.org/api/rights
     */
    export class ChannelAdminLogEventActionDefaultBannedRights extends VirtualClass<ChannelAdminLogEventActionDefaultBannedRightsArgs> implements ChannelAdminLogEventActionDefaultBannedRightsArgs {
        CONSTRUCTOR_id: 771095562;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionDefaultBannedRights";
        prevBannedRights: TypeChatBannedRights;
        newBannedRights: TypeChatBannedRights;
        fromReader(reader: Reader): ChannelAdminLogEventActionDefaultBannedRights;
    }

    export interface ChannelAdminLogEventActionStopPollArgs {
        /** The poll that was stopped */
        message: TypeMessage;
    }

    /** A poll was stopped<br> */
    export class ChannelAdminLogEventActionStopPoll extends VirtualClass<ChannelAdminLogEventActionStopPollArgs> implements ChannelAdminLogEventActionStopPollArgs {
        CONSTRUCTOR_id: -1895328189;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionStopPoll";
        message: TypeMessage;
        fromReader(reader: Reader): ChannelAdminLogEventActionStopPoll;
    }

    export interface ChannelAdminLogEventActionChangeLinkedChatArgs {
        /** Previous linked chat */
        prevValue: int;
        /** New linked chat */
        newValue: int;
    }

    /** The linked chat was changed<br> */
    export class ChannelAdminLogEventActionChangeLinkedChat extends VirtualClass<ChannelAdminLogEventActionChangeLinkedChatArgs> implements ChannelAdminLogEventActionChangeLinkedChatArgs {
        CONSTRUCTOR_id: -1569748965;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeLinkedChat";
        prevValue: int;
        newValue: int;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeLinkedChat;
    }

    export interface ChannelAdminLogEventActionChangeLocationArgs {
        /** Previous location */
        prevValue: TypeChannelLocation;
        /** New location */
        newValue: TypeChannelLocation;
    }

    /** The geogroup location was changed<br> */
    export class ChannelAdminLogEventActionChangeLocation extends VirtualClass<ChannelAdminLogEventActionChangeLocationArgs> implements ChannelAdminLogEventActionChangeLocationArgs {
        CONSTRUCTOR_id: 241923758;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeLocation";
        prevValue: TypeChannelLocation;
        newValue: TypeChannelLocation;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeLocation;
    }

    export interface ChannelAdminLogEventActionToggleSlowModeArgs {
        /** Previous slow mode value */
        prevValue: int;
        /** New slow mode value */
        newValue: int;
    }

    /**
     * <a href="https://corefork.telegram.org/method/channels.toggleSlowMode">Slow mode setting for supergroups was changed</a><br>
     * @link https://corefork.telegram.org/method/channels.toggleSlowMode
     */
    export class ChannelAdminLogEventActionToggleSlowMode extends VirtualClass<ChannelAdminLogEventActionToggleSlowModeArgs> implements ChannelAdminLogEventActionToggleSlowModeArgs {
        CONSTRUCTOR_id: 1401984889;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionToggleSlowMode";
        prevValue: int;
        newValue: int;
        fromReader(reader: Reader): ChannelAdminLogEventActionToggleSlowMode;
    }

    export interface ChannelAdminLogEventActionStartGroupCallArgs {
        /** Group call */
        call: TypeInputGroupCall;
    }

    /** A group call was started<br> */
    export class ChannelAdminLogEventActionStartGroupCall extends VirtualClass<ChannelAdminLogEventActionStartGroupCallArgs> implements ChannelAdminLogEventActionStartGroupCallArgs {
        CONSTRUCTOR_id: 589338437;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionStartGroupCall";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): ChannelAdminLogEventActionStartGroupCall;
    }

    export interface ChannelAdminLogEventActionDiscardGroupCallArgs {
        /** The group call that was terminated */
        call: TypeInputGroupCall;
    }

    /** A group call was terminated<br> */
    export class ChannelAdminLogEventActionDiscardGroupCall extends VirtualClass<ChannelAdminLogEventActionDiscardGroupCallArgs> implements ChannelAdminLogEventActionDiscardGroupCallArgs {
        CONSTRUCTOR_id: -610299584;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionDiscardGroupCall";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): ChannelAdminLogEventActionDiscardGroupCall;
    }

    export interface ChannelAdminLogEventActionParticipantMuteArgs {
        /** The participant that was muted */
        participant: TypeGroupCallParticipant;
    }

    /** A group call participant was muted<br> */
    export class ChannelAdminLogEventActionParticipantMute extends VirtualClass<ChannelAdminLogEventActionParticipantMuteArgs> implements ChannelAdminLogEventActionParticipantMuteArgs {
        CONSTRUCTOR_id: -115071790;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantMute";
        participant: TypeGroupCallParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantMute;
    }

    export interface ChannelAdminLogEventActionParticipantUnmuteArgs {
        /** The participant that was unmuted */
        participant: TypeGroupCallParticipant;
    }

    /** A group call participant was unmuted<br> */
    export class ChannelAdminLogEventActionParticipantUnmute extends VirtualClass<ChannelAdminLogEventActionParticipantUnmuteArgs> implements ChannelAdminLogEventActionParticipantUnmuteArgs {
        CONSTRUCTOR_id: -431740480;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantUnmute";
        participant: TypeGroupCallParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantUnmute;
    }

    export interface ChannelAdminLogEventActionToggleGroupCallSettingArgs {
        /** Whether all users are muted by default upon joining */
        joinMuted: Bool;
    }

    /** Group call settings were changed<br> */
    export class ChannelAdminLogEventActionToggleGroupCallSetting extends VirtualClass<ChannelAdminLogEventActionToggleGroupCallSettingArgs> implements ChannelAdminLogEventActionToggleGroupCallSettingArgs {
        CONSTRUCTOR_id: 1456906823;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionToggleGroupCallSetting";
        joinMuted: Bool;
        fromReader(reader: Reader): ChannelAdminLogEventActionToggleGroupCallSetting;
    }

    export interface ChannelAdminLogEventActionParticipantJoinByInviteArgs {
        /** The invite link used to join the <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> */
        invite: TypeExportedChatInvite;
    }

    /**
     * A user joined the <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> using a specific invite link<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class ChannelAdminLogEventActionParticipantJoinByInvite extends VirtualClass<ChannelAdminLogEventActionParticipantJoinByInviteArgs> implements ChannelAdminLogEventActionParticipantJoinByInviteArgs {
        CONSTRUCTOR_id: 1557846647;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantJoinByInvite";
        invite: TypeExportedChatInvite;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantJoinByInvite;
    }

    export interface ChannelAdminLogEventActionExportedInviteDeleteArgs {
        /** The deleted chat invite */
        invite: TypeExportedChatInvite;
    }

    /** A chat invite was deleted<br> */
    export class ChannelAdminLogEventActionExportedInviteDelete extends VirtualClass<ChannelAdminLogEventActionExportedInviteDeleteArgs> implements ChannelAdminLogEventActionExportedInviteDeleteArgs {
        CONSTRUCTOR_id: 1515256996;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionExportedInviteDelete";
        invite: TypeExportedChatInvite;
        fromReader(reader: Reader): ChannelAdminLogEventActionExportedInviteDelete;
    }

    export interface ChannelAdminLogEventActionExportedInviteRevokeArgs {
        /** The invite link that was revoked */
        invite: TypeExportedChatInvite;
    }

    /** A specific invite link was revoked<br> */
    export class ChannelAdminLogEventActionExportedInviteRevoke extends VirtualClass<ChannelAdminLogEventActionExportedInviteRevokeArgs> implements ChannelAdminLogEventActionExportedInviteRevokeArgs {
        CONSTRUCTOR_id: 1091179342;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionExportedInviteRevoke";
        invite: TypeExportedChatInvite;
        fromReader(reader: Reader): ChannelAdminLogEventActionExportedInviteRevoke;
    }

    export interface ChannelAdminLogEventActionExportedInviteEditArgs {
        /** Previous chat invite information */
        prevInvite: TypeExportedChatInvite;
        /** New chat invite information */
        newInvite: TypeExportedChatInvite;
    }

    /** A chat invite was edited<br> */
    export class ChannelAdminLogEventActionExportedInviteEdit extends VirtualClass<ChannelAdminLogEventActionExportedInviteEditArgs> implements ChannelAdminLogEventActionExportedInviteEditArgs {
        CONSTRUCTOR_id: -384910503;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionExportedInviteEdit";
        prevInvite: TypeExportedChatInvite;
        newInvite: TypeExportedChatInvite;
        fromReader(reader: Reader): ChannelAdminLogEventActionExportedInviteEdit;
    }

    export interface ChannelAdminLogEventActionParticipantVolumeArgs {
        /** The participant whose volume was changed */
        participant: TypeGroupCallParticipant;
    }

    /** channelAdminLogEvent.user_id has set the volume of participant.peer to participant.volume<br> */
    export class ChannelAdminLogEventActionParticipantVolume extends VirtualClass<ChannelAdminLogEventActionParticipantVolumeArgs> implements ChannelAdminLogEventActionParticipantVolumeArgs {
        CONSTRUCTOR_id: 1048537159;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionParticipantVolume";
        participant: TypeGroupCallParticipant;
        fromReader(reader: Reader): ChannelAdminLogEventActionParticipantVolume;
    }

    export interface ChannelAdminLogEventActionChangeHistoryTTLArgs {
        /** Previous value */
        prevValue: int;
        /** New value */
        newValue: int;
    }

    /** The Time-To-Live of messages in this chat was changed<br> */
    export class ChannelAdminLogEventActionChangeHistoryTTL extends VirtualClass<ChannelAdminLogEventActionChangeHistoryTTLArgs> implements ChannelAdminLogEventActionChangeHistoryTTLArgs {
        CONSTRUCTOR_id: 1855199800;
        SUBCLASS_OF_ID: 2998503411;
        classType: "constructor";
        className: "ChannelAdminLogEventActionChangeHistoryTTL";
        prevValue: int;
        newValue: int;
        fromReader(reader: Reader): ChannelAdminLogEventActionChangeHistoryTTL;
    }

    export interface ChannelAdminLogEventArgs {
        /** Event ID */
        id: long;
        /** Date */
        date: int;
        /** User ID */
        userId: int;
        /** Action */
        action: TypeChannelAdminLogEventAction;
    }

    /** Admin log event<br> */
    export class ChannelAdminLogEvent extends VirtualClass<ChannelAdminLogEventArgs> implements ChannelAdminLogEventArgs {
        CONSTRUCTOR_id: 995769920;
        SUBCLASS_OF_ID: 1083115929;
        classType: "constructor";
        className: "ChannelAdminLogEvent";
        id: long;
        date: int;
        userId: int;
        action: TypeChannelAdminLogEventAction;
        fromReader(reader: Reader): ChannelAdminLogEvent;
    }

    export interface ChannelAdminLogEventsFilterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantJoin">Join events</a> */
        join?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantLeave">Leave events</a> */
        leave?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantInvite">Invite events</a> */
        invite?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan">Ban events</a> */
        ban?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan">Unban events</a> */
        unban?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan">Kick events</a> */
        kick?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan">Unkick events</a> */
        unkick?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin">Admin promotion events</a> */
        promote?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin">Admin demotion events</a> */
        demote?: true;
        /** Info change events (when <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeAbout">about</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat">linked chat</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeLocation">location</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangePhoto">photo</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet">stickerset</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeTitle">title</a> or <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeUsername">username</a> data of a channel gets modified) */
        info?: true;
        /** Settings change events (<a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionToggleInvites">invites</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden">hidden prehistory</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionToggleSignatures">signatures</a>, <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights">default banned rights</a>) */
        settings?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionUpdatePinned">Message pin events</a> */
        pinned?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionEditMessage">Message edit events</a> */
        edit?: true;
        /** <a href="https://corefork.telegram.org/constructor/channelAdminLogEventActionDeleteMessage">Message deletion events</a> */
        delete?: true;
        /** Group call events */
        groupCall?: true;
        /** Invite events */
        invites?: true;
    }

    /**
     * Filter only certain admin log events<br>
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantJoin
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantLeave
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantInvite
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan
     * @link https://corefork.telegram.org/api/rights
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin
     * @link https://corefork.telegram.org/api/rights
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeAbout
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeLocation
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangePhoto
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeTitle
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionChangeUsername
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionToggleInvites
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden
     * @link https://corefork.telegram.org/method/channels.togglePreHistoryHidden
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionToggleSignatures
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionUpdatePinned
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionEditMessage
     * @link https://corefork.telegram.org/constructor/channelAdminLogEventActionDeleteMessage
     */
    export class ChannelAdminLogEventsFilter extends VirtualClass<ChannelAdminLogEventsFilterArgs> implements ChannelAdminLogEventsFilterArgs {
        CONSTRUCTOR_id: -368018716;
        SUBCLASS_OF_ID: 2092692249;
        classType: "constructor";
        className: "ChannelAdminLogEventsFilter";
        flags: number;
        join?: true;
        leave?: true;
        invite?: true;
        ban?: true;
        unban?: true;
        kick?: true;
        unkick?: true;
        promote?: true;
        demote?: true;
        info?: true;
        settings?: true;
        pinned?: true;
        edit?: true;
        delete?: true;
        groupCall?: true;
        invites?: true;
        fromReader(reader: Reader): ChannelAdminLogEventsFilter;
    }

    export interface PopularContactArgs {
        /** Contact identifier */
        clientId: long;
        /** How many people imported this contact */
        importers: int;
    }

    /** Popular contact<br> */
    export class PopularContact extends VirtualClass<PopularContactArgs> implements PopularContactArgs {
        CONSTRUCTOR_id: 1558266229;
        SUBCLASS_OF_ID: 67708250;
        classType: "constructor";
        className: "PopularContact";
        clientId: long;
        importers: int;
        fromReader(reader: Reader): PopularContact;
    }

    export interface RecentMeUrlUnknownArgs {
        /** URL */
        url: string;
    }

    /** Unknown t.me url<br> */
    export class RecentMeUrlUnknown extends VirtualClass<RecentMeUrlUnknownArgs> implements RecentMeUrlUnknownArgs {
        CONSTRUCTOR_id: 1189204285;
        SUBCLASS_OF_ID: 1436889209;
        classType: "constructor";
        className: "RecentMeUrlUnknown";
        url: string;
        fromReader(reader: Reader): RecentMeUrlUnknown;
    }

    export interface RecentMeUrlUserArgs {
        /** URL */
        url: string;
        /** User ID */
        userId: int;
    }

    /** Recent t.me link to a user<br> */
    export class RecentMeUrlUser extends VirtualClass<RecentMeUrlUserArgs> implements RecentMeUrlUserArgs {
        CONSTRUCTOR_id: -1917045962;
        SUBCLASS_OF_ID: 1436889209;
        classType: "constructor";
        className: "RecentMeUrlUser";
        url: string;
        userId: int;
        fromReader(reader: Reader): RecentMeUrlUser;
    }

    export interface RecentMeUrlChatArgs {
        /** t.me URL */
        url: string;
        /** Chat ID */
        chatId: int;
    }

    /** Recent t.me link to a chat<br> */
    export class RecentMeUrlChat extends VirtualClass<RecentMeUrlChatArgs> implements RecentMeUrlChatArgs {
        CONSTRUCTOR_id: -1608834311;
        SUBCLASS_OF_ID: 1436889209;
        classType: "constructor";
        className: "RecentMeUrlChat";
        url: string;
        chatId: int;
        fromReader(reader: Reader): RecentMeUrlChat;
    }

    export interface RecentMeUrlChatInviteArgs {
        /** t.me URL */
        url: string;
        /** Chat invitation */
        chatInvite: TypeChatInvite;
    }

    /** Recent t.me invite link to a chat<br> */
    export class RecentMeUrlChatInvite extends VirtualClass<RecentMeUrlChatInviteArgs> implements RecentMeUrlChatInviteArgs {
        CONSTRUCTOR_id: -347535331;
        SUBCLASS_OF_ID: 1436889209;
        classType: "constructor";
        className: "RecentMeUrlChatInvite";
        url: string;
        chatInvite: TypeChatInvite;
        fromReader(reader: Reader): RecentMeUrlChatInvite;
    }

    export interface RecentMeUrlStickerSetArgs {
        /** t.me URL */
        url: string;
        /** Stickerset */
        set: TypeStickerSetCovered;
    }

    /** Recent t.me stickerset installation URL<br> */
    export class RecentMeUrlStickerSet extends VirtualClass<RecentMeUrlStickerSetArgs> implements RecentMeUrlStickerSetArgs {
        CONSTRUCTOR_id: -1140172836;
        SUBCLASS_OF_ID: 1436889209;
        classType: "constructor";
        className: "RecentMeUrlStickerSet";
        url: string;
        set: TypeStickerSetCovered;
        fromReader(reader: Reader): RecentMeUrlStickerSet;
    }

    export interface InputSingleMediaArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The media */
        media: TypeInputMedia;
        /** Unique client media ID required to prevent message resending */
        randomId: long;
        /** A caption for the media */
        message: string;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text */
        entities?: TypeMessageEntity[];
    }

    /**
     * A single media in an <a href="https://corefork.telegram.org/api/files#albums-grouped-media">album or grouped media</a> sent with <a href="https://corefork.telegram.org/method/messages.sendMultiMedia">messages.sendMultiMedia</a>.<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/files
     * @link https://corefork.telegram.org/method/messages.sendMultiMedia
     */
    export class InputSingleMedia extends VirtualClass<InputSingleMediaArgs> implements InputSingleMediaArgs {
        CONSTRUCTOR_id: 482797855;
        SUBCLASS_OF_ID: 566922968;
        classType: "constructor";
        className: "InputSingleMedia";
        flags: number;
        media: TypeInputMedia;
        randomId: long;
        message: string;
        entities?: TypeMessageEntity[];
        fromReader(reader: Reader): InputSingleMedia;
    }

    export interface WebAuthorizationArgs {
        /** Authorization hash */
        hash: long;
        /** Bot ID */
        botId: int;
        /** The domain name of the website on which the user has logged in. */
        domain: string;
        /** Browser user-agent */
        browser: string;
        /** Platform */
        platform: string;
        /** When was the web session created */
        dateCreated: int;
        /** When was the web session last active */
        dateActive: int;
        /** IP address */
        ip: string;
        /** Region, determined from IP address */
        region: string;
    }

    /**
     * Represents a bot logged in using the <a href="https://corefork.telegram.org/widgets/login">Telegram login widget</a><br>
     * @link https://corefork.telegram.org/widgets/login
     */
    export class WebAuthorization extends VirtualClass<WebAuthorizationArgs> implements WebAuthorizationArgs {
        CONSTRUCTOR_id: -892779534;
        SUBCLASS_OF_ID: 58084656;
        classType: "constructor";
        className: "WebAuthorization";
        hash: long;
        botId: int;
        domain: string;
        browser: string;
        platform: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        region: string;
        fromReader(reader: Reader): WebAuthorization;
    }

    export interface InputMessageIDArgs {
        /** Message ID */
        id: int;
    }

    /** Message by ID<br> */
    export class InputMessageID extends VirtualClass<InputMessageIDArgs> implements InputMessageIDArgs {
        CONSTRUCTOR_id: -1502174430;
        SUBCLASS_OF_ID: 1421262021;
        classType: "constructor";
        className: "InputMessageID";
        id: int;
        fromReader(reader: Reader): InputMessageID;
    }

    export interface InputMessageReplyToArgs {
        /** ID of the message that replies to the message we need */
        id: int;
    }

    /** Message to which the specified message replies to<br> */
    export class InputMessageReplyTo extends VirtualClass<InputMessageReplyToArgs> implements InputMessageReplyToArgs {
        CONSTRUCTOR_id: -1160215659;
        SUBCLASS_OF_ID: 1421262021;
        classType: "constructor";
        className: "InputMessageReplyTo";
        id: int;
        fromReader(reader: Reader): InputMessageReplyTo;
    }

    /** Pinned message<br> */
    export class InputMessagePinned extends VirtualClass<void> {
        CONSTRUCTOR_id: -2037963464;
        SUBCLASS_OF_ID: 1421262021;
        classType: "constructor";
        className: "InputMessagePinned";
        fromReader(reader: Reader): InputMessagePinned;
    }

    export interface InputMessageCallbackQueryArgs {
        /** Message ID */
        id: int;
        /** Callback query ID */
        queryId: long;
    }

    /** Used by bots for fetching information about the message that originated a callback query<br> */
    export class InputMessageCallbackQuery extends VirtualClass<InputMessageCallbackQueryArgs> implements InputMessageCallbackQueryArgs {
        CONSTRUCTOR_id: -1392895362;
        SUBCLASS_OF_ID: 1421262021;
        classType: "constructor";
        className: "InputMessageCallbackQuery";
        id: int;
        queryId: long;
        fromReader(reader: Reader): InputMessageCallbackQuery;
    }

    export interface InputDialogPeerArgs {
        /** Peer */
        peer: TypeInputPeer;
    }

    /** A peer<br> */
    export class InputDialogPeer extends VirtualClass<InputDialogPeerArgs> implements InputDialogPeerArgs {
        CONSTRUCTOR_id: -55902537;
        SUBCLASS_OF_ID: 2719782805;
        classType: "constructor";
        className: "InputDialogPeer";
        peer: TypeInputPeer;
        fromReader(reader: Reader): InputDialogPeer;
    }

    export interface InputDialogPeerFolderArgs {
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * All peers in a <a href="https://corefork.telegram.org/api/folders#peer-folders">peer folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class InputDialogPeerFolder extends VirtualClass<InputDialogPeerFolderArgs> implements InputDialogPeerFolderArgs {
        CONSTRUCTOR_id: 1684014375;
        SUBCLASS_OF_ID: 2719782805;
        classType: "constructor";
        className: "InputDialogPeerFolder";
        folderId: int;
        fromReader(reader: Reader): InputDialogPeerFolder;
    }

    export interface DialogPeerArgs {
        /** Peer */
        peer: TypePeer;
    }

    /** Peer<br> */
    export class DialogPeer extends VirtualClass<DialogPeerArgs> implements DialogPeerArgs {
        CONSTRUCTOR_id: -445792507;
        SUBCLASS_OF_ID: 627892654;
        classType: "constructor";
        className: "DialogPeer";
        peer: TypePeer;
        fromReader(reader: Reader): DialogPeer;
    }

    export interface DialogPeerFolderArgs {
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class DialogPeerFolder extends VirtualClass<DialogPeerFolderArgs> implements DialogPeerFolderArgs {
        CONSTRUCTOR_id: 1363483106;
        SUBCLASS_OF_ID: 627892654;
        classType: "constructor";
        className: "DialogPeerFolder";
        folderId: int;
        fromReader(reader: Reader): DialogPeerFolder;
    }

    export interface FileHashArgs {
        /** Offset from where to start computing SHA-256 hash */
        offset: int;
        /** Length */
        limit: int;
        /** SHA-256 Hash of file chunk, to be checked for validity after download */
        hash: bytes;
    }

    /** SHA256 Hash of an uploaded file, to be checked for validity after download<br> */
    export class FileHash extends VirtualClass<FileHashArgs> implements FileHashArgs {
        CONSTRUCTOR_id: 1648543603;
        SUBCLASS_OF_ID: 3939776691;
        classType: "constructor";
        className: "FileHash";
        offset: int;
        limit: int;
        hash: bytes;
        fromReader(reader: Reader): FileHash;
    }

    export interface InputClientProxyArgs {
        /** Proxy address */
        address: string;
        /** Proxy port */
        port: int;
    }

    /**
     * Info about an <a href="https://corefork.telegram.org/mtproto/mtproto-transports#transport-obfuscation">MTProxy</a> used to connect.<br>
     * @link https://corefork.telegram.org/mtproto/mtproto-transports
     */
    export class InputClientProxy extends VirtualClass<InputClientProxyArgs> implements InputClientProxyArgs {
        CONSTRUCTOR_id: 1968737087;
        SUBCLASS_OF_ID: 152716102;
        classType: "constructor";
        className: "InputClientProxy";
        address: string;
        port: int;
        fromReader(reader: Reader): InputClientProxy;
    }

    export interface InputSecureFileUploadedArgs {
        /** Secure file ID */
        id: long;
        /** Secure file part count */
        parts: int;
        /** MD5 hash of encrypted uploaded file, to be checked server-side */
        md5Checksum: string;
        /** File hash */
        fileHash: bytes;
        /** Secret */
        secret: bytes;
    }

    /**
     * Uploaded secure file, for more info <a href="https://corefork.telegram.org/passport/encryption#inputsecurefile">see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class InputSecureFileUploaded extends VirtualClass<InputSecureFileUploadedArgs> implements InputSecureFileUploadedArgs {
        CONSTRUCTOR_id: 859091184;
        SUBCLASS_OF_ID: 3670584828;
        classType: "constructor";
        className: "InputSecureFileUploaded";
        id: long;
        parts: int;
        md5Checksum: string;
        fileHash: bytes;
        secret: bytes;
        fromReader(reader: Reader): InputSecureFileUploaded;
    }

    export interface InputSecureFileArgs {
        /** Secure file ID */
        id: long;
        /** Secure file access hash */
        accessHash: long;
    }

    /**
     * Preuploaded <a href="https://corefork.telegram.org/passport">passport</a> file, for more info <a href="https://corefork.telegram.org/passport/encryption#inputsecurefile">see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class InputSecureFile extends VirtualClass<InputSecureFileArgs> implements InputSecureFileArgs {
        CONSTRUCTOR_id: 1399317950;
        SUBCLASS_OF_ID: 3670584828;
        classType: "constructor";
        className: "InputSecureFile";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputSecureFile;
    }

    /** Empty constructor<br> */
    export class SecureFileEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1679398724;
        SUBCLASS_OF_ID: 1572395975;
        classType: "constructor";
        className: "SecureFileEmpty";
        fromReader(reader: Reader): SecureFileEmpty;
    }

    export interface SecureFileArgs {
        /** ID */
        id: long;
        /** Access hash */
        accessHash: long;
        /** File size */
        size: int;
        /** DC ID */
        dcId: int;
        /** Date of upload */
        date: int;
        /** File hash */
        fileHash: bytes;
        /** Secret */
        secret: bytes;
    }

    /**
     * Secure <a href="https://corefork.telegram.org/passport">passport</a> file, for more info <a href="https://corefork.telegram.org/passport/encryption#inputsecurefile">see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class SecureFile extends VirtualClass<SecureFileArgs> implements SecureFileArgs {
        CONSTRUCTOR_id: -534283678;
        SUBCLASS_OF_ID: 1572395975;
        classType: "constructor";
        className: "SecureFile";
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        date: int;
        fileHash: bytes;
        secret: bytes;
        fromReader(reader: Reader): SecureFile;
    }

    export interface SecureDataArgs {
        /** Data */
        data: bytes;
        /** Data hash */
        dataHash: bytes;
        /** Secret */
        secret: bytes;
    }

    /**
     * Secure <a href="https://corefork.telegram.org/passport">passport</a> data, for more info <a href="https://corefork.telegram.org/passport/encryption#securedata">see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class SecureData extends VirtualClass<SecureDataArgs> implements SecureDataArgs {
        CONSTRUCTOR_id: -1964327229;
        SUBCLASS_OF_ID: 2094276276;
        classType: "constructor";
        className: "SecureData";
        data: bytes;
        dataHash: bytes;
        secret: bytes;
        fromReader(reader: Reader): SecureData;
    }

    export interface SecurePlainPhoneArgs {
        /** Phone number */
        phone: string;
    }

    /**
     * Phone number to use in <a href="https://corefork.telegram.org/passport">telegram passport</a>: <a href="https://corefork.telegram.org/passport/encryption#secureplaindata">it must be verified, first »</a>.<br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class SecurePlainPhone extends VirtualClass<SecurePlainPhoneArgs> implements SecurePlainPhoneArgs {
        CONSTRUCTOR_id: 2103482845;
        SUBCLASS_OF_ID: 598912950;
        classType: "constructor";
        className: "SecurePlainPhone";
        phone: string;
        fromReader(reader: Reader): SecurePlainPhone;
    }

    export interface SecurePlainEmailArgs {
        /** Email address */
        email: string;
    }

    /**
     * Email address to use in <a href="https://corefork.telegram.org/passport">telegram passport</a>: <a href="https://corefork.telegram.org/passport/encryption#secureplaindata">it must be verified, first »</a>.<br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class SecurePlainEmail extends VirtualClass<SecurePlainEmailArgs> implements SecurePlainEmailArgs {
        CONSTRUCTOR_id: 569137759;
        SUBCLASS_OF_ID: 598912950;
        classType: "constructor";
        className: "SecurePlainEmail";
        email: string;
        fromReader(reader: Reader): SecurePlainEmail;
    }

    /** Personal details<br> */
    export class SecureValueTypePersonalDetails extends VirtualClass<void> {
        CONSTRUCTOR_id: -1658158621;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypePersonalDetails";
        fromReader(reader: Reader): SecureValueTypePersonalDetails;
    }

    /** Passport<br> */
    export class SecureValueTypePassport extends VirtualClass<void> {
        CONSTRUCTOR_id: 1034709504;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypePassport";
        fromReader(reader: Reader): SecureValueTypePassport;
    }

    /** Driver's license<br> */
    export class SecureValueTypeDriverLicense extends VirtualClass<void> {
        CONSTRUCTOR_id: 115615172;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeDriverLicense";
        fromReader(reader: Reader): SecureValueTypeDriverLicense;
    }

    /** Identity card<br> */
    export class SecureValueTypeIdentityCard extends VirtualClass<void> {
        CONSTRUCTOR_id: -1596951477;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeIdentityCard";
        fromReader(reader: Reader): SecureValueTypeIdentityCard;
    }

    /**
     * Internal <a href="https://corefork.telegram.org/passport">passport</a><br>
     * @link https://corefork.telegram.org/passport
     */
    export class SecureValueTypeInternalPassport extends VirtualClass<void> {
        CONSTRUCTOR_id: -1717268701;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeInternalPassport";
        fromReader(reader: Reader): SecureValueTypeInternalPassport;
    }

    /** Address<br> */
    export class SecureValueTypeAddress extends VirtualClass<void> {
        CONSTRUCTOR_id: -874308058;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeAddress";
        fromReader(reader: Reader): SecureValueTypeAddress;
    }

    /** Utility bill<br> */
    export class SecureValueTypeUtilityBill extends VirtualClass<void> {
        CONSTRUCTOR_id: -63531698;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeUtilityBill";
        fromReader(reader: Reader): SecureValueTypeUtilityBill;
    }

    /** Bank statement<br> */
    export class SecureValueTypeBankStatement extends VirtualClass<void> {
        CONSTRUCTOR_id: -1995211763;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeBankStatement";
        fromReader(reader: Reader): SecureValueTypeBankStatement;
    }

    /** Rental agreement<br> */
    export class SecureValueTypeRentalAgreement extends VirtualClass<void> {
        CONSTRUCTOR_id: -1954007928;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeRentalAgreement";
        fromReader(reader: Reader): SecureValueTypeRentalAgreement;
    }

    /**
     * Internal registration <a href="https://corefork.telegram.org/passport">passport</a><br>
     * @link https://corefork.telegram.org/passport
     */
    export class SecureValueTypePassportRegistration extends VirtualClass<void> {
        CONSTRUCTOR_id: -1713143702;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypePassportRegistration";
        fromReader(reader: Reader): SecureValueTypePassportRegistration;
    }

    /** Temporary registration<br> */
    export class SecureValueTypeTemporaryRegistration extends VirtualClass<void> {
        CONSTRUCTOR_id: -368907213;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeTemporaryRegistration";
        fromReader(reader: Reader): SecureValueTypeTemporaryRegistration;
    }

    /** Phone<br> */
    export class SecureValueTypePhone extends VirtualClass<void> {
        CONSTRUCTOR_id: -1289704741;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypePhone";
        fromReader(reader: Reader): SecureValueTypePhone;
    }

    /** Email<br> */
    export class SecureValueTypeEmail extends VirtualClass<void> {
        CONSTRUCTOR_id: -1908627474;
        SUBCLASS_OF_ID: 2291398038;
        classType: "constructor";
        className: "SecureValueTypeEmail";
        fromReader(reader: Reader): SecureValueTypeEmail;
    }

    export interface SecureValueArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Secure <a href="https://corefork.telegram.org/passport">passport</a> value type */
        type: TypeSecureValueType;
        /** Encrypted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> element data */
        data?: TypeSecureData;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the front side of the document */
        frontSide?: TypeSecureFile;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the reverse side of the document */
        reverseSide?: TypeSecureFile;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with a selfie of the user holding the document */
        selfie?: TypeSecureFile;
        /** Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with translated versions of the provided documents */
        translation?: TypeSecureFile[];
        /** Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with photos the of the documents */
        files?: TypeSecureFile[];
        /** Plaintext verified <a href="https://corefork.telegram.org/passport">passport</a> data */
        plainData?: TypeSecurePlainData;
        /** Data hash */
        hash: bytes;
    }

    /**
     * Secure value<br>
     * @link https://corefork.telegram.org/passport
     */
    export class SecureValue extends VirtualClass<SecureValueArgs> implements SecureValueArgs {
        CONSTRUCTOR_id: 411017418;
        SUBCLASS_OF_ID: 85014702;
        classType: "constructor";
        className: "SecureValue";
        flags: number;
        type: TypeSecureValueType;
        data?: TypeSecureData;
        frontSide?: TypeSecureFile;
        reverseSide?: TypeSecureFile;
        selfie?: TypeSecureFile;
        translation?: TypeSecureFile[];
        files?: TypeSecureFile[];
        plainData?: TypeSecurePlainData;
        hash: bytes;
        fromReader(reader: Reader): SecureValue;
    }

    export interface InputSecureValueArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Secure <a href="https://corefork.telegram.org/passport">passport</a> value type */
        type: TypeSecureValueType;
        /** Encrypted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> element data */
        data?: TypeSecureData;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the front side of the document */
        frontSide?: TypeInputSecureFile;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the reverse side of the document */
        reverseSide?: TypeInputSecureFile;
        /** Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with a selfie of the user holding the document */
        selfie?: TypeInputSecureFile;
        /** Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with translated versions of the provided documents */
        translation?: TypeInputSecureFile[];
        /** Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with photos the of the documents */
        files?: TypeInputSecureFile[];
        /** Plaintext verified <a href="https://corefork.telegram.org/passport">passport</a> data */
        plainData?: TypeSecurePlainData;
    }

    /**
     * Secure value, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class InputSecureValue extends VirtualClass<InputSecureValueArgs> implements InputSecureValueArgs {
        CONSTRUCTOR_id: -618540889;
        SUBCLASS_OF_ID: 3030229500;
        classType: "constructor";
        className: "InputSecureValue";
        flags: number;
        type: TypeSecureValueType;
        data?: TypeSecureData;
        frontSide?: TypeInputSecureFile;
        reverseSide?: TypeInputSecureFile;
        selfie?: TypeInputSecureFile;
        translation?: TypeInputSecureFile[];
        files?: TypeInputSecureFile[];
        plainData?: TypeSecurePlainData;
        fromReader(reader: Reader): InputSecureValue;
    }

    export interface SecureValueHashArgs {
        /** Secure value type */
        type: TypeSecureValueType;
        /** Hash */
        hash: bytes;
    }

    /** Secure value hash<br> */
    export class SecureValueHash extends VirtualClass<SecureValueHashArgs> implements SecureValueHashArgs {
        CONSTRUCTOR_id: -316748368;
        SUBCLASS_OF_ID: 3589652487;
        classType: "constructor";
        className: "SecureValueHash";
        type: TypeSecureValueType;
        hash: bytes;
        fromReader(reader: Reader): SecureValueHash;
    }

    export interface SecureValueErrorDataArgs {
        /** The section of the user's Telegram Passport which has the error, one of <a href="https://corefork.telegram.org/constructor/secureValueTypePersonalDetails">secureValueTypePersonalDetails</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassport">secureValueTypePassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeInternalPassport">secureValueTypeInternalPassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeAddress">secureValueTypeAddress</a> */
        type: TypeSecureValueType;
        /** Data hash */
        dataHash: bytes;
        /** Name of the data field which has the error */
        field: string;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypePersonalDetails
     * @link https://corefork.telegram.org/constructor/secureValueTypePassport
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     * @link https://corefork.telegram.org/constructor/secureValueTypeInternalPassport
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeAddress
     */
    export class SecureValueErrorData extends VirtualClass<SecureValueErrorDataArgs> implements SecureValueErrorDataArgs {
        CONSTRUCTOR_id: -391902247;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorData";
        type: TypeSecureValueType;
        dataHash: bytes;
        field: string;
        text: string;
        fromReader(reader: Reader): SecureValueErrorData;
    }

    export interface SecureValueErrorFrontSideArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypePassport">secureValueTypePassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeInternalPassport">secureValueTypeInternalPassport</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypePassport
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     * @link https://corefork.telegram.org/constructor/secureValueTypeInternalPassport
     * @link https://corefork.telegram.org/passport
     */
    export class SecureValueErrorFrontSide extends VirtualClass<SecureValueErrorFrontSideArgs> implements SecureValueErrorFrontSideArgs {
        CONSTRUCTOR_id: -4309510;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorFrontSide";
        type: TypeSecureValueType;
        fileHash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueErrorFrontSide;
    }

    export interface SecureValueErrorReverseSideArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     */
    export class SecureValueErrorReverseSide extends VirtualClass<SecureValueErrorReverseSideArgs> implements SecureValueErrorReverseSideArgs {
        CONSTRUCTOR_id: -2037765467;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorReverseSide";
        type: TypeSecureValueType;
        fileHash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueErrorReverseSide;
    }

    export interface SecureValueErrorSelfieArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypePassport">secureValueTypePassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeInternalPassport">secureValueTypeInternalPassport</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypePassport
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     * @link https://corefork.telegram.org/constructor/secureValueTypeInternalPassport
     * @link https://corefork.telegram.org/passport
     */
    export class SecureValueErrorSelfie extends VirtualClass<SecureValueErrorSelfieArgs> implements SecureValueErrorSelfieArgs {
        CONSTRUCTOR_id: -449327402;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorSelfie";
        type: TypeSecureValueType;
        fileHash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueErrorSelfie;
    }

    export interface SecureValueErrorFileArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypeUtilityBill">secureValueTypeUtilityBill</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeBankStatement">secureValueTypeBankStatement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement">secureValueTypeRentalAgreement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassportRegistration">secureValueTypePassportRegistration</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration">secureValueTypeTemporaryRegistration</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypeUtilityBill
     * @link https://corefork.telegram.org/constructor/secureValueTypeBankStatement
     * @link https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement
     * @link https://corefork.telegram.org/constructor/secureValueTypePassportRegistration
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration
     */
    export class SecureValueErrorFile extends VirtualClass<SecureValueErrorFileArgs> implements SecureValueErrorFileArgs {
        CONSTRUCTOR_id: 2054162547;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorFile";
        type: TypeSecureValueType;
        fileHash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueErrorFile;
    }

    export interface SecureValueErrorFilesArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypeUtilityBill">secureValueTypeUtilityBill</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeBankStatement">secureValueTypeBankStatement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement">secureValueTypeRentalAgreement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassportRegistration">secureValueTypePassportRegistration</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration">secureValueTypeTemporaryRegistration</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes[];
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypeUtilityBill
     * @link https://corefork.telegram.org/constructor/secureValueTypeBankStatement
     * @link https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement
     * @link https://corefork.telegram.org/constructor/secureValueTypePassportRegistration
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration
     */
    export class SecureValueErrorFiles extends VirtualClass<SecureValueErrorFilesArgs> implements SecureValueErrorFilesArgs {
        CONSTRUCTOR_id: 1717706985;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorFiles";
        type: TypeSecureValueType;
        fileHash: bytes[];
        text: string;
        fromReader(reader: Reader): SecureValueErrorFiles;
    }

    export interface SecureValueErrorArgs {
        /** Type of element which has the issue */
        type: TypeSecureValueType;
        /** Hash */
        hash: bytes;
        /** Error message */
        text: string;
    }

    /** Secure value error<br> */
    export class SecureValueError extends VirtualClass<SecureValueErrorArgs> implements SecureValueErrorArgs {
        CONSTRUCTOR_id: -2036501105;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueError";
        type: TypeSecureValueType;
        hash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueError;
    }

    export interface SecureValueErrorTranslationFileArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypePersonalDetails">secureValueTypePersonalDetails</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassport">secureValueTypePassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeInternalPassport">secureValueTypeInternalPassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeUtilityBill">secureValueTypeUtilityBill</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeBankStatement">secureValueTypeBankStatement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement">secureValueTypeRentalAgreement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassportRegistration">secureValueTypePassportRegistration</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration">secureValueTypeTemporaryRegistration</a> */
        type: TypeSecureValueType;
        /** File hash */
        fileHash: bytes;
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypePersonalDetails
     * @link https://corefork.telegram.org/constructor/secureValueTypePassport
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     * @link https://corefork.telegram.org/constructor/secureValueTypeInternalPassport
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeUtilityBill
     * @link https://corefork.telegram.org/constructor/secureValueTypeBankStatement
     * @link https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement
     * @link https://corefork.telegram.org/constructor/secureValueTypePassportRegistration
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration
     */
    export class SecureValueErrorTranslationFile extends VirtualClass<SecureValueErrorTranslationFileArgs> implements SecureValueErrorTranslationFileArgs {
        CONSTRUCTOR_id: -1592506512;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorTranslationFile";
        type: TypeSecureValueType;
        fileHash: bytes;
        text: string;
        fromReader(reader: Reader): SecureValueErrorTranslationFile;
    }

    export interface SecureValueErrorTranslationFilesArgs {
        /** One of <a href="https://corefork.telegram.org/constructor/secureValueTypePersonalDetails">secureValueTypePersonalDetails</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassport">secureValueTypePassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeDriverLicense">secureValueTypeDriverLicense</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeIdentityCard">secureValueTypeIdentityCard</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeInternalPassport">secureValueTypeInternalPassport</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeUtilityBill">secureValueTypeUtilityBill</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeBankStatement">secureValueTypeBankStatement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement">secureValueTypeRentalAgreement</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypePassportRegistration">secureValueTypePassportRegistration</a>, <a href="https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration">secureValueTypeTemporaryRegistration</a> */
        type: TypeSecureValueType;
        /** Hash */
        fileHash: bytes[];
        /** Error message */
        text: string;
    }

    /**
     * Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.<br>
     * @link https://corefork.telegram.org/constructor/secureValueTypePersonalDetails
     * @link https://corefork.telegram.org/constructor/secureValueTypePassport
     * @link https://corefork.telegram.org/constructor/secureValueTypeDriverLicense
     * @link https://corefork.telegram.org/constructor/secureValueTypeIdentityCard
     * @link https://corefork.telegram.org/constructor/secureValueTypeInternalPassport
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeUtilityBill
     * @link https://corefork.telegram.org/constructor/secureValueTypeBankStatement
     * @link https://corefork.telegram.org/constructor/secureValueTypeRentalAgreement
     * @link https://corefork.telegram.org/constructor/secureValueTypePassportRegistration
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/constructor/secureValueTypeTemporaryRegistration
     */
    export class SecureValueErrorTranslationFiles extends VirtualClass<SecureValueErrorTranslationFilesArgs> implements SecureValueErrorTranslationFilesArgs {
        CONSTRUCTOR_id: 878931416;
        SUBCLASS_OF_ID: 101146574;
        classType: "constructor";
        className: "SecureValueErrorTranslationFiles";
        type: TypeSecureValueType;
        fileHash: bytes[];
        text: string;
        fromReader(reader: Reader): SecureValueErrorTranslationFiles;
    }

    export interface SecureCredentialsEncryptedArgs {
        /** Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in <a href="https://corefork.telegram.org/passport#decrypting-data">decrypting data »</a> */
        data: bytes;
        /** Data hash for data authentication as described in <a href="https://corefork.telegram.org/passport#decrypting-data">decrypting data »</a> */
        hash: bytes;
        /** Secret, encrypted with the bot's public RSA key, required for data decryption as described in <a href="https://corefork.telegram.org/passport#decrypting-data">decrypting data »</a> */
        secret: bytes;
    }

    /**
     * Encrypted credentials required to decrypt <a href="https://corefork.telegram.org/passport">telegram passport</a> data.<br>
     * @link https://corefork.telegram.org/passport
     */
    export class SecureCredentialsEncrypted extends VirtualClass<SecureCredentialsEncryptedArgs> implements SecureCredentialsEncryptedArgs {
        CONSTRUCTOR_id: 871426631;
        SUBCLASS_OF_ID: 2497476147;
        classType: "constructor";
        className: "SecureCredentialsEncrypted";
        data: bytes;
        hash: bytes;
        secret: bytes;
        fromReader(reader: Reader): SecureCredentialsEncrypted;
    }

    export interface SavedPhoneContactArgs {
        /** Phone number */
        phone: string;
        /** First name */
        firstName: string;
        /** Last name */
        lastName: string;
        /** Date added */
        date: int;
    }

    /** Saved contact<br> */
    export class SavedPhoneContact extends VirtualClass<SavedPhoneContactArgs> implements SavedPhoneContactArgs {
        CONSTRUCTOR_id: 289586518;
        SUBCLASS_OF_ID: 115054788;
        classType: "constructor";
        className: "SavedPhoneContact";
        phone: string;
        firstName: string;
        lastName: string;
        date: int;
        fromReader(reader: Reader): SavedPhoneContact;
    }

    /** Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)<br> */
    export class PasswordKdfAlgoUnknown extends VirtualClass<void> {
        CONSTRUCTOR_id: -732254058;
        SUBCLASS_OF_ID: 935130572;
        classType: "constructor";
        className: "PasswordKdfAlgoUnknown";
        fromReader(reader: Reader): PasswordKdfAlgoUnknown;
    }

    export interface PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPowArgs {
        /** One of two salts used by the derivation function (see <a href="https://corefork.telegram.org/api/srp">SRP 2FA login</a>) */
        salt1: bytes;
        /** One of two salts used by the derivation function (see <a href="https://corefork.telegram.org/api/srp">SRP 2FA login</a>) */
        salt2: bytes;
        /** Base (see <a href="https://corefork.telegram.org/api/srp">SRP 2FA login</a>) */
        g: int;
        /** 2048-bit modulus (see <a href="https://corefork.telegram.org/api/srp">SRP 2FA login</a>) */
        p: bytes;
    }

    /**
     * This key derivation algorithm defines that <a href="https://corefork.telegram.org/api/srp">SRP 2FA login</a> must be used<br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends VirtualClass<PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPowArgs> implements PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPowArgs {
        CONSTRUCTOR_id: 982592842;
        SUBCLASS_OF_ID: 935130572;
        classType: "constructor";
        className: "PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow";
        salt1: bytes;
        salt2: bytes;
        g: int;
        p: bytes;
        fromReader(reader: Reader): PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
    }

    /** Unknown KDF algo (most likely the client has to be updated)<br> */
    export class SecurePasswordKdfAlgoUnknown extends VirtualClass<void> {
        CONSTRUCTOR_id: 4883767;
        SUBCLASS_OF_ID: 1998989635;
        classType: "constructor";
        className: "SecurePasswordKdfAlgoUnknown";
        fromReader(reader: Reader): SecurePasswordKdfAlgoUnknown;
    }

    export interface SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000Args {
        /** Salt */
        salt: bytes;
    }

    /** PBKDF2 with SHA512 and 100000 iterations KDF algo<br> */
    export class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends VirtualClass<SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000Args> implements SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000Args {
        CONSTRUCTOR_id: -1141711456;
        SUBCLASS_OF_ID: 1998989635;
        classType: "constructor";
        className: "SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000";
        salt: bytes;
        fromReader(reader: Reader): SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000;
    }

    export interface SecurePasswordKdfAlgoSHA512Args {
        /** Salt */
        salt: bytes;
    }

    /** SHA512 KDF algo<br> */
    export class SecurePasswordKdfAlgoSHA512 extends VirtualClass<SecurePasswordKdfAlgoSHA512Args> implements SecurePasswordKdfAlgoSHA512Args {
        CONSTRUCTOR_id: -2042159726;
        SUBCLASS_OF_ID: 1998989635;
        classType: "constructor";
        className: "SecurePasswordKdfAlgoSHA512";
        salt: bytes;
        fromReader(reader: Reader): SecurePasswordKdfAlgoSHA512;
    }

    export interface SecureSecretSettingsArgs {
        /** Secure KDF algo */
        secureAlgo: TypeSecurePasswordKdfAlgo;
        /** Secure secret */
        secureSecret: bytes;
        /** Secret ID */
        secureSecretId: long;
    }

    /** Secure settings<br> */
    export class SecureSecretSettings extends VirtualClass<SecureSecretSettingsArgs> implements SecureSecretSettingsArgs {
        CONSTRUCTOR_id: 354925740;
        SUBCLASS_OF_ID: 3334996731;
        classType: "constructor";
        className: "SecureSecretSettings";
        secureAlgo: TypeSecurePasswordKdfAlgo;
        secureSecret: bytes;
        secureSecretId: long;
        fromReader(reader: Reader): SecureSecretSettings;
    }

    /** There is no password<br> */
    export class InputCheckPasswordEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1736378792;
        SUBCLASS_OF_ID: 3558536544;
        classType: "constructor";
        className: "InputCheckPasswordEmpty";
        fromReader(reader: Reader): InputCheckPasswordEmpty;
    }

    export interface InputCheckPasswordSRPArgs {
        /** <a href="https://corefork.telegram.org/api/srp">SRP ID</a> */
        srpId: long;
        /** <code>A</code> parameter (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        a: bytes;
        /** <code>M1</code> parameter (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        m1: bytes;
    }

    /**
     * Constructor for checking the validity of a 2FA SRP password (see <a href="https://corefork.telegram.org/api/srp">SRP</a>)<br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class InputCheckPasswordSRP extends VirtualClass<InputCheckPasswordSRPArgs> implements InputCheckPasswordSRPArgs {
        CONSTRUCTOR_id: -763367294;
        SUBCLASS_OF_ID: 3558536544;
        classType: "constructor";
        className: "InputCheckPasswordSRP";
        srpId: long;
        a: bytes;
        m1: bytes;
        fromReader(reader: Reader): InputCheckPasswordSRP;
    }

    export interface SecureRequiredTypeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Native names */
        nativeNames?: true;
        /** Is a selfie required */
        selfieRequired?: true;
        /** Is a translation required */
        translationRequired?: true;
        /** Secure value type */
        type: TypeSecureValueType;
    }

    /** Required type<br> */
    export class SecureRequiredType extends VirtualClass<SecureRequiredTypeArgs> implements SecureRequiredTypeArgs {
        CONSTRUCTOR_id: -2103600678;
        SUBCLASS_OF_ID: 2088452618;
        classType: "constructor";
        className: "SecureRequiredType";
        flags: number;
        nativeNames?: true;
        selfieRequired?: true;
        translationRequired?: true;
        type: TypeSecureValueType;
        fromReader(reader: Reader): SecureRequiredType;
    }

    export interface SecureRequiredTypeOneOfArgs {
        /** Secure required value types */
        types: TypeSecureRequiredType[];
    }

    /** One of<br> */
    export class SecureRequiredTypeOneOf extends VirtualClass<SecureRequiredTypeOneOfArgs> implements SecureRequiredTypeOneOfArgs {
        CONSTRUCTOR_id: 41187252;
        SUBCLASS_OF_ID: 2088452618;
        classType: "constructor";
        className: "SecureRequiredTypeOneOf";
        types: TypeSecureRequiredType[];
        fromReader(reader: Reader): SecureRequiredTypeOneOf;
    }

    export interface InputAppEventArgs {
        /** Client's exact timestamp for the event */
        time: double;
        /** Type of event */
        type: string;
        /** Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object */
        peer: long;
        /** Details of the event */
        data: TypeJSONValue;
    }

    /** Event that occured in the application.<br> */
    export class InputAppEvent extends VirtualClass<InputAppEventArgs> implements InputAppEventArgs {
        CONSTRUCTOR_id: 488313413;
        SUBCLASS_OF_ID: 2301763846;
        classType: "constructor";
        className: "InputAppEvent";
        time: double;
        type: string;
        peer: long;
        data: TypeJSONValue;
        fromReader(reader: Reader): InputAppEvent;
    }

    export interface JsonObjectValueArgs {
        /** Key */
        key: string;
        /** Value */
        value: TypeJSONValue;
    }

    /** JSON key: value pair<br> */
    export class JsonObjectValue extends VirtualClass<JsonObjectValueArgs> implements JsonObjectValueArgs {
        CONSTRUCTOR_id: -1059185703;
        SUBCLASS_OF_ID: 2474626745;
        classType: "constructor";
        className: "JsonObjectValue";
        key: string;
        value: TypeJSONValue;
        fromReader(reader: Reader): JsonObjectValue;
    }

    /** null JSON value<br> */
    export class JsonNull extends VirtualClass<void> {
        CONSTRUCTOR_id: 1064139624;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonNull";
        fromReader(reader: Reader): JsonNull;
    }

    export interface JsonBoolArgs {
        /** Value */
        value: Bool;
    }

    /** JSON boolean value<br> */
    export class JsonBool extends VirtualClass<JsonBoolArgs> implements JsonBoolArgs {
        CONSTRUCTOR_id: -952869270;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonBool";
        value: Bool;
        fromReader(reader: Reader): JsonBool;
    }

    export interface JsonNumberArgs {
        /** Value */
        value: double;
    }

    /** JSON numeric value<br> */
    export class JsonNumber extends VirtualClass<JsonNumberArgs> implements JsonNumberArgs {
        CONSTRUCTOR_id: 736157604;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonNumber";
        value: double;
        fromReader(reader: Reader): JsonNumber;
    }

    export interface JsonStringArgs {
        /** Value */
        value: string;
    }

    /** JSON string<br> */
    export class JsonString extends VirtualClass<JsonStringArgs> implements JsonStringArgs {
        CONSTRUCTOR_id: -1222740358;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonString";
        value: string;
        fromReader(reader: Reader): JsonString;
    }

    export interface JsonArrayArgs {
        /** JSON values */
        value: TypeJSONValue[];
    }

    /** JSON array<br> */
    export class JsonArray extends VirtualClass<JsonArrayArgs> implements JsonArrayArgs {
        CONSTRUCTOR_id: -146520221;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonArray";
        value: TypeJSONValue[];
        fromReader(reader: Reader): JsonArray;
    }

    export interface JsonObjectArgs {
        /** Values */
        value: TypeJSONObjectValue[];
    }

    /** JSON object value<br> */
    export class JsonObject extends VirtualClass<JsonObjectArgs> implements JsonObjectArgs {
        CONSTRUCTOR_id: -1715350371;
        SUBCLASS_OF_ID: 3952707507;
        classType: "constructor";
        className: "JsonObject";
        value: TypeJSONObjectValue[];
        fromReader(reader: Reader): JsonObject;
    }

    export interface PageTableCellArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Is this element part of the column header */
        header?: true;
        /** Horizontally centered block */
        alignCenter?: true;
        /** Right-aligned block */
        alignRight?: true;
        /** Vertically centered block */
        valignMiddle?: true;
        /** Block vertically-alligned to the bottom */
        valignBottom?: true;
        /** Content */
        text?: TypeRichText;
        /** For how many columns should this cell extend */
        colspan?: int;
        /** For how many rows should this cell extend */
        rowspan?: int;
    }

    /** Table cell<br> */
    export class PageTableCell extends VirtualClass<PageTableCellArgs> implements PageTableCellArgs {
        CONSTRUCTOR_id: 878078826;
        SUBCLASS_OF_ID: 2968203348;
        classType: "constructor";
        className: "PageTableCell";
        flags: number;
        header?: true;
        alignCenter?: true;
        alignRight?: true;
        valignMiddle?: true;
        valignBottom?: true;
        text?: TypeRichText;
        colspan?: int;
        rowspan?: int;
        fromReader(reader: Reader): PageTableCell;
    }

    export interface PageTableRowArgs {
        /** Table cells */
        cells: TypePageTableCell[];
    }

    /** Table row<br> */
    export class PageTableRow extends VirtualClass<PageTableRowArgs> implements PageTableRowArgs {
        CONSTRUCTOR_id: -524237339;
        SUBCLASS_OF_ID: 1504505361;
        classType: "constructor";
        className: "PageTableRow";
        cells: TypePageTableCell[];
        fromReader(reader: Reader): PageTableRow;
    }

    export interface PageCaptionArgs {
        /** Caption */
        text: TypeRichText;
        /** Credits */
        credit: TypeRichText;
    }

    /** Page caption<br> */
    export class PageCaption extends VirtualClass<PageCaptionArgs> implements PageCaptionArgs {
        CONSTRUCTOR_id: 1869903447;
        SUBCLASS_OF_ID: 699985587;
        classType: "constructor";
        className: "PageCaption";
        text: TypeRichText;
        credit: TypeRichText;
        fromReader(reader: Reader): PageCaption;
    }

    export interface PageListItemTextArgs {
        /** Text */
        text: TypeRichText;
    }

    /** List item<br> */
    export class PageListItemText extends VirtualClass<PageListItemTextArgs> implements PageListItemTextArgs {
        CONSTRUCTOR_id: -1188055347;
        SUBCLASS_OF_ID: 2360261809;
        classType: "constructor";
        className: "PageListItemText";
        text: TypeRichText;
        fromReader(reader: Reader): PageListItemText;
    }

    export interface PageListItemBlocksArgs {
        /** Blocks */
        blocks: TypePageBlock[];
    }

    /** List item<br> */
    export class PageListItemBlocks extends VirtualClass<PageListItemBlocksArgs> implements PageListItemBlocksArgs {
        CONSTRUCTOR_id: 635466748;
        SUBCLASS_OF_ID: 2360261809;
        classType: "constructor";
        className: "PageListItemBlocks";
        blocks: TypePageBlock[];
        fromReader(reader: Reader): PageListItemBlocks;
    }

    export interface PageListOrderedItemTextArgs {
        /** Number of element within ordered list */
        num: string;
        /** Text */
        text: TypeRichText;
    }

    /** Ordered list of text items<br> */
    export class PageListOrderedItemText extends VirtualClass<PageListOrderedItemTextArgs> implements PageListOrderedItemTextArgs {
        CONSTRUCTOR_id: 1577484359;
        SUBCLASS_OF_ID: 4007268024;
        classType: "constructor";
        className: "PageListOrderedItemText";
        num: string;
        text: TypeRichText;
        fromReader(reader: Reader): PageListOrderedItemText;
    }

    export interface PageListOrderedItemBlocksArgs {
        /** Number of element within ordered list */
        num: string;
        /** Item contents */
        blocks: TypePageBlock[];
    }

    /** Ordered list of <a href="https://instantview.telegram.org/">IV</a> blocks<br> */
    export class PageListOrderedItemBlocks extends VirtualClass<PageListOrderedItemBlocksArgs> implements PageListOrderedItemBlocksArgs {
        CONSTRUCTOR_id: -1730311882;
        SUBCLASS_OF_ID: 4007268024;
        classType: "constructor";
        className: "PageListOrderedItemBlocks";
        num: string;
        blocks: TypePageBlock[];
        fromReader(reader: Reader): PageListOrderedItemBlocks;
    }

    export interface PageRelatedArticleArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** URL of article */
        url: string;
        /** Webpage ID of generated IV preview */
        webpageId: long;
        /** Title */
        title?: string;
        /** Description */
        description?: string;
        /** ID of preview photo */
        photoId?: long;
        /** Author name */
        author?: string;
        /** Date of pubblication */
        publishedDate?: int;
    }

    /** Related article<br> */
    export class PageRelatedArticle extends VirtualClass<PageRelatedArticleArgs> implements PageRelatedArticleArgs {
        CONSTRUCTOR_id: -1282352120;
        SUBCLASS_OF_ID: 919623714;
        classType: "constructor";
        className: "PageRelatedArticle";
        flags: number;
        url: string;
        webpageId: long;
        title?: string;
        description?: string;
        photoId?: long;
        author?: string;
        publishedDate?: int;
        fromReader(reader: Reader): PageRelatedArticle;
    }

    export interface PageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using <a href="https://corefork.telegram.org/method/messages.getWebPagePreview">messages.getWebPagePreview</a>. */
        part?: true;
        /** Whether the page contains RTL text */
        rtl?: true;
        /** Whether this is an <a href="https://instantview.telegram.org/docs#what-39s-new-in-2-0">IV v2</a> page */
        v2?: true;
        /** Original page HTTP URL */
        url: string;
        /** Page elements (like with HTML elements, only as TL constructors) */
        blocks: TypePageBlock[];
        /** Photos in page */
        photos: TypePhoto[];
        /** Media in page */
        documents: TypeDocument[];
        /** Viewcount */
        views?: int;
    }

    /**
     * <a href="https://instantview.telegram.org/">Instant view</a> page<br>
     * @link https://corefork.telegram.org/method/messages.getWebPagePreview
     */
    export class Page extends VirtualClass<PageArgs> implements PageArgs {
        CONSTRUCTOR_id: -1738178803;
        SUBCLASS_OF_ID: 3023575326;
        classType: "constructor";
        className: "Page";
        flags: number;
        part?: true;
        rtl?: true;
        v2?: true;
        url: string;
        blocks: TypePageBlock[];
        photos: TypePhoto[];
        documents: TypeDocument[];
        views?: int;
        fromReader(reader: Reader): Page;
    }

    export interface PollAnswerArgs {
        /** Textual representation of the answer */
        text: string;
        /** The param that has to be passed to <a href="https://corefork.telegram.org/method/messages.sendVote">messages.sendVote</a>. */
        option: bytes;
    }

    /**
     * A possible answer of a poll<br>
     * @link https://corefork.telegram.org/method/messages.sendVote
     * @link https://corefork.telegram.org/constructor/poll
     */
    export class PollAnswer extends VirtualClass<PollAnswerArgs> implements PollAnswerArgs {
        CONSTRUCTOR_id: 1823064809;
        SUBCLASS_OF_ID: 2124799390;
        classType: "constructor";
        className: "PollAnswer";
        text: string;
        option: bytes;
        fromReader(reader: Reader): PollAnswer;
    }

    export interface PollArgs {
        /** ID of the poll */
        id: long;
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the poll is closed and doesn't accept any more answers */
        closed?: true;
        /** Whether cast votes are publicly visible to all users (non-anonymous poll) */
        publicVoters?: true;
        /** Whether multiple options can be chosen as answer */
        multipleChoice?: true;
        /** Whether this is a quiz (with wrong and correct answers, results shown in the return type) */
        quiz?: true;
        /** The question of the poll */
        question: string;
        /** The possible answers, vote using <a href="https://corefork.telegram.org/method/messages.sendVote">messages.sendVote</a>. */
        answers: TypePollAnswer[];
        /** Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date. */
        closePeriod?: int;
        /** Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close_period. */
        closeDate?: int;
    }

    /**
     * Poll<br>
     * @link https://corefork.telegram.org/method/messages.sendVote
     * @link https://corefork.telegram.org/constructor/poll
     */
    export class Poll extends VirtualClass<PollArgs> implements PollArgs {
        CONSTRUCTOR_id: -2032041631;
        SUBCLASS_OF_ID: 613307771;
        classType: "constructor";
        className: "Poll";
        id: long;
        flags: number;
        closed?: true;
        publicVoters?: true;
        multipleChoice?: true;
        quiz?: true;
        question: string;
        answers: TypePollAnswer[];
        closePeriod?: int;
        closeDate?: int;
        fromReader(reader: Reader): Poll;
    }

    export interface PollAnswerVotersArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether we have chosen this answer */
        chosen?: true;
        /** For quizes, whether the option we have chosen is correct */
        correct?: true;
        /** The param that has to be passed to <a href="https://corefork.telegram.org/method/messages.sendVote">messages.sendVote</a>. */
        option: bytes;
        /** How many users voted for this option */
        voters: int;
    }

    /**
     * A poll answer, and how users voted on it<br>
     * @link https://corefork.telegram.org/method/messages.sendVote
     * @link https://corefork.telegram.org/constructor/poll
     */
    export class PollAnswerVoters extends VirtualClass<PollAnswerVotersArgs> implements PollAnswerVotersArgs {
        CONSTRUCTOR_id: 997055186;
        SUBCLASS_OF_ID: 2095107985;
        classType: "constructor";
        className: "PollAnswerVoters";
        flags: number;
        chosen?: true;
        correct?: true;
        option: bytes;
        voters: int;
        fromReader(reader: Reader): PollAnswerVoters;
    }

    export interface PollResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Similar to <a href="https://corefork.telegram.org/api/min">min</a> objects, used for poll constructors that are the same for all users so they don't have option chosen by the current user (you can use <a href="https://corefork.telegram.org/method/messages.getPollResults">messages.getPollResults</a> to get the full poll results). */
        min?: true;
        /** Poll results */
        results?: TypePollAnswerVoters[];
        /** Total number of people that voted in the poll */
        totalVoters?: int;
        /** IDs of the last users that recently voted in the poll */
        recentVoters?: int[];
        /** Explanation of quiz solution */
        solution?: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text in quiz solution</a> */
        solutionEntities?: TypeMessageEntity[];
    }

    /**
     * Results of poll<br>
     * @link https://corefork.telegram.org/api/min
     * @link https://corefork.telegram.org/method/messages.getPollResults
     * @link https://corefork.telegram.org/api/entities
     */
    export class PollResults extends VirtualClass<PollResultsArgs> implements PollResultsArgs {
        CONSTRUCTOR_id: -1159937629;
        SUBCLASS_OF_ID: 3283416711;
        classType: "constructor";
        className: "PollResults";
        flags: number;
        min?: true;
        results?: TypePollAnswerVoters[];
        totalVoters?: int;
        recentVoters?: int[];
        solution?: string;
        solutionEntities?: TypeMessageEntity[];
        fromReader(reader: Reader): PollResults;
    }

    export interface ChatOnlinesArgs {
        /** Number of online users */
        onlines: int;
    }

    /** Number of online users in a chat<br> */
    export class ChatOnlines extends VirtualClass<ChatOnlinesArgs> implements ChatOnlinesArgs {
        CONSTRUCTOR_id: -264117680;
        SUBCLASS_OF_ID: 2357301306;
        classType: "constructor";
        className: "ChatOnlines";
        onlines: int;
        fromReader(reader: Reader): ChatOnlines;
    }

    export interface StatsURLArgs {
        /** Chat statistics */
        url: string;
    }

    /** URL with chat statistics<br> */
    export class StatsURL extends VirtualClass<StatsURLArgs> implements StatsURLArgs {
        CONSTRUCTOR_id: 1202287072;
        SUBCLASS_OF_ID: 2370606272;
        classType: "constructor";
        className: "StatsURL";
        url: string;
        fromReader(reader: Reader): StatsURL;
    }

    export interface ChatAdminRightsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, allows the admin to modify the description of the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        changeInfo?: true;
        /** If set, allows the admin to post messages in the <a href="https://corefork.telegram.org/api/channel">channel</a> */
        postMessages?: true;
        /** If set, allows the admin to also edit messages from other admins in the <a href="https://corefork.telegram.org/api/channel">channel</a> */
        editMessages?: true;
        /** If set, allows the admin to also delete messages from other admins in the <a href="https://corefork.telegram.org/api/channel">channel</a> */
        deleteMessages?: true;
        /** If set, allows the admin to ban users from the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        banUsers?: true;
        /** If set, allows the admin to invite users in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        inviteUsers?: true;
        /** If set, allows the admin to pin messages in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        pinMessages?: true;
        /** If set, allows the admin to add other admins with the same (or more limited) permissions in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> */
        addAdmins?: true;
        /** Whether this admin is anonymous */
        anonymous?: true;
        /** If set, allows the admin to change group call/livestream settings */
        manageCall?: true;
        /** Set this flag if none of the other flags are set, but you stil want the user to be an admin. */
        other?: true;
    }

    /**
     * Represents the rights of an admin in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class ChatAdminRights extends VirtualClass<ChatAdminRightsArgs> implements ChatAdminRightsArgs {
        CONSTRUCTOR_id: 1605510357;
        SUBCLASS_OF_ID: 2252195780;
        classType: "constructor";
        className: "ChatAdminRights";
        flags: number;
        changeInfo?: true;
        postMessages?: true;
        editMessages?: true;
        deleteMessages?: true;
        banUsers?: true;
        inviteUsers?: true;
        pinMessages?: true;
        addAdmins?: true;
        anonymous?: true;
        manageCall?: true;
        other?: true;
        fromReader(reader: Reader): ChatAdminRights;
    }

    export interface ChatBannedRightsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, does not allow a user to view messages in a <a href="https://corefork.telegram.org/api/channel">supergroup/channel/chat</a> */
        viewMessages?: true;
        /** If set, does not allow a user to send messages in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendMessages?: true;
        /** If set, does not allow a user to send any media in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendMedia?: true;
        /** If set, does not allow a user to send stickers in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendStickers?: true;
        /** If set, does not allow a user to send gifs in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendGifs?: true;
        /** If set, does not allow a user to send games in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendGames?: true;
        /** If set, does not allow a user to use inline bots in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendInline?: true;
        /** If set, does not allow a user to embed links in the messages of a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        embedLinks?: true;
        /** If set, does not allow a user to send polls in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        sendPolls?: true;
        /** If set, does not allow any user to change the description of a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        changeInfo?: true;
        /** If set, does not allow any user to invite users in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        inviteUsers?: true;
        /** If set, does not allow any user to pin messages in a <a href="https://corefork.telegram.org/api/channel">supergroup/chat</a> */
        pinMessages?: true;
        /** Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days). */
        untilDate: int;
    }

    /** Represents the rights of a normal user in a <a href="https://corefork.telegram.org/api/channel">supergroup/channel/chat</a>. In this case, the flags are inverted: if set, a flag <strong>does not allow</strong> a user to do X.<br> */
    export class ChatBannedRights extends VirtualClass<ChatBannedRightsArgs> implements ChatBannedRightsArgs {
        CONSTRUCTOR_id: -1626209256;
        SUBCLASS_OF_ID: 1263814057;
        classType: "constructor";
        className: "ChatBannedRights";
        flags: number;
        viewMessages?: true;
        sendMessages?: true;
        sendMedia?: true;
        sendStickers?: true;
        sendGifs?: true;
        sendGames?: true;
        sendInline?: true;
        embedLinks?: true;
        sendPolls?: true;
        changeInfo?: true;
        inviteUsers?: true;
        pinMessages?: true;
        untilDate: int;
        fromReader(reader: Reader): ChatBannedRights;
    }

    export interface InputWallPaperArgs {
        /** Wallpaper ID */
        id: long;
        /** Access hash */
        accessHash: long;
    }

    /** Wallpaper<br> */
    export class InputWallPaper extends VirtualClass<InputWallPaperArgs> implements InputWallPaperArgs {
        CONSTRUCTOR_id: -433014407;
        SUBCLASS_OF_ID: 4000784410;
        classType: "constructor";
        className: "InputWallPaper";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputWallPaper;
    }

    export interface InputWallPaperSlugArgs {
        /** Unique wallpaper ID */
        slug: string;
    }

    /** Wallpaper by slug (a unique ID)<br> */
    export class InputWallPaperSlug extends VirtualClass<InputWallPaperSlugArgs> implements InputWallPaperSlugArgs {
        CONSTRUCTOR_id: 1913199744;
        SUBCLASS_OF_ID: 4000784410;
        classType: "constructor";
        className: "InputWallPaperSlug";
        slug: string;
        fromReader(reader: Reader): InputWallPaperSlug;
    }

    export interface InputWallPaperNoFileArgs {
        /** Wallpaper ID */
        id: long;
    }

    /**
     * Wallpaper with no file access hash, used for example when deleting (<code>unsave=true</code>) wallpapers using <a href="https://corefork.telegram.org/method/account.saveWallPaper">account.saveWallPaper</a>, specifying just the wallpaper ID.<br>
     * @link https://corefork.telegram.org/method/account.saveWallPaper
     */
    export class InputWallPaperNoFile extends VirtualClass<InputWallPaperNoFileArgs> implements InputWallPaperNoFileArgs {
        CONSTRUCTOR_id: -1770371538;
        SUBCLASS_OF_ID: 4000784410;
        classType: "constructor";
        className: "InputWallPaperNoFile";
        id: long;
        fromReader(reader: Reader): InputWallPaperNoFile;
    }

    export interface CodeSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to allow phone verification via <a href="https://corefork.telegram.org/api/auth">phone calls</a>. */
        allowFlashcall?: true;
        /** Pass true if the phone number is used on the current device. Ignored if allow_flashcall is not set. */
        currentNumber?: true;
        /** If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the <a href="https://developers.google.com/identity/sms-retriever/overview">android SMS receiver APIs</a> */
        allowAppHash?: true;
    }

    /**
     * Settings used by telegram servers for sending the confirm code.<br>Example implementations: <a href="https://github.com/DrKLO/Telegram/blob/master/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java">telegram for android</a>, <a href="https://github.com/tdlib/td/tree/master/td/telegram/SendCodeHelper.cpp">tdlib</a>.<br>
     * @link https://corefork.telegram.org/api/auth
     */
    export class CodeSettings extends VirtualClass<CodeSettingsArgs> implements CodeSettingsArgs {
        CONSTRUCTOR_id: -557924733;
        SUBCLASS_OF_ID: 1223539850;
        classType: "constructor";
        className: "CodeSettings";
        flags: number;
        allowFlashcall?: true;
        currentNumber?: true;
        allowAppHash?: true;
        fromReader(reader: Reader): CodeSettings;
    }

    export interface WallPaperSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12 */
        blur?: true;
        /** If set, the background needs to be slightly moved when device is rotated */
        motion?: true;
        /** If set, a PNG pattern is to be combined with the <code>color</code> chosen by the user: the main color of the background in RGB24 format */
        backgroundColor?: int;
        /** If set, a PNG pattern is to be combined with the first and second background colors (RGB24 format) in a top-bottom gradient */
        secondBackgroundColor?: int;
        /** If set, a PNG pattern is to be combined with the first, second and third background colors (RGB24 format) in a freeform gradient */
        thirdBackgroundColor?: int;
        /** If set, a PNG pattern is to be combined with the first, second, third and fourth background colors (RGB24 format) in a freeform gradient */
        fourthBackgroundColor?: int;
        /** Intensity of the pattern when it is shown above the main background color, 0-100 */
        intensity?: int;
        /** Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45 */
        rotation?: int;
    }

    /** Wallpaper settings<br> */
    export class WallPaperSettings extends VirtualClass<WallPaperSettingsArgs> implements WallPaperSettingsArgs {
        CONSTRUCTOR_id: 499236004;
        SUBCLASS_OF_ID: 1098244882;
        classType: "constructor";
        className: "WallPaperSettings";
        flags: number;
        blur?: true;
        motion?: true;
        backgroundColor?: int;
        secondBackgroundColor?: int;
        thirdBackgroundColor?: int;
        fourthBackgroundColor?: int;
        intensity?: int;
        rotation?: int;
        fromReader(reader: Reader): WallPaperSettings;
    }

    export interface AutoDownloadSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable automatic media downloads? */
        disabled?: true;
        /** Whether to preload the first seconds of videos larger than the specified limit */
        videoPreloadLarge?: true;
        /** Whether to preload the next audio track when you're listening to music */
        audioPreloadNext?: true;
        /** Whether to enable data saving mode in phone calls */
        phonecallsLessData?: true;
        /** Maximum size of photos to preload */
        photoSizeMax: int;
        /** Maximum size of videos to preload */
        videoSizeMax: int;
        /** Maximum size of other files to preload */
        fileSizeMax: int;
        /** Maximum suggested bitrate for <strong>uploading</strong> videos */
        videoUploadMaxbitrate: int;
    }

    /** Autodownload settings<br> */
    export class AutoDownloadSettings extends VirtualClass<AutoDownloadSettingsArgs> implements AutoDownloadSettingsArgs {
        CONSTRUCTOR_id: -532532493;
        SUBCLASS_OF_ID: 1361582535;
        classType: "constructor";
        className: "AutoDownloadSettings";
        flags: number;
        disabled?: true;
        videoPreloadLarge?: true;
        audioPreloadNext?: true;
        phonecallsLessData?: true;
        photoSizeMax: int;
        videoSizeMax: int;
        fileSizeMax: int;
        videoUploadMaxbitrate: int;
        fromReader(reader: Reader): AutoDownloadSettings;
    }

    export interface EmojiKeywordArgs {
        /** Keyword */
        keyword: string;
        /** Emojis associated to keyword */
        emoticons: string[];
    }

    /** Emoji keyword<br> */
    export class EmojiKeyword extends VirtualClass<EmojiKeywordArgs> implements EmojiKeywordArgs {
        CONSTRUCTOR_id: -709641735;
        SUBCLASS_OF_ID: 1712497982;
        classType: "constructor";
        className: "EmojiKeyword";
        keyword: string;
        emoticons: string[];
        fromReader(reader: Reader): EmojiKeyword;
    }

    export interface EmojiKeywordDeletedArgs {
        /** Keyword */
        keyword: string;
        /** Emojis that were associated to keyword */
        emoticons: string[];
    }

    /** Deleted emoji keyword<br> */
    export class EmojiKeywordDeleted extends VirtualClass<EmojiKeywordDeletedArgs> implements EmojiKeywordDeletedArgs {
        CONSTRUCTOR_id: 594408994;
        SUBCLASS_OF_ID: 1712497982;
        classType: "constructor";
        className: "EmojiKeywordDeleted";
        keyword: string;
        emoticons: string[];
        fromReader(reader: Reader): EmojiKeywordDeleted;
    }

    export interface EmojiKeywordsDifferenceArgs {
        /** Language code for keywords */
        langCode: string;
        /** Previous emoji keyword list version */
        fromVersion: int;
        /** Current version of emoji keyword list */
        version: int;
        /** Emojis associated to keywords */
        keywords: TypeEmojiKeyword[];
    }

    /** Changes to emoji keywords<br> */
    export class EmojiKeywordsDifference extends VirtualClass<EmojiKeywordsDifferenceArgs> implements EmojiKeywordsDifferenceArgs {
        CONSTRUCTOR_id: 1556570557;
        SUBCLASS_OF_ID: 3531196018;
        classType: "constructor";
        className: "EmojiKeywordsDifference";
        langCode: string;
        fromVersion: int;
        version: int;
        keywords: TypeEmojiKeyword[];
        fromReader(reader: Reader): EmojiKeywordsDifference;
    }

    export interface EmojiURLArgs {
        /** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation */
        url: string;
    }

    /** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation<br> */
    export class EmojiURL extends VirtualClass<EmojiURLArgs> implements EmojiURLArgs {
        CONSTRUCTOR_id: -1519029347;
        SUBCLASS_OF_ID: 530614809;
        classType: "constructor";
        className: "EmojiURL";
        url: string;
        fromReader(reader: Reader): EmojiURL;
    }

    export interface EmojiLanguageArgs {
        /** Language code */
        langCode: string;
    }

    /** Emoji language<br> */
    export class EmojiLanguage extends VirtualClass<EmojiLanguageArgs> implements EmojiLanguageArgs {
        CONSTRUCTOR_id: -1275374751;
        SUBCLASS_OF_ID: 2760705262;
        classType: "constructor";
        className: "EmojiLanguage";
        langCode: string;
        fromReader(reader: Reader): EmojiLanguage;
    }

    export interface FolderArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Automatically add new channels to this folder */
        autofillNewBroadcasts?: true;
        /** Automatically add joined new public supergroups to this folder */
        autofillPublicGroups?: true;
        /** Automatically add new private chats to this folder */
        autofillNewCorrespondents?: true;
        /** Folder ID */
        id: int;
        /** Folder title */
        title: string;
        /** Folder picture */
        photo?: TypeChatPhoto;
    }

    /** Folder<br> */
    export class Folder extends VirtualClass<FolderArgs> implements FolderArgs {
        CONSTRUCTOR_id: -11252123;
        SUBCLASS_OF_ID: 3943566587;
        classType: "constructor";
        className: "Folder";
        flags: number;
        autofillNewBroadcasts?: true;
        autofillPublicGroups?: true;
        autofillNewCorrespondents?: true;
        id: int;
        title: string;
        photo?: TypeChatPhoto;
        fromReader(reader: Reader): Folder;
    }

    export interface InputFolderPeerArgs {
        /** Peer */
        peer: TypeInputPeer;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * Peer in a folder<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class InputFolderPeer extends VirtualClass<InputFolderPeerArgs> implements InputFolderPeerArgs {
        CONSTRUCTOR_id: -70073706;
        SUBCLASS_OF_ID: 1954700800;
        classType: "constructor";
        className: "InputFolderPeer";
        peer: TypeInputPeer;
        folderId: int;
        fromReader(reader: Reader): InputFolderPeer;
    }

    export interface FolderPeerArgs {
        /** Folder peer info */
        peer: TypePeer;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * Peer in a folder<br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class FolderPeer extends VirtualClass<FolderPeerArgs> implements FolderPeerArgs {
        CONSTRUCTOR_id: -373643672;
        SUBCLASS_OF_ID: 4092733499;
        classType: "constructor";
        className: "FolderPeer";
        peer: TypePeer;
        folderId: int;
        fromReader(reader: Reader): FolderPeer;
    }

    export interface UrlAuthResultRequestArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the bot would like to send messages to the user */
        requestWriteAccess?: true;
        /** Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See <a href="https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot">Linking your domain to the bot</a> for more details. */
        bot: TypeUser;
        /** The domain name of the website on which the user will log in. */
        domain: string;
    }

    /**
     * Details about the authorization request, for more info <a href="https://corefork.telegram.org/api/url-authorization">click here »</a><br>
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class UrlAuthResultRequest extends VirtualClass<UrlAuthResultRequestArgs> implements UrlAuthResultRequestArgs {
        CONSTRUCTOR_id: -1831650802;
        SUBCLASS_OF_ID: 2003159838;
        classType: "constructor";
        className: "UrlAuthResultRequest";
        flags: number;
        requestWriteAccess?: true;
        bot: TypeUser;
        domain: string;
        fromReader(reader: Reader): UrlAuthResultRequest;
    }

    export interface UrlAuthResultAcceptedArgs {
        /** The URL name of the website on which the user has logged in. */
        url: string;
    }

    /**
     * Details about an accepted authorization request, for more info <a href="https://corefork.telegram.org/api/url-authorization">click here »</a><br>
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class UrlAuthResultAccepted extends VirtualClass<UrlAuthResultAcceptedArgs> implements UrlAuthResultAcceptedArgs {
        CONSTRUCTOR_id: -1886646706;
        SUBCLASS_OF_ID: 2003159838;
        classType: "constructor";
        className: "UrlAuthResultAccepted";
        url: string;
        fromReader(reader: Reader): UrlAuthResultAccepted;
    }

    /**
     * Details about an accepted authorization request, for more info <a href="https://corefork.telegram.org/api/url-authorization">click here »</a><br>
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class UrlAuthResultDefault extends VirtualClass<void> {
        CONSTRUCTOR_id: -1445536993;
        SUBCLASS_OF_ID: 2003159838;
        classType: "constructor";
        className: "UrlAuthResultDefault";
        fromReader(reader: Reader): UrlAuthResultDefault;
    }

    /** No location (normal supergroup)<br> */
    export class ChannelLocationEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -1078612597;
        SUBCLASS_OF_ID: 3961916287;
        classType: "constructor";
        className: "ChannelLocationEmpty";
        fromReader(reader: Reader): ChannelLocationEmpty;
    }

    export interface ChannelLocationArgs {
        /** Geographical location of supergrup */
        geoPoint: TypeGeoPoint;
        /** Textual description of the address */
        address: string;
    }

    /** Geographical location of supergroup (geogroups)<br> */
    export class ChannelLocation extends VirtualClass<ChannelLocationArgs> implements ChannelLocationArgs {
        CONSTRUCTOR_id: 547062491;
        SUBCLASS_OF_ID: 3961916287;
        classType: "constructor";
        className: "ChannelLocation";
        geoPoint: TypeGeoPoint;
        address: string;
        fromReader(reader: Reader): ChannelLocation;
    }

    export interface PeerLocatedArgs {
        /** Peer */
        peer: TypePeer;
        /** Validity period of current data */
        expires: int;
        /** Distance from the peer in meters */
        distance: int;
    }

    /** Peer geolocated nearby<br> */
    export class PeerLocated extends VirtualClass<PeerLocatedArgs> implements PeerLocatedArgs {
        CONSTRUCTOR_id: -901375139;
        SUBCLASS_OF_ID: 4208604332;
        classType: "constructor";
        className: "PeerLocated";
        peer: TypePeer;
        expires: int;
        distance: int;
        fromReader(reader: Reader): PeerLocated;
    }

    export interface PeerSelfLocatedArgs {
        /** Expiry of geolocation info for current peer */
        expires: int;
    }

    /** Current peer<br> */
    export class PeerSelfLocated extends VirtualClass<PeerSelfLocatedArgs> implements PeerSelfLocatedArgs {
        CONSTRUCTOR_id: -118740917;
        SUBCLASS_OF_ID: 4208604332;
        classType: "constructor";
        className: "PeerSelfLocated";
        expires: int;
        fromReader(reader: Reader): PeerSelfLocated;
    }

    export interface RestrictionReasonArgs {
        /** Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (<code>android-ios</code>, <code>ios-wp</code>, etc) */
        platform: string;
        /** Restriction reason (<code>porno</code>, <code>terms</code>, etc.) */
        reason: string;
        /** Error message to be shown to the user */
        text: string;
    }

    /** Restriction reason.<br>Contains the reason why access to a certain object must be restricted. Clients are supposed to deny access to the channel if the <code>platform</code> field is equal to <code>all</code> or to the current platform (<code>ios</code>, <code>android</code>, <code>wp</code>, etc.). Platforms can be concatenated (<code>ios-android</code>, <code>ios-wp</code>), unknown platforms are to be ignored. The <code>text</code> is the error message that should be shown to the user.<br> */
    export class RestrictionReason extends VirtualClass<RestrictionReasonArgs> implements RestrictionReasonArgs {
        CONSTRUCTOR_id: -797791052;
        SUBCLASS_OF_ID: 112039341;
        classType: "constructor";
        className: "RestrictionReason";
        platform: string;
        reason: string;
        text: string;
        fromReader(reader: Reader): RestrictionReason;
    }

    export interface InputThemeArgs {
        /** ID */
        id: long;
        /** Access hash */
        accessHash: long;
    }

    /** Theme<br> */
    export class InputTheme extends VirtualClass<InputThemeArgs> implements InputThemeArgs {
        CONSTRUCTOR_id: 1012306921;
        SUBCLASS_OF_ID: 127992048;
        classType: "constructor";
        className: "InputTheme";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputTheme;
    }

    export interface InputThemeSlugArgs {
        /** Unique theme ID */
        slug: string;
    }

    /** Theme by theme ID<br> */
    export class InputThemeSlug extends VirtualClass<InputThemeSlugArgs> implements InputThemeSlugArgs {
        CONSTRUCTOR_id: -175567375;
        SUBCLASS_OF_ID: 127992048;
        classType: "constructor";
        className: "InputThemeSlug";
        slug: string;
        fromReader(reader: Reader): InputThemeSlug;
    }

    export interface ThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the current user is the creator of this theme */
        creator?: true;
        /** Whether this is the default theme */
        default?: true;
        /** Whether this theme is meant to be used as a <a href="https://corefork.telegram.org/blog/chat-themes-interactive-emoji-read-receipts">chat theme</a> */
        id: long;
        /** Theme ID */
        accessHash: long;
        /** Theme access hash */
        slug: string;
        /** Unique theme ID */
        title: string;
        /** Theme name */
        document?: TypeDocument;
        /** Theme */
        settings?: TypeThemeSettings;
        /** Theme settings */
        installsCount: int;
    }

    /** Theme<br> */
    export class Theme extends VirtualClass<ThemeArgs> implements ThemeArgs {
        CONSTRUCTOR_id: 42930452;
        SUBCLASS_OF_ID: 1454688268;
        classType: "constructor";
        className: "Theme";
        flags: number;
        creator?: true;
        default?: true;
        id: long;
        accessHash: long;
        slug: string;
        title: string;
        document?: TypeDocument;
        settings?: TypeThemeSettings;
        installsCount: int;
        fromReader(reader: Reader): Theme;
    }

    /** Classic theme<br> */
    export class BaseThemeClassic extends VirtualClass<void> {
        CONSTRUCTOR_id: -1012849566;
        SUBCLASS_OF_ID: 520352836;
        classType: "constructor";
        className: "BaseThemeClassic";
        fromReader(reader: Reader): BaseThemeClassic;
    }

    /** Day theme<br> */
    export class BaseThemeDay extends VirtualClass<void> {
        CONSTRUCTOR_id: -69724536;
        SUBCLASS_OF_ID: 520352836;
        classType: "constructor";
        className: "BaseThemeDay";
        fromReader(reader: Reader): BaseThemeDay;
    }

    /** Night theme<br> */
    export class BaseThemeNight extends VirtualClass<void> {
        CONSTRUCTOR_id: -1212997976;
        SUBCLASS_OF_ID: 520352836;
        classType: "constructor";
        className: "BaseThemeNight";
        fromReader(reader: Reader): BaseThemeNight;
    }

    /** Tinted theme<br> */
    export class BaseThemeTinted extends VirtualClass<void> {
        CONSTRUCTOR_id: 1834973166;
        SUBCLASS_OF_ID: 520352836;
        classType: "constructor";
        className: "BaseThemeTinted";
        fromReader(reader: Reader): BaseThemeTinted;
    }

    /** Arctic theme<br> */
    export class BaseThemeArctic extends VirtualClass<void> {
        CONSTRUCTOR_id: 1527845466;
        SUBCLASS_OF_ID: 520352836;
        classType: "constructor";
        className: "BaseThemeArctic";
        fromReader(reader: Reader): BaseThemeArctic;
    }

    export interface InputThemeSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, the freeform gradient fill needs to be animated on every sent message */
        baseTheme: TypeBaseTheme;
        /** Default theme on which this theme is based */
        accentColor: int;
        /** Accent color, ARGB format */
        messageTopColor?: int;
        /** Accent color of outgoing messages in ARGB format */
        messageBottomColor?: int;
        /** The fill to be used as a background for outgoing messages, in RGB24 format. <br>If just one or two equal colors are provided, describes a solid fill of a background. <br>If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.<br>If three or four colors are provided, describes a freeform gradient fill of a background. */
        wallpaper?: TypeInputWallPaper;
        /** Wallpaper */
        wallpaperSettings?: TypeWallPaperSettings;
    }

    /** Theme settings<br> */
    export class InputThemeSettings extends VirtualClass<InputThemeSettingsArgs> implements InputThemeSettingsArgs {
        CONSTRUCTOR_id: -1118798639;
        SUBCLASS_OF_ID: 2201536642;
        classType: "constructor";
        className: "InputThemeSettings";
        flags: number;
        baseTheme: TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: TypeInputWallPaper;
        wallpaperSettings?: TypeWallPaperSettings;
        fromReader(reader: Reader): InputThemeSettings;
    }

    export interface ThemeSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, the freeform gradient fill needs to be animated on every sent message. */
        baseTheme: TypeBaseTheme;
        /** Base theme */
        accentColor: int;
        /** Accent color, ARGB format */
        messageTopColor?: int;
        /** Accent color of outgoing messages in ARGB format */
        messageBottomColor?: int;
        /** The fill to be used as a background for outgoing messages, in RGB24 format. <br>If just one or two equal colors are provided, describes a solid fill of a background. <br>If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.<br>If three or four colors are provided, describes a freeform gradient fill of a background. */
        wallpaper?: TypeWallPaper;
    }

    /** Theme settings<br> */
    export class ThemeSettings extends VirtualClass<ThemeSettingsArgs> implements ThemeSettingsArgs {
        CONSTRUCTOR_id: -1676371894;
        SUBCLASS_OF_ID: 2187750712;
        classType: "constructor";
        className: "ThemeSettings";
        flags: number;
        baseTheme: TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: TypeWallPaper;
        fromReader(reader: Reader): ThemeSettings;
    }

    export interface WebPageAttributeThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Theme files */
        documents?: TypeDocument[];
        /** Theme settings */
        settings?: TypeThemeSettings;
    }

    /** Page theme<br> */
    export class WebPageAttributeTheme extends VirtualClass<WebPageAttributeThemeArgs> implements WebPageAttributeThemeArgs {
        CONSTRUCTOR_id: 1421174295;
        SUBCLASS_OF_ID: 2949638599;
        classType: "constructor";
        className: "WebPageAttributeTheme";
        flags: number;
        documents?: TypeDocument[];
        settings?: TypeThemeSettings;
        fromReader(reader: Reader): WebPageAttributeTheme;
    }

    export interface MessageUserVoteArgs {
        /** User ID */
        userId: int;
        /** The option chosen by the user */
        option: bytes;
        /** When did the user cast the vote */
        date: int;
    }

    /** How a user voted in a poll<br> */
    export class MessageUserVote extends VirtualClass<MessageUserVoteArgs> implements MessageUserVoteArgs {
        CONSTRUCTOR_id: -1567730343;
        SUBCLASS_OF_ID: 3375158674;
        classType: "constructor";
        className: "MessageUserVote";
        userId: int;
        option: bytes;
        date: int;
        fromReader(reader: Reader): MessageUserVote;
    }

    export interface MessageUserVoteInputOptionArgs {
        /** The user that voted for the queried <code>option</code> */
        userId: int;
        /** When did the user cast the vote */
        date: int;
    }

    /**
     * How a user voted in a poll (reduced constructor, returned if an <code>option</code> was provided to <a href="https://corefork.telegram.org/method/messages.getPollVotes">messages.getPollVotes</a>)<br>
     * @link https://corefork.telegram.org/method/messages.getPollVotes
     */
    export class MessageUserVoteInputOption extends VirtualClass<MessageUserVoteInputOptionArgs> implements MessageUserVoteInputOptionArgs {
        CONSTRUCTOR_id: 909603888;
        SUBCLASS_OF_ID: 3375158674;
        classType: "constructor";
        className: "MessageUserVoteInputOption";
        userId: int;
        date: int;
        fromReader(reader: Reader): MessageUserVoteInputOption;
    }

    export interface MessageUserVoteMultipleArgs {
        /** User ID */
        userId: int;
        /** Options chosen by the user */
        options: bytes[];
        /** When did the user cast their votes */
        date: int;
    }

    /** How a user voted in a multiple-choice poll<br> */
    export class MessageUserVoteMultiple extends VirtualClass<MessageUserVoteMultipleArgs> implements MessageUserVoteMultipleArgs {
        CONSTRUCTOR_id: 244310238;
        SUBCLASS_OF_ID: 3375158674;
        classType: "constructor";
        className: "MessageUserVoteMultiple";
        userId: int;
        options: bytes[];
        date: int;
        fromReader(reader: Reader): MessageUserVoteMultiple;
    }

    export interface BankCardOpenUrlArgs {
        /** Info URL */
        url: string;
        /** Bank name */
        name: string;
    }

    /** Credit card info URL provided by the bank<br> */
    export class BankCardOpenUrl extends VirtualClass<BankCardOpenUrlArgs> implements BankCardOpenUrlArgs {
        CONSTRUCTOR_id: -177732982;
        SUBCLASS_OF_ID: 4074915342;
        classType: "constructor";
        className: "BankCardOpenUrl";
        url: string;
        name: string;
        fromReader(reader: Reader): BankCardOpenUrl;
    }

    export interface DialogFilterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to include all contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        contacts?: true;
        /** Whether to include all non-contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        nonContacts?: true;
        /** Whether to include all groups in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        groups?: true;
        /** Whether to include all channels in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        broadcasts?: true;
        /** Whether to include all bots in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        bots?: true;
        /** Whether to exclude muted chats from this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        excludeMuted?: true;
        /** Whether to exclude read chats from this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        excludeRead?: true;
        /** Whether to exclude archived chats from this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        excludeArchived?: true;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> ID */
        id: int;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> name */
        title: string;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> emoticon */
        emoticon?: string;
        /** Pinned chats, <a href="https://corefork.telegram.org/api/folders">folders</a> can have unlimited pinned chats */
        pinnedPeers: TypeInputPeer[];
        /** Include the following chats in this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        includePeers: TypeInputPeer[];
        /** Exclude the following chats from this <a href="https://corefork.telegram.org/api/folders">folder</a> */
        excludePeers: TypeInputPeer[];
    }

    /**
     * Dialog filter AKA <a href="https://corefork.telegram.org/api/folders">folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class DialogFilter extends VirtualClass<DialogFilterArgs> implements DialogFilterArgs {
        CONSTRUCTOR_id: 1949890536;
        SUBCLASS_OF_ID: 1764475991;
        classType: "constructor";
        className: "DialogFilter";
        flags: number;
        contacts?: true;
        nonContacts?: true;
        groups?: true;
        broadcasts?: true;
        bots?: true;
        excludeMuted?: true;
        excludeRead?: true;
        excludeArchived?: true;
        id: int;
        title: string;
        emoticon?: string;
        pinnedPeers: TypeInputPeer[];
        includePeers: TypeInputPeer[];
        excludePeers: TypeInputPeer[];
        fromReader(reader: Reader): DialogFilter;
    }

    export interface DialogFilterSuggestedArgs {
        /** <a href="https://corefork.telegram.org/api/folders">Folder info</a> */
        filter: TypeDialogFilter;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> description */
        description: string;
    }

    /**
     * Suggested <a href="https://corefork.telegram.org/api/folders">folders</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class DialogFilterSuggested extends VirtualClass<DialogFilterSuggestedArgs> implements DialogFilterSuggestedArgs {
        CONSTRUCTOR_id: 2004110666;
        SUBCLASS_OF_ID: 837673094;
        classType: "constructor";
        className: "DialogFilterSuggested";
        filter: TypeDialogFilter;
        description: string;
        fromReader(reader: Reader): DialogFilterSuggested;
    }

    export interface StatsDateRangeDaysArgs {
        /** Initial date */
        minDate: int;
        /** Final date */
        maxDate: int;
    }

    /**
     * <a href="https://corefork.telegram.org/api/stats">Channel statistics</a> date range<br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsDateRangeDays extends VirtualClass<StatsDateRangeDaysArgs> implements StatsDateRangeDaysArgs {
        CONSTRUCTOR_id: -1237848657;
        SUBCLASS_OF_ID: 2166579781;
        classType: "constructor";
        className: "StatsDateRangeDays";
        minDate: int;
        maxDate: int;
        fromReader(reader: Reader): StatsDateRangeDays;
    }

    export interface StatsAbsValueAndPrevArgs {
        /** Current value */
        current: double;
        /** Previous value */
        previous: double;
    }

    /** Statistics value couple; initial and final value for period of time currently in consideration<br> */
    export class StatsAbsValueAndPrev extends VirtualClass<StatsAbsValueAndPrevArgs> implements StatsAbsValueAndPrevArgs {
        CONSTRUCTOR_id: -884757282;
        SUBCLASS_OF_ID: 1052662191;
        classType: "constructor";
        className: "StatsAbsValueAndPrev";
        current: double;
        previous: double;
        fromReader(reader: Reader): StatsAbsValueAndPrev;
    }

    export interface StatsPercentValueArgs {
        /** Partial value */
        part: double;
        /** Total value */
        total: double;
    }

    /**
     * <a href="https://corefork.telegram.org/api/stats">Channel statistics percentage</a>.<br>
     * Compute the percentage simply by doing <code>part * total / 100</code><br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsPercentValue extends VirtualClass<StatsPercentValueArgs> implements StatsPercentValueArgs {
        CONSTRUCTOR_id: -875679776;
        SUBCLASS_OF_ID: 2533541150;
        classType: "constructor";
        className: "StatsPercentValue";
        part: double;
        total: double;
        fromReader(reader: Reader): StatsPercentValue;
    }

    export interface StatsGraphAsyncArgs {
        /** Token to use for fetching the async graph */
        token: string;
    }

    /**
     * This <a href="https://corefork.telegram.org/api/stats">channel statistics graph</a> must be generated asynchronously using <a href="https://corefork.telegram.org/method/stats.loadAsyncGraph">stats.loadAsyncGraph</a> to reduce server load<br>
     * @link https://corefork.telegram.org/api/stats
     * @link https://corefork.telegram.org/method/stats.loadAsyncGraph
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGraphAsync extends VirtualClass<StatsGraphAsyncArgs> implements StatsGraphAsyncArgs {
        CONSTRUCTOR_id: 1244130093;
        SUBCLASS_OF_ID: 2609918291;
        classType: "constructor";
        className: "StatsGraphAsync";
        token: string;
        fromReader(reader: Reader): StatsGraphAsync;
    }

    export interface StatsGraphErrorArgs {
        /** The error */
        error: string;
    }

    /**
     * An error occurred while generating the <a href="https://corefork.telegram.org/api/stats">statistics graph</a><br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGraphError extends VirtualClass<StatsGraphErrorArgs> implements StatsGraphErrorArgs {
        CONSTRUCTOR_id: -1092839390;
        SUBCLASS_OF_ID: 2609918291;
        classType: "constructor";
        className: "StatsGraphError";
        error: string;
        fromReader(reader: Reader): StatsGraphError;
    }

    export interface StatsGraphArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Statistics data */
        json: TypeDataJSON;
        /** Zoom token */
        zoomToken?: string;
    }

    /**
     * <a href="https://corefork.telegram.org/api/stats">Channel statistics graph</a><br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGraph extends VirtualClass<StatsGraphArgs> implements StatsGraphArgs {
        CONSTRUCTOR_id: -1901828938;
        SUBCLASS_OF_ID: 2609918291;
        classType: "constructor";
        className: "StatsGraph";
        flags: number;
        json: TypeDataJSON;
        zoomToken?: string;
        fromReader(reader: Reader): StatsGraph;
    }

    export interface MessageInteractionCountersArgs {
        /** Message ID */
        msgId: MessageIDLike;
        /** Views */
        views: int;
        /** Number of times this message was forwarded */
        forwards: int;
    }

    /** Message interaction counters<br> */
    export class MessageInteractionCounters extends VirtualClass<MessageInteractionCountersArgs> implements MessageInteractionCountersArgs {
        CONSTRUCTOR_id: -1387279939;
        SUBCLASS_OF_ID: 641251104;
        classType: "constructor";
        className: "MessageInteractionCounters";
        msgId: MessageIDLike;
        views: int;
        forwards: int;
        fromReader(reader: Reader): MessageInteractionCounters;
    }

    export interface VideoSizeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <code>u</code> for animated profile pictures, and <code>v</code> for trimmed and downscaled video previews */
        type: string;
        /** Video width */
        w: int;
        /** Video height */
        h: int;
        /** File size */
        size: int;
        /** Timestamp that should be shown as static preview to the user (seconds) */
        videoStartTs?: double;
    }

    /**
     * <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">Animated profile picture</a> in MPEG4 format<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class VideoSize extends VirtualClass<VideoSizeArgs> implements VideoSizeArgs {
        CONSTRUCTOR_id: -567037804;
        SUBCLASS_OF_ID: 1660015881;
        classType: "constructor";
        className: "VideoSize";
        flags: number;
        type: string;
        w: int;
        h: int;
        size: int;
        videoStartTs?: double;
        fromReader(reader: Reader): VideoSize;
    }

    export interface StatsGroupTopPosterArgs {
        /** User ID */
        userId: int;
        /** Number of messages for <a href="https://corefork.telegram.org/api/stats">statistics</a> period in consideration */
        messages: int;
        /** Average number of characters per message */
        avgChars: int;
    }

    /**
     * Information about an active user in a supergroup<br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGroupTopPoster extends VirtualClass<StatsGroupTopPosterArgs> implements StatsGroupTopPosterArgs {
        CONSTRUCTOR_id: 418631927;
        SUBCLASS_OF_ID: 2177224227;
        classType: "constructor";
        className: "StatsGroupTopPoster";
        userId: int;
        messages: int;
        avgChars: int;
        fromReader(reader: Reader): StatsGroupTopPoster;
    }

    export interface StatsGroupTopAdminArgs {
        /** User ID */
        userId: int;
        /** Number of deleted messages for <a href="https://corefork.telegram.org/api/stats">statistics</a> period in consideration */
        deleted: int;
        /** Number of kicked users for <a href="https://corefork.telegram.org/api/stats">statistics</a> period in consideration */
        kicked: int;
        /** Number of banned users for <a href="https://corefork.telegram.org/api/stats">statistics</a> period in consideration */
        banned: int;
    }

    /**
     * Information about an active admin in a supergroup<br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGroupTopAdmin extends VirtualClass<StatsGroupTopAdminArgs> implements StatsGroupTopAdminArgs {
        CONSTRUCTOR_id: 1611985938;
        SUBCLASS_OF_ID: 2150997085;
        classType: "constructor";
        className: "StatsGroupTopAdmin";
        userId: int;
        deleted: int;
        kicked: int;
        banned: int;
        fromReader(reader: Reader): StatsGroupTopAdmin;
    }

    export interface StatsGroupTopInviterArgs {
        /** User ID */
        userId: int;
        /** Number of invitations for <a href="https://corefork.telegram.org/api/stats">statistics</a> period in consideration */
        invitations: int;
    }

    /**
     * Information about an active supergroup inviter<br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class StatsGroupTopInviter extends VirtualClass<StatsGroupTopInviterArgs> implements StatsGroupTopInviterArgs {
        CONSTRUCTOR_id: 831924812;
        SUBCLASS_OF_ID: 2231438458;
        classType: "constructor";
        className: "StatsGroupTopInviter";
        userId: int;
        invitations: int;
        fromReader(reader: Reader): StatsGroupTopInviter;
    }

    export interface GlobalPrivacySettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to archive and mute new chats from non-contacts */
        archiveAndMuteNewNoncontactPeers?: Bool;
    }

    /** Global privacy settings<br> */
    export class GlobalPrivacySettings extends VirtualClass<GlobalPrivacySettingsArgs> implements GlobalPrivacySettingsArgs {
        CONSTRUCTOR_id: -1096616924;
        SUBCLASS_OF_ID: 3373160304;
        classType: "constructor";
        className: "GlobalPrivacySettings";
        flags: number;
        archiveAndMuteNewNoncontactPeers?: Bool;
        fromReader(reader: Reader): GlobalPrivacySettings;
    }

    export interface MessageViewsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Viewcount of message */
        views?: int;
        /** Forward count of message */
        forwards?: int;
        /** Reply and <a href="https://corefork.telegram.org/api/threads">thread</a> information of message */
        replies?: TypeMessageReplies;
    }

    /**
     * View, forward counter + info about replies of a specific message<br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class MessageViews extends VirtualClass<MessageViewsArgs> implements MessageViewsArgs {
        CONSTRUCTOR_id: 1163625789;
        SUBCLASS_OF_ID: 1018201017;
        classType: "constructor";
        className: "MessageViews";
        flags: number;
        views?: int;
        forwards?: int;
        replies?: TypeMessageReplies;
        fromReader(reader: Reader): MessageViews;
    }

    export interface MessageReplyHeaderArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** ID of message to which this message is replying */
        replyToMsgId: MessageIDLike;
        /** For replies sent in <a href="https://corefork.telegram.org/api/threads">channel discussion threads</a> of which the current user is not a member, the discussion group ID */
        replyToPeerId?: TypePeer;
        /** ID of the message that started this <a href="https://corefork.telegram.org/api/threads">message thread</a> */
        replyToTopId?: int;
    }

    /**
     * Message replies and <a href="https://corefork.telegram.org/api/threads">thread</a> information<br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class MessageReplyHeader extends VirtualClass<MessageReplyHeaderArgs> implements MessageReplyHeaderArgs {
        CONSTRUCTOR_id: -1495959709;
        SUBCLASS_OF_ID: 1531810151;
        classType: "constructor";
        className: "MessageReplyHeader";
        flags: number;
        replyToMsgId: MessageIDLike;
        replyToPeerId?: TypePeer;
        replyToTopId?: int;
        fromReader(reader: Reader): MessageReplyHeader;
    }

    export interface MessageRepliesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this constructor contains information about the <a href="https://corefork.telegram.org/api/threads">comment section of a channel post, or a simple message thread</a> */
        comments?: true;
        /** Contains the total number of replies in this thread or comment section. */
        replies: int;
        /** <a href="https://corefork.telegram.org/api/updates">PTS</a> of the message that started this thread. */
        repliesPts: int;
        /** For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews. */
        recentRepliers?: TypePeer[];
        /** For channel post comments, contains the ID of the associated <a href="https://corefork.telegram.org/api/discussion">discussion supergroup</a> */
        channelId?: int;
        /** ID of the latest message in this thread or comment section. */
        maxId?: int;
        /** Contains the ID of the latest read message in this thread or comment section. */
        readMaxId?: int;
    }

    /**
     * Info about <a href="https://corefork.telegram.org/api/threads">the comment section of a channel post, or a simple message thread</a><br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/discussion
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://telegram.org/blog/privacy-discussions-web-bots
     */
    export class MessageReplies extends VirtualClass<MessageRepliesArgs> implements MessageRepliesArgs {
        CONSTRUCTOR_id: 1093204652;
        SUBCLASS_OF_ID: 1825397986;
        classType: "constructor";
        className: "MessageReplies";
        flags: number;
        comments?: true;
        replies: int;
        repliesPts: int;
        recentRepliers?: TypePeer[];
        channelId?: int;
        maxId?: int;
        readMaxId?: int;
        fromReader(reader: Reader): MessageReplies;
    }

    export interface PeerBlockedArgs {
        /** Peer ID */
        peerId: TypePeer;
        /** When was the peer blocked */
        date: int;
    }

    /** Information about a blocked peer<br> */
    export class PeerBlocked extends VirtualClass<PeerBlockedArgs> implements PeerBlockedArgs {
        CONSTRUCTOR_id: -386039788;
        SUBCLASS_OF_ID: 1425210520;
        classType: "constructor";
        className: "PeerBlocked";
        peerId: TypePeer;
        date: int;
        fromReader(reader: Reader): PeerBlocked;
    }

    export interface GroupCallDiscardedArgs {
        /** Group call ID */
        id: long;
        /** Group call access hash */
        accessHash: long;
        /** Group call duration */
        duration: int;
    }

    /** An ended group call<br> */
    export class GroupCallDiscarded extends VirtualClass<GroupCallDiscardedArgs> implements GroupCallDiscardedArgs {
        CONSTRUCTOR_id: 2004925620;
        SUBCLASS_OF_ID: 548729632;
        classType: "constructor";
        className: "GroupCallDiscarded";
        id: long;
        accessHash: long;
        duration: int;
        fromReader(reader: Reader): GroupCallDiscarded;
    }

    export interface GroupCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user should be muted upon joining the call */
        joinMuted?: true;
        /** Whether the current user can change the value of the <code>join_muted</code> flag using <a href="https://corefork.telegram.org/method/phone.toggleGroupCallSettings">phone.toggleGroupCallSettings</a> */
        canChangeJoinMuted?: true;
        /** Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants. */
        joinDateAsc?: true;
        /** Whether we subscribed to the scheduled call */
        scheduleStartSubscribed?: true;
        /** Whether you can start streaming video into the call */
        canStartVideo?: true;
        /** Whether the group call is currently being recorded */
        id: long;
        /** Group call ID */
        accessHash: long;
        /** Group call access hash */
        participantsCount: int;
        /** Participant count */
        title?: string;
        /** Group call title */
        streamDcId?: int;
        /** DC ID to be used for livestream chunks */
        recordStartDate?: int;
        /** When was the recording started */
        scheduleDate?: int;
        /** When is the call scheduled to start */
        unmutedVideoCount?: int;
        /** Number of people currently streaming video into the call */
        unmutedVideoLimit: int;
        /** Maximum number of people allowed to stream video into the call */
        version: int;
    }

    /**
     * Info about a group call or livestream<br>
     * @link https://corefork.telegram.org/method/phone.toggleGroupCallSettings
     */
    export class GroupCall extends VirtualClass<GroupCallArgs> implements GroupCallArgs {
        CONSTRUCTOR_id: -711498484;
        SUBCLASS_OF_ID: 548729632;
        classType: "constructor";
        className: "GroupCall";
        flags: number;
        joinMuted?: true;
        canChangeJoinMuted?: true;
        joinDateAsc?: true;
        scheduleStartSubscribed?: true;
        canStartVideo?: true;
        id: long;
        accessHash: long;
        participantsCount: int;
        title?: string;
        streamDcId?: int;
        recordStartDate?: int;
        scheduleDate?: int;
        unmutedVideoCount?: int;
        unmutedVideoLimit: int;
        version: int;
        fromReader(reader: Reader): GroupCall;
    }

    export interface InputGroupCallArgs {
        /** Group call ID */
        id: long;
        /** Group call access hash */
        accessHash: long;
    }

    /** Points to a specific group call<br> */
    export class InputGroupCall extends VirtualClass<InputGroupCallArgs> implements InputGroupCallArgs {
        CONSTRUCTOR_id: -659913713;
        SUBCLASS_OF_ID: 1482758833;
        classType: "constructor";
        className: "InputGroupCall";
        id: long;
        accessHash: long;
        fromReader(reader: Reader): InputGroupCall;
    }

    export interface GroupCallParticipantArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the participant is muted */
        muted?: true;
        /** Whether the participant has left */
        left?: true;
        /** Whether the participant can unmute themselves */
        canSelfUnmute?: true;
        /** Whether the participant has just joined */
        justJoined?: true;
        /** If set, and <a href="https://corefork.telegram.org/constructor/updateGroupCallParticipants">updateGroupCallParticipants</a>.version &lt; locally stored call.version, info about this participant should be ignored. If (...), and <a href="https://corefork.telegram.org/constructor/updateGroupCallParticipants">updateGroupCallParticipants</a>.version &gt; call.version+1, the participant list should be refetched using <a href="https://corefork.telegram.org/method/phone.getGroupParticipants">phone.getGroupParticipants</a>. */
        versioned?: true;
        /** If not set, the <code>volume</code> and <code>muted_by_you</code> fields can be safely used to overwrite locally cached information; otherwise, <code>volume</code> will contain valid information only if <code>volume_by_admin</code> is set both in the cache and in the received constructor. */
        min?: true;
        /** Whether this participant was muted by the current user */
        mutedByYou?: true;
        /** Whether our volume can only changed by an admin */
        volumeByAdmin?: true;
        /** Whether this participant is the current user */
        self?: true;
        /** Whether this participant is currently broadcasting video */
        videoJoined?: true;
        /** Peer information */
        peer: TypePeer;
        /** When did this participant join the group call */
        date: int;
        /** When was this participant last active in the group call */
        activeDate?: int;
        /** Source ID */
        source: int;
        /** Volume, if not set the volume is set to 100%. */
        volume?: int;
        /** Info about this participant */
        about?: string;
        /** Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list. */
        raiseHandRating?: long;
        /** Info about the video stream the participant is currently broadcasting */
        video?: TypeGroupCallParticipantVideo;
        /** Info about the screen sharing stream the participant is currently broadcasting */
        presentation?: TypeGroupCallParticipantVideo;
    }

    /**
     * Info about a group call participant<br>
     * @link https://corefork.telegram.org/constructor/updateGroupCallParticipants
     * @link https://corefork.telegram.org/method/phone.getGroupParticipants
     */
    export class GroupCallParticipant extends VirtualClass<GroupCallParticipantArgs> implements GroupCallParticipantArgs {
        CONSTRUCTOR_id: -341428482;
        SUBCLASS_OF_ID: 3222974284;
        classType: "constructor";
        className: "GroupCallParticipant";
        flags: number;
        muted?: true;
        left?: true;
        canSelfUnmute?: true;
        justJoined?: true;
        versioned?: true;
        min?: true;
        mutedByYou?: true;
        volumeByAdmin?: true;
        self?: true;
        videoJoined?: true;
        peer: TypePeer;
        date: int;
        activeDate?: int;
        source: int;
        volume?: int;
        about?: string;
        raiseHandRating?: long;
        video?: TypeGroupCallParticipantVideo;
        presentation?: TypeGroupCallParticipantVideo;
        fromReader(reader: Reader): GroupCallParticipant;
    }

    /** The inline query was sent in a private chat with the bot itself<br> */
    export class InlineQueryPeerTypeSameBotPM extends VirtualClass<void> {
        CONSTRUCTOR_id: 813821341;
        SUBCLASS_OF_ID: 2947611167;
        classType: "constructor";
        className: "InlineQueryPeerTypeSameBotPM";
        fromReader(reader: Reader): InlineQueryPeerTypeSameBotPM;
    }

    /** The inline query was sent in a private chat<br> */
    export class InlineQueryPeerTypePM extends VirtualClass<void> {
        CONSTRUCTOR_id: -2093215828;
        SUBCLASS_OF_ID: 2947611167;
        classType: "constructor";
        className: "InlineQueryPeerTypePM";
        fromReader(reader: Reader): InlineQueryPeerTypePM;
    }

    /**
     * The inline query was sent in a <a href="https://corefork.telegram.org/api/channel">chat</a><br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class InlineQueryPeerTypeChat extends VirtualClass<void> {
        CONSTRUCTOR_id: -681130742;
        SUBCLASS_OF_ID: 2947611167;
        classType: "constructor";
        className: "InlineQueryPeerTypeChat";
        fromReader(reader: Reader): InlineQueryPeerTypeChat;
    }

    /**
     * The inline query was sent in a <a href="https://corefork.telegram.org/api/channel">supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class InlineQueryPeerTypeMegagroup extends VirtualClass<void> {
        CONSTRUCTOR_id: 1589952067;
        SUBCLASS_OF_ID: 2947611167;
        classType: "constructor";
        className: "InlineQueryPeerTypeMegagroup";
        fromReader(reader: Reader): InlineQueryPeerTypeMegagroup;
    }

    /**
     * The inline query was sent in a <a href="https://corefork.telegram.org/api/channel">channel</a><br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class InlineQueryPeerTypeBroadcast extends VirtualClass<void> {
        CONSTRUCTOR_id: 1664413338;
        SUBCLASS_OF_ID: 2947611167;
        classType: "constructor";
        className: "InlineQueryPeerTypeBroadcast";
        fromReader(reader: Reader): InlineQueryPeerTypeBroadcast;
    }

    export interface ChatInviteImporterArgs {
        /** The user */
        userId: int;
        /** When did the user join */
        date: int;
    }

    /** When and which user joined the chat using a chat invite<br> */
    export class ChatInviteImporter extends VirtualClass<ChatInviteImporterArgs> implements ChatInviteImporterArgs {
        CONSTRUCTOR_id: 507405952;
        SUBCLASS_OF_ID: 1393710126;
        classType: "constructor";
        className: "ChatInviteImporter";
        userId: int;
        date: int;
        fromReader(reader: Reader): ChatInviteImporter;
    }

    export interface ChatAdminWithInvitesArgs {
        /** The admin */
        adminId: int;
        /** Number of invites generated by the admin */
        invitesCount: int;
        /** Number of revoked invites */
        revokedInvitesCount: int;
    }

    /** Info about chat invites generated by admins.<br> */
    export class ChatAdminWithInvites extends VirtualClass<ChatAdminWithInvitesArgs> implements ChatAdminWithInvitesArgs {
        CONSTRUCTOR_id: -539872497;
        SUBCLASS_OF_ID: 1348727704;
        classType: "constructor";
        className: "ChatAdminWithInvites";
        adminId: int;
        invitesCount: int;
        revokedInvitesCount: int;
        fromReader(reader: Reader): ChatAdminWithInvites;
    }

    export interface GroupCallParticipantVideoSourceGroupArgs {
        /** SDP semantics */
        semantics: string;
        /** Source IDs */
        sources: int[];
    }

    /** Describes a group of video synchronization source identifiers<br> */
    export class GroupCallParticipantVideoSourceGroup extends VirtualClass<GroupCallParticipantVideoSourceGroupArgs> implements GroupCallParticipantVideoSourceGroupArgs {
        CONSTRUCTOR_id: -592373577;
        SUBCLASS_OF_ID: 806746236;
        classType: "constructor";
        className: "GroupCallParticipantVideoSourceGroup";
        semantics: string;
        sources: int[];
        fromReader(reader: Reader): GroupCallParticipantVideoSourceGroup;
    }

    export interface GroupCallParticipantVideoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the stream is currently paused */
        paused?: true;
        /** Endpoint */
        endpoint: string;
        /** Source groups */
        sourceGroups: TypeGroupCallParticipantVideoSourceGroup[];
        /** Audio source ID */
        audioSource?: int;
    }

    /** Info about a video stream<br> */
    export class GroupCallParticipantVideo extends VirtualClass<GroupCallParticipantVideoArgs> implements GroupCallParticipantVideoArgs {
        CONSTRUCTOR_id: 1735736008;
        SUBCLASS_OF_ID: 4014389467;
        classType: "constructor";
        className: "GroupCallParticipantVideo";
        flags: number;
        paused?: true;
        endpoint: string;
        sourceGroups: TypeGroupCallParticipantVideoSourceGroup[];
        audioSource?: int;
        fromReader(reader: Reader): GroupCallParticipantVideo;
    }

    /** The commands will be valid in all dialogs<br> */
    export class BotCommandScopeDefault extends VirtualClass<void> {
        CONSTRUCTOR_id: 795652779;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopeDefault";
        fromReader(reader: Reader): BotCommandScopeDefault;
    }

    /** The specified bot commands will only be valid in all private chats with users.<br> */
    export class BotCommandScopeUsers extends VirtualClass<void> {
        CONSTRUCTOR_id: 1011811544;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopeUsers";
        fromReader(reader: Reader): BotCommandScopeUsers;
    }

    /**
     * The specified bot commands will be valid in all <a href="https://corefork.telegram.org/api/channel">groups and supergroups</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class BotCommandScopeChats extends VirtualClass<void> {
        CONSTRUCTOR_id: 1877059713;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopeChats";
        fromReader(reader: Reader): BotCommandScopeChats;
    }

    /**
     * The specified bot commands will be valid only for chat administrators, in all <a href="https://corefork.telegram.org/api/channel">groups and supergroups</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class BotCommandScopeChatAdmins extends VirtualClass<void> {
        CONSTRUCTOR_id: -1180016534;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopeChatAdmins";
        fromReader(reader: Reader): BotCommandScopeChatAdmins;
    }

    export interface BotCommandScopePeerArgs {
        /** The dialog */
        peer: TypeInputPeer;
    }

    /** The specified bot commands will be valid only in a specific dialog.<br> */
    export class BotCommandScopePeer extends VirtualClass<BotCommandScopePeerArgs> implements BotCommandScopePeerArgs {
        CONSTRUCTOR_id: -610432643;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopePeer";
        peer: TypeInputPeer;
        fromReader(reader: Reader): BotCommandScopePeer;
    }

    export interface BotCommandScopePeerAdminsArgs {
        /** The chat */
        peer: TypeInputPeer;
    }

    /**
     * The specified bot commands will be valid for all admins of the specified <a href="https://corefork.telegram.org/api/channel">group or supergroup</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class BotCommandScopePeerAdmins extends VirtualClass<BotCommandScopePeerAdminsArgs> implements BotCommandScopePeerAdminsArgs {
        CONSTRUCTOR_id: 1071145937;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopePeerAdmins";
        peer: TypeInputPeer;
        fromReader(reader: Reader): BotCommandScopePeerAdmins;
    }

    export interface BotCommandScopePeerUserArgs {
        /** The chat */
        peer: TypeInputPeer;
        /** The user */
        userId: TypeInputUser;
    }

    /**
     * The specified bot commands will be valid only for a specific user in the specified <a href="https://corefork.telegram.org/api/channel">group or supergroup</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     */
    export class BotCommandScopePeerUser extends VirtualClass<BotCommandScopePeerUserArgs> implements BotCommandScopePeerUserArgs {
        CONSTRUCTOR_id: 169026035;
        SUBCLASS_OF_ID: 1269783824;
        classType: "constructor";
        className: "BotCommandScopePeerUser";
        peer: TypeInputPeer;
        userId: TypeInputUser;
        fromReader(reader: Reader): BotCommandScopePeerUser;
    }

    export interface InvokeAfterMsgArgs {
        /** Message identifier on which a current query depends */
        msgId: long;
        /** The query itself */
        query: X;
    }

    /** Invokes a query after successfull completion of one of the previous queries.<br> */
    export class InvokeAfterMsg extends Request<Partial<InvokeAfterMsgArgs>,X> implements InvokeAfterMsgArgs {
        CONSTRUCTOR_id: -878758099;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeAfterMsg";
        msgId: long;
        query: X;
        fromReader(reader: Reader): InvokeAfterMsg;
    }

    export interface InvokeAfterMsgsArgs {
        /** List of messages on which a current query depends */
        msgIds: long[];
        /** The query itself */
        query: X;
    }

    /** Invokes a query after a successfull completion of previous queries<br> */
    export class InvokeAfterMsgs extends Request<Partial<InvokeAfterMsgsArgs>,X> implements InvokeAfterMsgsArgs {
        CONSTRUCTOR_id: 1036301552;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeAfterMsgs";
        msgIds: long[];
        query: X;
        fromReader(reader: Reader): InvokeAfterMsgs;
    }

    export interface InitConnectionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Application identifier (see. <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiId: int;
        /** Device model */
        deviceModel: string;
        /** Operation system version */
        systemVersion: string;
        /** Application version */
        appVersion: string;
        /** Code for the language used on the device's OS, ISO 639-1 standard */
        systemLangCode: string;
        /** Language pack to use */
        langPack: string;
        /** Code for the language used on the client, ISO 639-1 standard */
        langCode: string;
        /** Info about an MTProto proxy */
        proxy?: TypeInputClientProxy;
        /** Additional initConnection parameters. <br>For now, only the <code>tz_offset</code> field is supported, for specifying timezone offset in seconds. */
        params?: TypeJSONValue;
        /** The query itself */
        query: X;
    }

    /**
     * Initialize connection<br>
     * @throws {{code:400,type:"CONNECTION_LAYER_INVALID"}} Layer invalid.
     */
    export class InitConnection extends Request<Partial<InitConnectionArgs>,X> implements InitConnectionArgs {
        CONSTRUCTOR_id: -1043505495;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InitConnection";
        flags: number;
        apiId: int;
        deviceModel: string;
        systemVersion: string;
        appVersion: string;
        systemLangCode: string;
        langPack: string;
        langCode: string;
        proxy?: TypeInputClientProxy;
        params?: TypeJSONValue;
        query: X;
        fromReader(reader: Reader): InitConnection;
    }

    export interface InvokeWithLayerArgs {
        /** The layer to use */
        layer: int;
        /** The query */
        query: X;
    }

    /**
     * Invoke the specified query using the specified API <a href="https://corefork.telegram.org/api/invoking#layers">layer</a><br>
     * @link https://corefork.telegram.org/api/invoking
     * @throws {{code:400,type:"AUTH_BYTES_INVALID"}} The provided authorization is invalid.
     * @throws {{code:400,type:"CDN_METHOD_INVALID"}} You can't call this method in a CDN DC.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"CONNECTION_API_ID_INVALID"}} The provided API id is invalid.
     * @throws {{code:400,type:"CONNECTION_NOT_INITED"}} Connection not initialized.
     * @throws {{code:400,type:"INPUT_LAYER_INVALID"}} The provided layer is invalid.
     * @throws {{code:400,type:"INVITE_HASH_EXPIRED"}} The invite link has expired.
     */
    export class InvokeWithLayer extends Request<Partial<InvokeWithLayerArgs>,X> implements InvokeWithLayerArgs {
        CONSTRUCTOR_id: -627372787;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeWithLayer";
        layer: int;
        query: X;
        fromReader(reader: Reader): InvokeWithLayer;
    }

    export interface InvokeWithoutUpdatesArgs {
        /** The query */
        query: X;
    }

    /**
     * Invoke a request without subscribing the used connection for <a href="https://corefork.telegram.org/api/updates">updates</a> (this is enabled by default for <a href="https://corefork.telegram.org/api/files">file queries</a>).<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/api/files
     */
    export class InvokeWithoutUpdates extends Request<Partial<InvokeWithoutUpdatesArgs>,X> implements InvokeWithoutUpdatesArgs {
        CONSTRUCTOR_id: -1080796745;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeWithoutUpdates";
        query: X;
        fromReader(reader: Reader): InvokeWithoutUpdates;
    }

    export interface InvokeWithMessagesRangeArgs {
        /** Message range */
        range: TypeMessageRange;
        /** Query */
        query: X;
    }

    /** Invoke with the given message range<br> */
    export class InvokeWithMessagesRange extends Request<Partial<InvokeWithMessagesRangeArgs>,X> implements InvokeWithMessagesRangeArgs {
        CONSTRUCTOR_id: 911373810;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeWithMessagesRange";
        range: TypeMessageRange;
        query: X;
        fromReader(reader: Reader): InvokeWithMessagesRange;
    }

    export interface InvokeWithTakeoutArgs {
        /** Takeout session ID */
        takeoutId: long;
        /** Query */
        query: X;
    }

    /** Invoke a method within a takeout session<br> */
    export class InvokeWithTakeout extends Request<Partial<InvokeWithTakeoutArgs>,X> implements InvokeWithTakeoutArgs {
        CONSTRUCTOR_id: -1398145746;
        SUBCLASS_OF_ID: 3081909835;
        classType: "request";
        className: "InvokeWithTakeout";
        takeoutId: long;
        query: X;
        fromReader(reader: Reader): InvokeWithTakeout;
    }

    type TypeInputPeer = InputPeerEmpty | InputPeerSelf | InputPeerChat | InputPeerUser | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage;
    type TypeInputUser = InputUserEmpty | InputUserSelf | InputUser | InputUserFromMessage;
    type TypeInputContact = InputPhoneContact;
    type TypeInputFile = InputFile | InputFileBig;
    type TypeInputMedia = InputMediaEmpty | InputMediaUploadedPhoto | InputMediaPhoto | InputMediaGeoPoint | InputMediaContact | InputMediaUploadedDocument | InputMediaDocument | InputMediaVenue | InputMediaPhotoExternal | InputMediaDocumentExternal | InputMediaGame | InputMediaInvoice | InputMediaGeoLive | InputMediaPoll | InputMediaDice;
    type TypeInputChatPhoto = InputChatPhotoEmpty | InputChatUploadedPhoto | InputChatPhoto;
    type TypeInputGeoPoint = InputGeoPointEmpty | InputGeoPoint;
    type TypeInputPhoto = InputPhotoEmpty | InputPhoto;
    type TypeInputFileLocation = InputFileLocation | InputEncryptedFileLocation | InputDocumentFileLocation | InputSecureFileLocation | InputTakeoutFileLocation | InputPhotoFileLocation | InputPhotoLegacyFileLocation | InputPeerPhotoFileLocation | InputStickerSetThumb | InputGroupCallStream;
    type TypePeer = PeerUser | PeerChat | PeerChannel;
    type TypeUser = UserEmpty | User;
    type TypeUserProfilePhoto = UserProfilePhotoEmpty | UserProfilePhoto;
    type TypeUserStatus = UserStatusEmpty | UserStatusOnline | UserStatusOffline | UserStatusRecently | UserStatusLastWeek | UserStatusLastMonth;
    type TypeChat = ChatEmpty | Chat | ChatForbidden | Channel | ChannelForbidden;
    type TypeChatFull = ChatFull | ChannelFull;
    type TypeChatParticipant = ChatParticipant | ChatParticipantCreator | ChatParticipantAdmin;
    type TypeChatParticipants = ChatParticipantsForbidden | ChatParticipants;
    type TypeChatPhoto = ChatPhotoEmpty | ChatPhoto;
    type TypeMessage = MessageEmpty | Message | MessageService;
    type TypeMessageMedia = MessageMediaEmpty | MessageMediaPhoto | MessageMediaGeo | MessageMediaContact | MessageMediaUnsupported | MessageMediaDocument | MessageMediaWebPage | MessageMediaVenue | MessageMediaGame | MessageMediaInvoice | MessageMediaGeoLive | MessageMediaPoll | MessageMediaDice;
    type TypeMessageAction = MessageActionEmpty | MessageActionChatCreate | MessageActionChatEditTitle | MessageActionChatEditPhoto | MessageActionChatDeletePhoto | MessageActionChatAddUser | MessageActionChatDeleteUser | MessageActionChatJoinedByLink | MessageActionChannelCreate | MessageActionChatMigrateTo | MessageActionChannelMigrateFrom | MessageActionPinMessage | MessageActionHistoryClear | MessageActionGameScore | MessageActionPaymentSentMe | MessageActionPaymentSent | MessageActionPhoneCall | MessageActionScreenshotTaken | MessageActionCustomAction | MessageActionBotAllowed | MessageActionSecureValuesSentMe | MessageActionSecureValuesSent | MessageActionContactSignUp | MessageActionGeoProximityReached | MessageActionGroupCall | MessageActionInviteToGroupCall | MessageActionSetMessagesTTL | MessageActionGroupCallScheduled;
    type TypeDialog = Dialog | DialogFolder;
    type TypePhoto = PhotoEmpty | Photo;
    type TypePhotoSize = PhotoSizeEmpty | PhotoSize | PhotoCachedSize | PhotoStrippedSize | PhotoSizeProgressive | PhotoPathSize;
    type TypeGeoPoint = GeoPointEmpty | GeoPoint;
    type TypeInputNotifyPeer = InputNotifyPeer | InputNotifyUsers | InputNotifyChats | InputNotifyBroadcasts;
    type TypeInputPeerNotifySettings = InputPeerNotifySettings;
    type TypePeerNotifySettings = PeerNotifySettings;
    type TypePeerSettings = PeerSettings;
    type TypeWallPaper = WallPaper | WallPaperNoFile;
    type TypeReportReason = InputReportReasonSpam | InputReportReasonViolence | InputReportReasonPornography | InputReportReasonChildAbuse | InputReportReasonOther | InputReportReasonCopyright | InputReportReasonGeoIrrelevant | InputReportReasonFake;
    type TypeUserFull = UserFull;
    type TypeContact = Contact;
    type TypeImportedContact = ImportedContact;
    type TypeContactStatus = ContactStatus;
    type TypeMessagesFilter = InputMessagesFilterEmpty | InputMessagesFilterPhotos | InputMessagesFilterVideo | InputMessagesFilterPhotoVideo | InputMessagesFilterDocument | InputMessagesFilterUrl | InputMessagesFilterGif | InputMessagesFilterVoice | InputMessagesFilterMusic | InputMessagesFilterChatPhotos | InputMessagesFilterPhoneCalls | InputMessagesFilterRoundVoice | InputMessagesFilterRoundVideo | InputMessagesFilterMyMentions | InputMessagesFilterGeo | InputMessagesFilterContacts | InputMessagesFilterPinned;
    type TypeUpdate = UpdateNewMessage | UpdateMessageID | UpdateDeleteMessages | UpdateUserTyping | UpdateChatUserTyping | UpdateChatParticipants | UpdateUserStatus | UpdateUserName | UpdateUserPhoto | UpdateNewEncryptedMessage | UpdateEncryptedChatTyping | UpdateEncryption | UpdateEncryptedMessagesRead | UpdateChatParticipantAdd | UpdateChatParticipantDelete | UpdateDcOptions | UpdateNotifySettings | UpdateServiceNotification | UpdatePrivacy | UpdateUserPhone | UpdateReadHistoryInbox | UpdateReadHistoryOutbox | UpdateWebPage | UpdateReadMessagesContents | UpdateChannelTooLong | UpdateChannel | UpdateNewChannelMessage | UpdateReadChannelInbox | UpdateDeleteChannelMessages | UpdateChannelMessageViews | UpdateChatParticipantAdmin | UpdateNewStickerSet | UpdateStickerSetsOrder | UpdateStickerSets | UpdateSavedGifs | UpdateBotInlineQuery | UpdateBotInlineSend | UpdateEditChannelMessage | UpdateBotCallbackQuery | UpdateEditMessage | UpdateInlineBotCallbackQuery | UpdateReadChannelOutbox | UpdateDraftMessage | UpdateReadFeaturedStickers | UpdateRecentStickers | UpdateConfig | UpdatePtsChanged | UpdateChannelWebPage | UpdateDialogPinned | UpdatePinnedDialogs | UpdateBotWebhookJSON | UpdateBotWebhookJSONQuery | UpdateBotShippingQuery | UpdateBotPrecheckoutQuery | UpdatePhoneCall | UpdateLangPackTooLong | UpdateLangPack | UpdateFavedStickers | UpdateChannelReadMessagesContents | UpdateContactsReset | UpdateChannelAvailableMessages | UpdateDialogUnreadMark | UpdateMessagePoll | UpdateChatDefaultBannedRights | UpdateFolderPeers | UpdatePeerSettings | UpdatePeerLocated | UpdateNewScheduledMessage | UpdateDeleteScheduledMessages | UpdateTheme | UpdateGeoLiveViewed | UpdateLoginToken | UpdateMessagePollVote | UpdateDialogFilter | UpdateDialogFilterOrder | UpdateDialogFilters | UpdatePhoneCallSignalingData | UpdateChannelMessageForwards | UpdateReadChannelDiscussionInbox | UpdateReadChannelDiscussionOutbox | UpdatePeerBlocked | UpdateChannelUserTyping | UpdatePinnedMessages | UpdatePinnedChannelMessages | UpdateChat | UpdateGroupCallParticipants | UpdateGroupCall | UpdatePeerHistoryTTL | UpdateChatParticipant | UpdateChannelParticipant | UpdateBotStopped | UpdateGroupCallConnection | UpdateBotCommands;
    type TypeUpdates = UpdatesTooLong | UpdateShortMessage | UpdateShortChatMessage | UpdateShort | UpdatesCombined | Updates | UpdateShortSentMessage;
    type TypeDcOption = DcOption;
    type TypeConfig = Config;
    type TypeNearestDc = NearestDc;
    type TypeEncryptedChat = EncryptedChatEmpty | EncryptedChatWaiting | EncryptedChatRequested | EncryptedChat | EncryptedChatDiscarded;
    type TypeInputEncryptedChat = InputEncryptedChat;
    type TypeEncryptedFile = EncryptedFileEmpty | EncryptedFile;
    type TypeInputEncryptedFile = InputEncryptedFileEmpty | InputEncryptedFileUploaded | InputEncryptedFile | InputEncryptedFileBigUploaded;
    type TypeEncryptedMessage = EncryptedMessage | EncryptedMessageService;
    type TypeInputDocument = InputDocumentEmpty | InputDocument;
    type TypeDocument = DocumentEmpty | Document;
    type TypeNotifyPeer = NotifyPeer | NotifyUsers | NotifyChats | NotifyBroadcasts;
    type TypeSendMessageAction = SendMessageTypingAction | SendMessageCancelAction | SendMessageRecordVideoAction | SendMessageUploadVideoAction | SendMessageRecordAudioAction | SendMessageUploadAudioAction | SendMessageUploadPhotoAction | SendMessageUploadDocumentAction | SendMessageGeoLocationAction | SendMessageChooseContactAction | SendMessageGamePlayAction | SendMessageRecordRoundAction | SendMessageUploadRoundAction | SpeakingInGroupCallAction | SendMessageHistoryImportAction;
    type TypeInputPrivacyKey = InputPrivacyKeyStatusTimestamp | InputPrivacyKeyChatInvite | InputPrivacyKeyPhoneCall | InputPrivacyKeyPhoneP2P | InputPrivacyKeyForwards | InputPrivacyKeyProfilePhoto | InputPrivacyKeyPhoneNumber | InputPrivacyKeyAddedByPhone;
    type TypePrivacyKey = PrivacyKeyStatusTimestamp | PrivacyKeyChatInvite | PrivacyKeyPhoneCall | PrivacyKeyPhoneP2P | PrivacyKeyForwards | PrivacyKeyProfilePhoto | PrivacyKeyPhoneNumber | PrivacyKeyAddedByPhone;
    type TypeInputPrivacyRule = InputPrivacyValueAllowContacts | InputPrivacyValueAllowAll | InputPrivacyValueAllowUsers | InputPrivacyValueDisallowContacts | InputPrivacyValueDisallowAll | InputPrivacyValueDisallowUsers | InputPrivacyValueAllowChatParticipants | InputPrivacyValueDisallowChatParticipants;
    type TypePrivacyRule = PrivacyValueAllowContacts | PrivacyValueAllowAll | PrivacyValueAllowUsers | PrivacyValueDisallowContacts | PrivacyValueDisallowAll | PrivacyValueDisallowUsers | PrivacyValueAllowChatParticipants | PrivacyValueDisallowChatParticipants;
    type TypeAccountDaysTTL = AccountDaysTTL;
    type TypeDocumentAttribute = DocumentAttributeImageSize | DocumentAttributeAnimated | DocumentAttributeSticker | DocumentAttributeVideo | DocumentAttributeAudio | DocumentAttributeFilename | DocumentAttributeHasStickers;
    type TypeStickerPack = StickerPack;
    type TypeWebPage = WebPageEmpty | WebPagePending | WebPage | WebPageNotModified;
    type TypeAuthorization = Authorization;
    type TypeReceivedNotifyMessage = ReceivedNotifyMessage;
    type TypeExportedChatInvite = ChatInviteExported;
    type TypeChatInvite = ChatInviteAlready | ChatInvite | ChatInvitePeek;
    type TypeInputStickerSet = InputStickerSetEmpty | InputStickerSetID | InputStickerSetShortName | InputStickerSetAnimatedEmoji | InputStickerSetDice;
    type TypeStickerSet = StickerSet;
    type TypeBotCommand = BotCommand;
    type TypeBotInfo = BotInfo;
    type TypeKeyboardButton = KeyboardButton | KeyboardButtonUrl | KeyboardButtonCallback | KeyboardButtonRequestPhone | KeyboardButtonRequestGeoLocation | KeyboardButtonSwitchInline | KeyboardButtonGame | KeyboardButtonBuy | KeyboardButtonUrlAuth | InputKeyboardButtonUrlAuth | KeyboardButtonRequestPoll;
    type TypeKeyboardButtonRow = KeyboardButtonRow;
    type TypeReplyMarkup = ReplyKeyboardHide | ReplyKeyboardForceReply | ReplyKeyboardMarkup | ReplyInlineMarkup;
    type TypeMessageEntity = MessageEntityUnknown | MessageEntityMention | MessageEntityHashtag | MessageEntityBotCommand | MessageEntityUrl | MessageEntityEmail | MessageEntityBold | MessageEntityItalic | MessageEntityCode | MessageEntityPre | MessageEntityTextUrl | MessageEntityMentionName | InputMessageEntityMentionName | MessageEntityPhone | MessageEntityCashtag | MessageEntityUnderline | MessageEntityStrike | MessageEntityBlockquote | MessageEntityBankCard;
    type TypeInputChannel = InputChannelEmpty | InputChannel | InputChannelFromMessage;
    type TypeMessageRange = MessageRange;
    type TypeChannelMessagesFilter = ChannelMessagesFilterEmpty | ChannelMessagesFilter;
    type TypeChannelParticipant = ChannelParticipant | ChannelParticipantSelf | ChannelParticipantCreator | ChannelParticipantAdmin | ChannelParticipantBanned | ChannelParticipantLeft;
    type TypeChannelParticipantsFilter = ChannelParticipantsRecent | ChannelParticipantsAdmins | ChannelParticipantsKicked | ChannelParticipantsBots | ChannelParticipantsBanned | ChannelParticipantsSearch | ChannelParticipantsContacts | ChannelParticipantsMentions;
    type TypeInputBotInlineMessage = InputBotInlineMessageMediaAuto | InputBotInlineMessageText | InputBotInlineMessageMediaGeo | InputBotInlineMessageMediaVenue | InputBotInlineMessageMediaContact | InputBotInlineMessageGame | InputBotInlineMessageMediaInvoice;
    type TypeInputBotInlineResult = InputBotInlineResult | InputBotInlineResultPhoto | InputBotInlineResultDocument | InputBotInlineResultGame;
    type TypeBotInlineMessage = BotInlineMessageMediaAuto | BotInlineMessageText | BotInlineMessageMediaGeo | BotInlineMessageMediaVenue | BotInlineMessageMediaContact | BotInlineMessageMediaInvoice;
    type TypeBotInlineResult = BotInlineResult | BotInlineMediaResult;
    type TypeExportedMessageLink = ExportedMessageLink;
    type TypeMessageFwdHeader = MessageFwdHeader;
    type TypeInputBotInlineMessageID = InputBotInlineMessageID;
    type TypeInlineBotSwitchPM = InlineBotSwitchPM;
    type TypeTopPeer = TopPeer;
    type TypeTopPeerCategory = TopPeerCategoryBotsPM | TopPeerCategoryBotsInline | TopPeerCategoryCorrespondents | TopPeerCategoryGroups | TopPeerCategoryChannels | TopPeerCategoryPhoneCalls | TopPeerCategoryForwardUsers | TopPeerCategoryForwardChats;
    type TypeTopPeerCategoryPeers = TopPeerCategoryPeers;
    type TypeDraftMessage = DraftMessageEmpty | DraftMessage;
    type TypeStickerSetCovered = StickerSetCovered | StickerSetMultiCovered;
    type TypeMaskCoords = MaskCoords;
    type TypeInputStickeredMedia = InputStickeredMediaPhoto | InputStickeredMediaDocument;
    type TypeGame = Game;
    type TypeInputGame = InputGameID | InputGameShortName;
    type TypeHighScore = HighScore;
    type TypeRichText = TextEmpty | TextPlain | TextBold | TextItalic | TextUnderline | TextStrike | TextFixed | TextUrl | TextEmail | TextConcat | TextSubscript | TextSuperscript | TextMarked | TextPhone | TextImage | TextAnchor;
    type TypePageBlock = PageBlockUnsupported | PageBlockTitle | PageBlockSubtitle | PageBlockAuthorDate | PageBlockHeader | PageBlockSubheader | PageBlockParagraph | PageBlockPreformatted | PageBlockFooter | PageBlockDivider | PageBlockAnchor | PageBlockList | PageBlockBlockquote | PageBlockPullquote | PageBlockPhoto | PageBlockVideo | PageBlockCover | PageBlockEmbed | PageBlockEmbedPost | PageBlockCollage | PageBlockSlideshow | PageBlockChannel | PageBlockAudio | PageBlockKicker | PageBlockTable | PageBlockOrderedList | PageBlockDetails | PageBlockRelatedArticles | PageBlockMap;
    type TypePhoneCallDiscardReason = PhoneCallDiscardReasonMissed | PhoneCallDiscardReasonDisconnect | PhoneCallDiscardReasonHangup | PhoneCallDiscardReasonBusy;
    type TypeDataJSON = DataJSON;
    type TypeLabeledPrice = LabeledPrice;
    type TypeInvoice = Invoice;
    type TypePaymentCharge = PaymentCharge;
    type TypePostAddress = PostAddress;
    type TypePaymentRequestedInfo = PaymentRequestedInfo;
    type TypePaymentSavedCredentials = PaymentSavedCredentialsCard;
    type TypeWebDocument = WebDocument | WebDocumentNoProxy;
    type TypeInputWebDocument = InputWebDocument;
    type TypeInputWebFileLocation = InputWebFileLocation | InputWebFileGeoPointLocation;
    type TypeInputPaymentCredentials = InputPaymentCredentialsSaved | InputPaymentCredentials | InputPaymentCredentialsApplePay | InputPaymentCredentialsGooglePay;
    type TypeShippingOption = ShippingOption;
    type TypeInputStickerSetItem = InputStickerSetItem;
    type TypeInputPhoneCall = InputPhoneCall;
    type TypePhoneCall = PhoneCallEmpty | PhoneCallWaiting | PhoneCallRequested | PhoneCallAccepted | PhoneCall | PhoneCallDiscarded;
    type TypePhoneConnection = PhoneConnection | PhoneConnectionWebrtc;
    type TypePhoneCallProtocol = PhoneCallProtocol;
    type TypeCdnPublicKey = CdnPublicKey;
    type TypeCdnConfig = CdnConfig;
    type TypeLangPackString = LangPackString | LangPackStringPluralized | LangPackStringDeleted;
    type TypeLangPackDifference = LangPackDifference;
    type TypeLangPackLanguage = LangPackLanguage;
    type TypeChannelAdminLogEventAction = ChannelAdminLogEventActionChangeTitle | ChannelAdminLogEventActionChangeAbout | ChannelAdminLogEventActionChangeUsername | ChannelAdminLogEventActionChangePhoto | ChannelAdminLogEventActionToggleInvites | ChannelAdminLogEventActionToggleSignatures | ChannelAdminLogEventActionUpdatePinned | ChannelAdminLogEventActionEditMessage | ChannelAdminLogEventActionDeleteMessage | ChannelAdminLogEventActionParticipantJoin | ChannelAdminLogEventActionParticipantLeave | ChannelAdminLogEventActionParticipantInvite | ChannelAdminLogEventActionParticipantToggleBan | ChannelAdminLogEventActionParticipantToggleAdmin | ChannelAdminLogEventActionChangeStickerSet | ChannelAdminLogEventActionTogglePreHistoryHidden | ChannelAdminLogEventActionDefaultBannedRights | ChannelAdminLogEventActionStopPoll | ChannelAdminLogEventActionChangeLinkedChat | ChannelAdminLogEventActionChangeLocation | ChannelAdminLogEventActionToggleSlowMode | ChannelAdminLogEventActionStartGroupCall | ChannelAdminLogEventActionDiscardGroupCall | ChannelAdminLogEventActionParticipantMute | ChannelAdminLogEventActionParticipantUnmute | ChannelAdminLogEventActionToggleGroupCallSetting | ChannelAdminLogEventActionParticipantJoinByInvite | ChannelAdminLogEventActionExportedInviteDelete | ChannelAdminLogEventActionExportedInviteRevoke | ChannelAdminLogEventActionExportedInviteEdit | ChannelAdminLogEventActionParticipantVolume | ChannelAdminLogEventActionChangeHistoryTTL;
    type TypeChannelAdminLogEvent = ChannelAdminLogEvent;
    type TypeChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter;
    type TypePopularContact = PopularContact;
    type TypeRecentMeUrl = RecentMeUrlUnknown | RecentMeUrlUser | RecentMeUrlChat | RecentMeUrlChatInvite | RecentMeUrlStickerSet;
    type TypeInputSingleMedia = InputSingleMedia;
    type TypeWebAuthorization = WebAuthorization;
    type TypeInputMessage = InputMessageID | InputMessageReplyTo | InputMessagePinned | InputMessageCallbackQuery;
    type TypeInputDialogPeer = InputDialogPeer | InputDialogPeerFolder;
    type TypeDialogPeer = DialogPeer | DialogPeerFolder;
    type TypeFileHash = FileHash;
    type TypeInputClientProxy = InputClientProxy;
    type TypeInputSecureFile = InputSecureFileUploaded | InputSecureFile;
    type TypeSecureFile = SecureFileEmpty | SecureFile;
    type TypeSecureData = SecureData;
    type TypeSecurePlainData = SecurePlainPhone | SecurePlainEmail;
    type TypeSecureValueType = SecureValueTypePersonalDetails | SecureValueTypePassport | SecureValueTypeDriverLicense | SecureValueTypeIdentityCard | SecureValueTypeInternalPassport | SecureValueTypeAddress | SecureValueTypeUtilityBill | SecureValueTypeBankStatement | SecureValueTypeRentalAgreement | SecureValueTypePassportRegistration | SecureValueTypeTemporaryRegistration | SecureValueTypePhone | SecureValueTypeEmail;
    type TypeSecureValue = SecureValue;
    type TypeInputSecureValue = InputSecureValue;
    type TypeSecureValueHash = SecureValueHash;
    type TypeSecureValueError = SecureValueErrorData | SecureValueErrorFrontSide | SecureValueErrorReverseSide | SecureValueErrorSelfie | SecureValueErrorFile | SecureValueErrorFiles | SecureValueError | SecureValueErrorTranslationFile | SecureValueErrorTranslationFiles;
    type TypeSecureCredentialsEncrypted = SecureCredentialsEncrypted;
    type TypeSavedContact = SavedPhoneContact;
    type TypePasswordKdfAlgo = PasswordKdfAlgoUnknown | PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
    type TypeSecurePasswordKdfAlgo = SecurePasswordKdfAlgoUnknown | SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | SecurePasswordKdfAlgoSHA512;
    type TypeSecureSecretSettings = SecureSecretSettings;
    type TypeInputCheckPasswordSRP = InputCheckPasswordEmpty | InputCheckPasswordSRP;
    type TypeSecureRequiredType = SecureRequiredType | SecureRequiredTypeOneOf;
    type TypeInputAppEvent = InputAppEvent;
    type TypeJSONObjectValue = JsonObjectValue;
    type TypeJSONValue = JsonNull | JsonBool | JsonNumber | JsonString | JsonArray | JsonObject;
    type TypePageTableCell = PageTableCell;
    type TypePageTableRow = PageTableRow;
    type TypePageCaption = PageCaption;
    type TypePageListItem = PageListItemText | PageListItemBlocks;
    type TypePageListOrderedItem = PageListOrderedItemText | PageListOrderedItemBlocks;
    type TypePageRelatedArticle = PageRelatedArticle;
    type TypePage = Page;
    type TypePollAnswer = PollAnswer;
    type TypePoll = Poll;
    type TypePollAnswerVoters = PollAnswerVoters;
    type TypePollResults = PollResults;
    type TypeChatOnlines = ChatOnlines;
    type TypeStatsURL = StatsURL;
    type TypeChatAdminRights = ChatAdminRights;
    type TypeChatBannedRights = ChatBannedRights;
    type TypeInputWallPaper = InputWallPaper | InputWallPaperSlug | InputWallPaperNoFile;
    type TypeCodeSettings = CodeSettings;
    type TypeWallPaperSettings = WallPaperSettings;
    type TypeAutoDownloadSettings = AutoDownloadSettings;
    type TypeEmojiKeyword = EmojiKeyword | EmojiKeywordDeleted;
    type TypeEmojiKeywordsDifference = EmojiKeywordsDifference;
    type TypeEmojiURL = EmojiURL;
    type TypeEmojiLanguage = EmojiLanguage;
    type TypeFolder = Folder;
    type TypeInputFolderPeer = InputFolderPeer;
    type TypeFolderPeer = FolderPeer;
    type TypeUrlAuthResult = UrlAuthResultRequest | UrlAuthResultAccepted | UrlAuthResultDefault;
    type TypeChannelLocation = ChannelLocationEmpty | ChannelLocation;
    type TypePeerLocated = PeerLocated | PeerSelfLocated;
    type TypeRestrictionReason = RestrictionReason;
    type TypeInputTheme = InputTheme | InputThemeSlug;
    type TypeTheme = Theme;
    type TypeBaseTheme = BaseThemeClassic | BaseThemeDay | BaseThemeNight | BaseThemeTinted | BaseThemeArctic;
    type TypeInputThemeSettings = InputThemeSettings;
    type TypeThemeSettings = ThemeSettings;
    type TypeWebPageAttribute = WebPageAttributeTheme;
    type TypeMessageUserVote = MessageUserVote | MessageUserVoteInputOption | MessageUserVoteMultiple;
    type TypeBankCardOpenUrl = BankCardOpenUrl;
    type TypeDialogFilter = DialogFilter;
    type TypeDialogFilterSuggested = DialogFilterSuggested;
    type TypeStatsDateRangeDays = StatsDateRangeDays;
    type TypeStatsAbsValueAndPrev = StatsAbsValueAndPrev;
    type TypeStatsPercentValue = StatsPercentValue;
    type TypeStatsGraph = StatsGraphAsync | StatsGraphError | StatsGraph;
    type TypeMessageInteractionCounters = MessageInteractionCounters;
    type TypeVideoSize = VideoSize;
    type TypeStatsGroupTopPoster = StatsGroupTopPoster;
    type TypeStatsGroupTopAdmin = StatsGroupTopAdmin;
    type TypeStatsGroupTopInviter = StatsGroupTopInviter;
    type TypeGlobalPrivacySettings = GlobalPrivacySettings;
    type TypeMessageViews = MessageViews;
    type TypeMessageReplyHeader = MessageReplyHeader;
    type TypeMessageReplies = MessageReplies;
    type TypePeerBlocked = PeerBlocked;
    type TypeGroupCall = GroupCallDiscarded | GroupCall;
    type TypeInputGroupCall = InputGroupCall;
    type TypeGroupCallParticipant = GroupCallParticipant;
    type TypeInlineQueryPeerType = InlineQueryPeerTypeSameBotPM | InlineQueryPeerTypePM | InlineQueryPeerTypeChat | InlineQueryPeerTypeMegagroup | InlineQueryPeerTypeBroadcast;
    type TypeChatInviteImporter = ChatInviteImporter;
    type TypeChatAdminWithInvites = ChatAdminWithInvites;
    type TypeGroupCallParticipantVideoSourceGroup = GroupCallParticipantVideoSourceGroup;
    type TypeGroupCallParticipantVideo = GroupCallParticipantVideo;
    type TypeBotCommandScope = BotCommandScopeDefault | BotCommandScopeUsers | BotCommandScopeChats | BotCommandScopeChatAdmins | BotCommandScopePeer | BotCommandScopePeerAdmins | BotCommandScopePeerUser;

    namespace storage {
    /** Unknown type.<br> */
    export class FileUnknown extends VirtualClass<void> {
        CONSTRUCTOR_id: -1432995067;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileUnknown";
        fromReader(reader: Reader): FileUnknown;
    }

    /** Part of a bigger file.<br> */
    export class FilePartial extends VirtualClass<void> {
        CONSTRUCTOR_id: 1086091090;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FilePartial";
        fromReader(reader: Reader): FilePartial;
    }

    /** JPEG image. MIME type: <code>image/jpeg</code>.<br> */
    export class FileJpeg extends VirtualClass<void> {
        CONSTRUCTOR_id: 8322574;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileJpeg";
        fromReader(reader: Reader): FileJpeg;
    }

    /** GIF image. MIME type: <code>image/gif</code>.<br> */
    export class FileGif extends VirtualClass<void> {
        CONSTRUCTOR_id: -891180321;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileGif";
        fromReader(reader: Reader): FileGif;
    }

    /** PNG image. MIME type: <code>image/png</code>.<br> */
    export class FilePng extends VirtualClass<void> {
        CONSTRUCTOR_id: 172975040;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FilePng";
        fromReader(reader: Reader): FilePng;
    }

    /** PDF document image. MIME type: <code>application/pdf</code>.<br> */
    export class FilePdf extends VirtualClass<void> {
        CONSTRUCTOR_id: -1373745011;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FilePdf";
        fromReader(reader: Reader): FilePdf;
    }

    /** Mp3 audio. MIME type: <code>audio/mpeg</code>.<br> */
    export class FileMp3 extends VirtualClass<void> {
        CONSTRUCTOR_id: 1384777335;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileMp3";
        fromReader(reader: Reader): FileMp3;
    }

    /** Quicktime video. MIME type: <code>video/quicktime</code>.<br> */
    export class FileMov extends VirtualClass<void> {
        CONSTRUCTOR_id: 1258941372;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileMov";
        fromReader(reader: Reader): FileMov;
    }

    /** MPEG-4 video. MIME type: <code>video/mp4</code>.<br> */
    export class FileMp4 extends VirtualClass<void> {
        CONSTRUCTOR_id: -1278304028;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileMp4";
        fromReader(reader: Reader): FileMp4;
    }

    /** WEBP image. MIME type: <code>image/webp</code>.<br> */
    export class FileWebp extends VirtualClass<void> {
        CONSTRUCTOR_id: 276907596;
        SUBCLASS_OF_ID: 4087473907;
        classType: "constructor";
        className: "storage.FileWebp";
        fromReader(reader: Reader): FileWebp;
    }

    type TypeFileType = FileUnknown | FilePartial | FileJpeg | FileGif | FilePng | FilePdf | FileMp3 | FileMov | FileMp4 | FileWebp;
    }

    namespace auth {
    export interface SentCodeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Phone code type */
        type: auth.TypeSentCodeType;
        /** Phone code hash, to be stored and later re-used with <a href="https://corefork.telegram.org/method/auth.signIn">auth.signIn</a> */
        phoneCodeHash: string;
        /** Phone code type that will be sent next, if the phone code is not received within <code>timeout</code> seconds: to send it use <a href="https://corefork.telegram.org/method/auth.resendCode">auth.resendCode</a> */
        nextType?: auth.TypeCodeType;
        /** Timeout for reception of the phone code */
        timeout?: int;
    }

    /**
     * Contains info about a sent verification code.<br>
     * @link https://corefork.telegram.org/method/auth.signIn
     * @link https://corefork.telegram.org/method/auth.resendCode
     * @link https://corefork.telegram.org/api/auth
     */
    export class SentCode extends VirtualClass<SentCodeArgs> implements SentCodeArgs {
        CONSTRUCTOR_id: 1577067778;
        SUBCLASS_OF_ID: 1827172481;
        classType: "constructor";
        className: "auth.SentCode";
        flags: number;
        type: auth.TypeSentCodeType;
        phoneCodeHash: string;
        nextType?: auth.TypeCodeType;
        timeout?: int;
        fromReader(reader: Reader): SentCode;
    }

    export interface AuthorizationArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Temporary <a href="https://corefork.telegram.org/passport">passport</a> sessions */
        tmpSessions?: int;
        /** Info on authorized user */
        user: TypeUser;
    }

    /**
     * Contains user authorization info.<br>
     * @link https://corefork.telegram.org/passport
     */
    export class Authorization extends VirtualClass<AuthorizationArgs> implements AuthorizationArgs {
        CONSTRUCTOR_id: -855308010;
        SUBCLASS_OF_ID: 3118485049;
        classType: "constructor";
        className: "auth.Authorization";
        flags: number;
        tmpSessions?: int;
        user: TypeUser;
        fromReader(reader: Reader): Authorization;
    }

    export interface AuthorizationSignUpRequiredArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram */
        termsOfService?: help.TypeTermsOfService;
    }

    /**
     * An account with this phone number doesn't exist on telegram: the user has to <a href="https://corefork.telegram.org/api/auth">enter basic information and sign up</a><br>
     * @link https://corefork.telegram.org/api/auth
     */
    export class AuthorizationSignUpRequired extends VirtualClass<AuthorizationSignUpRequiredArgs> implements AuthorizationSignUpRequiredArgs {
        CONSTRUCTOR_id: 1148485274;
        SUBCLASS_OF_ID: 3118485049;
        classType: "constructor";
        className: "auth.AuthorizationSignUpRequired";
        flags: number;
        termsOfService?: help.TypeTermsOfService;
        fromReader(reader: Reader): AuthorizationSignUpRequired;
    }

    export interface ExportedAuthorizationArgs {
        /** current user identifier */
        id: int;
        /** authorizes key */
        bytes: bytes;
    }

    /** Data for copying of authorization between data centres.<br> */
    export class ExportedAuthorization extends VirtualClass<ExportedAuthorizationArgs> implements ExportedAuthorizationArgs {
        CONSTRUCTOR_id: -543777747;
        SUBCLASS_OF_ID: 1607593041;
        classType: "constructor";
        className: "auth.ExportedAuthorization";
        id: int;
        bytes: bytes;
        fromReader(reader: Reader): ExportedAuthorization;
    }

    export interface PasswordRecoveryArgs {
        /** The email to which the recovery code was sent must match this <a href="https://corefork.telegram.org/api/pattern">pattern</a>. */
        emailPattern: string;
    }

    /**
     * Recovery info of a <a href="https://corefork.telegram.org/api/srp">2FA password</a>, only for accounts with a <a href="https://corefork.telegram.org/api/srp#email-verification">recovery email configured</a>.<br>
     * @link https://corefork.telegram.org/api/pattern
     * @link https://corefork.telegram.org/api/srp
     */
    export class PasswordRecovery extends VirtualClass<PasswordRecoveryArgs> implements PasswordRecoveryArgs {
        CONSTRUCTOR_id: 326715557;
        SUBCLASS_OF_ID: 4201829434;
        classType: "constructor";
        className: "auth.PasswordRecovery";
        emailPattern: string;
        fromReader(reader: Reader): PasswordRecovery;
    }

    /** Type of verification code that will be sent next if you call the resendCode method: SMS code<br> */
    export class CodeTypeSms extends VirtualClass<void> {
        CONSTRUCTOR_id: 1923290508;
        SUBCLASS_OF_ID: 3019105281;
        classType: "constructor";
        className: "auth.CodeTypeSms";
        fromReader(reader: Reader): CodeTypeSms;
    }

    /** Type of verification code that will be sent next if you call the resendCode method: SMS code<br> */
    export class CodeTypeCall extends VirtualClass<void> {
        CONSTRUCTOR_id: 1948046307;
        SUBCLASS_OF_ID: 3019105281;
        classType: "constructor";
        className: "auth.CodeTypeCall";
        fromReader(reader: Reader): CodeTypeCall;
    }

    /** Type of verification code that will be sent next if you call the resendCode method: SMS code<br> */
    export class CodeTypeFlashCall extends VirtualClass<void> {
        CONSTRUCTOR_id: 577556219;
        SUBCLASS_OF_ID: 3019105281;
        classType: "constructor";
        className: "auth.CodeTypeFlashCall";
        fromReader(reader: Reader): CodeTypeFlashCall;
    }

    export interface SentCodeTypeAppArgs {
        /** Length of the code in bytes */
        length: int;
    }

    /** The code was sent through the telegram app<br> */
    export class SentCodeTypeApp extends VirtualClass<SentCodeTypeAppArgs> implements SentCodeTypeAppArgs {
        CONSTRUCTOR_id: 1035688326;
        SUBCLASS_OF_ID: 4284159374;
        classType: "constructor";
        className: "auth.SentCodeTypeApp";
        length: int;
        fromReader(reader: Reader): SentCodeTypeApp;
    }

    export interface SentCodeTypeSmsArgs {
        /** Length of the code in bytes */
        length: int;
    }

    /** The code was sent via SMS<br> */
    export class SentCodeTypeSms extends VirtualClass<SentCodeTypeSmsArgs> implements SentCodeTypeSmsArgs {
        CONSTRUCTOR_id: -1073693790;
        SUBCLASS_OF_ID: 4284159374;
        classType: "constructor";
        className: "auth.SentCodeTypeSms";
        length: int;
        fromReader(reader: Reader): SentCodeTypeSms;
    }

    export interface SentCodeTypeCallArgs {
        /** Length of the verification code */
        length: int;
    }

    /** The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.<br> */
    export class SentCodeTypeCall extends VirtualClass<SentCodeTypeCallArgs> implements SentCodeTypeCallArgs {
        CONSTRUCTOR_id: 1398007207;
        SUBCLASS_OF_ID: 4284159374;
        classType: "constructor";
        className: "auth.SentCodeTypeCall";
        length: int;
        fromReader(reader: Reader): SentCodeTypeCall;
    }

    export interface SentCodeTypeFlashCallArgs {
        /** <a href="https://corefork.telegram.org/api/pattern">pattern</a> to match */
        pattern: string;
    }

    /**
     * The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.<br>
     * @link https://corefork.telegram.org/api/pattern
     */
    export class SentCodeTypeFlashCall extends VirtualClass<SentCodeTypeFlashCallArgs> implements SentCodeTypeFlashCallArgs {
        CONSTRUCTOR_id: -1425815847;
        SUBCLASS_OF_ID: 4284159374;
        classType: "constructor";
        className: "auth.SentCodeTypeFlashCall";
        pattern: string;
        fromReader(reader: Reader): SentCodeTypeFlashCall;
    }

    export interface LoginTokenArgs {
        /** Expiry date of QR code */
        expires: int;
        /** Token to render in QR code */
        token: bytes;
    }

    /**
     * Login token (for <a href="https://corefork.telegram.org/api/qr-login">QR code login</a>)<br>
     * @link https://corefork.telegram.org/api/qr-login
     */
    export class LoginToken extends VirtualClass<LoginTokenArgs> implements LoginTokenArgs {
        CONSTRUCTOR_id: 1654593920;
        SUBCLASS_OF_ID: 1800795702;
        classType: "constructor";
        className: "auth.LoginToken";
        expires: int;
        token: bytes;
        fromReader(reader: Reader): LoginToken;
    }

    export interface LoginTokenMigrateToArgs {
        /** DC ID */
        dcId: int;
        /** Token to use for login */
        token: bytes;
    }

    /** Repeat the query to the specified DC<br> */
    export class LoginTokenMigrateTo extends VirtualClass<LoginTokenMigrateToArgs> implements LoginTokenMigrateToArgs {
        CONSTRUCTOR_id: 110008598;
        SUBCLASS_OF_ID: 1800795702;
        classType: "constructor";
        className: "auth.LoginTokenMigrateTo";
        dcId: int;
        token: bytes;
        fromReader(reader: Reader): LoginTokenMigrateTo;
    }

    export interface LoginTokenSuccessArgs {
        /** Authorization info */
        authorization: auth.TypeAuthorization;
    }

    /** Login via token (QR code) succeded!<br> */
    export class LoginTokenSuccess extends VirtualClass<LoginTokenSuccessArgs> implements LoginTokenSuccessArgs {
        CONSTRUCTOR_id: 957176926;
        SUBCLASS_OF_ID: 1800795702;
        classType: "constructor";
        className: "auth.LoginTokenSuccess";
        authorization: auth.TypeAuthorization;
        fromReader(reader: Reader): LoginTokenSuccess;
    }

    export interface SendCodeArgs {
        /** Phone number in international format */
        phoneNumber: string;
        /** Application identifier (see <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiId: int;
        /** Application secret hash (see <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiHash: string;
        /** Settings for the code type to send */
        settings: TypeCodeSettings;
    }

    /**
     * Send the verification code for login<br>
     * @throws {{code:400,type:"API_ID_INVALID"}} API ID invalid.
     * @throws {{code:400,type:"API_ID_PUBLISHED_FLOOD"}} This API id was published somewhere, you can't use it now.
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:303,type:"NETWORK_MIGRATE_X"}} Repeat the query to data-center X.
     * @throws {{code:303,type:"PHONE_MIGRATE_X"}} Repeat the query to data-center X.
     * @throws {{code:400,type:"PHONE_NUMBER_APP_SIGNUP_FORBIDDEN"}} You can't sign up using this app.
     * @throws {{code:400,type:"PHONE_NUMBER_BANNED"}} The provided phone number is banned from telegram.
     * @throws {{code:400,type:"PHONE_NUMBER_FLOOD"}} You asked for the code too many times.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} Invalid phone number.
     * @throws {{code:406,type:"PHONE_PASSWORD_FLOOD"}} You have tried logging in too many times.
     * @throws {{code:400,type:"PHONE_PASSWORD_PROTECTED"}} This phone is password protected.
     * @throws {{code:400,type:"SMS_CODE_CREATE_FAILED"}} An error occurred while creating the SMS code.
     */
    export class SendCode extends Request<Partial<SendCodeArgs>,auth.TypeSentCode> implements SendCodeArgs {
        CONSTRUCTOR_id: -1502141361;
        SUBCLASS_OF_ID: 1827172481;
        classType: "request";
        className: "auth.SendCode";
        phoneNumber: string;
        apiId: int;
        apiHash: string;
        settings: TypeCodeSettings;
        fromReader(reader: Reader): SendCode;
    }

    export interface SignUpArgs {
        /** Phone number in the international format */
        phoneNumber: string;
        /** SMS-message ID */
        phoneCodeHash: string;
        /** New user first name */
        firstName: string;
        /** New user last name */
        lastName: string;
    }

    /**
     * Registers a validated phone number in the system.<br>
     * @throws {{code:400,type:"FIRSTNAME_INVALID"}} Invalid first name.
     * @throws {{code:400,type:"LASTNAME_INVALID"}} Invalid last name.
     * @throws {{code:400,type:"PHONE_CODE_EMPTY"}} phone_code from a SMS is empty.
     * @throws {{code:400,type:"PHONE_CODE_EXPIRED"}} SMS expired.
     * @throws {{code:400,type:"PHONE_CODE_INVALID"}} Invalid SMS code was sent.
     * @throws {{code:400,type:"PHONE_NUMBER_FLOOD"}} You asked for the code too many times.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} Invalid phone number.
     * @throws {{code:400,type:"PHONE_NUMBER_OCCUPIED"}} The phone number is already in use.
     */
    export class SignUp extends Request<Partial<SignUpArgs>,auth.TypeAuthorization> implements SignUpArgs {
        CONSTRUCTOR_id: -2131827673;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.SignUp";
        phoneNumber: string;
        phoneCodeHash: string;
        firstName: string;
        lastName: string;
        fromReader(reader: Reader): SignUp;
    }

    export interface SignInArgs {
        /** Phone number in the international format */
        phoneNumber: string;
        /** SMS-message ID, obtained from <a href="https://corefork.telegram.org/method/auth.sendCode">auth.sendCode</a> */
        phoneCodeHash: string;
        /** Valid numerical code from the SMS-message */
        phoneCode: string;
    }

    /**
     * Signs in a user with a validated phone number.<br>
     * @link https://corefork.telegram.org/method/auth.sendCode
     * @throws {{code:400,type:"PHONE_CODE_EMPTY"}} phone_code from the SMS is empty.
     * @throws {{code:400,type:"PHONE_CODE_EXPIRED"}} SMS expired.
     * @throws {{code:400,type:"PHONE_CODE_INVALID"}} Invalid SMS code was sent.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} Invalid phone number.
     * @throws {{code:400,type:"PHONE_NUMBER_UNOCCUPIED"}} The code is valid but no user with the given number is registered.
     */
    export class SignIn extends Request<Partial<SignInArgs>,auth.TypeAuthorization> implements SignInArgs {
        CONSTRUCTOR_id: -1126886015;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.SignIn";
        phoneNumber: string;
        phoneCodeHash: string;
        phoneCode: string;
        fromReader(reader: Reader): SignIn;
    }

    /** Logs out the user.<br> */
    export class LogOut extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: 1461180992;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.LogOut";
        fromReader(reader: Reader): LogOut;
    }

    /**
     * Terminates all user's authorized sessions except for the current one.<br>After calling this method it is necessary to reregister the current device using the method <a href="https://corefork.telegram.org/method/account.registerDevice">account.registerDevice</a><br>
     * @link https://corefork.telegram.org/method/account.registerDevice
     * @link https://corefork.telegram.org/api/push-updates
     * @throws {{code:406,type:"FRESH_RESET_AUTHORISATION_FORBIDDEN"}} You can't logout other sessions if less than 24 hours have passed since you logged on the current session.
     */
    export class ResetAuthorizations extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -1616179942;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.ResetAuthorizations";
        fromReader(reader: Reader): ResetAuthorizations;
    }

    export interface ExportAuthorizationArgs {
        /** Number of a target data-centre */
        dcId: int;
    }

    /**
     * Returns data for copying authorization to another data-centre.<br>
     * @throws {{code:400,type:"DC_ID_INVALID"}} The provided DC ID is invalid.
     */
    export class ExportAuthorization extends Request<Partial<ExportAuthorizationArgs>,auth.TypeExportedAuthorization> implements ExportAuthorizationArgs {
        CONSTRUCTOR_id: -440401971;
        SUBCLASS_OF_ID: 1607593041;
        classType: "request";
        className: "auth.ExportAuthorization";
        dcId: int;
        fromReader(reader: Reader): ExportAuthorization;
    }

    export interface ImportAuthorizationArgs {
        /** User ID */
        id: int;
        /** Authorization key */
        bytes: bytes;
    }

    /**
     * Logs in a user using a key transmitted from his native data-centre.<br>
     * @throws {{code:400,type:"AUTH_BYTES_INVALID"}} The provided authorization is invalid.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class ImportAuthorization extends Request<Partial<ImportAuthorizationArgs>,auth.TypeAuthorization> implements ImportAuthorizationArgs {
        CONSTRUCTOR_id: -470837741;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.ImportAuthorization";
        id: int;
        bytes: bytes;
        fromReader(reader: Reader): ImportAuthorization;
    }

    export interface BindTempAuthKeyArgs {
        /** Permanent auth_key_id to bind to */
        permAuthKeyId: long;
        /** Random long from <a href="https://corefork.telegram.org/#binding-message-contents">Binding message contents</a> */
        nonce: long;
        /** Unix timestamp to invalidate temporary key, see <a href="https://corefork.telegram.org/#binding-message-contents">Binding message contents</a> */
        expiresAt: int;
        /** See <a href="https://corefork.telegram.org/#generating-encrypted-message">Generating encrypted_message</a> */
        encryptedMessage: bytes;
    }

    /**
     * Binds a temporary authorization key <code>temp_auth_key_id</code> to the permanent authorization key <code>perm_auth_key_id</code>. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.<br>For more information, see <a href="https://corefork.telegram.org/api/pfs">Perfect Forward Secrecy</a>.<br>
     * @link https://corefork.telegram.org/api/pfs
     * @link https://corefork.telegram.org/type/long
     * @link https://corefork.telegram.org/mtproto/serialize
     * @link https://corefork.telegram.org/type/int
     * @link https://corefork.telegram.org/mtproto/serialize
     * @link https://corefork.telegram.org/mtproto/description
     * @link https://corefork.telegram.org/api/invoking
     * @link https://corefork.telegram.org/method/initConnection
     * @throws {{code:400,type:"ENCRYPTED_MESSAGE_INVALID"}} Encrypted message is incorrect.
     * @throws {{code:400,type:"TEMP_AUTH_KEY_ALREADY_BOUND"}} The passed temporary key is already bound to another perm_auth_key_id.
     * @throws {{code:400,type:"TEMP_AUTH_KEY_EMPTY"}} The request was not performed with a temporary authorization key.
     */
    export class BindTempAuthKey extends Request<Partial<BindTempAuthKeyArgs>,Bool> implements BindTempAuthKeyArgs {
        CONSTRUCTOR_id: -841733627;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.BindTempAuthKey";
        permAuthKeyId: long;
        nonce: long;
        expiresAt: int;
        encryptedMessage: bytes;
        fromReader(reader: Reader): BindTempAuthKey;
    }

    export interface ImportBotAuthorizationArgs {
        /** Reserved for future use */
        flags: int;
        /** Application identifier (see. <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiId: int;
        /** Application identifier hash (see. <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiHash: string;
        /** Bot token (see <a href="https://corefork.telegram.org/bots">bots</a>) */
        botAuthToken: string;
    }

    /**
     * Login as a bot<br>
     * @link https://corefork.telegram.org/bots
     * @throws {{code:400,type:"ACCESS_TOKEN_EXPIRED"}} Bot token expired.
     * @throws {{code:400,type:"ACCESS_TOKEN_INVALID"}} The provided token is not valid.
     * @throws {{code:400,type:"API_ID_INVALID"}} The api_id/api_hash combination is invalid.
     * @throws {{code:400,type:"API_ID_PUBLISHED_FLOOD"}} This API id was published somewhere, you can't use it now.
     * @throws {{code:401,type:"AUTH_KEY_INVALID"}} Auth key invalid.
     */
    export class ImportBotAuthorization extends Request<Partial<ImportBotAuthorizationArgs>,auth.TypeAuthorization> implements ImportBotAuthorizationArgs {
        CONSTRUCTOR_id: 1738800940;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.ImportBotAuthorization";
        flags: int;
        apiId: int;
        apiHash: string;
        botAuthToken: string;
        fromReader(reader: Reader): ImportBotAuthorization;
    }

    export interface CheckPasswordArgs {
        /** The account's password (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        password: TypeInputCheckPasswordSRP;
    }

    /**
     * Try logging to an account protected by a <a href="https://corefork.telegram.org/api/srp">2FA password</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"PASSWORD_HASH_INVALID"}} The provided password isn't valid.
     * @throws {{code:400,type:"SRP_ID_INVALID"}} Invalid SRP ID provided.
     * @throws {{code:400,type:"SRP_PASSWORD_CHANGED"}} Password has changed.
     */
    export class CheckPassword extends Request<Partial<CheckPasswordArgs>,auth.TypeAuthorization> implements CheckPasswordArgs {
        CONSTRUCTOR_id: -779399914;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.CheckPassword";
        password: TypeInputCheckPasswordSRP;
        fromReader(reader: Reader): CheckPassword;
    }

    /**
     * Request recovery code of a <a href="https://corefork.telegram.org/api/srp">2FA password</a>, only for accounts with a <a href="https://corefork.telegram.org/api/srp#email-verification">recovery email configured</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"PASSWORD_EMPTY"}} The provided password is empty.
     * @throws {{code:400,type:"PASSWORD_RECOVERY_NA"}} No email was set, can't recover password via email.
     */
    export class RequestPasswordRecovery extends Request<Partial<void>,auth.TypePasswordRecovery> {
        CONSTRUCTOR_id: -661144474;
        SUBCLASS_OF_ID: 4201829434;
        classType: "request";
        className: "auth.RequestPasswordRecovery";
        fromReader(reader: Reader): RequestPasswordRecovery;
    }

    export interface RecoverPasswordArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Code received via email */
        code: string;
        /** New password */
        newSettings?: account.TypePasswordInputSettings;
    }

    /**
     * Reset the <a href="https://corefork.telegram.org/api/srp">2FA password</a> using the recovery code sent using <a href="https://corefork.telegram.org/method/auth.requestPasswordRecovery">auth.requestPasswordRecovery</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/auth.requestPasswordRecovery
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"CODE_EMPTY"}} The provided code is empty.
     * @throws {{code:400,type:"NEW_SETTINGS_INVALID"}} The new settings are invalid.
     */
    export class RecoverPassword extends Request<Partial<RecoverPasswordArgs>,auth.TypeAuthorization> implements RecoverPasswordArgs {
        CONSTRUCTOR_id: 923364464;
        SUBCLASS_OF_ID: 3118485049;
        classType: "request";
        className: "auth.RecoverPassword";
        flags: number;
        code: string;
        newSettings?: account.TypePasswordInputSettings;
        fromReader(reader: Reader): RecoverPassword;
    }

    export interface ResendCodeArgs {
        /** The phone number */
        phoneNumber: string;
        /** The phone code hash obtained from <a href="https://corefork.telegram.org/method/auth.sendCode">auth.sendCode</a> */
        phoneCodeHash: string;
    }

    /**
     * Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see <a href="https://corefork.telegram.org/api/auth">login</a> for more info.<br>
     * @link https://corefork.telegram.org/method/auth.sendCode
     * @link https://corefork.telegram.org/api/auth
     * @throws {{code:400,type:"PHONE_CODE_EXPIRED"}} The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars).
     * @throws {{code:400,type:"PHONE_CODE_HASH_EMPTY"}} phone_code_hash is missing.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     * @throws {{code:406,type:"SEND_CODE_UNAVAILABLE"}} Returned when all available options for this type of number were already used (e.g. flash-call, then SMS, then this error might be returned to trigger a second resend).
     */
    export class ResendCode extends Request<Partial<ResendCodeArgs>,auth.TypeSentCode> implements ResendCodeArgs {
        CONSTRUCTOR_id: 1056025023;
        SUBCLASS_OF_ID: 1827172481;
        classType: "request";
        className: "auth.ResendCode";
        phoneNumber: string;
        phoneCodeHash: string;
        fromReader(reader: Reader): ResendCode;
    }

    export interface CancelCodeArgs {
        /** Phone number */
        phoneNumber: string;
        /** Phone code hash from <a href="https://corefork.telegram.org/method/auth.sendCode">auth.sendCode</a> */
        phoneCodeHash: string;
    }

    /**
     * Cancel the login verification code<br>
     * @link https://corefork.telegram.org/method/auth.sendCode
     * @throws {{code:400,type:"PHONE_CODE_EXPIRED"}} The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars).
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     */
    export class CancelCode extends Request<Partial<CancelCodeArgs>,Bool> implements CancelCodeArgs {
        CONSTRUCTOR_id: 520357240;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.CancelCode";
        phoneNumber: string;
        phoneCodeHash: string;
        fromReader(reader: Reader): CancelCode;
    }

    export interface DropTempAuthKeysArgs {
        /** The auth keys that <strong>shouldn't</strong> be dropped. */
        exceptAuthKeys: long[];
    }

    /** Delete all temporary authorization keys <strong>except for</strong> the ones specified<br> */
    export class DropTempAuthKeys extends Request<Partial<DropTempAuthKeysArgs>,Bool> implements DropTempAuthKeysArgs {
        CONSTRUCTOR_id: -1907842680;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.DropTempAuthKeys";
        exceptAuthKeys: long[];
        fromReader(reader: Reader): DropTempAuthKeys;
    }

    export interface ExportLoginTokenArgs {
        /** Application identifier (see. <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiId: int;
        /** Application identifier hash (see. <a href="https://corefork.telegram.org/myapp">App configuration</a>) */
        apiHash: string;
        /** List of already logged-in user IDs, to prevent logging in twice with the same user */
        exceptIds: int[];
    }

    /**
     * Generate a login token, for <a href="https://corefork.telegram.org/api/qr-login">login via QR code</a>.<br>
     * The generated login token should be encoded using base64url, then shown as a <code>tg://login?token=base64encodedtoken</code> URL in the QR code.<br>For more info, see <a href="https://corefork.telegram.org/api/qr-login">login via QR code</a>.<br>
     * @link https://corefork.telegram.org/api/qr-login
     * @throws {{code:400,type:"API_ID_INVALID"}} API ID invalid.
     */
    export class ExportLoginToken extends Request<Partial<ExportLoginTokenArgs>,auth.TypeLoginToken> implements ExportLoginTokenArgs {
        CONSTRUCTOR_id: -1313598185;
        SUBCLASS_OF_ID: 1800795702;
        classType: "request";
        className: "auth.ExportLoginToken";
        apiId: int;
        apiHash: string;
        exceptIds: int[];
        fromReader(reader: Reader): ExportLoginToken;
    }

    export interface ImportLoginTokenArgs {
        /** Login token */
        token: bytes;
    }

    /**
     * Login using a redirected login token, generated in case of DC mismatch during <a href="https://corefork.telegram.org/api/qr-login">QR code login</a>.<br>For more info, see <a href="https://corefork.telegram.org/api/qr-login">login via QR code</a>.<br>
     * @link https://corefork.telegram.org/api/qr-login
     * @throws {{code:400,type:"AUTH_TOKEN_ALREADY_ACCEPTED"}} The specified auth token was already accepted.
     * @throws {{code:400,type:"AUTH_TOKEN_EXPIRED"}} The authorization token has expired.
     * @throws {{code:400,type:"AUTH_TOKEN_INVALID"}} The specified auth token is invalid.
     * @throws {{code:400,type:"AUTH_TOKEN_INVALIDX"}} The specified auth token is invalid.
     */
    export class ImportLoginToken extends Request<Partial<ImportLoginTokenArgs>,auth.TypeLoginToken> implements ImportLoginTokenArgs {
        CONSTRUCTOR_id: -1783866140;
        SUBCLASS_OF_ID: 1800795702;
        classType: "request";
        className: "auth.ImportLoginToken";
        token: bytes;
        fromReader(reader: Reader): ImportLoginToken;
    }

    export interface AcceptLoginTokenArgs {
        /** Login token embedded in QR code, for more info, see <a href="https://corefork.telegram.org/api/qr-login">login via QR code</a>. */
        token: bytes;
    }

    /**
     * Accept QR code login token, logging in the app that generated it.<br>Returns info about the new session.<br>For more info, see <a href="https://corefork.telegram.org/api/qr-login">login via QR code</a>.<br>
     * @link https://corefork.telegram.org/api/qr-login
     * @throws {{code:400,type:"AUTH_TOKEN_INVALIDX"}} The specified auth token is invalid.
     */
    export class AcceptLoginToken extends Request<Partial<AcceptLoginTokenArgs>,TypeAuthorization> implements AcceptLoginTokenArgs {
        CONSTRUCTOR_id: -392909491;
        SUBCLASS_OF_ID: 3373514778;
        classType: "request";
        className: "auth.AcceptLoginToken";
        token: bytes;
        fromReader(reader: Reader): AcceptLoginToken;
    }

    export interface CheckRecoveryPasswordArgs {
        /** Code received via email */
        code: string;
    }

    /**
     * Check if the <a href="https://corefork.telegram.org/api/srp">2FA recovery code</a> sent using <a href="https://corefork.telegram.org/method/auth.requestPasswordRecovery">auth.requestPasswordRecovery</a> is valid, before passing it to <a href="https://corefork.telegram.org/method/auth.recoverPassword">auth.recoverPassword</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/auth.requestPasswordRecovery
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/auth.recoverPassword
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/auth.requestPasswordRecovery
     * @throws {{code:400,type:"PASSWORD_RECOVERY_EXPIRED"}} The recovery code has expired.
     */
    export class CheckRecoveryPassword extends Request<Partial<CheckRecoveryPasswordArgs>,Bool> implements CheckRecoveryPasswordArgs {
        CONSTRUCTOR_id: 221691769;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "auth.CheckRecoveryPassword";
        code: string;
        fromReader(reader: Reader): CheckRecoveryPassword;
    }

    type TypeSentCode = SentCode;
    type TypeAuthorization = Authorization | AuthorizationSignUpRequired;
    type TypeExportedAuthorization = ExportedAuthorization;
    type TypePasswordRecovery = PasswordRecovery;
    type TypeCodeType = CodeTypeSms | CodeTypeCall | CodeTypeFlashCall;
    type TypeSentCodeType = SentCodeTypeApp | SentCodeTypeSms | SentCodeTypeCall | SentCodeTypeFlashCall;
    type TypeLoginToken = LoginToken | LoginTokenMigrateTo | LoginTokenSuccess;
    }

    namespace contacts {
    /** Contact list on the server is the same as the list on the client.<br> */
    export class ContactsNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -1219778094;
        SUBCLASS_OF_ID: 951985654;
        classType: "constructor";
        className: "contacts.ContactsNotModified";
        fromReader(reader: Reader): ContactsNotModified;
    }

    export interface ContactsArgs {
        /** Contact list */
        contacts: TypeContact[];
        /** Number of contacts that were saved successfully */
        savedCount: int;
        /** User list */
        users: TypeUser[];
    }

    /** The current user's contact list and info on users.<br> */
    export class Contacts extends VirtualClass<ContactsArgs> implements ContactsArgs {
        CONSTRUCTOR_id: -353862078;
        SUBCLASS_OF_ID: 951985654;
        classType: "constructor";
        className: "contacts.Contacts";
        contacts: TypeContact[];
        savedCount: int;
        users: TypeUser[];
        fromReader(reader: Reader): Contacts;
    }

    export interface ImportedContactsArgs {
        /** List of succesfully imported contacts */
        imported: TypeImportedContact[];
        /** Popular contacts */
        popularInvites: TypePopularContact[];
        /** List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.<br>Parameter added in <a href="https://corefork.telegram.org/api/layers#layer-13">Layer 13</a> */
        retryContacts: long[];
        /** List of users */
        users: TypeUser[];
    }

    /**
     * Info on succesfully imported contacts.<br>
     * @link https://corefork.telegram.org/api/layers
     */
    export class ImportedContacts extends VirtualClass<ImportedContactsArgs> implements ImportedContactsArgs {
        CONSTRUCTOR_id: 2010127419;
        SUBCLASS_OF_ID: 2171776403;
        classType: "constructor";
        className: "contacts.ImportedContacts";
        imported: TypeImportedContact[];
        popularInvites: TypePopularContact[];
        retryContacts: long[];
        users: TypeUser[];
        fromReader(reader: Reader): ImportedContacts;
    }

    export interface BlockedArgs {
        /** List of blocked users */
        blocked: TypePeerBlocked[];
        /** Blocked chats */
        chats: TypeChat[];
        /** List of users */
        users: TypeUser[];
    }

    /** Full list of blocked users.<br> */
    export class Blocked extends VirtualClass<BlockedArgs> implements BlockedArgs {
        CONSTRUCTOR_id: 182326673;
        SUBCLASS_OF_ID: 4290400079;
        classType: "constructor";
        className: "contacts.Blocked";
        blocked: TypePeerBlocked[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): Blocked;
    }

    export interface BlockedSliceArgs {
        /** Total number of elements in the list */
        count: int;
        /** List of blocked users */
        blocked: TypePeerBlocked[];
        /** Blocked chats */
        chats: TypeChat[];
        /** List of users */
        users: TypeUser[];
    }

    /** Incomplete list of blocked users.<br> */
    export class BlockedSlice extends VirtualClass<BlockedSliceArgs> implements BlockedSliceArgs {
        CONSTRUCTOR_id: -513392236;
        SUBCLASS_OF_ID: 4290400079;
        classType: "constructor";
        className: "contacts.BlockedSlice";
        count: int;
        blocked: TypePeerBlocked[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): BlockedSlice;
    }

    export interface FoundArgs {
        /** Personalized results */
        myResults: TypePeer[];
        /** List of found user identifiers */
        results: TypePeer[];
        /** Found chats */
        chats: TypeChat[];
        /** List of users */
        users: TypeUser[];
    }

    /** Users found by name substring and auxiliary data.<br> */
    export class Found extends VirtualClass<FoundArgs> implements FoundArgs {
        CONSTRUCTOR_id: -1290580579;
        SUBCLASS_OF_ID: 1132896995;
        classType: "constructor";
        className: "contacts.Found";
        myResults: TypePeer[];
        results: TypePeer[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): Found;
    }

    export interface ResolvedPeerArgs {
        /** The peer */
        peer: TypePeer;
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /** Resolved peer<br> */
    export class ResolvedPeer extends VirtualClass<ResolvedPeerArgs> implements ResolvedPeerArgs {
        CONSTRUCTOR_id: 2131196633;
        SUBCLASS_OF_ID: 4033196968;
        classType: "constructor";
        className: "contacts.ResolvedPeer";
        peer: TypePeer;
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ResolvedPeer;
    }

    /** Top peer info hasn't changed<br> */
    export class TopPeersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -567906571;
        SUBCLASS_OF_ID: 2666052488;
        classType: "constructor";
        className: "contacts.TopPeersNotModified";
        fromReader(reader: Reader): TopPeersNotModified;
    }

    export interface TopPeersArgs {
        /** Top peers by top peer category */
        categories: TypeTopPeerCategoryPeers[];
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /** Top peers<br> */
    export class TopPeers extends VirtualClass<TopPeersArgs> implements TopPeersArgs {
        CONSTRUCTOR_id: 1891070632;
        SUBCLASS_OF_ID: 2666052488;
        classType: "constructor";
        className: "contacts.TopPeers";
        categories: TypeTopPeerCategoryPeers[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): TopPeers;
    }

    /** Top peers disabled<br> */
    export class TopPeersDisabled extends VirtualClass<void> {
        CONSTRUCTOR_id: -1255369827;
        SUBCLASS_OF_ID: 2666052488;
        classType: "constructor";
        className: "contacts.TopPeersDisabled";
        fromReader(reader: Reader): TopPeersDisabled;
    }

    export interface GetContactIDsArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get contact by telegram IDs<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetContactIDs extends Request<Partial<GetContactIDsArgs>,int[]> implements GetContactIDsArgs {
        CONSTRUCTOR_id: 749357634;
        SUBCLASS_OF_ID: 1344696591;
        classType: "request";
        className: "contacts.GetContactIDs";
        hash: int;
        fromReader(reader: Reader): GetContactIDs;
    }

    /** Returns the list of contact statuses.<br> */
    export class GetStatuses extends Request<Partial<void>,TypeContactStatus[]> {
        CONSTRUCTOR_id: -995929106;
        SUBCLASS_OF_ID: 3749797008;
        classType: "request";
        className: "contacts.GetStatuses";
        fromReader(reader: Reader): GetStatuses;
    }

    export interface GetContactsArgs {
        /** If there already is a full contact list on the client, a <a href="https://corefork.telegram.org/api/offsets#hash-generation">hash</a> of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, <a href="https://corefork.telegram.org/constructor/contacts.contactsNotModified">(contacts.contactsNotModified)</a> will be returned. */
        hash: int;
    }

    /**
     * Returns the current user's contact list.<br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/constructor/contacts.contactsNotModified
     */
    export class GetContacts extends Request<Partial<GetContactsArgs>,contacts.TypeContacts> implements GetContactsArgs {
        CONSTRUCTOR_id: -1071414113;
        SUBCLASS_OF_ID: 951985654;
        classType: "request";
        className: "contacts.GetContacts";
        hash: int;
        fromReader(reader: Reader): GetContacts;
    }

    export interface ImportContactsArgs {
        /** List of contacts to import */
        contacts: TypeInputContact[];
    }

    /**
     * Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.<br>Use <a href="https://corefork.telegram.org/method/contacts.addContact">contacts.addContact</a> to add Telegram contacts without actually using their phone number.<br>
     * @link https://corefork.telegram.org/method/contacts.addContact
     * @link https://corefork.telegram.org/method/contacts.importContacts
     */
    export class ImportContacts extends Request<Partial<ImportContactsArgs>,contacts.TypeImportedContacts> implements ImportContactsArgs {
        CONSTRUCTOR_id: 746589157;
        SUBCLASS_OF_ID: 2171776403;
        classType: "request";
        className: "contacts.ImportContacts";
        contacts: TypeInputContact[];
        fromReader(reader: Reader): ImportContacts;
    }

    export interface DeleteContactsArgs {
        /** User ID list */
        id: TypeInputUser[];
    }

    /** Deletes several contacts from the list.<br> */
    export class DeleteContacts extends Request<Partial<DeleteContactsArgs>,TypeUpdates> implements DeleteContactsArgs {
        CONSTRUCTOR_id: 157945344;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "contacts.DeleteContacts";
        id: TypeInputUser[];
        fromReader(reader: Reader): DeleteContacts;
    }

    export interface DeleteByPhonesArgs {
        /** Phone numbers */
        phones: string[];
    }

    /** Delete contacts by phone number<br> */
    export class DeleteByPhones extends Request<Partial<DeleteByPhonesArgs>,Bool> implements DeleteByPhonesArgs {
        CONSTRUCTOR_id: 269745566;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.DeleteByPhones";
        phones: string[];
        fromReader(reader: Reader): DeleteByPhones;
    }

    export interface BlockArgs {
        /** User ID */
        id: EntityLike;
    }

    /**
     * Adds the user to the blacklist.<br>
     * @throws {{code:400,type:"CONTACT_ID_INVALID"}} The provided contact ID is invalid.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class Block extends Request<Partial<BlockArgs>,Bool> implements BlockArgs {
        CONSTRUCTOR_id: 1758204945;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.Block";
        id: EntityLike;
        fromReader(reader: Reader): Block;
    }

    export interface UnblockArgs {
        /** User ID */
        id: EntityLike;
    }

    /**
     * Deletes the user from the blacklist.<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CONTACT_ID_INVALID"}} The provided contact ID is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class Unblock extends Request<Partial<UnblockArgs>,Bool> implements UnblockArgs {
        CONSTRUCTOR_id: -1096393392;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.Unblock";
        id: EntityLike;
        fromReader(reader: Reader): Unblock;
    }

    export interface GetBlockedArgs {
        /** The number of list elements to be skipped */
        offset: int;
        /** The number of list elements to be returned */
        limit: int;
    }

    /** Returns the list of blocked users.<br> */
    export class GetBlocked extends Request<Partial<GetBlockedArgs>,contacts.TypeBlocked> implements GetBlockedArgs {
        CONSTRUCTOR_id: -176409329;
        SUBCLASS_OF_ID: 4290400079;
        classType: "request";
        className: "contacts.GetBlocked";
        offset: int;
        limit: int;
        fromReader(reader: Reader): GetBlocked;
    }

    export interface SearchArgs {
        /** Target substring */
        q: string;
        /** Maximum number of users to be returned */
        limit: int;
    }

    /**
     * Returns users found by username substring.<br>
     * @throws {{code:400,type:"QUERY_TOO_SHORT"}} The query string is too short.
     * @throws {{code:400,type:"SEARCH_QUERY_EMPTY"}} The search query is empty.
     */
    export class Search extends Request<Partial<SearchArgs>,contacts.TypeFound> implements SearchArgs {
        CONSTRUCTOR_id: 301470424;
        SUBCLASS_OF_ID: 1132896995;
        classType: "request";
        className: "contacts.Search";
        q: string;
        limit: int;
        fromReader(reader: Reader): Search;
    }

    export interface ResolveUsernameArgs {
        /** @username to resolve */
        username: string;
    }

    /**
     * Resolve a @username to get peer info<br>
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"CONNECTION_LAYER_INVALID"}} Layer invalid.
     * @throws {{code:400,type:"USERNAME_INVALID"}} The provided username is not valid.
     * @throws {{code:400,type:"USERNAME_NOT_OCCUPIED"}} The provided username is not occupied.
     */
    export class ResolveUsername extends Request<Partial<ResolveUsernameArgs>,contacts.TypeResolvedPeer> implements ResolveUsernameArgs {
        CONSTRUCTOR_id: -113456221;
        SUBCLASS_OF_ID: 4033196968;
        classType: "request";
        className: "contacts.ResolveUsername";
        username: string;
        fromReader(reader: Reader): ResolveUsername;
    }

    export interface GetTopPeersArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Users we've chatted most frequently with */
        correspondents?: true;
        /** Most used bots */
        botsPm?: true;
        /** Most used inline bots */
        botsInline?: true;
        /** Most frequently called users */
        phoneCalls?: true;
        /** Users to which the users often forwards messages to */
        forwardUsers?: true;
        /** Chats to which the users often forwards messages to */
        forwardChats?: true;
        /** Often-opened groups and supergroups */
        groups?: true;
        /** Most frequently visited channels */
        channels?: true;
        /** Offset for <a href="https://corefork.telegram.org/api/offsets">pagination</a> */
        offset: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get most used peers<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"TYPES_EMPTY"}} No top peer type was provided.
     */
    export class GetTopPeers extends Request<Partial<GetTopPeersArgs>,contacts.TypeTopPeers> implements GetTopPeersArgs {
        CONSTRUCTOR_id: -728224331;
        SUBCLASS_OF_ID: 2666052488;
        classType: "request";
        className: "contacts.GetTopPeers";
        flags: number;
        correspondents?: true;
        botsPm?: true;
        botsInline?: true;
        phoneCalls?: true;
        forwardUsers?: true;
        forwardChats?: true;
        groups?: true;
        channels?: true;
        offset: int;
        limit: int;
        hash: int;
        fromReader(reader: Reader): GetTopPeers;
    }

    export interface ResetTopPeerRatingArgs {
        /** Top peer category */
        category: TypeTopPeerCategory;
        /** Peer whose rating should be reset */
        peer: EntityLike;
    }

    /**
     * Reset <a href="https://corefork.telegram.org/api/top-rating">rating</a> of top peer<br>
     * @link https://corefork.telegram.org/api/top-rating
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ResetTopPeerRating extends Request<Partial<ResetTopPeerRatingArgs>,Bool> implements ResetTopPeerRatingArgs {
        CONSTRUCTOR_id: 451113900;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.ResetTopPeerRating";
        category: TypeTopPeerCategory;
        peer: EntityLike;
        fromReader(reader: Reader): ResetTopPeerRating;
    }

    /** Delete saved contacts<br> */
    export class ResetSaved extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -2020263951;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.ResetSaved";
        fromReader(reader: Reader): ResetSaved;
    }

    /**
     * Get all contacts<br>
     * @throws {{code:403,type:"TAKEOUT_REQUIRED"}} A takeout session has to be initialized, first.
     */
    export class GetSaved extends Request<Partial<void>,TypeSavedContact[]> {
        CONSTRUCTOR_id: -2098076769;
        SUBCLASS_OF_ID: 158718959;
        classType: "request";
        className: "contacts.GetSaved";
        fromReader(reader: Reader): GetSaved;
    }

    export interface ToggleTopPeersArgs {
        /** Enable/disable */
        enabled: Bool;
    }

    /**
     * Enable/disable <a href="https://corefork.telegram.org/api/top-rating">top peers</a><br>
     * @link https://corefork.telegram.org/api/top-rating
     */
    export class ToggleTopPeers extends Request<Partial<ToggleTopPeersArgs>,Bool> implements ToggleTopPeersArgs {
        CONSTRUCTOR_id: -2062238246;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "contacts.ToggleTopPeers";
        enabled: Bool;
        fromReader(reader: Reader): ToggleTopPeers;
    }

    export interface AddContactArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Allow the other user to see our phone number? */
        addPhonePrivacyException?: true;
        /** Telegram ID of the other user */
        id: TypeInputUser;
        /** First name */
        firstName: string;
        /** Last name */
        lastName: string;
        /** User's phone number */
        phone: string;
    }

    /**
     * Add an existing telegram user as contact.<br>Use <a href="https://corefork.telegram.org/method/contacts.importContacts">contacts.importContacts</a> to add contacts by phone number, without knowing their Telegram ID.<br>
     * @link https://corefork.telegram.org/method/contacts.importContacts
     * @link https://corefork.telegram.org/method/contacts.addContact
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CONTACT_ID_INVALID"}} The provided contact ID is invalid.
     * @throws {{code:400,type:"CONTACT_NAME_EMPTY"}} Contact name empty.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class AddContact extends Request<Partial<AddContactArgs>,TypeUpdates> implements AddContactArgs {
        CONSTRUCTOR_id: -386636848;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "contacts.AddContact";
        flags: number;
        addPhonePrivacyException?: true;
        id: TypeInputUser;
        firstName: string;
        lastName: string;
        phone: string;
        fromReader(reader: Reader): AddContact;
    }

    export interface AcceptContactArgs {
        /** The user to add as contact */
        id: TypeInputUser;
    }

    /**
     * If the <a href="https://corefork.telegram.org/constructor/peerSettings">peer settings</a> of a new user allow us to add him as contact, add that user as contact<br>
     * @link https://corefork.telegram.org/constructor/peerSettings
     * @throws {{code:400,type:"CONTACT_ADD_MISSING"}} Contact to add is missing.
     * @throws {{code:400,type:"CONTACT_ID_INVALID"}} The provided contact ID is invalid.
     * @throws {{code:400,type:"CONTACT_REQ_MISSING"}} Missing contact request.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class AcceptContact extends Request<Partial<AcceptContactArgs>,TypeUpdates> implements AcceptContactArgs {
        CONSTRUCTOR_id: -130964977;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "contacts.AcceptContact";
        id: TypeInputUser;
        fromReader(reader: Reader): AcceptContact;
    }

    export interface GetLocatedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. <br>Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown. */
        background?: true;
        /** Geolocation */
        geoPoint: TypeInputGeoPoint;
        /** If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied. */
        selfExpires?: int;
    }

    /**
     * Get contacts near you<br>
     * @throws {{code:400,type:"GEO_POINT_INVALID"}} Invalid geoposition provided.
     * @throws {{code:406,type:"USERPIC_PRIVACY_REQUIRED"}} You need to disable privacy settings for your profile picture in order to make your geolocation public.
     * @throws {{code:406,type:"USERPIC_UPLOAD_REQUIRED"}} You must have a profile picture to publish your geolocation.
     */
    export class GetLocated extends Request<Partial<GetLocatedArgs>,TypeUpdates> implements GetLocatedArgs {
        CONSTRUCTOR_id: -750207932;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "contacts.GetLocated";
        flags: number;
        background?: true;
        geoPoint: TypeInputGeoPoint;
        selfExpires?: int;
        fromReader(reader: Reader): GetLocated;
    }

    export interface BlockFromRepliesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to delete the specified message as well */
        deleteMessage?: true;
        /** Whether to delete all <code>@replies</code> messages from this user as well */
        deleteHistory?: true;
        /** Whether to also report this user for spam */
        reportSpam?: true;
        /** ID of the message in the <a href="https://corefork.telegram.org/api/threads#replies">@replies</a> chat */
        msgId: MessageIDLike;
    }

    /**
     * Stop getting notifications about <a href="https://corefork.telegram.org/api/threads">thread replies</a> of a certain user in <code>@replies</code><br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class BlockFromReplies extends Request<Partial<BlockFromRepliesArgs>,TypeUpdates> implements BlockFromRepliesArgs {
        CONSTRUCTOR_id: 698914348;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "contacts.BlockFromReplies";
        flags: number;
        deleteMessage?: true;
        deleteHistory?: true;
        reportSpam?: true;
        msgId: MessageIDLike;
        fromReader(reader: Reader): BlockFromReplies;
    }

    type TypeContacts = ContactsNotModified | Contacts;
    type TypeImportedContacts = ImportedContacts;
    type TypeBlocked = Blocked | BlockedSlice;
    type TypeFound = Found;
    type TypeResolvedPeer = ResolvedPeer;
    type TypeTopPeers = TopPeersNotModified | TopPeers | TopPeersDisabled;
    }

    namespace messages {
    export interface DialogsArgs {
        /** List of chats */
        dialogs: TypeDialog[];
        /** List of last messages from each chat */
        messages: TypeMessage[];
        /** List of groups mentioned in the chats */
        chats: TypeChat[];
        /** List of users mentioned in messages and groups */
        users: TypeUser[];
    }

    /** Full list of chats with messages and auxiliary data.<br> */
    export class Dialogs extends VirtualClass<DialogsArgs> implements DialogsArgs {
        CONSTRUCTOR_id: 364538944;
        SUBCLASS_OF_ID: 236671726;
        classType: "constructor";
        className: "messages.Dialogs";
        dialogs: TypeDialog[];
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): Dialogs;
    }

    export interface DialogsSliceArgs {
        /** Total number of dialogs */
        count: int;
        /** List of dialogs */
        dialogs: TypeDialog[];
        /** List of last messages from dialogs */
        messages: TypeMessage[];
        /** List of chats mentioned in dialogs */
        chats: TypeChat[];
        /** List of users mentioned in messages and chats */
        users: TypeUser[];
    }

    /** Incomplete list of dialogs with messages and auxiliary data.<br> */
    export class DialogsSlice extends VirtualClass<DialogsSliceArgs> implements DialogsSliceArgs {
        CONSTRUCTOR_id: 1910543603;
        SUBCLASS_OF_ID: 236671726;
        classType: "constructor";
        className: "messages.DialogsSlice";
        count: int;
        dialogs: TypeDialog[];
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): DialogsSlice;
    }

    export interface DialogsNotModifiedArgs {
        /** Number of dialogs found server-side by the query */
        count: int;
    }

    /** Dialogs haven't changed<br> */
    export class DialogsNotModified extends VirtualClass<DialogsNotModifiedArgs> implements DialogsNotModifiedArgs {
        CONSTRUCTOR_id: -253500010;
        SUBCLASS_OF_ID: 236671726;
        classType: "constructor";
        className: "messages.DialogsNotModified";
        count: int;
        fromReader(reader: Reader): DialogsNotModified;
    }

    export interface MessagesArgs {
        /** List of messages */
        messages: TypeMessage[];
        /** List of chats mentioned in dialogs */
        chats: TypeChat[];
        /** List of users mentioned in messages and chats */
        users: TypeUser[];
    }

    /** Full list of messages with auxilary data.<br> */
    export class Messages extends VirtualClass<MessagesArgs> implements MessagesArgs {
        CONSTRUCTOR_id: -1938715001;
        SUBCLASS_OF_ID: 3568569182;
        classType: "constructor";
        className: "messages.Messages";
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): Messages;
    }

    export interface MessagesSliceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, indicates that the results may be inexact */
        inexact?: true;
        /** Total number of messages in the list */
        count: int;
        /** Rate to use in the <code>offset_rate</code> parameter in the next call to <a href="https://corefork.telegram.org/method/messages.searchGlobal">messages.searchGlobal</a> */
        nextRate?: int;
        /** Indicates the absolute position of <code>messages[0]</code> within the total result set with count <code>count</code>. <br>This is useful, for example, if the result was fetched using <code>offset_id</code>, and we need to display a <code>progress/total</code> counter (like <code>photo 134 of 200</code>, for all media in a chat, we could simply use <code>photo ${offset_id_offset} of ${count}</code>. */
        offsetIdOffset?: int;
        /** List of messages */
        messages: TypeMessage[];
        /** List of chats mentioned in messages */
        chats: TypeChat[];
        /** List of users mentioned in messages and chats */
        users: TypeUser[];
    }

    /**
     * Incomplete list of messages and auxiliary data.<br>
     * @link https://corefork.telegram.org/method/messages.searchGlobal
     */
    export class MessagesSlice extends VirtualClass<MessagesSliceArgs> implements MessagesSliceArgs {
        CONSTRUCTOR_id: 978610270;
        SUBCLASS_OF_ID: 3568569182;
        classType: "constructor";
        className: "messages.MessagesSlice";
        flags: number;
        inexact?: true;
        count: int;
        nextRate?: int;
        offsetIdOffset?: int;
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): MessagesSlice;
    }

    export interface ChannelMessagesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, returned results may be inexact */
        inexact?: true;
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** Total number of results were found server-side (may not be all included here) */
        count: int;
        /** Indicates the absolute position of <code>messages[0]</code> within the total result set with count <code>count</code>. <br>This is useful, for example, if the result was fetched using <code>offset_id</code>, and we need to display a <code>progress/total</code> counter (like <code>photo 134 of 200</code>, for all media in a chat, we could simply use <code>photo ${offset_id_offset} of ${count}</code>. */
        offsetIdOffset?: int;
        /** Found messages */
        messages: TypeMessage[];
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /**
     * Channel messages<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class ChannelMessages extends VirtualClass<ChannelMessagesArgs> implements ChannelMessagesArgs {
        CONSTRUCTOR_id: 1682413576;
        SUBCLASS_OF_ID: 3568569182;
        classType: "constructor";
        className: "messages.ChannelMessages";
        flags: number;
        inexact?: true;
        pts: int;
        count: int;
        offsetIdOffset?: int;
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChannelMessages;
    }

    export interface MessagesNotModifiedArgs {
        /** Number of results found server-side by the given query */
        count: int;
    }

    /** No new messages matching the query were found<br> */
    export class MessagesNotModified extends VirtualClass<MessagesNotModifiedArgs> implements MessagesNotModifiedArgs {
        CONSTRUCTOR_id: 1951620897;
        SUBCLASS_OF_ID: 3568569182;
        classType: "constructor";
        className: "messages.MessagesNotModified";
        count: int;
        fromReader(reader: Reader): MessagesNotModified;
    }

    export interface ChatsArgs {
        /** List of chats */
        chats: TypeChat[];
    }

    /** List of chats with auxiliary data.<br> */
    export class Chats extends VirtualClass<ChatsArgs> implements ChatsArgs {
        CONSTRUCTOR_id: 1694474197;
        SUBCLASS_OF_ID: 2580925204;
        classType: "constructor";
        className: "messages.Chats";
        chats: TypeChat[];
        fromReader(reader: Reader): Chats;
    }

    export interface ChatsSliceArgs {
        /** Total number of results that were found server-side (not all are included in <code>chats</code>) */
        count: int;
        /** Chats */
        chats: TypeChat[];
    }

    /**
     * Partial list of chats, more would have to be fetched with <a href="https://corefork.telegram.org/api/offsets">pagination</a><br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class ChatsSlice extends VirtualClass<ChatsSliceArgs> implements ChatsSliceArgs {
        CONSTRUCTOR_id: -1663561404;
        SUBCLASS_OF_ID: 2580925204;
        classType: "constructor";
        className: "messages.ChatsSlice";
        count: int;
        chats: TypeChat[];
        fromReader(reader: Reader): ChatsSlice;
    }

    export interface ChatFullArgs {
        /** Extended info on a chat */
        fullChat: TypeChatFull;
        /** List containing basic info on chat */
        chats: TypeChat[];
        /** List of users mentioned above */
        users: TypeUser[];
    }

    /** Extended info on chat and auxiliary data.<br> */
    export class ChatFull extends VirtualClass<ChatFullArgs> implements ChatFullArgs {
        CONSTRUCTOR_id: -438840932;
        SUBCLASS_OF_ID: 576344329;
        classType: "constructor";
        className: "messages.ChatFull";
        fullChat: TypeChatFull;
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChatFull;
    }

    export interface AffectedHistoryArgs {
        /** Number of events occured in a text box */
        pts: int;
        /** Number of affected events */
        ptsCount: int;
        /** If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease */
        offset: int;
    }

    /** Affected part of communication history with the user or in a chat.<br> */
    export class AffectedHistory extends VirtualClass<AffectedHistoryArgs> implements AffectedHistoryArgs {
        CONSTRUCTOR_id: -1269012015;
        SUBCLASS_OF_ID: 743031062;
        classType: "constructor";
        className: "messages.AffectedHistory";
        pts: int;
        ptsCount: int;
        offset: int;
        fromReader(reader: Reader): AffectedHistory;
    }

    export interface DhConfigNotModifiedArgs {
        /** Random sequence of bytes of assigned length */
        random: bytes;
    }

    /** Configuring parameters did not change.<br> */
    export class DhConfigNotModified extends VirtualClass<DhConfigNotModifiedArgs> implements DhConfigNotModifiedArgs {
        CONSTRUCTOR_id: -1058912715;
        SUBCLASS_OF_ID: 3834178955;
        classType: "constructor";
        className: "messages.DhConfigNotModified";
        random: bytes;
        fromReader(reader: Reader): DhConfigNotModified;
    }

    export interface DhConfigArgs {
        /** New value <strong>prime</strong>, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> */
        g: int;
        /** New value <strong>primitive root</strong>, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> */
        p: bytes;
        /** Vestion of set of parameters */
        version: int;
        /** Random sequence of bytes of assigned length */
        random: bytes;
    }

    /** New set of configuring parameters.<br> */
    export class DhConfig extends VirtualClass<DhConfigArgs> implements DhConfigArgs {
        CONSTRUCTOR_id: 740433629;
        SUBCLASS_OF_ID: 3834178955;
        classType: "constructor";
        className: "messages.DhConfig";
        g: int;
        p: bytes;
        version: int;
        random: bytes;
        fromReader(reader: Reader): DhConfig;
    }

    export interface SentEncryptedMessageArgs {
        /** Date of sending */
        date: int;
    }

    /** Message without file attachemts sent to an encrypted file.<br> */
    export class SentEncryptedMessage extends VirtualClass<SentEncryptedMessageArgs> implements SentEncryptedMessageArgs {
        CONSTRUCTOR_id: 1443858741;
        SUBCLASS_OF_ID: 3382591056;
        classType: "constructor";
        className: "messages.SentEncryptedMessage";
        date: int;
        fromReader(reader: Reader): SentEncryptedMessage;
    }

    export interface SentEncryptedFileArgs {
        /** Sending date */
        date: int;
        /** Attached file */
        file: TypeEncryptedFile;
    }

    /** Message with a file enclosure sent to a protected chat<br> */
    export class SentEncryptedFile extends VirtualClass<SentEncryptedFileArgs> implements SentEncryptedFileArgs {
        CONSTRUCTOR_id: -1802240206;
        SUBCLASS_OF_ID: 3382591056;
        classType: "constructor";
        className: "messages.SentEncryptedFile";
        date: int;
        file: TypeEncryptedFile;
        fromReader(reader: Reader): SentEncryptedFile;
    }

    /** No new stickers were found for the given query<br> */
    export class StickersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -244016606;
        SUBCLASS_OF_ID: 3611015646;
        classType: "constructor";
        className: "messages.StickersNotModified";
        fromReader(reader: Reader): StickersNotModified;
    }

    export interface StickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Stickers */
        stickers: TypeDocument[];
    }

    /**
     * Found stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class Stickers extends VirtualClass<StickersArgs> implements StickersArgs {
        CONSTRUCTOR_id: -463889475;
        SUBCLASS_OF_ID: 3611015646;
        classType: "constructor";
        className: "messages.Stickers";
        hash: int;
        stickers: TypeDocument[];
        fromReader(reader: Reader): Stickers;
    }

    /** Info about all installed stickers hasn't changed<br> */
    export class AllStickersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -395967805;
        SUBCLASS_OF_ID: 1166231593;
        classType: "constructor";
        className: "messages.AllStickersNotModified";
        fromReader(reader: Reader): AllStickersNotModified;
    }

    export interface AllStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** All stickersets */
        sets: TypeStickerSet[];
    }

    /**
     * Info about all installed stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class AllStickers extends VirtualClass<AllStickersArgs> implements AllStickersArgs {
        CONSTRUCTOR_id: -302170017;
        SUBCLASS_OF_ID: 1166231593;
        classType: "constructor";
        className: "messages.AllStickers";
        hash: int;
        sets: TypeStickerSet[];
        fromReader(reader: Reader): AllStickers;
    }

    export interface AffectedMessagesArgs {
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
    }

    /**
     * Events affected by operation<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class AffectedMessages extends VirtualClass<AffectedMessagesArgs> implements AffectedMessagesArgs {
        CONSTRUCTOR_id: -2066640507;
        SUBCLASS_OF_ID: 3469983854;
        classType: "constructor";
        className: "messages.AffectedMessages";
        pts: int;
        ptsCount: int;
        fromReader(reader: Reader): AffectedMessages;
    }

    export interface StickerSetArgs {
        /** The stickerset */
        set: TypeStickerSet;
        /** Emoji info for stickers */
        packs: TypeStickerPack[];
        /** Stickers in stickerset */
        documents: TypeDocument[];
    }

    /** Stickerset and stickers inside it<br> */
    export class StickerSet extends VirtualClass<StickerSetArgs> implements StickerSetArgs {
        CONSTRUCTOR_id: -1240849242;
        SUBCLASS_OF_ID: 2607827546;
        classType: "constructor";
        className: "messages.StickerSet";
        set: TypeStickerSet;
        packs: TypeStickerPack[];
        documents: TypeDocument[];
        fromReader(reader: Reader): StickerSet;
    }

    /** No new saved gifs were found<br> */
    export class SavedGifsNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -402498398;
        SUBCLASS_OF_ID: 2794152437;
        classType: "constructor";
        className: "messages.SavedGifsNotModified";
        fromReader(reader: Reader): SavedGifsNotModified;
    }

    export interface SavedGifsArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** List of saved gifs */
        gifs: TypeDocument[];
    }

    /**
     * Saved gifs<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class SavedGifs extends VirtualClass<SavedGifsArgs> implements SavedGifsArgs {
        CONSTRUCTOR_id: 772213157;
        SUBCLASS_OF_ID: 2794152437;
        classType: "constructor";
        className: "messages.SavedGifs";
        hash: int;
        gifs: TypeDocument[];
        fromReader(reader: Reader): SavedGifs;
    }

    export interface BotResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the result is a picture gallery */
        gallery?: true;
        /** Query ID */
        queryId: long;
        /** The next offset to use when navigating through results */
        nextOffset?: string;
        /** Whether the bot requested the user to message him in private */
        switchPm?: TypeInlineBotSwitchPM;
        /** The results */
        results: TypeBotInlineResult[];
        /** Caching validity of the results */
        cacheTime: int;
        /** Users mentioned in the results */
        users: TypeUser[];
    }

    /** Result of a query to an inline bot<br> */
    export class BotResults extends VirtualClass<BotResultsArgs> implements BotResultsArgs {
        CONSTRUCTOR_id: -1803769784;
        SUBCLASS_OF_ID: 1054136777;
        classType: "constructor";
        className: "messages.BotResults";
        flags: number;
        gallery?: true;
        queryId: long;
        nextOffset?: string;
        switchPm?: TypeInlineBotSwitchPM;
        results: TypeBotInlineResult[];
        cacheTime: int;
        users: TypeUser[];
        fromReader(reader: Reader): BotResults;
    }

    export interface BotCallbackAnswerArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether an alert should be shown to the user instead of a toast notification */
        alert?: true;
        /** Whether an URL is present */
        hasUrl?: true;
        /** Whether to show games in WebView or in native UI. */
        nativeUi?: true;
        /** Alert to show */
        message?: string;
        /** URL to open */
        url?: string;
        /** For how long should this answer be cached */
        cacheTime: int;
    }

    /** Callback answer sent by the bot in response to a button press<br> */
    export class BotCallbackAnswer extends VirtualClass<BotCallbackAnswerArgs> implements BotCallbackAnswerArgs {
        CONSTRUCTOR_id: 911761060;
        SUBCLASS_OF_ID: 1817039244;
        classType: "constructor";
        className: "messages.BotCallbackAnswer";
        flags: number;
        alert?: true;
        hasUrl?: true;
        nativeUi?: true;
        message?: string;
        url?: string;
        cacheTime: int;
        fromReader(reader: Reader): BotCallbackAnswer;
    }

    export interface MessageEditDataArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Media caption, if the specified media's caption can be edited */
        caption?: true;
    }

    /** Message edit data for media<br> */
    export class MessageEditData extends VirtualClass<MessageEditDataArgs> implements MessageEditDataArgs {
        CONSTRUCTOR_id: 649453030;
        SUBCLASS_OF_ID: 4215772317;
        classType: "constructor";
        className: "messages.MessageEditData";
        flags: number;
        caption?: true;
        fromReader(reader: Reader): MessageEditData;
    }

    export interface PeerDialogsArgs {
        /** Dialog info */
        dialogs: TypeDialog[];
        /** Messages mentioned in dialog info */
        messages: TypeMessage[];
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
        /** Current <a href="https://corefork.telegram.org/api/updates">update state of dialog</a> */
        state: updates.TypeState;
    }

    /**
     * Dialog info of multiple peers<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class PeerDialogs extends VirtualClass<PeerDialogsArgs> implements PeerDialogsArgs {
        CONSTRUCTOR_id: 863093588;
        SUBCLASS_OF_ID: 986120498;
        classType: "constructor";
        className: "messages.PeerDialogs";
        dialogs: TypeDialog[];
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        state: updates.TypeState;
        fromReader(reader: Reader): PeerDialogs;
    }

    export interface FeaturedStickersNotModifiedArgs {
        /** Total number of featured stickers */
        count: int;
    }

    /** Featured stickers haven't changed<br> */
    export class FeaturedStickersNotModified extends VirtualClass<FeaturedStickersNotModifiedArgs> implements FeaturedStickersNotModifiedArgs {
        CONSTRUCTOR_id: -958657434;
        SUBCLASS_OF_ID: 638891810;
        classType: "constructor";
        className: "messages.FeaturedStickersNotModified";
        count: int;
        fromReader(reader: Reader): FeaturedStickersNotModified;
    }

    export interface FeaturedStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Total number of featured stickers */
        count: int;
        /** Featured stickersets */
        sets: TypeStickerSetCovered[];
        /** IDs of new featured stickersets */
        unread: long[];
    }

    /**
     * Featured stickersets<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class FeaturedStickers extends VirtualClass<FeaturedStickersArgs> implements FeaturedStickersArgs {
        CONSTRUCTOR_id: -1230257343;
        SUBCLASS_OF_ID: 638891810;
        classType: "constructor";
        className: "messages.FeaturedStickers";
        hash: int;
        count: int;
        sets: TypeStickerSetCovered[];
        unread: long[];
        fromReader(reader: Reader): FeaturedStickers;
    }

    /** No new recent sticker was found<br> */
    export class RecentStickersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: 186120336;
        SUBCLASS_OF_ID: 4151281283;
        classType: "constructor";
        className: "messages.RecentStickersNotModified";
        fromReader(reader: Reader): RecentStickersNotModified;
    }

    export interface RecentStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Emojis associated to stickers */
        packs: TypeStickerPack[];
        /** Recent stickers */
        stickers: TypeDocument[];
        /** When was each sticker last used */
        dates: int[];
    }

    /**
     * Recently used stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class RecentStickers extends VirtualClass<RecentStickersArgs> implements RecentStickersArgs {
        CONSTRUCTOR_id: 586395571;
        SUBCLASS_OF_ID: 4151281283;
        classType: "constructor";
        className: "messages.RecentStickers";
        hash: int;
        packs: TypeStickerPack[];
        stickers: TypeDocument[];
        dates: int[];
        fromReader(reader: Reader): RecentStickers;
    }

    export interface ArchivedStickersArgs {
        /** Number of archived stickers */
        count: int;
        /** Archived stickersets */
        sets: TypeStickerSetCovered[];
    }

    /** Archived stickersets<br> */
    export class ArchivedStickers extends VirtualClass<ArchivedStickersArgs> implements ArchivedStickersArgs {
        CONSTRUCTOR_id: 1338747336;
        SUBCLASS_OF_ID: 1922488177;
        classType: "constructor";
        className: "messages.ArchivedStickers";
        count: int;
        sets: TypeStickerSetCovered[];
        fromReader(reader: Reader): ArchivedStickers;
    }

    /** The stickerset was installed successfully<br> */
    export class StickerSetInstallResultSuccess extends VirtualClass<void> {
        CONSTRUCTOR_id: 946083368;
        SUBCLASS_OF_ID: 1741373416;
        classType: "constructor";
        className: "messages.StickerSetInstallResultSuccess";
        fromReader(reader: Reader): StickerSetInstallResultSuccess;
    }

    export interface StickerSetInstallResultArchiveArgs {
        /** Archived stickersets */
        sets: TypeStickerSetCovered[];
    }

    /** The stickerset was installed, but since there are too many stickersets some were archived<br> */
    export class StickerSetInstallResultArchive extends VirtualClass<StickerSetInstallResultArchiveArgs> implements StickerSetInstallResultArchiveArgs {
        CONSTRUCTOR_id: 904138920;
        SUBCLASS_OF_ID: 1741373416;
        classType: "constructor";
        className: "messages.StickerSetInstallResultArchive";
        sets: TypeStickerSetCovered[];
        fromReader(reader: Reader): StickerSetInstallResultArchive;
    }

    export interface HighScoresArgs {
        /** Highscores */
        scores: TypeHighScore[];
        /** Users, associated to the highscores */
        users: TypeUser[];
    }

    /** Highscores in a game<br> */
    export class HighScores extends VirtualClass<HighScoresArgs> implements HighScoresArgs {
        CONSTRUCTOR_id: -1707344487;
        SUBCLASS_OF_ID: 1825412605;
        classType: "constructor";
        className: "messages.HighScores";
        scores: TypeHighScore[];
        users: TypeUser[];
        fromReader(reader: Reader): HighScores;
    }

    /** No new favorited stickers were found<br> */
    export class FavedStickersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -1634752813;
        SUBCLASS_OF_ID: 2389929913;
        classType: "constructor";
        className: "messages.FavedStickersNotModified";
        fromReader(reader: Reader): FavedStickersNotModified;
    }

    export interface FavedStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Emojis associated to stickers */
        packs: TypeStickerPack[];
        /** Favorited stickers */
        stickers: TypeDocument[];
    }

    /**
     * Favorited stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class FavedStickers extends VirtualClass<FavedStickersArgs> implements FavedStickersArgs {
        CONSTRUCTOR_id: -209768682;
        SUBCLASS_OF_ID: 2389929913;
        classType: "constructor";
        className: "messages.FavedStickers";
        hash: int;
        packs: TypeStickerPack[];
        stickers: TypeDocument[];
        fromReader(reader: Reader): FavedStickers;
    }

    /** No further results were found<br> */
    export class FoundStickerSetsNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: 223655517;
        SUBCLASS_OF_ID: 68023137;
        classType: "constructor";
        className: "messages.FoundStickerSetsNotModified";
        fromReader(reader: Reader): FoundStickerSetsNotModified;
    }

    export interface FoundStickerSetsArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Found stickersets */
        sets: TypeStickerSetCovered[];
    }

    /**
     * Found stickersets<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class FoundStickerSets extends VirtualClass<FoundStickerSetsArgs> implements FoundStickerSetsArgs {
        CONSTRUCTOR_id: 1359533640;
        SUBCLASS_OF_ID: 68023137;
        classType: "constructor";
        className: "messages.FoundStickerSets";
        hash: int;
        sets: TypeStickerSetCovered[];
        fromReader(reader: Reader): FoundStickerSets;
    }

    export interface SearchCounterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, the results may be inexact */
        inexact?: true;
        /** Provided message filter */
        filter: TypeMessagesFilter;
        /** Number of results that were found server-side */
        count: int;
    }

    /**
     * Indicates how many results would be found by a <a href="https://corefork.telegram.org/method/messages.search">messages.search</a> call with the same parameters<br>
     * @link https://corefork.telegram.org/method/messages.search
     */
    export class SearchCounter extends VirtualClass<SearchCounterArgs> implements SearchCounterArgs {
        CONSTRUCTOR_id: -398136321;
        SUBCLASS_OF_ID: 3601317794;
        classType: "constructor";
        className: "messages.SearchCounter";
        flags: number;
        inexact?: true;
        filter: TypeMessagesFilter;
        count: int;
        fromReader(reader: Reader): SearchCounter;
    }

    export interface InactiveChatsArgs {
        /** When was the chat last active */
        dates: int[];
        /** Chat list */
        chats: TypeChat[];
        /** Users mentioned in the chat list */
        users: TypeUser[];
    }

    /** Inactive chat list<br> */
    export class InactiveChats extends VirtualClass<InactiveChatsArgs> implements InactiveChatsArgs {
        CONSTRUCTOR_id: -1456996667;
        SUBCLASS_OF_ID: 2348013524;
        classType: "constructor";
        className: "messages.InactiveChats";
        dates: int[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): InactiveChats;
    }

    export interface VotesListArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Total number of votes for all options (or only for the chosen <code>option</code>, if provided to <a href="https://corefork.telegram.org/method/messages.getPollVotes">messages.getPollVotes</a>) */
        count: int;
        /** Vote info for each user */
        votes: TypeMessageUserVote[];
        /** Info about users that voted in the poll */
        users: TypeUser[];
        /** Offset to use with the next <a href="https://corefork.telegram.org/method/messages.getPollVotes">messages.getPollVotes</a> request, empty string if no more results are available. */
        nextOffset?: string;
    }

    /**
     * How users voted in a poll<br>
     * @link https://corefork.telegram.org/method/messages.getPollVotes
     */
    export class VotesList extends VirtualClass<VotesListArgs> implements VotesListArgs {
        CONSTRUCTOR_id: 136574537;
        SUBCLASS_OF_ID: 3256457349;
        classType: "constructor";
        className: "messages.VotesList";
        flags: number;
        count: int;
        votes: TypeMessageUserVote[];
        users: TypeUser[];
        nextOffset?: string;
        fromReader(reader: Reader): VotesList;
    }

    export interface MessageViewsArgs {
        /** View, forward counter + info about replies */
        views: TypeMessageViews[];
        /** Chats mentioned in constructor */
        chats: TypeChat[];
        /** Users mentioned in constructor */
        users: TypeUser[];
    }

    /** View, forward counter + info about replies<br> */
    export class MessageViews extends VirtualClass<MessageViewsArgs> implements MessageViewsArgs {
        CONSTRUCTOR_id: -1228606141;
        SUBCLASS_OF_ID: 2947935132;
        classType: "constructor";
        className: "messages.MessageViews";
        views: TypeMessageViews[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): MessageViews;
    }

    export interface DiscussionMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Discussion messages */
        messages: TypeMessage[];
        /** Message ID of latest reply in this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        maxId?: int;
        /** Message ID of latest read incoming message in this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        readInboxMaxId?: int;
        /** Message ID of latest read outgoing message in this <a href="https://corefork.telegram.org/api/threads">thread</a> */
        readOutboxMaxId?: int;
        /** Number of unread messages */
        chats: TypeChat[];
        /** Chats mentioned in constructor */
        users: TypeUser[];
    }

    /**
     * Information about a <a href="https://corefork.telegram.org/api/threads">message thread</a><br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     */
    export class DiscussionMessage extends VirtualClass<DiscussionMessageArgs> implements DiscussionMessageArgs {
        CONSTRUCTOR_id: -170029155;
        SUBCLASS_OF_ID: 1408820200;
        classType: "constructor";
        className: "messages.DiscussionMessage";
        flags: number;
        messages: TypeMessage[];
        maxId?: int;
        readInboxMaxId?: int;
        readOutboxMaxId?: int;
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): DiscussionMessage;
    }

    export interface HistoryImportArgs {
        /** <a href="https://corefork.telegram.org/api/import">History import ID</a> */
        id: long;
    }

    /**
     * ID of a specific <a href="https://corefork.telegram.org/api/import">chat import session, click here for more info »</a>.<br>
     * @link https://corefork.telegram.org/api/import
     */
    export class HistoryImport extends VirtualClass<HistoryImportArgs> implements HistoryImportArgs {
        CONSTRUCTOR_id: 375566091;
        SUBCLASS_OF_ID: 2978723082;
        classType: "constructor";
        className: "messages.HistoryImport";
        id: long;
        fromReader(reader: Reader): HistoryImport;
    }

    export interface HistoryImportParsedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The chat export file was generated from a private chat. */
        pm?: true;
        /** The chat export file was generated from a group chat. */
        group?: true;
        /** Title of the chat. */
        title?: string;
    }

    /**
     * Contains information about a chat export file <a href="https://corefork.telegram.org/api/import">generated by a foreign chat app, click here for more info</a>.<br>
     * If neither the <code>pm</code> or <code>group</code> flags are set, the specified chat export was generated from a chat of unknown type.<br>
     * @link https://corefork.telegram.org/api/import
     */
    export class HistoryImportParsed extends VirtualClass<HistoryImportParsedArgs> implements HistoryImportParsedArgs {
        CONSTRUCTOR_id: 1578088377;
        SUBCLASS_OF_ID: 1538421259;
        classType: "constructor";
        className: "messages.HistoryImportParsed";
        flags: number;
        pm?: true;
        group?: true;
        title?: string;
        fromReader(reader: Reader): HistoryImportParsed;
    }

    export interface AffectedFoundMessagesArgs {
        /** <a href="https://corefork.telegram.org/api/updates">Event count after generation</a> */
        pts: int;
        /** <a href="https://corefork.telegram.org/api/updates">Number of events that were generated</a> */
        ptsCount: int;
        /** If bigger than zero, the request must be repeated to remove more messages */
        offset: int;
        /** Affected message IDs */
        messages: int[];
    }

    /**
     * Messages found and affected by changes<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class AffectedFoundMessages extends VirtualClass<AffectedFoundMessagesArgs> implements AffectedFoundMessagesArgs {
        CONSTRUCTOR_id: -275956116;
        SUBCLASS_OF_ID: 4162282798;
        classType: "constructor";
        className: "messages.AffectedFoundMessages";
        pts: int;
        ptsCount: int;
        offset: int;
        messages: int[];
        fromReader(reader: Reader): AffectedFoundMessages;
    }

    export interface ExportedChatInvitesArgs {
        /** Number of invites exported by the admin */
        count: int;
        /** Exported invites */
        invites: TypeExportedChatInvite[];
        /** Info about the admin */
        users: TypeUser[];
    }

    /** Info about chat invites exported by a certain admin.<br> */
    export class ExportedChatInvites extends VirtualClass<ExportedChatInvitesArgs> implements ExportedChatInvitesArgs {
        CONSTRUCTOR_id: -1111085620;
        SUBCLASS_OF_ID: 1614624881;
        classType: "constructor";
        className: "messages.ExportedChatInvites";
        count: int;
        invites: TypeExportedChatInvite[];
        users: TypeUser[];
        fromReader(reader: Reader): ExportedChatInvites;
    }

    export interface ExportedChatInviteArgs {
        /** Info about the chat invite */
        invite: TypeExportedChatInvite;
        /** Mentioned users */
        users: TypeUser[];
    }

    /** Info about a chat invite<br> */
    export class ExportedChatInvite extends VirtualClass<ExportedChatInviteArgs> implements ExportedChatInviteArgs {
        CONSTRUCTOR_id: 410107472;
        SUBCLASS_OF_ID: 2195510474;
        classType: "constructor";
        className: "messages.ExportedChatInvite";
        invite: TypeExportedChatInvite;
        users: TypeUser[];
        fromReader(reader: Reader): ExportedChatInvite;
    }

    export interface ExportedChatInviteReplacedArgs {
        /** The replaced chat invite */
        invite: TypeExportedChatInvite;
        /** The invite that replaces the previous invite */
        newInvite: TypeExportedChatInvite;
        /** Mentioned users */
        users: TypeUser[];
    }

    /** The specified chat invite was replaced with another one<br> */
    export class ExportedChatInviteReplaced extends VirtualClass<ExportedChatInviteReplacedArgs> implements ExportedChatInviteReplacedArgs {
        CONSTRUCTOR_id: 572915951;
        SUBCLASS_OF_ID: 2195510474;
        classType: "constructor";
        className: "messages.ExportedChatInviteReplaced";
        invite: TypeExportedChatInvite;
        newInvite: TypeExportedChatInvite;
        users: TypeUser[];
        fromReader(reader: Reader): ExportedChatInviteReplaced;
    }

    export interface ChatInviteImportersArgs {
        /** Number of users that joined */
        count: int;
        /** The users that joined */
        importers: TypeChatInviteImporter[];
        /** The users that joined */
        users: TypeUser[];
    }

    /** Info about the users that joined the chat using a specific chat invite<br> */
    export class ChatInviteImporters extends VirtualClass<ChatInviteImportersArgs> implements ChatInviteImportersArgs {
        CONSTRUCTOR_id: -2118733814;
        SUBCLASS_OF_ID: 3653012134;
        classType: "constructor";
        className: "messages.ChatInviteImporters";
        count: int;
        importers: TypeChatInviteImporter[];
        users: TypeUser[];
        fromReader(reader: Reader): ChatInviteImporters;
    }

    export interface ChatAdminsWithInvitesArgs {
        /** Info about chat invites generated by admins. */
        admins: TypeChatAdminWithInvites[];
        /** Mentioned users */
        users: TypeUser[];
    }

    /** Info about chat invites generated by admins.<br> */
    export class ChatAdminsWithInvites extends VirtualClass<ChatAdminsWithInvitesArgs> implements ChatAdminsWithInvitesArgs {
        CONSTRUCTOR_id: -1231326505;
        SUBCLASS_OF_ID: 2405149995;
        classType: "constructor";
        className: "messages.ChatAdminsWithInvites";
        admins: TypeChatAdminWithInvites[];
        users: TypeUser[];
        fromReader(reader: Reader): ChatAdminsWithInvites;
    }

    export interface CheckedHistoryImportPeerArgs {
        /** A confirmation text to be shown to the user, upon <a href="https://corefork.telegram.org/api/import">importing chat history »</a>. */
        confirmText: string;
    }

    /**
     * Contains a confirmation text to be shown to the user, upon <a href="https://corefork.telegram.org/api/import">importing chat history, click here for more info »</a>.<br>
     * @link https://corefork.telegram.org/api/import
     */
    export class CheckedHistoryImportPeer extends VirtualClass<CheckedHistoryImportPeerArgs> implements CheckedHistoryImportPeerArgs {
        CONSTRUCTOR_id: -1571952873;
        SUBCLASS_OF_ID: 3091968823;
        classType: "constructor";
        className: "messages.CheckedHistoryImportPeer";
        confirmText: string;
        fromReader(reader: Reader): CheckedHistoryImportPeer;
    }

    export interface GetMessagesArgs {
        /** Message ID list */
        id: TypeInputMessage[];
    }

    /** Returns the list of messages by their IDs.<br> */
    export class GetMessages extends Request<Partial<GetMessagesArgs>,messages.TypeMessages> implements GetMessagesArgs {
        CONSTRUCTOR_id: 1673946374;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetMessages";
        id: TypeInputMessage[];
        fromReader(reader: Reader): GetMessages;
    }

    export interface GetDialogsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Exclude pinned dialogs */
        excludePinned?: true;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetDate: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offset peer for pagination</a> */
        offsetPeer: EntityLike;
        /** Number of list elements to be returned */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Returns the current user dialog list.<br>
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"FOLDER_ID_INVALID"}} Invalid folder ID.
     * @throws {{code:400,type:"OFFSET_PEER_ID_INVALID"}} The provided offset peer is invalid.
     */
    export class GetDialogs extends Request<Partial<GetDialogsArgs>,messages.TypeDialogs> implements GetDialogsArgs {
        CONSTRUCTOR_id: -1594999949;
        SUBCLASS_OF_ID: 236671726;
        classType: "request";
        className: "messages.GetDialogs";
        flags: number;
        excludePinned?: true;
        folderId?: int;
        offsetDate: int;
        offsetId: int;
        offsetPeer: EntityLike;
        limit: int;
        hash: int;
        fromReader(reader: Reader): GetDialogs;
    }

    export interface GetHistoryArgs {
        /** Target peer */
        peer: EntityLike;
        /** Only return messages starting from the specified message ID */
        offsetId: int;
        /** Only return messages sent before the specified date */
        offsetDate: int;
        /** Number of list elements to be skipped, negative values are also accepted. */
        addOffset: int;
        /** Number of results to return */
        limit: int;
        /** If a positive value was transferred, the method will return only messages with IDs less than <strong>max_id</strong> */
        maxId: int;
        /** If a positive value was transferred, the method will return only messages with IDs more than <strong>min_id</strong> */
        minId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Result hash</a> */
        hash: int;
    }

    /**
     * Gets back the conversation history with one interlocutor / within a chat<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetHistory extends Request<Partial<GetHistoryArgs>,messages.TypeMessages> implements GetHistoryArgs {
        CONSTRUCTOR_id: -591691168;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetHistory";
        peer: EntityLike;
        offsetId: int;
        offsetDate: int;
        addOffset: int;
        limit: int;
        maxId: int;
        minId: int;
        hash: int;
        fromReader(reader: Reader): GetHistory;
    }

    export interface SearchArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** User or chat, histories with which are searched, or <a href="https://corefork.telegram.org/constructor/inputPeerEmpty">(inputPeerEmpty)</a> constructor for global search */
        peer: EntityLike;
        /** Text search request */
        q: string;
        /** Only return messages sent by the specified user ID */
        fromId?: EntityLike;
        /** <a href="https://corefork.telegram.org/api/threads">Thread ID</a> */
        topMsgId?: MessageIDLike;
        /** Filter to return only specified message types */
        filter: TypeMessagesFilter;
        /** If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned */
        minDate: int;
        /** If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned */
        maxDate: int;
        /** Only return messages starting from the specified message ID */
        offsetId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Additional offset</a> */
        addOffset: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Number of results to return</a> */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Maximum message ID to return</a> */
        maxId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Minimum message ID to return</a> */
        minId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Hash</a> */
        hash: int;
    }

    /**
     * Gets back found messages<br>
     * @link https://corefork.telegram.org/constructor/inputPeerEmpty
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"FROM_PEER_INVALID"}} The specified from_id is invalid.
     * @throws {{code:400,type:"INPUT_FILTER_INVALID"}} The specified filter is invalid.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PEER_ID_NOT_SUPPORTED"}} The provided peer ID is not supported.
     * @throws {{code:400,type:"SEARCH_QUERY_EMPTY"}} The search query is empty.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class Search extends Request<Partial<SearchArgs>,messages.TypeMessages> implements SearchArgs {
        CONSTRUCTOR_id: 204812012;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.Search";
        flags: number;
        peer: EntityLike;
        q: string;
        fromId?: EntityLike;
        topMsgId?: MessageIDLike;
        filter: TypeMessagesFilter;
        minDate: int;
        maxDate: int;
        offsetId: int;
        addOffset: int;
        limit: int;
        maxId: int;
        minId: int;
        hash: int;
        fromReader(reader: Reader): Search;
    }

    export interface ReadHistoryArgs {
        /** Target user or group */
        peer: EntityLike;
        /** If a positive value is passed, only messages with identifiers less or equal than the given one will be read */
        maxId: int;
    }

    /**
     * Marks message history as read.<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReadHistory extends Request<Partial<ReadHistoryArgs>,messages.TypeAffectedMessages> implements ReadHistoryArgs {
        CONSTRUCTOR_id: 238054714;
        SUBCLASS_OF_ID: 3469983854;
        classType: "request";
        className: "messages.ReadHistory";
        peer: EntityLike;
        maxId: int;
        fromReader(reader: Reader): ReadHistory;
    }

    export interface DeleteHistoryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Just clear history for the current user, without actually removing messages for every chat user */
        justClear?: true;
        /** Whether to delete the message history for all chat participants */
        revoke?: true;
        /** User or chat, communication history of which will be deleted */
        peer: EntityLike;
        /** Maximum ID of message to delete */
        maxId: int;
    }

    /**
     * Deletes communication history.<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class DeleteHistory extends Request<Partial<DeleteHistoryArgs>,messages.TypeAffectedHistory> implements DeleteHistoryArgs {
        CONSTRUCTOR_id: 469850889;
        SUBCLASS_OF_ID: 743031062;
        classType: "request";
        className: "messages.DeleteHistory";
        flags: number;
        justClear?: true;
        revoke?: true;
        peer: EntityLike;
        maxId: int;
        fromReader(reader: Reader): DeleteHistory;
    }

    export interface DeleteMessagesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to delete messages for all participants of the chat */
        revoke?: true;
        /** Message ID list */
        id: int[];
    }

    /**
     * Deletes messages by their identifiers.<br>
     * @throws {{code:403,type:"MESSAGE_DELETE_FORBIDDEN"}} You can't delete one of the messages you tried to delete, most likely because it is a service message.
     */
    export class DeleteMessages extends Request<Partial<DeleteMessagesArgs>,messages.TypeAffectedMessages> implements DeleteMessagesArgs {
        CONSTRUCTOR_id: -443640366;
        SUBCLASS_OF_ID: 3469983854;
        classType: "request";
        className: "messages.DeleteMessages";
        flags: number;
        revoke?: true;
        id: int[];
        fromReader(reader: Reader): DeleteMessages;
    }

    export interface ReceivedMessagesArgs {
        /** Maximum message ID available in a client. */
        maxId: int;
    }

    /** Confirms receipt of messages by a client, cancels PUSH-notification sending.<br> */
    export class ReceivedMessages extends Request<Partial<ReceivedMessagesArgs>,TypeReceivedNotifyMessage[]> implements ReceivedMessagesArgs {
        CONSTRUCTOR_id: 94983360;
        SUBCLASS_OF_ID: 2238052503;
        classType: "request";
        className: "messages.ReceivedMessages";
        maxId: int;
        fromReader(reader: Reader): ReceivedMessages;
    }

    export interface SetTypingArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Target user or group */
        peer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/threads">Thread ID</a> */
        topMsgId?: MessageIDLike;
        /** Type of action<br>Parameter added in <a href="https://corefork.telegram.org/api/layers#layer-17">Layer 17</a>. */
        action: TypeSendMessageAction;
    }

    /**
     * Sends a current user typing event (see <a href="https://corefork.telegram.org/type/SendMessageAction">SendMessageAction</a> for all event types) to a conversation partner or group.<br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/layers
     * @link https://corefork.telegram.org/type/SendMessageAction
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:400,type:"USER_IS_BOT"}} Bots can't send messages to other bots.
     */
    export class SetTyping extends Request<Partial<SetTypingArgs>,Bool> implements SetTypingArgs {
        CONSTRUCTOR_id: 1486110434;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetTyping";
        flags: number;
        peer: EntityLike;
        topMsgId?: MessageIDLike;
        action: TypeSendMessageAction;
        fromReader(reader: Reader): SetTyping;
    }

    export interface SendMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag to disable generation of the webpage preview */
        noWebpage?: true;
        /** Send this message silently (no notifications for the receivers) */
        silent?: true;
        /** Send this message as background message */
        background?: true;
        /** Clear the draft field */
        clearDraft?: true;
        /** The destination where the message will be sent */
        peer: EntityLike;
        /** The message ID to which this message will reply to */
        replyToMsgId?: MessageIDLike;
        /** The message */
        message: string;
        /** Unique client message ID required to prevent message resending */
        randomId: long;
        /** Reply markup for sending bot buttons */
        replyMarkup?: TypeReplyMarkup;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for sending styled text */
        entities?: TypeMessageEntity[];
        /** Scheduled message date for <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> */
        scheduleDate?: int;
    }

    /**
     * Sends a message to a chat<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"BOT_DOMAIN_INVALID"}} Bot domain invalid.
     * @throws {{code:400,type:"BOT_INVALID"}} This is not a valid bot.
     * @throws {{code:400,type:"BUTTON_DATA_INVALID"}} The data of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_TYPE_INVALID"}} The type of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_URL_INVALID"}} Button URL invalid.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_RESTRICTED"}} You can't send messages in this chat, you were restricted.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"ENCRYPTION_DECLINED"}} The secret chat was declined.
     * @throws {{code:400,type:"ENTITIES_TOO_LONG"}} You provided too many styled message entities.
     * @throws {{code:400,type:"ENTITY_MENTION_USER_INVALID"}} You mentioned an invalid user.
     * @throws {{code:400,type:"FROM_MESSAGE_BOT_DISABLED"}} Bots can't use fromMessage min constructors.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MESSAGE_EMPTY"}} The provided message is empty.
     * @throws {{code:400,type:"MESSAGE_TOO_LONG"}} The provided message is too long.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Provided reply_to_msg_id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PINNED_DIALOGS_TOO_MUCH"}} Too many pinned dialogs.
     * @throws {{code:400,type:"POLL_OPTION_INVALID"}} Invalid poll option provided.
     * @throws {{code:400,type:"REPLY_MARKUP_INVALID"}} The provided reply markup is invalid.
     * @throws {{code:400,type:"REPLY_MARKUP_TOO_LONG"}} The specified reply_markup is too long.
     * @throws {{code:400,type:"SCHEDULE_BOT_NOT_ALLOWED"}} Bots cannot schedule messages.
     * @throws {{code:400,type:"SCHEDULE_DATE_TOO_LATE"}} You can't schedule a message this far in the future.
     * @throws {{code:400,type:"SCHEDULE_STATUS_PRIVATE"}} Can't schedule until user is online, if the user's last seen timestamp is hidden by their privacy settings.
     * @throws {{code:400,type:"SCHEDULE_TOO_MUCH"}} There are too many scheduled messages.
     * @throws {{code:420,type:"SLOWMODE_WAIT_X"}} Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:400,type:"USER_IS_BOT"}} Bots can't send messages to other bots.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class SendMessage extends Request<Partial<SendMessageArgs>,TypeUpdates> implements SendMessageArgs {
        CONSTRUCTOR_id: 1376532592;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendMessage";
        flags: number;
        noWebpage?: true;
        silent?: true;
        background?: true;
        clearDraft?: true;
        peer: EntityLike;
        replyToMsgId?: MessageIDLike;
        message: string;
        randomId: long;
        replyMarkup?: TypeReplyMarkup;
        entities?: TypeMessageEntity[];
        scheduleDate?: int;
        fromReader(reader: Reader): SendMessage;
    }

    export interface SendMediaArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Send message silently (no notification should be triggered) */
        silent?: true;
        /** Send message in background */
        background?: true;
        /** Clear the draft */
        clearDraft?: true;
        /** Destination */
        peer: EntityLike;
        /** Message ID to which this message should reply to */
        replyToMsgId?: MessageIDLike;
        /** Attached media */
        media: TypeInputMedia;
        /** Caption */
        message: string;
        /** Random ID to avoid resending the same message */
        randomId: long;
        /** Reply markup for bot keyboards */
        replyMarkup?: TypeReplyMarkup;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text */
        entities?: TypeMessageEntity[];
        /** Scheduled message date for <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> */
        scheduleDate?: int;
    }

    /**
     * Send a media<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @throws {{code:400,type:"BOT_PAYMENTS_DISABLED"}} Please enable bot payments in botfather before calling this method.
     * @throws {{code:400,type:"BOT_POLLS_DISABLED"}}  
     * @throws {{code:400,type:"BROADCAST_PUBLIC_VOTERS_FORBIDDEN"}} You can't forward polls with public voters.
     * @throws {{code:400,type:"BUTTON_DATA_INVALID"}} The data of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_TYPE_INVALID"}} The type of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_URL_INVALID"}} Button URL invalid.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_RESTRICTED"}} You can't send messages in this chat, you were restricted.
     * @throws {{code:403,type:"CHAT_SEND_GIFS_FORBIDDEN"}} You can't send gifs in this chat.
     * @throws {{code:403,type:"CHAT_SEND_MEDIA_FORBIDDEN"}} You can't send media in this chat.
     * @throws {{code:403,type:"CHAT_SEND_POLL_FORBIDDEN"}} You can't send polls in this chat.
     * @throws {{code:403,type:"CHAT_SEND_STICKERS_FORBIDDEN"}} You can't send stickers in this chat.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"CURRENCY_TOTAL_AMOUNT_INVALID"}} The total amount of all prices is invalid.
     * @throws {{code:400,type:"EMOTICON_INVALID"}} The specified emoji is invalid.
     * @throws {{code:400,type:"EXTERNAL_URL_INVALID"}} External URL invalid.
     * @throws {{code:400,type:"FILE_PARTS_INVALID"}} The number of file parts is invalid.
     * @throws {{code:400,type:"FILE_PART_LENGTH_INVALID"}} The length of a file part is invalid.
     * @throws {{code:400,type:"FILE_REFERENCE_EMPTY"}} An empty file reference was specified.
     * @throws {{code:400,type:"FILE_REFERENCE_EXPIRED"}} File reference expired, it must be refetched as described in https://core.telegram.org/api/file_reference.
     * @throws {{code:400,type:"GAME_BOT_INVALID"}} Bots can't send another bot's game.
     * @throws {{code:400,type:"IMAGE_PROCESS_FAILED"}} Failure while processing image.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MD5_CHECKSUM_INVALID"}} The MD5 checksums do not match.
     * @throws {{code:400,type:"MEDIA_CAPTION_TOO_LONG"}} The caption is too long.
     * @throws {{code:400,type:"MEDIA_EMPTY"}} The provided media object is invalid.
     * @throws {{code:400,type:"MEDIA_INVALID"}} Media invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PAYMENT_PROVIDER_INVALID"}} The specified payment provider is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_INVALID_DIMENSIONS"}} The photo dimensions are invalid.
     * @throws {{code:400,type:"PHOTO_SAVE_FILE_INVALID"}} Internal issues, try again later.
     * @throws {{code:400,type:"POLL_ANSWERS_INVALID"}} Invalid poll answers were provided.
     * @throws {{code:400,type:"POLL_ANSWER_INVALID"}} One of the poll answers is not acceptable.
     * @throws {{code:400,type:"POLL_OPTION_DUPLICATE"}} Duplicate poll options provided.
     * @throws {{code:400,type:"POLL_OPTION_INVALID"}} Invalid poll option provided.
     * @throws {{code:400,type:"POLL_QUESTION_INVALID"}} One of the poll questions is not acceptable.
     * @throws {{code:400,type:"QUIZ_CORRECT_ANSWERS_EMPTY"}} No correct quiz answer was specified.
     * @throws {{code:400,type:"QUIZ_CORRECT_ANSWERS_TOO_MUCH"}} You specified too many correct answers in a quiz, quizes can only have one right answer!
     * @throws {{code:400,type:"QUIZ_CORRECT_ANSWER_INVALID"}} An invalid value was provided to the correct_answers field.
     * @throws {{code:400,type:"QUIZ_MULTIPLE_INVALID"}} Quizes can't have the multiple_choice flag set!
     * @throws {{code:400,type:"REPLY_MARKUP_BUY_EMPTY"}} Reply markup for buy button empty.
     * @throws {{code:400,type:"REPLY_MARKUP_INVALID"}} The provided reply markup is invalid.
     * @throws {{code:400,type:"SCHEDULE_BOT_NOT_ALLOWED"}} Bots cannot schedule messages.
     * @throws {{code:400,type:"SCHEDULE_DATE_TOO_LATE"}} You can't schedule a message this far in the future.
     * @throws {{code:400,type:"SCHEDULE_TOO_MUCH"}} There are too many scheduled messages.
     * @throws {{code:420,type:"SLOWMODE_WAIT_X"}} Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
     * @throws {{code:400,type:"TTL_MEDIA_INVALID"}} Invalid media Time To Live was provided.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:400,type:"USER_IS_BOT"}} Bots can't send messages to other bots.
     * @throws {{code:400,type:"VIDEO_CONTENT_TYPE_INVALID"}} The video's content type is invalid.
     * @throws {{code:400,type:"WEBPAGE_CURL_FAILED"}} Failure while fetching the webpage with cURL.
     * @throws {{code:400,type:"WEBPAGE_MEDIA_EMPTY"}} Webpage media empty.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class SendMedia extends Request<Partial<SendMediaArgs>,TypeUpdates> implements SendMediaArgs {
        CONSTRUCTOR_id: 881978281;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendMedia";
        flags: number;
        silent?: true;
        background?: true;
        clearDraft?: true;
        peer: EntityLike;
        replyToMsgId?: MessageIDLike;
        media: TypeInputMedia;
        message: string;
        randomId: long;
        replyMarkup?: TypeReplyMarkup;
        entities?: TypeMessageEntity[];
        scheduleDate?: int;
        fromReader(reader: Reader): SendMedia;
    }

    export interface ForwardMessagesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to send messages silently (no notification will be triggered on the destination clients) */
        silent?: true;
        /** Whether to send the message in background */
        background?: true;
        /** When forwarding games, whether to include your score in the game */
        withMyScore?: true;
        /** Whether to forward messages without quoting the original author */
        fromPeer: EntityLike;
        /** Whether to strip captions from media */
        id: int[];
        /** Source of messages */
        randomId: long[];
        /** IDs of messages */
        toPeer: EntityLike;
        /** Random ID to prevent resending of messages */
        scheduleDate?: int;
    }

    /**
     * Forwards messages by their IDs.<br>
     * @throws {{code:400,type:"BROADCAST_PUBLIC_VOTERS_FORBIDDEN"}} You can't forward polls with public voters.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_RESTRICTED"}} You can't send messages in this chat, you were restricted.
     * @throws {{code:403,type:"CHAT_SEND_GAME_FORBIDDEN"}} You can't send a game to this chat.
     * @throws {{code:403,type:"CHAT_SEND_GIFS_FORBIDDEN"}} You can't send gifs in this chat.
     * @throws {{code:403,type:"CHAT_SEND_MEDIA_FORBIDDEN"}} You can't send media in this chat.
     * @throws {{code:403,type:"CHAT_SEND_POLL_FORBIDDEN"}} You can't send polls in this chat.
     * @throws {{code:403,type:"CHAT_SEND_STICKERS_FORBIDDEN"}} You can't send stickers in this chat.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"GROUPED_MEDIA_INVALID"}} Invalid grouped media.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MEDIA_EMPTY"}} The provided media object is invalid.
     * @throws {{code:400,type:"MESSAGE_IDS_EMPTY"}} No message ids were provided.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:420,type:"P0NY_FLOODWAIT"}}  
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"RANDOM_ID_INVALID"}} A provided random ID is invalid.
     * @throws {{code:400,type:"SCHEDULE_DATE_TOO_LATE"}} You can't schedule a message this far in the future.
     * @throws {{code:400,type:"SCHEDULE_TOO_MUCH"}} There are too many scheduled messages.
     * @throws {{code:400,type:"SLOWMODE_MULTI_MSGS_DISABLED"}} Slowmode is enabled, you cannot forward multiple messages to this group.
     * @throws {{code:420,type:"SLOWMODE_WAIT_X"}} Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:400,type:"USER_IS_BOT"}} Bots can't send messages to other bots.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class ForwardMessages extends Request<Partial<ForwardMessagesArgs>,TypeUpdates> implements ForwardMessagesArgs {
        CONSTRUCTOR_id: -637606386;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.ForwardMessages";
        flags: number;
        silent?: true;
        background?: true;
        withMyScore?: true;
        fromPeer: EntityLike;
        id: int[];
        randomId: long[];
        toPeer: EntityLike;
        scheduleDate?: int;
        fromReader(reader: Reader): ForwardMessages;
    }

    export interface ReportSpamArgs {
        /** Peer to report */
        peer: EntityLike;
    }

    /**
     * Report a new incoming chat for spam, if the <a href="https://corefork.telegram.org/constructor/peerSettings">peer settings</a> of the chat allow us to do that<br>
     * @link https://corefork.telegram.org/constructor/peerSettings
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReportSpam extends Request<Partial<ReportSpamArgs>,Bool> implements ReportSpamArgs {
        CONSTRUCTOR_id: -820669733;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReportSpam";
        peer: EntityLike;
        fromReader(reader: Reader): ReportSpam;
    }

    export interface GetPeerSettingsArgs {
        /** The peer */
        peer: EntityLike;
    }

    /**
     * Get peer settings<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetPeerSettings extends Request<Partial<GetPeerSettingsArgs>,TypePeerSettings> implements GetPeerSettingsArgs {
        CONSTRUCTOR_id: 913498268;
        SUBCLASS_OF_ID: 4138180484;
        classType: "request";
        className: "messages.GetPeerSettings";
        peer: EntityLike;
        fromReader(reader: Reader): GetPeerSettings;
    }

    export interface ReportArgs {
        /** Peer */
        peer: EntityLike;
        /** IDs of messages to report */
        id: int[];
        /** Why are these messages being reported */
        reason: TypeReportReason;
        /** Comment for report moderation */
        message: string;
    }

    /**
     * Report a message in a chat for violation of telegram's Terms of Service<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class Report extends Request<Partial<ReportArgs>,Bool> implements ReportArgs {
        CONSTRUCTOR_id: -1991005362;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.Report";
        peer: EntityLike;
        id: int[];
        reason: TypeReportReason;
        message: string;
        fromReader(reader: Reader): Report;
    }

    export interface GetChatsArgs {
        /** List of chat IDs */
        id: int[];
    }

    /**
     * Returns chat basic info on their IDs.<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetChats extends Request<Partial<GetChatsArgs>,messages.TypeChats> implements GetChatsArgs {
        CONSTRUCTOR_id: 1013621127;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "messages.GetChats";
        id: int[];
        fromReader(reader: Reader): GetChats;
    }

    export interface GetFullChatArgs {
        /** Chat ID */
        chatId: int;
    }

    /**
     * Returns full chat info according to its ID.<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetFullChat extends Request<Partial<GetFullChatArgs>,messages.TypeChatFull> implements GetFullChatArgs {
        CONSTRUCTOR_id: 998448230;
        SUBCLASS_OF_ID: 576344329;
        classType: "request";
        className: "messages.GetFullChat";
        chatId: int;
        fromReader(reader: Reader): GetFullChat;
    }

    export interface EditChatTitleArgs {
        /** Chat ID */
        chatId: int;
        /** New chat name, different from the old one */
        title: string;
    }

    /**
     * Chanages chat name and sends a service message on it.<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"CHAT_TITLE_EMPTY"}} No chat title provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class EditChatTitle extends Request<Partial<EditChatTitleArgs>,TypeUpdates> implements EditChatTitleArgs {
        CONSTRUCTOR_id: -599447467;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.EditChatTitle";
        chatId: int;
        title: string;
        fromReader(reader: Reader): EditChatTitle;
    }

    export interface EditChatPhotoArgs {
        /** Chat ID */
        chatId: int;
        /** Photo to be set */
        photo: TypeInputChatPhoto;
    }

    /**
     * Changes chat photo and sends a service message on it<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PHOTO_CROP_SIZE_SMALL"}} Photo is too small.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_INVALID"}} Photo invalid.
     */
    export class EditChatPhoto extends Request<Partial<EditChatPhotoArgs>,TypeUpdates> implements EditChatPhotoArgs {
        CONSTRUCTOR_id: -900957736;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.EditChatPhoto";
        chatId: int;
        photo: TypeInputChatPhoto;
        fromReader(reader: Reader): EditChatPhoto;
    }

    export interface AddChatUserArgs {
        /** Chat ID */
        chatId: int;
        /** User ID to be added */
        userId: TypeInputUser;
        /** Number of last messages to be forwarded */
        fwdLimit: int;
    }

    /**
     * Adds a user to a chat and sends a service message on it.<br>
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USERS_TOO_MUCH"}} The maximum number of users has been exceeded (to create a chat, for example).
     * @throws {{code:400,type:"USER_ALREADY_PARTICIPANT"}} The user is already in the group.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:403,type:"USER_NOT_MUTUAL_CONTACT"}} The provided user is not a mutual contact.
     * @throws {{code:403,type:"USER_PRIVACY_RESTRICTED"}} The user's privacy settings do not allow you to do this.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class AddChatUser extends Request<Partial<AddChatUserArgs>,TypeUpdates> implements AddChatUserArgs {
        CONSTRUCTOR_id: -106911223;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.AddChatUser";
        chatId: int;
        userId: TypeInputUser;
        fwdLimit: int;
        fromReader(reader: Reader): AddChatUser;
    }

    export interface DeleteChatUserArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Remove the entire chat history of the specified user in this chat. */
        revokeHistory?: true;
        /** Chat ID */
        chatId: int;
        /** User ID to be deleted */
        userId: TypeInputUser;
    }

    /**
     * Deletes a user from a chat and sends a service message on it.<br>
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_NOT_PARTICIPANT"}} You're not a member of this supergroup/channel.
     */
    export class DeleteChatUser extends Request<Partial<DeleteChatUserArgs>,TypeUpdates> implements DeleteChatUserArgs {
        CONSTRUCTOR_id: -986430054;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.DeleteChatUser";
        flags: number;
        revokeHistory?: true;
        chatId: int;
        userId: TypeInputUser;
        fromReader(reader: Reader): DeleteChatUser;
    }

    export interface CreateChatArgs {
        /** List of user IDs to be invited */
        users: TypeInputUser[];
        /** Chat name */
        title: string;
    }

    /**
     * Creates a new chat.<br>
     * @throws {{code:400,type:"CHAT_INVALID"}} Invalid chat.
     * @throws {{code:400,type:"CHAT_TITLE_EMPTY"}} No chat title provided.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"USERS_TOO_FEW"}} Not enough users (to create a chat, for example).
     * @throws {{code:403,type:"USER_RESTRICTED"}} You're spamreported, you can't create channels or chats.
     */
    export class CreateChat extends Request<Partial<CreateChatArgs>,TypeUpdates> implements CreateChatArgs {
        CONSTRUCTOR_id: 164303470;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.CreateChat";
        users: TypeInputUser[];
        title: string;
        fromReader(reader: Reader): CreateChat;
    }

    export interface GetDhConfigArgs {
        /** Value of the <strong>version</strong> parameter from <a href="https://corefork.telegram.org/constructor/messages.dhConfig">messages.dhConfig</a>, avialable at the client */
        version: int;
        /** Length of the required random sequence */
        randomLength: int;
    }

    /**
     * Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.<br>
     * @link https://corefork.telegram.org/constructor/messages.dhConfig
     * @throws {{code:400,type:"RANDOM_LENGTH_INVALID"}} Random length invalid.
     */
    export class GetDhConfig extends Request<Partial<GetDhConfigArgs>,messages.TypeDhConfig> implements GetDhConfigArgs {
        CONSTRUCTOR_id: 651135312;
        SUBCLASS_OF_ID: 3834178955;
        classType: "request";
        className: "messages.GetDhConfig";
        version: int;
        randomLength: int;
        fromReader(reader: Reader): GetDhConfig;
    }

    export interface RequestEncryptionArgs {
        /** User ID */
        userId: TypeInputUser;
        /** Unique client request ID required to prevent resending. This also doubles as the chat ID. */
        randomId: int;
        /** <code>A = g ^ a mod p</code>, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> */
        gA: bytes;
    }

    /**
     * Sends a request to start a secret chat to the user.<br>
     * @throws {{code:400,type:"DH_G_A_INVALID"}} g_a invalid.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class RequestEncryption extends Request<Partial<RequestEncryptionArgs>,TypeEncryptedChat> implements RequestEncryptionArgs {
        CONSTRUCTOR_id: -162681021;
        SUBCLASS_OF_ID: 1831379834;
        classType: "request";
        className: "messages.RequestEncryption";
        userId: TypeInputUser;
        randomId: int;
        gA: bytes;
        fromReader(reader: Reader): RequestEncryption;
    }

    export interface AcceptEncryptionArgs {
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** <code>B = g ^ b mod p</code>, see <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia</a> */
        gB: bytes;
        /** 64-bit fingerprint of the received key */
        keyFingerprint: long;
    }

    /**
     * Confirms creation of a secret chat<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"ENCRYPTION_ALREADY_ACCEPTED"}} Secret chat already accepted.
     * @throws {{code:400,type:"ENCRYPTION_ALREADY_DECLINED"}} The secret chat was already declined.
     */
    export class AcceptEncryption extends Request<Partial<AcceptEncryptionArgs>,TypeEncryptedChat> implements AcceptEncryptionArgs {
        CONSTRUCTOR_id: 1035731989;
        SUBCLASS_OF_ID: 1831379834;
        classType: "request";
        className: "messages.AcceptEncryption";
        peer: TypeInputEncryptedChat;
        gB: bytes;
        keyFingerprint: long;
        fromReader(reader: Reader): AcceptEncryption;
    }

    export interface DiscardEncryptionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to delete the entire chat history for the other user as well */
        deleteHistory?: true;
        /** Secret chat ID */
        chatId: int;
    }

    /**
     * Cancels a request for creation and/or delete info on secret chat.<br>
     * @throws {{code:400,type:"CHAT_ID_EMPTY"}} The provided chat ID is empty.
     * @throws {{code:400,type:"ENCRYPTION_ALREADY_DECLINED"}} The secret chat was already declined.
     * @throws {{code:400,type:"ENCRYPTION_ID_INVALID"}} The provided secret chat ID is invalid.
     */
    export class DiscardEncryption extends Request<Partial<DiscardEncryptionArgs>,Bool> implements DiscardEncryptionArgs {
        CONSTRUCTOR_id: -208425312;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.DiscardEncryption";
        flags: number;
        deleteHistory?: true;
        chatId: int;
        fromReader(reader: Reader): DiscardEncryption;
    }

    export interface SetEncryptedTypingArgs {
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** Typing.<br><strong>Possible values</strong>:<br><a href="https://corefork.telegram.org/constructor/boolTrue">(boolTrue)</a>, if the user started typing and more than <strong>5 seconds</strong> have passed since the last request<br><a href="https://corefork.telegram.org/constructor/boolFalse">(boolFalse)</a>, if the user stopped typing */
        typing: Bool;
    }

    /**
     * Send typing event by the current user to a secret chat.<br>
     * @link https://corefork.telegram.org/constructor/boolTrue
     * @link https://corefork.telegram.org/constructor/boolFalse
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     */
    export class SetEncryptedTyping extends Request<Partial<SetEncryptedTypingArgs>,Bool> implements SetEncryptedTypingArgs {
        CONSTRUCTOR_id: 2031374829;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetEncryptedTyping";
        peer: TypeInputEncryptedChat;
        typing: Bool;
        fromReader(reader: Reader): SetEncryptedTyping;
    }

    export interface ReadEncryptedHistoryArgs {
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** Maximum date value for received messages in history */
        maxDate: int;
    }

    /**
     * Marks message history within a secret chat as read.<br>
     * @throws {{code:400,type:"MSG_WAIT_FAILED"}} A waiting call returned an error.
     */
    export class ReadEncryptedHistory extends Request<Partial<ReadEncryptedHistoryArgs>,Bool> implements ReadEncryptedHistoryArgs {
        CONSTRUCTOR_id: 2135648522;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReadEncryptedHistory";
        peer: TypeInputEncryptedChat;
        maxDate: int;
        fromReader(reader: Reader): ReadEncryptedHistory;
    }

    export interface SendEncryptedArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Send encrypted message without a notification */
        silent?: true;
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** Unique client message ID, necessary to avoid message resending */
        randomId: long;
        /** TL-serialization of <a href="https://corefork.telegram.org/type/DecryptedMessage">DecryptedMessage</a> type, encrypted with a key that was created during chat initialization */
        data: bytes;
    }

    /**
     * Sends a text message to a secret chat.<br>
     * @link https://corefork.telegram.org/type/DecryptedMessage
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"DATA_INVALID"}} Encrypted data invalid.
     * @throws {{code:400,type:"ENCRYPTION_DECLINED"}} The secret chat was declined.
     * @throws {{code:400,type:"MSG_WAIT_FAILED"}} A waiting call returned an error.
     * @throws {{code:403,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     */
    export class SendEncrypted extends Request<Partial<SendEncryptedArgs>,messages.TypeSentEncryptedMessage> implements SendEncryptedArgs {
        CONSTRUCTOR_id: 1157265941;
        SUBCLASS_OF_ID: 3382591056;
        classType: "request";
        className: "messages.SendEncrypted";
        flags: number;
        silent?: true;
        peer: TypeInputEncryptedChat;
        randomId: long;
        data: bytes;
        fromReader(reader: Reader): SendEncrypted;
    }

    export interface SendEncryptedFileArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to send the file without triggering a notification */
        silent?: true;
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** Unique client message ID necessary to prevent message resending */
        randomId: long;
        /** TL-serialization of <a href="https://corefork.telegram.org/type/DecryptedMessage">DecryptedMessage</a> type, encrypted with a key generated during chat initialization */
        data: bytes;
        /** File attachment for the secret chat */
        file: TypeInputEncryptedFile;
    }

    /**
     * Sends a message with a file attachment to a secret chat<br>
     * @link https://corefork.telegram.org/type/DecryptedMessage
     * @throws {{code:400,type:"DATA_TOO_LONG"}} Data too long.
     * @throws {{code:400,type:"ENCRYPTION_DECLINED"}} The secret chat was declined.
     * @throws {{code:400,type:"FILE_EMTPY"}} An empty file was provided.
     * @throws {{code:400,type:"MD5_CHECKSUM_INVALID"}} The MD5 checksums do not match.
     * @throws {{code:400,type:"MSG_WAIT_FAILED"}} A waiting call returned an error.
     */
    export class SendEncryptedFile extends Request<Partial<SendEncryptedFileArgs>,messages.TypeSentEncryptedMessage> implements SendEncryptedFileArgs {
        CONSTRUCTOR_id: 1431914525;
        SUBCLASS_OF_ID: 3382591056;
        classType: "request";
        className: "messages.SendEncryptedFile";
        flags: number;
        silent?: true;
        peer: TypeInputEncryptedChat;
        randomId: long;
        data: bytes;
        file: TypeInputEncryptedFile;
        fromReader(reader: Reader): SendEncryptedFile;
    }

    export interface SendEncryptedServiceArgs {
        /** Secret chat ID */
        peer: TypeInputEncryptedChat;
        /** Unique client message ID required to prevent message resending */
        randomId: long;
        /** TL-serialization of  <a href="https://corefork.telegram.org/type/DecryptedMessage">DecryptedMessage</a> type, encrypted with a key generated during chat initialization */
        data: bytes;
    }

    /**
     * Sends a service message to a secret chat.<br>
     * @link https://corefork.telegram.org/type/DecryptedMessage
     * @throws {{code:400,type:"DATA_INVALID"}} Encrypted data invalid.
     * @throws {{code:400,type:"ENCRYPTION_DECLINED"}} The secret chat was declined.
     * @throws {{code:400,type:"ENCRYPTION_ID_INVALID"}} The provided secret chat ID is invalid.
     * @throws {{code:400,type:"MSG_WAIT_FAILED"}} A waiting call returned an error.
     * @throws {{code:403,type:"USER_DELETED"}} You can't send this secret message because the other participant deleted their account.
     * @throws {{code:403,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     */
    export class SendEncryptedService extends Request<Partial<SendEncryptedServiceArgs>,messages.TypeSentEncryptedMessage> implements SendEncryptedServiceArgs {
        CONSTRUCTOR_id: 852769188;
        SUBCLASS_OF_ID: 3382591056;
        classType: "request";
        className: "messages.SendEncryptedService";
        peer: TypeInputEncryptedChat;
        randomId: long;
        data: bytes;
        fromReader(reader: Reader): SendEncryptedService;
    }

    export interface ReceivedQueueArgs {
        /** Maximum qts value available at the client */
        maxQts: int;
    }

    /**
     * Confirms receipt of messages in a secret chat by client, cancels push notifications.<br>
     * @throws {{code:400,type:"MAX_QTS_INVALID"}} The specified max_qts is invalid.
     * @throws {{code:400,type:"MSG_WAIT_FAILED"}} A waiting call returned an error.
     */
    export class ReceivedQueue extends Request<Partial<ReceivedQueueArgs>,long[]> implements ReceivedQueueArgs {
        CONSTRUCTOR_id: 1436924774;
        SUBCLASS_OF_ID: 2300109160;
        classType: "request";
        className: "messages.ReceivedQueue";
        maxQts: int;
        fromReader(reader: Reader): ReceivedQueue;
    }

    export interface ReportEncryptedSpamArgs {
        /** The secret chat to report */
        peer: TypeInputEncryptedChat;
    }

    /**
     * Report a secret chat for spam<br>
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     */
    export class ReportEncryptedSpam extends Request<Partial<ReportEncryptedSpamArgs>,Bool> implements ReportEncryptedSpamArgs {
        CONSTRUCTOR_id: 1259113487;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReportEncryptedSpam";
        peer: TypeInputEncryptedChat;
        fromReader(reader: Reader): ReportEncryptedSpam;
    }

    export interface ReadMessageContentsArgs {
        /** Message ID list */
        id: int[];
    }

    /** Notifies the sender about the recipient having listened a voice message or watched a video.<br> */
    export class ReadMessageContents extends Request<Partial<ReadMessageContentsArgs>,messages.TypeAffectedMessages> implements ReadMessageContentsArgs {
        CONSTRUCTOR_id: 916930423;
        SUBCLASS_OF_ID: 3469983854;
        classType: "request";
        className: "messages.ReadMessageContents";
        id: int[];
        fromReader(reader: Reader): ReadMessageContents;
    }

    export interface GetStickersArgs {
        /** The emoji */
        emoticon: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get stickers by emoji<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"EMOTICON_EMPTY"}} The emoji is empty.
     */
    export class GetStickers extends Request<Partial<GetStickersArgs>,messages.TypeStickers> implements GetStickersArgs {
        CONSTRUCTOR_id: 71126828;
        SUBCLASS_OF_ID: 3611015646;
        classType: "request";
        className: "messages.GetStickers";
        emoticon: string;
        hash: int;
        fromReader(reader: Reader): GetStickers;
    }

    export interface GetAllStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get all installed stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetAllStickers extends Request<Partial<GetAllStickersArgs>,messages.TypeAllStickers> implements GetAllStickersArgs {
        CONSTRUCTOR_id: 479598769;
        SUBCLASS_OF_ID: 1166231593;
        classType: "request";
        className: "messages.GetAllStickers";
        hash: int;
        fromReader(reader: Reader): GetAllStickers;
    }

    export interface GetWebPagePreviewArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Message from which to extract the preview */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
    }

    /**
     * Get preview of webpage<br>
     * @link https://corefork.telegram.org/api/entities
     * @throws {{code:400,type:"MESSAGE_EMPTY"}} The provided message is empty.
     */
    export class GetWebPagePreview extends Request<Partial<GetWebPagePreviewArgs>,TypeMessageMedia> implements GetWebPagePreviewArgs {
        CONSTRUCTOR_id: -1956073268;
        SUBCLASS_OF_ID: 1198308914;
        classType: "request";
        className: "messages.GetWebPagePreview";
        flags: number;
        message: string;
        entities?: TypeMessageEntity[];
        fromReader(reader: Reader): GetWebPagePreview;
    }

    export interface ExportChatInviteArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients. */
        legacyRevokePermanent?: true;
        /** Chat */
        peer: EntityLike;
        /** Expiration date */
        expireDate?: int;
        /** Maximum number of users that can join using this link */
        usageLimit?: int;
    }

    /**
     * Export an invite link for a chat<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"EXPIRE_DATE_INVALID"}} The specified expiration date is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USAGE_LIMIT_INVALID"}} The specified usage limit is invalid.
     */
    export class ExportChatInvite extends Request<Partial<ExportChatInviteArgs>,TypeExportedChatInvite> implements ExportChatInviteArgs {
        CONSTRUCTOR_id: 347716823;
        SUBCLASS_OF_ID: 3027536472;
        classType: "request";
        className: "messages.ExportChatInvite";
        flags: number;
        legacyRevokePermanent?: true;
        peer: EntityLike;
        expireDate?: int;
        usageLimit?: int;
        fromReader(reader: Reader): ExportChatInvite;
    }

    export interface CheckChatInviteArgs {
        /** Invite hash in <code>t.me/joinchat/hash</code> */
        hash: string;
    }

    /**
     * Check the validity of a chat invite link and get basic info about it<br>
     * @throws {{code:400,type:"INVITE_HASH_EMPTY"}} The invite hash is empty.
     * @throws {{code:400,type:"INVITE_HASH_EXPIRED"}} The invite link has expired.
     * @throws {{code:400,type:"INVITE_HASH_INVALID"}} The invite hash is invalid.
     */
    export class CheckChatInvite extends Request<Partial<CheckChatInviteArgs>,TypeChatInvite> implements CheckChatInviteArgs {
        CONSTRUCTOR_id: 1051570619;
        SUBCLASS_OF_ID: 72750902;
        classType: "request";
        className: "messages.CheckChatInvite";
        hash: string;
        fromReader(reader: Reader): CheckChatInvite;
    }

    export interface ImportChatInviteArgs {
        /** <code>hash</code> from <code>t.me/joinchat/hash</code> */
        hash: string;
    }

    /**
     * Import a chat invite and join a private chat/supergroup/channel<br>
     * @throws {{code:400,type:"CHANNELS_TOO_MUCH"}} You have joined too many channels/supergroups.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_INVALID"}} Invalid chat.
     * @throws {{code:400,type:"INVITE_HASH_EMPTY"}} The invite hash is empty.
     * @throws {{code:400,type:"INVITE_HASH_EXPIRED"}} The invite link has expired.
     * @throws {{code:400,type:"INVITE_HASH_INVALID"}} The invite hash is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USERS_TOO_MUCH"}} The maximum number of users has been exceeded (to create a chat, for example).
     * @throws {{code:400,type:"USER_ALREADY_PARTICIPANT"}} The user is already in the group.
     * @throws {{code:400,type:"USER_CHANNELS_TOO_MUCH"}} One of the users you tried to add is already in too many channels/supergroups.
     */
    export class ImportChatInvite extends Request<Partial<ImportChatInviteArgs>,TypeUpdates> implements ImportChatInviteArgs {
        CONSTRUCTOR_id: 1817183516;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.ImportChatInvite";
        hash: string;
        fromReader(reader: Reader): ImportChatInvite;
    }

    export interface GetStickerSetArgs {
        /** Stickerset */
        stickerset: TypeInputStickerSet;
    }

    /**
     * Get info about a stickerset<br>
     * @throws {{code:400,type:"EMOTICON_STICKERPACK_MISSING"}}  
     * @throws {{code:400,type:"STICKERSET_INVALID"}} The provided sticker set is invalid.
     */
    export class GetStickerSet extends Request<Partial<GetStickerSetArgs>,messages.TypeStickerSet> implements GetStickerSetArgs {
        CONSTRUCTOR_id: 639215886;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "messages.GetStickerSet";
        stickerset: TypeInputStickerSet;
        fromReader(reader: Reader): GetStickerSet;
    }

    export interface InstallStickerSetArgs {
        /** Stickerset to install */
        stickerset: TypeInputStickerSet;
        /** Whether to archive stickerset */
        archived: Bool;
    }

    /**
     * Install a stickerset<br>
     * @throws {{code:400,type:"STICKERSET_INVALID"}} The provided sticker set is invalid.
     */
    export class InstallStickerSet extends Request<Partial<InstallStickerSetArgs>,messages.TypeStickerSetInstallResult> implements InstallStickerSetArgs {
        CONSTRUCTOR_id: -946871200;
        SUBCLASS_OF_ID: 1741373416;
        classType: "request";
        className: "messages.InstallStickerSet";
        stickerset: TypeInputStickerSet;
        archived: Bool;
        fromReader(reader: Reader): InstallStickerSet;
    }

    export interface UninstallStickerSetArgs {
        /** The stickerset to uninstall */
        stickerset: TypeInputStickerSet;
    }

    /**
     * Uninstall a stickerset<br>
     * @throws {{code:400,type:"STICKERSET_INVALID"}} The provided sticker set is invalid.
     */
    export class UninstallStickerSet extends Request<Partial<UninstallStickerSetArgs>,Bool> implements UninstallStickerSetArgs {
        CONSTRUCTOR_id: -110209570;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.UninstallStickerSet";
        stickerset: TypeInputStickerSet;
        fromReader(reader: Reader): UninstallStickerSet;
    }

    export interface StartBotArgs {
        /** The bot */
        bot: TypeInputUser;
        /** The chat where to start the bot, can be the bot's private chat or a group */
        peer: EntityLike;
        /** Random ID to avoid resending the same message */
        randomId: long;
        /** <a href="https://corefork.telegram.org/bots#deep-linking">Deep linking parameter</a> */
        startParam: string;
    }

    /**
     * Start a conversation with a bot using a <a href="https://corefork.telegram.org/bots#deep-linking">deep linking parameter</a><br>
     * @link https://corefork.telegram.org/bots
     * @throws {{code:400,type:"BOT_INVALID"}} This is not a valid bot.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"START_PARAM_EMPTY"}} The start parameter is empty.
     * @throws {{code:400,type:"START_PARAM_INVALID"}} Start parameter invalid.
     * @throws {{code:400,type:"START_PARAM_TOO_LONG"}} Start parameter is too long.
     */
    export class StartBot extends Request<Partial<StartBotArgs>,TypeUpdates> implements StartBotArgs {
        CONSTRUCTOR_id: -421563528;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.StartBot";
        bot: TypeInputUser;
        peer: EntityLike;
        randomId: long;
        startParam: string;
        fromReader(reader: Reader): StartBot;
    }

    export interface GetMessagesViewsArgs {
        /** Peer where the message was found */
        peer: EntityLike;
        /** ID of message */
        id: int[];
        /** Whether to mark the message as viewed and increment the view counter */
        increment: Bool;
    }

    /**
     * Get and increase the view counter of a message sent or forwarded from a <a href="https://corefork.telegram.org/api/channel">channel</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetMessagesViews extends Request<Partial<GetMessagesViewsArgs>,messages.TypeMessageViews> implements GetMessagesViewsArgs {
        CONSTRUCTOR_id: 1468322785;
        SUBCLASS_OF_ID: 2947935132;
        classType: "request";
        className: "messages.GetMessagesViews";
        peer: EntityLike;
        id: int[];
        increment: Bool;
        fromReader(reader: Reader): GetMessagesViews;
    }

    export interface EditChatAdminArgs {
        /** The ID of the group */
        chatId: int;
        /** The user to make admin */
        userId: TypeInputUser;
        /** Whether to make him admin */
        isAdmin: Bool;
    }

    /**
     * Make a user admin in a <a href="https://corefork.telegram.org/api/channel">legacy group</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_NOT_PARTICIPANT"}} You're not a member of this supergroup/channel.
     */
    export class EditChatAdmin extends Request<Partial<EditChatAdminArgs>,Bool> implements EditChatAdminArgs {
        CONSTRUCTOR_id: -1444503762;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.EditChatAdmin";
        chatId: int;
        userId: TypeInputUser;
        isAdmin: Bool;
        fromReader(reader: Reader): EditChatAdmin;
    }

    export interface MigrateChatArgs {
        /** Legacy group to migrate */
        chatId: int;
    }

    /**
     * Turn a <a href="https://corefork.telegram.org/api/channel">legacy group into a supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNELS_TOO_MUCH"}} You have joined too many channels/supergroups.
     * @throws {{code:403,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class MigrateChat extends Request<Partial<MigrateChatArgs>,TypeUpdates> implements MigrateChatArgs {
        CONSTRUCTOR_id: 363051235;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.MigrateChat";
        chatId: int;
        fromReader(reader: Reader): MigrateChat;
    }

    export interface SearchGlobalArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId?: int;
        /** Query */
        q: string;
        /** Global search filter */
        filter: TypeMessagesFilter;
        /** If a positive value was specified, the method will return only messages with date bigger than min_date */
        minDate: int;
        /** If a positive value was transferred, the method will return only messages with date smaller than max_date */
        maxDate: int;
        /** Initially 0, then set to the <a href="https://corefork.telegram.org/constructor/messages.messagesSlice"><code>next_rate</code> parameter of messages.messagesSlice</a> */
        offsetRate: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetPeer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        limit: int;
    }

    /**
     * Search for messages and peers globally<br>
     * @link https://corefork.telegram.org/api/folders
     * @link https://corefork.telegram.org/constructor/messages.messagesSlice
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"FOLDER_ID_INVALID"}} Invalid folder ID.
     * @throws {{code:400,type:"SEARCH_QUERY_EMPTY"}} The search query is empty.
     */
    export class SearchGlobal extends Request<Partial<SearchGlobalArgs>,messages.TypeMessages> implements SearchGlobalArgs {
        CONSTRUCTOR_id: 1271290010;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.SearchGlobal";
        flags: number;
        folderId?: int;
        q: string;
        filter: TypeMessagesFilter;
        minDate: int;
        maxDate: int;
        offsetRate: int;
        offsetPeer: EntityLike;
        offsetId: int;
        limit: int;
        fromReader(reader: Reader): SearchGlobal;
    }

    export interface ReorderStickerSetsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Reorder mask stickersets */
        masks?: true;
        /** New stickerset order by stickerset IDs */
        order: long[];
    }

    /** Reorder installed stickersets<br> */
    export class ReorderStickerSets extends Request<Partial<ReorderStickerSetsArgs>,Bool> implements ReorderStickerSetsArgs {
        CONSTRUCTOR_id: 2016638777;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReorderStickerSets";
        flags: number;
        masks?: true;
        order: long[];
        fromReader(reader: Reader): ReorderStickerSets;
    }

    export interface GetDocumentByHashArgs {
        /** SHA256 of file */
        sha256: bytes;
        /** Size of the file in bytes */
        size: int;
        /** Mime type */
        mimeType: string;
    }

    /**
     * Get a document by its SHA256 hash, mainly used for gifs<br>
     * @throws {{code:400,type:"SHA256_HASH_INVALID"}} The provided SHA256 hash is invalid.
     */
    export class GetDocumentByHash extends Request<Partial<GetDocumentByHashArgs>,TypeDocument> implements GetDocumentByHashArgs {
        CONSTRUCTOR_id: 864953444;
        SUBCLASS_OF_ID: 555739168;
        classType: "request";
        className: "messages.GetDocumentByHash";
        sha256: bytes;
        size: int;
        mimeType: string;
        fromReader(reader: Reader): GetDocumentByHash;
    }

    export interface GetSavedGifsArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get saved GIFs<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetSavedGifs extends Request<Partial<GetSavedGifsArgs>,messages.TypeSavedGifs> implements GetSavedGifsArgs {
        CONSTRUCTOR_id: -2084618926;
        SUBCLASS_OF_ID: 2794152437;
        classType: "request";
        className: "messages.GetSavedGifs";
        hash: int;
        fromReader(reader: Reader): GetSavedGifs;
    }

    export interface SaveGifArgs {
        /** GIF to save */
        id: TypeInputDocument;
        /** Whether to remove GIF from saved gifs list */
        unsave: Bool;
    }

    /**
     * Add GIF to saved gifs list<br>
     * @throws {{code:400,type:"GIF_ID_INVALID"}} The provided GIF ID is invalid.
     */
    export class SaveGif extends Request<Partial<SaveGifArgs>,Bool> implements SaveGifArgs {
        CONSTRUCTOR_id: 846868683;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SaveGif";
        id: TypeInputDocument;
        unsave: Bool;
        fromReader(reader: Reader): SaveGif;
    }

    export interface GetInlineBotResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The bot to query */
        bot: TypeInputUser;
        /** The currently opened chat */
        peer: EntityLike;
        /** The geolocation, if requested */
        geoPoint?: TypeInputGeoPoint;
        /** The query */
        query: string;
        /** The offset within the results, will be passed directly as-is to the bot. */
        offset: string;
    }

    /**
     * Query an inline bot<br>
     * @throws {{code:400,type:"BOT_INLINE_DISABLED"}} This bot can't be used in inline mode.
     * @throws {{code:400,type:"BOT_INVALID"}} This is not a valid bot.
     * @throws {{code:400,type:"BOT_RESPONSE_TIMEOUT"}} A timeout occurred while fetching data from the bot.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:-503,type:"Timeout"}} Timeout while fetching data.
     */
    export class GetInlineBotResults extends Request<Partial<GetInlineBotResultsArgs>,messages.TypeBotResults> implements GetInlineBotResultsArgs {
        CONSTRUCTOR_id: 1364105629;
        SUBCLASS_OF_ID: 1054136777;
        classType: "request";
        className: "messages.GetInlineBotResults";
        flags: number;
        bot: TypeInputUser;
        peer: EntityLike;
        geoPoint?: TypeInputGeoPoint;
        query: string;
        offset: string;
        fromReader(reader: Reader): GetInlineBotResults;
    }

    export interface SetInlineBotResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag if the results are composed of media files */
        gallery?: true;
        /** Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query */
        private?: true;
        /** Unique identifier for the answered query */
        queryId: long;
        /** Vector of results for the inline query */
        results: TypeInputBotInlineResult[];
        /** The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300. */
        cacheTime: int;
        /** Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes. */
        nextOffset?: string;
        /** If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter. */
        switchPm?: TypeInlineBotSwitchPM;
    }

    /**
     * Answer an inline query, for bots only<br>
     * @throws {{code:400,type:"ARTICLE_TITLE_EMPTY"}} The title of the article is empty.
     * @throws {{code:400,type:"AUDIO_CONTENT_URL_EMPTY"}} The remote URL specified in the content field is empty.
     * @throws {{code:400,type:"AUDIO_TITLE_EMPTY"}} An empty audio title was provided.
     * @throws {{code:400,type:"BUTTON_DATA_INVALID"}} The data of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_TYPE_INVALID"}} The type of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_URL_INVALID"}} Button URL invalid.
     * @throws {{code:400,type:"DOCUMENT_INVALID"}} The specified document is invalid.
     * @throws {{code:400,type:"FILE_CONTENT_TYPE_INVALID"}} File content-type is invalid.
     * @throws {{code:400,type:"FILE_TITLE_EMPTY"}} An empty file title was specified.
     * @throws {{code:400,type:"GIF_CONTENT_TYPE_INVALID"}} GIF content-type invalid.
     * @throws {{code:400,type:"MESSAGE_EMPTY"}} The provided message is empty.
     * @throws {{code:400,type:"MESSAGE_TOO_LONG"}} The provided message is too long.
     * @throws {{code:400,type:"NEXT_OFFSET_INVALID"}} The specified offset is longer than 64 bytes.
     * @throws {{code:400,type:"PHOTO_CONTENT_TYPE_INVALID"}} Photo mime-type invalid.
     * @throws {{code:400,type:"PHOTO_CONTENT_URL_EMPTY"}} Photo URL invalid.
     * @throws {{code:400,type:"PHOTO_INVALID"}} Photo invalid.
     * @throws {{code:400,type:"PHOTO_THUMB_URL_EMPTY"}} Photo thumbnail URL is empty.
     * @throws {{code:400,type:"QUERY_ID_INVALID"}} The query ID is invalid.
     * @throws {{code:400,type:"REPLY_MARKUP_INVALID"}} The provided reply markup is invalid.
     * @throws {{code:400,type:"RESULTS_TOO_MUCH"}} Too many results were provided.
     * @throws {{code:400,type:"RESULT_ID_DUPLICATE"}} You provided a duplicate result ID.
     * @throws {{code:400,type:"RESULT_TYPE_INVALID"}} Result type invalid.
     * @throws {{code:400,type:"SEND_MESSAGE_MEDIA_INVALID"}} Invalid media provided.
     * @throws {{code:400,type:"SEND_MESSAGE_TYPE_INVALID"}} The message type is invalid.
     * @throws {{code:400,type:"START_PARAM_INVALID"}} Start parameter invalid.
     * @throws {{code:400,type:"STICKER_DOCUMENT_INVALID"}} The specified sticker document is invalid.
     * @throws {{code:403,type:"USER_BOT_INVALID"}} This method can only be called by a bot.
     * @throws {{code:400,type:"VIDEO_TITLE_EMPTY"}} The specified video title is empty.
     * @throws {{code:400,type:"WEBDOCUMENT_INVALID"}} Invalid webdocument URL provided.
     * @throws {{code:400,type:"WEBDOCUMENT_MIME_INVALID"}} Invalid webdocument mime type provided.
     * @throws {{code:400,type:"WEBDOCUMENT_SIZE_TOO_BIG"}} Webdocument is too big!
     * @throws {{code:400,type:"WEBDOCUMENT_URL_INVALID"}} The specified webdocument URL is invalid.
     */
    export class SetInlineBotResults extends Request<Partial<SetInlineBotResultsArgs>,Bool> implements SetInlineBotResultsArgs {
        CONSTRUCTOR_id: -346119674;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetInlineBotResults";
        flags: number;
        gallery?: true;
        private?: true;
        queryId: long;
        results: TypeInputBotInlineResult[];
        cacheTime: int;
        nextOffset?: string;
        switchPm?: TypeInlineBotSwitchPM;
        fromReader(reader: Reader): SetInlineBotResults;
    }

    export interface SendInlineBotResultArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to send the message silently (no notification will be triggered on the other client) */
        silent?: true;
        /** Whether to send the message in background */
        background?: true;
        /** Whether to clear the <a href="https://corefork.telegram.org/api/drafts">draft</a> */
        clearDraft?: true;
        /** Whether to hide the <code>via @botname</code> in the resulting message (only for bot usernames encountered in the <a href="https://corefork.telegram.org/constructor/config">config</a>) */
        hideVia?: true;
        /** Destination */
        peer: EntityLike;
        /** ID of the message this message should reply to */
        replyToMsgId?: MessageIDLike;
        /** Random ID to avoid resending the same query */
        randomId: long;
        /** Query ID from <a href="https://corefork.telegram.org/method/messages.getInlineBotResults">messages.getInlineBotResults</a> */
        queryId: long;
        /** Result ID from <a href="https://corefork.telegram.org/method/messages.getInlineBotResults">messages.getInlineBotResults</a> */
        id: string;
        /** Scheduled message date for scheduled messages */
        scheduleDate?: int;
    }

    /**
     * Send a result obtained using <a href="https://corefork.telegram.org/method/messages.getInlineBotResults">messages.getInlineBotResults</a>.<br>
     * @link https://corefork.telegram.org/api/drafts
     * @link https://corefork.telegram.org/constructor/config
     * @link https://corefork.telegram.org/method/messages.getInlineBotResults
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_RESTRICTED"}} You can't send messages in this chat, you were restricted.
     * @throws {{code:403,type:"CHAT_SEND_GAME_FORBIDDEN"}} You can't send a game to this chat.
     * @throws {{code:403,type:"CHAT_SEND_GIFS_FORBIDDEN"}} You can't send gifs in this chat.
     * @throws {{code:403,type:"CHAT_SEND_INLINE_FORBIDDEN"}} You can't send inline messages in this group.
     * @throws {{code:403,type:"CHAT_SEND_MEDIA_FORBIDDEN"}} You can't send media in this chat.
     * @throws {{code:403,type:"CHAT_SEND_STICKERS_FORBIDDEN"}} You can't send stickers in this chat.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"INLINE_RESULT_EXPIRED"}} The inline query expired.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MEDIA_EMPTY"}} The provided media object is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"QUERY_ID_EMPTY"}} The query ID is empty.
     * @throws {{code:400,type:"RESULT_ID_EMPTY"}} Result ID empty.
     * @throws {{code:400,type:"SCHEDULE_DATE_TOO_LATE"}} You can't schedule a message this far in the future.
     * @throws {{code:400,type:"SCHEDULE_TOO_MUCH"}} There are too many scheduled messages.
     * @throws {{code:420,type:"SLOWMODE_WAIT_X"}} Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"WEBPAGE_CURL_FAILED"}} Failure while fetching the webpage with cURL.
     * @throws {{code:400,type:"WEBPAGE_MEDIA_EMPTY"}} Webpage media empty.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class SendInlineBotResult extends Request<Partial<SendInlineBotResultArgs>,TypeUpdates> implements SendInlineBotResultArgs {
        CONSTRUCTOR_id: 570955184;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendInlineBotResult";
        flags: number;
        silent?: true;
        background?: true;
        clearDraft?: true;
        hideVia?: true;
        peer: EntityLike;
        replyToMsgId?: MessageIDLike;
        randomId: long;
        queryId: long;
        id: string;
        scheduleDate?: int;
        fromReader(reader: Reader): SendInlineBotResult;
    }

    export interface GetMessageEditDataArgs {
        /** Peer where the media was sent */
        peer: EntityLike;
        /** ID of message */
        id: int;
    }

    /**
     * Find out if a media message's caption can be edited<br>
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"MESSAGE_AUTHOR_REQUIRED"}} Message author required.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetMessageEditData extends Request<Partial<GetMessageEditDataArgs>,messages.TypeMessageEditData> implements GetMessageEditDataArgs {
        CONSTRUCTOR_id: -39416522;
        SUBCLASS_OF_ID: 4215772317;
        classType: "request";
        className: "messages.GetMessageEditData";
        peer: EntityLike;
        id: int;
        fromReader(reader: Reader): GetMessageEditData;
    }

    export interface EditMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable webpage preview */
        noWebpage?: true;
        /** Where was the message sent */
        peer: EntityLike;
        /** ID of the message to edit */
        id: int;
        /** New message */
        message?: string;
        /** New attached media */
        media?: TypeInputMedia;
        /** Reply markup for inline keyboards */
        replyMarkup?: TypeReplyMarkup;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
        /** Scheduled message date for <a href="https://corefork.telegram.org/api/scheduled-messages">scheduled messages</a> */
        scheduleDate?: int;
    }

    /**
     * Edit message<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/scheduled-messages
     * @throws {{code:400,type:"BUTTON_DATA_INVALID"}} The data of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_TYPE_INVALID"}} The type of one or more of the buttons you provided is invalid.
     * @throws {{code:400,type:"BUTTON_URL_INVALID"}} Button URL invalid.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"ENTITIES_TOO_LONG"}} You provided too many styled message entities.
     * @throws {{code:403,type:"INLINE_BOT_REQUIRED"}} Only the inline bot can edit message.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MEDIA_CAPTION_TOO_LONG"}} The caption is too long.
     * @throws {{code:400,type:"MEDIA_GROUPED_INVALID"}} You tried to send media of different types in an album.
     * @throws {{code:400,type:"MEDIA_NEW_INVALID"}} The new media is invalid.
     * @throws {{code:400,type:"MEDIA_PREV_INVALID"}} Previous media invalid.
     * @throws {{code:403,type:"MESSAGE_AUTHOR_REQUIRED"}} Message author required.
     * @throws {{code:400,type:"MESSAGE_EDIT_TIME_EXPIRED"}} You can't edit this message anymore, too much time has passed since its creation.
     * @throws {{code:400,type:"MESSAGE_EMPTY"}} The provided message is empty.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MESSAGE_NOT_MODIFIED"}} The message text has not changed.
     * @throws {{code:400,type:"MESSAGE_TOO_LONG"}} The provided message is too long.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"REPLY_MARKUP_INVALID"}} The provided reply markup is invalid.
     * @throws {{code:400,type:"SCHEDULE_DATE_INVALID"}} Invalid schedule date provided.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     */
    export class EditMessage extends Request<Partial<EditMessageArgs>,TypeUpdates> implements EditMessageArgs {
        CONSTRUCTOR_id: 1224152952;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.EditMessage";
        flags: number;
        noWebpage?: true;
        peer: EntityLike;
        id: int;
        message?: string;
        media?: TypeInputMedia;
        replyMarkup?: TypeReplyMarkup;
        entities?: TypeMessageEntity[];
        scheduleDate?: int;
        fromReader(reader: Reader): EditMessage;
    }

    export interface EditInlineBotMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable webpage preview */
        noWebpage?: true;
        /** Sent inline message ID */
        id: TypeInputBotInlineMessageID;
        /** Message */
        message?: string;
        /** Media */
        media?: TypeInputMedia;
        /** Reply markup for inline keyboards */
        replyMarkup?: TypeReplyMarkup;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
    }

    /**
     * Edit an inline bot message<br>
     * @link https://corefork.telegram.org/api/entities
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MESSAGE_NOT_MODIFIED"}} The message text has not changed.
     */
    export class EditInlineBotMessage extends Request<Partial<EditInlineBotMessageArgs>,Bool> implements EditInlineBotMessageArgs {
        CONSTRUCTOR_id: -2091549254;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.EditInlineBotMessage";
        flags: number;
        noWebpage?: true;
        id: TypeInputBotInlineMessageID;
        message?: string;
        media?: TypeInputMedia;
        replyMarkup?: TypeReplyMarkup;
        entities?: TypeMessageEntity[];
        fromReader(reader: Reader): EditInlineBotMessage;
    }

    export interface GetBotCallbackAnswerArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a "play game" button */
        game?: true;
        /** Where was the inline keyboard sent */
        peer: EntityLike;
        /** ID of the Message with the inline keyboard */
        msgId: MessageIDLike;
        /** Callback data */
        data?: bytes;
        /** For buttons <a href="https://corefork.telegram.org/constructor/keyboardButtonCallback">requiring you to verify your identity with your 2FA password</a>, the SRP payload generated using <a href="https://corefork.telegram.org/api/srp">SRP</a>. */
        password?: TypeInputCheckPasswordSRP;
    }

    /**
     * Press an inline callback button and get a callback answer from the bot<br>
     * @link https://corefork.telegram.org/constructor/keyboardButtonCallback
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"BOT_RESPONSE_TIMEOUT"}} A timeout occurred while fetching data from the bot.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"DATA_INVALID"}} Encrypted data invalid.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:-503,type:"Timeout"}} Timeout while fetching data.
     */
    export class GetBotCallbackAnswer extends Request<Partial<GetBotCallbackAnswerArgs>,messages.TypeBotCallbackAnswer> implements GetBotCallbackAnswerArgs {
        CONSTRUCTOR_id: -1824339449;
        SUBCLASS_OF_ID: 1817039244;
        classType: "request";
        className: "messages.GetBotCallbackAnswer";
        flags: number;
        game?: true;
        peer: EntityLike;
        msgId: MessageIDLike;
        data?: bytes;
        password?: TypeInputCheckPasswordSRP;
        fromReader(reader: Reader): GetBotCallbackAnswer;
    }

    export interface SetBotCallbackAnswerArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to show the message as a popup instead of a toast notification */
        alert?: true;
        /** Query ID */
        queryId: long;
        /** Popup to show */
        message?: string;
        /** URL to open */
        url?: string;
        /** Cache validity */
        cacheTime: int;
    }

    /**
     * Set the callback answer to a user button press (bots only)<br>
     * @throws {{code:400,type:"MESSAGE_TOO_LONG"}} The provided message is too long.
     * @throws {{code:400,type:"QUERY_ID_INVALID"}} The query ID is invalid.
     * @throws {{code:400,type:"URL_INVALID"}} Invalid URL provided.
     */
    export class SetBotCallbackAnswer extends Request<Partial<SetBotCallbackAnswerArgs>,Bool> implements SetBotCallbackAnswerArgs {
        CONSTRUCTOR_id: -712043766;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetBotCallbackAnswer";
        flags: number;
        alert?: true;
        queryId: long;
        message?: string;
        url?: string;
        cacheTime: int;
        fromReader(reader: Reader): SetBotCallbackAnswer;
    }

    export interface GetPeerDialogsArgs {
        /** Peers */
        peers: TypeInputDialogPeer[];
    }

    /**
     * Get dialog info of specified peers<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetPeerDialogs extends Request<Partial<GetPeerDialogsArgs>,messages.TypePeerDialogs> implements GetPeerDialogsArgs {
        CONSTRUCTOR_id: -462373635;
        SUBCLASS_OF_ID: 986120498;
        classType: "request";
        className: "messages.GetPeerDialogs";
        peers: TypeInputDialogPeer[];
        fromReader(reader: Reader): GetPeerDialogs;
    }

    export interface SaveDraftArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable generation of the webpage preview */
        noWebpage?: true;
        /** Message ID the message should reply to */
        replyToMsgId?: MessageIDLike;
        /** Destination of the message that should be sent */
        peer: EntityLike;
        /** The draft */
        message: string;
        /** Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text */
        entities?: TypeMessageEntity[];
    }

    /**
     * Save a message <a href="https://corefork.telegram.org/api/drafts">draft</a> associated to a chat.<br>
     * @link https://corefork.telegram.org/api/entities
     * @link https://corefork.telegram.org/api/drafts
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class SaveDraft extends Request<Partial<SaveDraftArgs>,Bool> implements SaveDraftArgs {
        CONSTRUCTOR_id: -1137057461;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SaveDraft";
        flags: number;
        noWebpage?: true;
        replyToMsgId?: MessageIDLike;
        peer: EntityLike;
        message: string;
        entities?: TypeMessageEntity[];
        fromReader(reader: Reader): SaveDraft;
    }

    /**
     * Save get all message <a href="https://corefork.telegram.org/api/drafts">drafts</a>.<br>
     * @link https://corefork.telegram.org/api/drafts
     */
    export class GetAllDrafts extends Request<Partial<void>,TypeUpdates> {
        CONSTRUCTOR_id: 1782549861;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.GetAllDrafts";
        fromReader(reader: Reader): GetAllDrafts;
    }

    export interface GetFeaturedStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get featured stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetFeaturedStickers extends Request<Partial<GetFeaturedStickersArgs>,messages.TypeFeaturedStickers> implements GetFeaturedStickersArgs {
        CONSTRUCTOR_id: 766298703;
        SUBCLASS_OF_ID: 638891810;
        classType: "request";
        className: "messages.GetFeaturedStickers";
        hash: int;
        fromReader(reader: Reader): GetFeaturedStickers;
    }

    export interface ReadFeaturedStickersArgs {
        /** IDs of stickersets to mark as read */
        id: long[];
    }

    /** Mark new featured stickers as read<br> */
    export class ReadFeaturedStickers extends Request<Partial<ReadFeaturedStickersArgs>,Bool> implements ReadFeaturedStickersArgs {
        CONSTRUCTOR_id: 1527873830;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReadFeaturedStickers";
        id: long[];
        fromReader(reader: Reader): ReadFeaturedStickers;
    }

    export interface GetRecentStickersArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Get stickers recently attached to photo or video files */
        attached?: true;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get recent stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetRecentStickers extends Request<Partial<GetRecentStickersArgs>,messages.TypeRecentStickers> implements GetRecentStickersArgs {
        CONSTRUCTOR_id: 1587647177;
        SUBCLASS_OF_ID: 4151281283;
        classType: "request";
        className: "messages.GetRecentStickers";
        flags: number;
        attached?: true;
        hash: int;
        fromReader(reader: Reader): GetRecentStickers;
    }

    export interface SaveRecentStickerArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to add/remove stickers recently attached to photo or video files */
        attached?: true;
        /** Sticker */
        id: TypeInputDocument;
        /** Whether to save or unsave the sticker */
        unsave: Bool;
    }

    /**
     * Add/remove sticker from recent stickers list<br>
     * @throws {{code:400,type:"STICKER_ID_INVALID"}} The provided sticker ID is invalid.
     */
    export class SaveRecentSticker extends Request<Partial<SaveRecentStickerArgs>,Bool> implements SaveRecentStickerArgs {
        CONSTRUCTOR_id: 958863608;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SaveRecentSticker";
        flags: number;
        attached?: true;
        id: TypeInputDocument;
        unsave: Bool;
        fromReader(reader: Reader): SaveRecentSticker;
    }

    export interface ClearRecentStickersArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag to clear the list of stickers recently attached to photo or video files */
        attached?: true;
    }

    /** Clear recent stickers<br> */
    export class ClearRecentStickers extends Request<Partial<ClearRecentStickersArgs>,Bool> implements ClearRecentStickersArgs {
        CONSTRUCTOR_id: -1986437075;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ClearRecentStickers";
        flags: number;
        attached?: true;
        fromReader(reader: Reader): ClearRecentStickers;
    }

    export interface GetArchivedStickersArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Get mask stickers */
        masks?: true;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: long;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get all archived stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetArchivedStickers extends Request<Partial<GetArchivedStickersArgs>,messages.TypeArchivedStickers> implements GetArchivedStickersArgs {
        CONSTRUCTOR_id: 1475442322;
        SUBCLASS_OF_ID: 1922488177;
        classType: "request";
        className: "messages.GetArchivedStickers";
        flags: number;
        masks?: true;
        offsetId: long;
        limit: int;
        fromReader(reader: Reader): GetArchivedStickers;
    }

    export interface GetMaskStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get installed mask stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetMaskStickers extends Request<Partial<GetMaskStickersArgs>,messages.TypeAllStickers> implements GetMaskStickersArgs {
        CONSTRUCTOR_id: 1706608543;
        SUBCLASS_OF_ID: 1166231593;
        classType: "request";
        className: "messages.GetMaskStickers";
        hash: int;
        fromReader(reader: Reader): GetMaskStickers;
    }

    export interface GetAttachedStickersArgs {
        /** Stickered media */
        media: TypeInputStickeredMedia;
    }

    /** Get stickers attached to a photo or video<br> */
    export class GetAttachedStickers extends Request<Partial<GetAttachedStickersArgs>,TypeStickerSetCovered[]> implements GetAttachedStickersArgs {
        CONSTRUCTOR_id: -866424884;
        SUBCLASS_OF_ID: 3423756139;
        classType: "request";
        className: "messages.GetAttachedStickers";
        media: TypeInputStickeredMedia;
        fromReader(reader: Reader): GetAttachedStickers;
    }

    export interface SetGameScoreArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag if the game message should be automatically edited to include the current scoreboard */
        editMessage?: true;
        /** Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters */
        force?: true;
        /** Unique identifier of target chat */
        peer: EntityLike;
        /** Identifier of the sent message */
        id: int;
        /** User identifier */
        userId: TypeInputUser;
        /** New score */
        score: int;
    }

    /**
     * Use this method to set the score of the specified user in a game sent as a normal message (bots only).<br>
     * @throws {{code:400,type:"BOT_SCORE_NOT_MODIFIED"}} The score wasn't modified.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USER_BOT_REQUIRED"}} This method can only be called by a bot.
     */
    export class SetGameScore extends Request<Partial<SetGameScoreArgs>,TypeUpdates> implements SetGameScoreArgs {
        CONSTRUCTOR_id: -1896289088;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SetGameScore";
        flags: number;
        editMessage?: true;
        force?: true;
        peer: EntityLike;
        id: int;
        userId: TypeInputUser;
        score: int;
        fromReader(reader: Reader): SetGameScore;
    }

    export interface SetInlineGameScoreArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag if the game message should be automatically edited to include the current scoreboard */
        editMessage?: true;
        /** Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters */
        force?: true;
        /** ID of the inline message */
        id: TypeInputBotInlineMessageID;
        /** User identifier */
        userId: TypeInputUser;
        /** New score */
        score: int;
    }

    /**
     * Use this method to set the score of the specified user in a game sent as an inline message (bots only).<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"USER_BOT_REQUIRED"}} This method can only be called by a bot.
     */
    export class SetInlineGameScore extends Request<Partial<SetInlineGameScoreArgs>,Bool> implements SetInlineGameScoreArgs {
        CONSTRUCTOR_id: 363700068;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetInlineGameScore";
        flags: number;
        editMessage?: true;
        force?: true;
        id: TypeInputBotInlineMessageID;
        userId: TypeInputUser;
        score: int;
        fromReader(reader: Reader): SetInlineGameScore;
    }

    export interface GetGameHighScoresArgs {
        /** Where was the game sent */
        peer: EntityLike;
        /** ID of message with game media attachment */
        id: int;
        /** Get high scores made by a certain user */
        userId: TypeInputUser;
    }

    /**
     * Get highscores of a game<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USER_BOT_REQUIRED"}} This method can only be called by a bot.
     */
    export class GetGameHighScores extends Request<Partial<GetGameHighScoresArgs>,messages.TypeHighScores> implements GetGameHighScoresArgs {
        CONSTRUCTOR_id: -400399203;
        SUBCLASS_OF_ID: 1825412605;
        classType: "request";
        className: "messages.GetGameHighScores";
        peer: EntityLike;
        id: int;
        userId: TypeInputUser;
        fromReader(reader: Reader): GetGameHighScores;
    }

    export interface GetInlineGameHighScoresArgs {
        /** ID of inline message */
        id: TypeInputBotInlineMessageID;
        /** Get high scores of a certain user */
        userId: TypeInputUser;
    }

    /**
     * Get highscores of a game sent using an inline bot<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"USER_BOT_REQUIRED"}} This method can only be called by a bot.
     */
    export class GetInlineGameHighScores extends Request<Partial<GetInlineGameHighScoresArgs>,messages.TypeHighScores> implements GetInlineGameHighScoresArgs {
        CONSTRUCTOR_id: 258170395;
        SUBCLASS_OF_ID: 1825412605;
        classType: "request";
        className: "messages.GetInlineGameHighScores";
        id: TypeInputBotInlineMessageID;
        userId: TypeInputUser;
        fromReader(reader: Reader): GetInlineGameHighScores;
    }

    export interface GetCommonChatsArgs {
        /** User ID */
        userId: TypeInputUser;
        /** Maximum ID of chat to return (see <a href="https://corefork.telegram.org/api/offsets">pagination</a>) */
        maxId: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get chats in common with a user<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class GetCommonChats extends Request<Partial<GetCommonChatsArgs>,messages.TypeChats> implements GetCommonChatsArgs {
        CONSTRUCTOR_id: 218777796;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "messages.GetCommonChats";
        userId: TypeInputUser;
        maxId: int;
        limit: int;
        fromReader(reader: Reader): GetCommonChats;
    }

    export interface GetAllChatsArgs {
        /** Except these chats/channels/supergroups */
        exceptIds: int[];
    }

    /** Get all chats, channels and supergroups<br> */
    export class GetAllChats extends Request<Partial<GetAllChatsArgs>,messages.TypeChats> implements GetAllChatsArgs {
        CONSTRUCTOR_id: -341307408;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "messages.GetAllChats";
        exceptIds: int[];
        fromReader(reader: Reader): GetAllChats;
    }

    export interface GetWebPageArgs {
        /** URL of IV page to fetch */
        url: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get <a href="https://instantview.telegram.org/">instant view</a> page<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"WC_CONVERT_URL_INVALID"}} WC convert URL invalid.
     */
    export class GetWebPage extends Request<Partial<GetWebPageArgs>,TypeWebPage> implements GetWebPageArgs {
        CONSTRUCTOR_id: 852135825;
        SUBCLASS_OF_ID: 1437168769;
        classType: "request";
        className: "messages.GetWebPage";
        url: string;
        hash: int;
        fromReader(reader: Reader): GetWebPage;
    }

    export interface ToggleDialogPinArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to pin or unpin the dialog */
        pinned?: true;
        /** The dialog to pin */
        peer: TypeInputDialogPeer;
    }

    /**
     * Pin/unpin a dialog<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PINNED_DIALOGS_TOO_MUCH"}} Too many pinned dialogs.
     */
    export class ToggleDialogPin extends Request<Partial<ToggleDialogPinArgs>,Bool> implements ToggleDialogPinArgs {
        CONSTRUCTOR_id: -1489903017;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ToggleDialogPin";
        flags: number;
        pinned?: true;
        peer: TypeInputDialogPeer;
        fromReader(reader: Reader): ToggleDialogPin;
    }

    export interface ReorderPinnedDialogsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, dialogs pinned server-side but not present in the <code>order</code> field will be unpinned. */
        force?: true;
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
        /** New dialog order */
        order: TypeInputDialogPeer[];
    }

    /**
     * Reorder pinned dialogs<br>
     * @link https://corefork.telegram.org/api/folders
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReorderPinnedDialogs extends Request<Partial<ReorderPinnedDialogsArgs>,Bool> implements ReorderPinnedDialogsArgs {
        CONSTRUCTOR_id: 991616823;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReorderPinnedDialogs";
        flags: number;
        force?: true;
        folderId: int;
        order: TypeInputDialogPeer[];
        fromReader(reader: Reader): ReorderPinnedDialogs;
    }

    export interface GetPinnedDialogsArgs {
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * Get pinned dialogs<br>
     * @link https://corefork.telegram.org/api/folders
     * @throws {{code:400,type:"FOLDER_ID_INVALID"}} Invalid folder ID.
     */
    export class GetPinnedDialogs extends Request<Partial<GetPinnedDialogsArgs>,messages.TypePeerDialogs> implements GetPinnedDialogsArgs {
        CONSTRUCTOR_id: -692498958;
        SUBCLASS_OF_ID: 986120498;
        classType: "request";
        className: "messages.GetPinnedDialogs";
        folderId: int;
        fromReader(reader: Reader): GetPinnedDialogs;
    }

    export interface SetBotShippingResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Unique identifier for the query to be answered */
        queryId: long;
        /** Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user. */
        error?: string;
        /** A vector of available shipping options. */
        shippingOptions?: TypeShippingOption[];
    }

    /**
     * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the bot will receive an <a href="https://corefork.telegram.org/constructor/updateBotShippingQuery">updateBotShippingQuery</a> update. Use this method to reply to shipping queries.<br>
     * @link https://corefork.telegram.org/constructor/updateBotShippingQuery
     * @throws {{code:400,type:"QUERY_ID_INVALID"}} The query ID is invalid.
     */
    export class SetBotShippingResults extends Request<Partial<SetBotShippingResultsArgs>,Bool> implements SetBotShippingResultsArgs {
        CONSTRUCTOR_id: -436833542;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetBotShippingResults";
        flags: number;
        queryId: long;
        error?: string;
        shippingOptions?: TypeShippingOption[];
        fromReader(reader: Reader): SetBotShippingResults;
    }

    export interface SetBotPrecheckoutResultsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the <code>error</code> field, instead */
        success?: true;
        /** Unique identifier for the query to be answered */
        queryId: long;
        /** Required if the <code>success</code> isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user. */
        error?: string;
    }

    /**
     * Once the user has confirmed their payment and shipping details, the bot receives an <a href="https://corefork.telegram.org/constructor/updateBotPrecheckoutQuery">updateBotPrecheckoutQuery</a> update.<br>
     * Use this method to respond to such pre-checkout queries.<br>
     * <strong>Note</strong>: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.<br>
     * @link https://corefork.telegram.org/constructor/updateBotPrecheckoutQuery
     * @throws {{code:400,type:"ERROR_TEXT_EMPTY"}} The provided error message is empty.
     */
    export class SetBotPrecheckoutResults extends Request<Partial<SetBotPrecheckoutResultsArgs>,Bool> implements SetBotPrecheckoutResultsArgs {
        CONSTRUCTOR_id: 163765653;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.SetBotPrecheckoutResults";
        flags: number;
        success?: true;
        queryId: long;
        error?: string;
        fromReader(reader: Reader): SetBotPrecheckoutResults;
    }

    export interface UploadMediaArgs {
        /** The chat, can be an <a href="https://corefork.telegram.org/constructor/inputPeerEmpty">inputPeerEmpty</a> for bots */
        peer: EntityLike;
        /** File uploaded in chunks as described in <a href="https://corefork.telegram.org/api/files">files »</a> */
        media: TypeInputMedia;
    }

    /**
     * Upload a file and associate it to a chat (without actually sending it to the chat)<br>
     * @link https://corefork.telegram.org/constructor/inputPeerEmpty
     * @link https://corefork.telegram.org/api/files
     * @throws {{code:400,type:"BOT_MISSING"}} This method can only be run by a bot.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_RESTRICTED"}} You can't send messages in this chat, you were restricted.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"FILE_PARTS_INVALID"}} The number of file parts is invalid.
     * @throws {{code:400,type:"IMAGE_PROCESS_FAILED"}} Failure while processing image.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MEDIA_INVALID"}} Media invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_INVALID_DIMENSIONS"}} The photo dimensions are invalid.
     * @throws {{code:400,type:"PHOTO_SAVE_FILE_INVALID"}} Internal issues, try again later.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"WEBPAGE_CURL_FAILED"}} Failure while fetching the webpage with cURL.
     */
    export class UploadMedia extends Request<Partial<UploadMediaArgs>,TypeMessageMedia> implements UploadMediaArgs {
        CONSTRUCTOR_id: 1369162417;
        SUBCLASS_OF_ID: 1198308914;
        classType: "request";
        className: "messages.UploadMedia";
        peer: EntityLike;
        media: TypeInputMedia;
        fromReader(reader: Reader): UploadMedia;
    }

    export interface SendScreenshotNotificationArgs {
        /** Other user */
        peer: EntityLike;
        /** ID of message that was screenshotted, can be 0 */
        replyToMsgId: MessageIDLike;
        /** Random ID to avoid message resending */
        randomId: long;
    }

    /**
     * Notify the other user in a private chat that a screenshot of the chat was taken<br>
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"YOU_BLOCKED_USER"}} You blocked this user.
     */
    export class SendScreenshotNotification extends Request<Partial<SendScreenshotNotificationArgs>,TypeUpdates> implements SendScreenshotNotificationArgs {
        CONSTRUCTOR_id: -914493408;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendScreenshotNotification";
        peer: EntityLike;
        replyToMsgId: MessageIDLike;
        randomId: long;
        fromReader(reader: Reader): SendScreenshotNotification;
    }

    export interface GetFavedStickersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get faved stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetFavedStickers extends Request<Partial<GetFavedStickersArgs>,messages.TypeFavedStickers> implements GetFavedStickersArgs {
        CONSTRUCTOR_id: 567151374;
        SUBCLASS_OF_ID: 2389929913;
        classType: "request";
        className: "messages.GetFavedStickers";
        hash: int;
        fromReader(reader: Reader): GetFavedStickers;
    }

    export interface FaveStickerArgs {
        /** Sticker to mark as favorite */
        id: TypeInputDocument;
        /** Unfavorite */
        unfave: Bool;
    }

    /**
     * Mark a sticker as favorite<br>
     * @throws {{code:400,type:"STICKER_ID_INVALID"}} The provided sticker ID is invalid.
     */
    export class FaveSticker extends Request<Partial<FaveStickerArgs>,Bool> implements FaveStickerArgs {
        CONSTRUCTOR_id: -1174420133;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.FaveSticker";
        id: TypeInputDocument;
        unfave: Bool;
        fromReader(reader: Reader): FaveSticker;
    }

    export interface GetUnreadMentionsArgs {
        /** Peer where to look for mentions */
        peer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        addOffset: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
        /** Maximum message ID to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        maxId: int;
        /** Minimum message ID to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        minId: int;
    }

    /**
     * Get unread messages where we were mentioned<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetUnreadMentions extends Request<Partial<GetUnreadMentionsArgs>,messages.TypeMessages> implements GetUnreadMentionsArgs {
        CONSTRUCTOR_id: 1180140658;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetUnreadMentions";
        peer: EntityLike;
        offsetId: int;
        addOffset: int;
        limit: int;
        maxId: int;
        minId: int;
        fromReader(reader: Reader): GetUnreadMentions;
    }

    export interface ReadMentionsArgs {
        /** Dialog */
        peer: EntityLike;
    }

    /**
     * Mark mentions as read<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReadMentions extends Request<Partial<ReadMentionsArgs>,messages.TypeAffectedHistory> implements ReadMentionsArgs {
        CONSTRUCTOR_id: 251759059;
        SUBCLASS_OF_ID: 743031062;
        classType: "request";
        className: "messages.ReadMentions";
        peer: EntityLike;
        fromReader(reader: Reader): ReadMentions;
    }

    export interface GetRecentLocationsArgs {
        /** User */
        peer: EntityLike;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get live location history of a certain user<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetRecentLocations extends Request<Partial<GetRecentLocationsArgs>,messages.TypeMessages> implements GetRecentLocationsArgs {
        CONSTRUCTOR_id: -1144759543;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetRecentLocations";
        peer: EntityLike;
        limit: int;
        hash: int;
        fromReader(reader: Reader): GetRecentLocations;
    }

    export interface SendMultiMediaArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to send the album silently (no notification triggered) */
        silent?: true;
        /** Send in background? */
        background?: true;
        /** Whether to clear <a href="https://corefork.telegram.org/api/drafts">drafts</a> */
        clearDraft?: true;
        /** The destination chat */
        peer: EntityLike;
        /** The message to reply to */
        replyToMsgId?: MessageIDLike;
        /** The medias to send */
        multiMedia: TypeInputSingleMedia[];
        /** Scheduled message date for scheduled messages */
        scheduleDate?: int;
    }

    /**
     * Send an <a href="https://corefork.telegram.org/api/files#albums-grouped-media">album or grouped media</a><br>
     * @link https://corefork.telegram.org/api/drafts
     * @link https://corefork.telegram.org/api/files
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"MEDIA_CAPTION_TOO_LONG"}} The caption is too long.
     * @throws {{code:400,type:"MEDIA_EMPTY"}} The provided media object is invalid.
     * @throws {{code:400,type:"MEDIA_INVALID"}} Media invalid.
     * @throws {{code:400,type:"MULTI_MEDIA_TOO_LONG"}} Too many media files for album.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"RANDOM_ID_EMPTY"}} Random ID empty.
     * @throws {{code:400,type:"SCHEDULE_DATE_TOO_LATE"}} You can't schedule a message this far in the future.
     * @throws {{code:400,type:"SCHEDULE_TOO_MUCH"}} There are too many scheduled messages.
     * @throws {{code:420,type:"SLOWMODE_WAIT_X"}} Slowmode is enabled in this chat: wait X seconds before sending another message to this chat.
     */
    export class SendMultiMedia extends Request<Partial<SendMultiMediaArgs>,TypeUpdates> implements SendMultiMediaArgs {
        CONSTRUCTOR_id: -872345397;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendMultiMedia";
        flags: number;
        silent?: true;
        background?: true;
        clearDraft?: true;
        peer: EntityLike;
        replyToMsgId?: MessageIDLike;
        multiMedia: TypeInputSingleMedia[];
        scheduleDate?: int;
        fromReader(reader: Reader): SendMultiMedia;
    }

    export interface UploadEncryptedFileArgs {
        /** The secret chat to associate the file to */
        peer: TypeInputEncryptedChat;
        /** The file */
        file: TypeInputEncryptedFile;
    }

    /** Upload encrypted file and associate it to a secret chat<br> */
    export class UploadEncryptedFile extends Request<Partial<UploadEncryptedFileArgs>,TypeEncryptedFile> implements UploadEncryptedFileArgs {
        CONSTRUCTOR_id: 1347929239;
        SUBCLASS_OF_ID: 2217371584;
        classType: "request";
        className: "messages.UploadEncryptedFile";
        peer: TypeInputEncryptedChat;
        file: TypeInputEncryptedFile;
        fromReader(reader: Reader): UploadEncryptedFile;
    }

    export interface SearchStickerSetsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Exclude featured stickersets from results */
        excludeFeatured?: true;
        /** Query string */
        q: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Search for stickersets<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class SearchStickerSets extends Request<Partial<SearchStickerSetsArgs>,messages.TypeFoundStickerSets> implements SearchStickerSetsArgs {
        CONSTRUCTOR_id: -1028140917;
        SUBCLASS_OF_ID: 68023137;
        classType: "request";
        className: "messages.SearchStickerSets";
        flags: number;
        excludeFeatured?: true;
        q: string;
        hash: int;
        fromReader(reader: Reader): SearchStickerSets;
    }

    /** Get message ranges for saving the user's chat history<br> */
    export class GetSplitRanges extends Request<Partial<void>,TypeMessageRange[]> {
        CONSTRUCTOR_id: 486505992;
        SUBCLASS_OF_ID: 1537549572;
        classType: "request";
        className: "messages.GetSplitRanges";
        fromReader(reader: Reader): GetSplitRanges;
    }

    export interface MarkDialogUnreadArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Mark as unread/read */
        unread?: true;
        /** Dialog */
        peer: TypeInputDialogPeer;
    }

    /** Manually mark dialog as unread<br> */
    export class MarkDialogUnread extends Request<Partial<MarkDialogUnreadArgs>,Bool> implements MarkDialogUnreadArgs {
        CONSTRUCTOR_id: -1031349873;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.MarkDialogUnread";
        flags: number;
        unread?: true;
        peer: TypeInputDialogPeer;
        fromReader(reader: Reader): MarkDialogUnread;
    }

    /** Get dialogs manually marked as unread<br> */
    export class GetDialogUnreadMarks extends Request<Partial<void>,TypeDialogPeer[]> {
        CONSTRUCTOR_id: 585256482;
        SUBCLASS_OF_ID: 3200666329;
        classType: "request";
        className: "messages.GetDialogUnreadMarks";
        fromReader(reader: Reader): GetDialogUnreadMarks;
    }

    /**
     * Clear all <a href="https://corefork.telegram.org/api/drafts">drafts</a>.<br>
     * @link https://corefork.telegram.org/api/drafts
     */
    export class ClearAllDrafts extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: 2119757468;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ClearAllDrafts";
        fromReader(reader: Reader): ClearAllDrafts;
    }

    export interface UpdatePinnedMessageArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Pin the message silently, without triggering a notification */
        silent?: true;
        /** Whether the message should unpinned or pinned */
        unpin?: true;
        /** Whether the message should only be pinned on the local side of a one-to-one chat */
        pmOneside?: true;
        /** The peer where to pin the message */
        peer: EntityLike;
        /** The message to pin or unpin */
        id: int;
    }

    /**
     * Pin a message<br>
     * @throws {{code:400,type:"BOT_ONESIDE_NOT_AVAIL"}} Bots can't pin messages in PM just for themselves.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PIN_RESTRICTED"}} You can't pin messages.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     */
    export class UpdatePinnedMessage extends Request<Partial<UpdatePinnedMessageArgs>,TypeUpdates> implements UpdatePinnedMessageArgs {
        CONSTRUCTOR_id: -760547348;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.UpdatePinnedMessage";
        flags: number;
        silent?: true;
        unpin?: true;
        pmOneside?: true;
        peer: EntityLike;
        id: int;
        fromReader(reader: Reader): UpdatePinnedMessage;
    }

    export interface SendVoteArgs {
        /** The chat where the poll was sent */
        peer: EntityLike;
        /** The message ID of the poll */
        msgId: MessageIDLike;
        /** The options that were chosen */
        options: bytes[];
    }

    /**
     * Vote in a <a href="https://corefork.telegram.org/constructor/poll">poll</a><br>
     * @link https://corefork.telegram.org/constructor/poll
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MESSAGE_POLL_CLOSED"}} Poll closed.
     * @throws {{code:400,type:"OPTIONS_TOO_MUCH"}} Too many options provided.
     * @throws {{code:400,type:"OPTION_INVALID"}} Invalid option selected.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"REVOTE_NOT_ALLOWED"}} You cannot change your vote.
     */
    export class SendVote extends Request<Partial<SendVoteArgs>,TypeUpdates> implements SendVoteArgs {
        CONSTRUCTOR_id: 283795844;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendVote";
        peer: EntityLike;
        msgId: MessageIDLike;
        options: bytes[];
        fromReader(reader: Reader): SendVote;
    }

    export interface GetPollResultsArgs {
        /** Peer where the poll was found */
        peer: EntityLike;
        /** Message ID of poll message */
        msgId: MessageIDLike;
    }

    /**
     * Get poll results<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class GetPollResults extends Request<Partial<GetPollResultsArgs>,TypeUpdates> implements GetPollResultsArgs {
        CONSTRUCTOR_id: 1941660731;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.GetPollResults";
        peer: EntityLike;
        msgId: MessageIDLike;
        fromReader(reader: Reader): GetPollResults;
    }

    export interface GetOnlinesArgs {
        /** The chat */
        peer: EntityLike;
    }

    /**
     * Get count of online users in a chat<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetOnlines extends Request<Partial<GetOnlinesArgs>,TypeChatOnlines> implements GetOnlinesArgs {
        CONSTRUCTOR_id: 1848369232;
        SUBCLASS_OF_ID: 2357301306;
        classType: "request";
        className: "messages.GetOnlines";
        peer: EntityLike;
        fromReader(reader: Reader): GetOnlines;
    }

    export interface GetStatsURLArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Pass true if a URL with the dark theme must be returned */
        dark?: true;
        /** Chat identifier */
        peer: EntityLike;
        /** Parameters from <code>tg://statsrefresh?params=******</code> link */
        params: string;
    }

    /**
     * Returns URL with the chat statistics. Currently this method can be used only for channels<br>{schema}
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetStatsURL extends Request<Partial<GetStatsURLArgs>,TypeStatsURL> implements GetStatsURLArgs {
        CONSTRUCTOR_id: -2127811866;
        SUBCLASS_OF_ID: 2370606272;
        classType: "request";
        className: "messages.GetStatsURL";
        flags: number;
        dark?: true;
        peer: EntityLike;
        params: string;
        fromReader(reader: Reader): GetStatsURL;
    }

    export interface EditChatAboutArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">group/supergroup/channel</a>. */
        peer: EntityLike;
        /** The new description */
        about: string;
    }

    /**
     * Edit the description of a <a href="https://corefork.telegram.org/api/channel">group/supergroup/channel</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ABOUT_NOT_MODIFIED"}} About text has not changed.
     * @throws {{code:400,type:"CHAT_ABOUT_TOO_LONG"}} Chat about too long.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class EditChatAbout extends Request<Partial<EditChatAboutArgs>,Bool> implements EditChatAboutArgs {
        CONSTRUCTOR_id: -554301545;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.EditChatAbout";
        peer: EntityLike;
        about: string;
        fromReader(reader: Reader): EditChatAbout;
    }

    export interface EditChatDefaultBannedRightsArgs {
        /** The peer */
        peer: EntityLike;
        /** The new global rights */
        bannedRights: TypeChatBannedRights;
    }

    /**
     * Edit the default banned rights of a <a href="https://corefork.telegram.org/api/channel">channel/supergroup/group</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"BANNED_RIGHTS_INVALID"}} You provided some invalid flags in the banned rights.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"UNTIL_DATE_INVALID"}} Invalid until date provided.
     */
    export class EditChatDefaultBannedRights extends Request<Partial<EditChatDefaultBannedRightsArgs>,TypeUpdates> implements EditChatDefaultBannedRightsArgs {
        CONSTRUCTOR_id: -1517917375;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.EditChatDefaultBannedRights";
        peer: EntityLike;
        bannedRights: TypeChatBannedRights;
        fromReader(reader: Reader): EditChatDefaultBannedRights;
    }

    export interface GetEmojiKeywordsArgs {
        /** Language code */
        langCode: string;
    }

    /** Get localized emoji keywords<br> */
    export class GetEmojiKeywords extends Request<Partial<GetEmojiKeywordsArgs>,TypeEmojiKeywordsDifference> implements GetEmojiKeywordsArgs {
        CONSTRUCTOR_id: 899735650;
        SUBCLASS_OF_ID: 3531196018;
        classType: "request";
        className: "messages.GetEmojiKeywords";
        langCode: string;
        fromReader(reader: Reader): GetEmojiKeywords;
    }

    export interface GetEmojiKeywordsDifferenceArgs {
        /** Language code */
        langCode: string;
        /** Previous emoji keyword localization version */
        fromVersion: int;
    }

    /** Get changed emoji keywords<br> */
    export class GetEmojiKeywordsDifference extends Request<Partial<GetEmojiKeywordsDifferenceArgs>,TypeEmojiKeywordsDifference> implements GetEmojiKeywordsDifferenceArgs {
        CONSTRUCTOR_id: 352892591;
        SUBCLASS_OF_ID: 3531196018;
        classType: "request";
        className: "messages.GetEmojiKeywordsDifference";
        langCode: string;
        fromVersion: int;
        fromReader(reader: Reader): GetEmojiKeywordsDifference;
    }

    export interface GetEmojiKeywordsLanguagesArgs {
        /** Language codes */
        langCodes: string[];
    }

    /** Get info about an emoji keyword localization<br> */
    export class GetEmojiKeywordsLanguages extends Request<Partial<GetEmojiKeywordsLanguagesArgs>,TypeEmojiLanguage[]> implements GetEmojiKeywordsLanguagesArgs {
        CONSTRUCTOR_id: 1318675378;
        SUBCLASS_OF_ID: 3885355911;
        classType: "request";
        className: "messages.GetEmojiKeywordsLanguages";
        langCodes: string[];
        fromReader(reader: Reader): GetEmojiKeywordsLanguages;
    }

    export interface GetEmojiURLArgs {
        /** Language code for which the emoji replacements will be suggested */
        langCode: string;
    }

    /** Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation<br> */
    export class GetEmojiURL extends Request<Partial<GetEmojiURLArgs>,TypeEmojiURL> implements GetEmojiURLArgs {
        CONSTRUCTOR_id: -709817306;
        SUBCLASS_OF_ID: 530614809;
        classType: "request";
        className: "messages.GetEmojiURL";
        langCode: string;
        fromReader(reader: Reader): GetEmojiURL;
    }

    export interface GetSearchCountersArgs {
        /** Peer where to search */
        peer: EntityLike;
        /** Search filters */
        filters: TypeMessagesFilter[];
    }

    /**
     * Get the number of results that would be found by a <a href="https://corefork.telegram.org/method/messages.search">messages.search</a> call with the same parameters<br>
     * @link https://corefork.telegram.org/method/messages.search
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetSearchCounters extends Request<Partial<GetSearchCountersArgs>,messages.TypeSearchCounter[]> implements GetSearchCountersArgs {
        CONSTRUCTOR_id: 1932455680;
        SUBCLASS_OF_ID: 1809726574;
        classType: "request";
        className: "messages.GetSearchCounters";
        peer: EntityLike;
        filters: TypeMessagesFilter[];
        fromReader(reader: Reader): GetSearchCounters;
    }

    export interface RequestUrlAuthArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Peer where the message is located */
        peer?: EntityLike;
        /** The message */
        msgId?: MessageIDLike;
        /** The ID of the button with the authorization request */
        buttonId?: int;
        /** URL used for <a href="https://corefork.telegram.org/api/url-authorization#link-url-authorization">link URL authorization, click here for more info »</a> */
        url?: string;
    }

    /**
     * Get more info about a Seamless Telegram Login authorization request, for more info <a href="https://corefork.telegram.org/api/url-authorization">click here »</a><br>
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class RequestUrlAuth extends Request<Partial<RequestUrlAuthArgs>,TypeUrlAuthResult> implements RequestUrlAuthArgs {
        CONSTRUCTOR_id: 428848198;
        SUBCLASS_OF_ID: 2003159838;
        classType: "request";
        className: "messages.RequestUrlAuth";
        flags: number;
        peer?: EntityLike;
        msgId?: MessageIDLike;
        buttonId?: int;
        url?: string;
        fromReader(reader: Reader): RequestUrlAuth;
    }

    export interface AcceptUrlAuthArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set this flag to allow the bot to send messages to you (if requested) */
        writeAllowed?: true;
        /** The location of the message */
        peer?: EntityLike;
        /** Message ID of the message with the login button */
        msgId?: MessageIDLike;
        /** ID of the login button */
        buttonId?: int;
        /** URL used for <a href="https://corefork.telegram.org/api/url-authorization#link-url-authorization">link URL authorization, click here for more info »</a> */
        url?: string;
    }

    /**
     * Use this to accept a Seamless Telegram Login authorization request, for more info <a href="https://corefork.telegram.org/api/url-authorization">click here »</a><br>
     * @link https://corefork.telegram.org/api/url-authorization
     */
    export class AcceptUrlAuth extends Request<Partial<AcceptUrlAuthArgs>,TypeUrlAuthResult> implements AcceptUrlAuthArgs {
        CONSTRUCTOR_id: -1322487515;
        SUBCLASS_OF_ID: 2003159838;
        classType: "request";
        className: "messages.AcceptUrlAuth";
        flags: number;
        writeAllowed?: true;
        peer?: EntityLike;
        msgId?: MessageIDLike;
        buttonId?: int;
        url?: string;
        fromReader(reader: Reader): AcceptUrlAuth;
    }

    export interface HidePeerSettingsBarArgs {
        /** Peer */
        peer: EntityLike;
    }

    /**
     * Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the <a href="https://corefork.telegram.org/constructor/peerSettings">peer's settings</a>.<br>
     * @link https://corefork.telegram.org/constructor/peerSettings
     */
    export class HidePeerSettingsBar extends Request<Partial<HidePeerSettingsBarArgs>,Bool> implements HidePeerSettingsBarArgs {
        CONSTRUCTOR_id: 1336717624;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.HidePeerSettingsBar";
        peer: EntityLike;
        fromReader(reader: Reader): HidePeerSettingsBar;
    }

    export interface GetScheduledHistoryArgs {
        /** Peer */
        peer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get scheduled messages<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetScheduledHistory extends Request<Partial<GetScheduledHistoryArgs>,messages.TypeMessages> implements GetScheduledHistoryArgs {
        CONSTRUCTOR_id: -490575781;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetScheduledHistory";
        peer: EntityLike;
        hash: int;
        fromReader(reader: Reader): GetScheduledHistory;
    }

    export interface GetScheduledMessagesArgs {
        /** Peer */
        peer: EntityLike;
        /** IDs of scheduled messages */
        id: int[];
    }

    /**
     * Get scheduled messages<br>
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetScheduledMessages extends Request<Partial<GetScheduledMessagesArgs>,messages.TypeMessages> implements GetScheduledMessagesArgs {
        CONSTRUCTOR_id: -1111817116;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetScheduledMessages";
        peer: EntityLike;
        id: int[];
        fromReader(reader: Reader): GetScheduledMessages;
    }

    export interface SendScheduledMessagesArgs {
        /** Peer */
        peer: EntityLike;
        /** Scheduled message IDs */
        id: int[];
    }

    /**
     * Send scheduled messages right away<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class SendScheduledMessages extends Request<Partial<SendScheduledMessagesArgs>,TypeUpdates> implements SendScheduledMessagesArgs {
        CONSTRUCTOR_id: -1120369398;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SendScheduledMessages";
        peer: EntityLike;
        id: int[];
        fromReader(reader: Reader): SendScheduledMessages;
    }

    export interface DeleteScheduledMessagesArgs {
        /** Peer */
        peer: EntityLike;
        /** Scheduled message IDs */
        id: int[];
    }

    /** Delete scheduled messages<br> */
    export class DeleteScheduledMessages extends Request<Partial<DeleteScheduledMessagesArgs>,TypeUpdates> implements DeleteScheduledMessagesArgs {
        CONSTRUCTOR_id: 1504586518;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.DeleteScheduledMessages";
        peer: EntityLike;
        id: int[];
        fromReader(reader: Reader): DeleteScheduledMessages;
    }

    export interface GetPollVotesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Chat where the poll was sent */
        peer: EntityLike;
        /** Message ID */
        id: int;
        /** Get only results for the specified poll <code>option</code> */
        option?: bytes;
        /** Offset for results, taken from the <code>next_offset</code> field of <a href="https://corefork.telegram.org/constructor/messages.votesList">messages.votesList</a>, initially an empty string. <br>Note: if no more results are available, the method call will return an empty <code>next_offset</code>; thus, avoid providing the <code>next_offset</code> returned in <a href="https://corefork.telegram.org/constructor/messages.votesList">messages.votesList</a> if it is empty, to avoid an infinite loop. */
        offset?: string;
        /** Number of results to return */
        limit: int;
    }

    /**
     * Get poll results for non-anonymous polls<br>
     * @link https://corefork.telegram.org/constructor/messages.votesList
     * @throws {{code:403,type:"BROADCAST_FORBIDDEN"}} Participants of polls in channels should stay anonymous.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:403,type:"POLL_VOTE_REQUIRED"}} Cast a vote in the poll before calling this method.
     */
    export class GetPollVotes extends Request<Partial<GetPollVotesArgs>,messages.TypeVotesList> implements GetPollVotesArgs {
        CONSTRUCTOR_id: -1200736242;
        SUBCLASS_OF_ID: 3256457349;
        classType: "request";
        className: "messages.GetPollVotes";
        flags: number;
        peer: EntityLike;
        id: int;
        option?: bytes;
        offset?: string;
        limit: int;
        fromReader(reader: Reader): GetPollVotes;
    }

    export interface ToggleStickerSetsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Uninstall the specified stickersets */
        uninstall?: true;
        /** Archive the specified stickersets */
        archive?: true;
        /** Unarchive the specified stickersets */
        unarchive?: true;
        /** Stickersets to act upon */
        stickersets: TypeInputStickerSet[];
    }

    /** Apply changes to multiple stickersets<br> */
    export class ToggleStickerSets extends Request<Partial<ToggleStickerSetsArgs>,Bool> implements ToggleStickerSetsArgs {
        CONSTRUCTOR_id: -1257951254;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ToggleStickerSets";
        flags: number;
        uninstall?: true;
        archive?: true;
        unarchive?: true;
        stickersets: TypeInputStickerSet[];
        fromReader(reader: Reader): ToggleStickerSets;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/folders">folders</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class GetDialogFilters extends Request<Partial<void>,TypeDialogFilter[]> {
        CONSTRUCTOR_id: -241247891;
        SUBCLASS_OF_ID: 1612507469;
        classType: "request";
        className: "messages.GetDialogFilters";
        fromReader(reader: Reader): GetDialogFilters;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/folders">suggested folders</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class GetSuggestedDialogFilters extends Request<Partial<void>,TypeDialogFilterSuggested[]> {
        CONSTRUCTOR_id: -1566780372;
        SUBCLASS_OF_ID: 2066312249;
        classType: "request";
        className: "messages.GetSuggestedDialogFilters";
        fromReader(reader: Reader): GetSuggestedDialogFilters;
    }

    export interface UpdateDialogFilterArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> ID */
        id: int;
        /** <a href="https://corefork.telegram.org/api/folders">Folder</a> info */
        filter?: TypeDialogFilter;
    }

    /**
     * Update <a href="https://corefork.telegram.org/api/folders">folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     * @throws {{code:400,type:"FILTER_ID_INVALID"}} The specified filter ID is invalid.
     * @throws {{code:400,type:"FILTER_INCLUDE_EMPTY"}} The include_peers vector of the filter is empty.
     * @throws {{code:400,type:"FILTER_TITLE_EMPTY"}} The title field of the filter is empty.
     */
    export class UpdateDialogFilter extends Request<Partial<UpdateDialogFilterArgs>,Bool> implements UpdateDialogFilterArgs {
        CONSTRUCTOR_id: 450142282;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.UpdateDialogFilter";
        flags: number;
        id: int;
        filter?: TypeDialogFilter;
        fromReader(reader: Reader): UpdateDialogFilter;
    }

    export interface UpdateDialogFiltersOrderArgs {
        /** New <a href="https://corefork.telegram.org/api/folders">folder</a> order */
        order: int[];
    }

    /**
     * Reorder <a href="https://corefork.telegram.org/api/folders">folders</a><br>
     * @link https://corefork.telegram.org/api/folders
     */
    export class UpdateDialogFiltersOrder extends Request<Partial<UpdateDialogFiltersOrderArgs>,Bool> implements UpdateDialogFiltersOrderArgs {
        CONSTRUCTOR_id: -983318044;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.UpdateDialogFiltersOrder";
        order: int[];
        fromReader(reader: Reader): UpdateDialogFiltersOrder;
    }

    export interface GetOldFeaturedStickersArgs {
        /** Offset */
        offset: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Method for fetching previously featured stickers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetOldFeaturedStickers extends Request<Partial<GetOldFeaturedStickersArgs>,messages.TypeFeaturedStickers> implements GetOldFeaturedStickersArgs {
        CONSTRUCTOR_id: 1608974939;
        SUBCLASS_OF_ID: 638891810;
        classType: "request";
        className: "messages.GetOldFeaturedStickers";
        offset: int;
        limit: int;
        hash: int;
        fromReader(reader: Reader): GetOldFeaturedStickers;
    }

    export interface GetRepliesArgs {
        /** Peer */
        peer: EntityLike;
        /** Message ID */
        msgId: MessageIDLike;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetDate: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        addOffset: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
        /** If a positive value was transferred, the method will return only messages with ID smaller than max_id */
        maxId: int;
        /** If a positive value was transferred, the method will return only messages with ID bigger than min_id */
        minId: int;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get messages in a reply thread<br>
     * @link https://corefork.telegram.org/api/offsets
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetReplies extends Request<Partial<GetRepliesArgs>,messages.TypeMessages> implements GetRepliesArgs {
        CONSTRUCTOR_id: 615875002;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "messages.GetReplies";
        peer: EntityLike;
        msgId: MessageIDLike;
        offsetId: int;
        offsetDate: int;
        addOffset: int;
        limit: int;
        maxId: int;
        minId: int;
        hash: int;
        fromReader(reader: Reader): GetReplies;
    }

    export interface GetDiscussionMessageArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel ID</a> */
        peer: EntityLike;
        /** Message ID */
        msgId: MessageIDLike;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/threads">discussion message</a> from the <a href="https://corefork.telegram.org/api/discussion">associated discussion group</a> of a channel to show it on top of the comment section, without actually joining the group<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/discussion
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://telegram.org/blog/privacy-discussions-web-bots
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetDiscussionMessage extends Request<Partial<GetDiscussionMessageArgs>,messages.TypeDiscussionMessage> implements GetDiscussionMessageArgs {
        CONSTRUCTOR_id: 1147761405;
        SUBCLASS_OF_ID: 1408820200;
        classType: "request";
        className: "messages.GetDiscussionMessage";
        peer: EntityLike;
        msgId: MessageIDLike;
        fromReader(reader: Reader): GetDiscussionMessage;
    }

    export interface ReadDiscussionArgs {
        /** Group ID */
        peer: EntityLike;
        /** ID of message that started the thread */
        msgId: MessageIDLike;
        /** ID up to which thread messages were read */
        readMaxId: int;
    }

    /**
     * Mark a <a href="https://corefork.telegram.org/api/threads">thread</a> as read<br>
     * @link https://corefork.telegram.org/api/threads
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReadDiscussion extends Request<Partial<ReadDiscussionArgs>,Bool> implements ReadDiscussionArgs {
        CONSTRUCTOR_id: -147740172;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.ReadDiscussion";
        peer: EntityLike;
        msgId: MessageIDLike;
        readMaxId: int;
        fromReader(reader: Reader): ReadDiscussion;
    }

    export interface UnpinAllMessagesArgs {
        /** Chat where to unpin */
        peer: EntityLike;
    }

    /**
     * <a href="https://corefork.telegram.org/api/pin">Unpin</a> all pinned messages<br>
     * @link https://corefork.telegram.org/api/pin
     */
    export class UnpinAllMessages extends Request<Partial<UnpinAllMessagesArgs>,messages.TypeAffectedHistory> implements UnpinAllMessagesArgs {
        CONSTRUCTOR_id: -265962357;
        SUBCLASS_OF_ID: 743031062;
        classType: "request";
        className: "messages.UnpinAllMessages";
        peer: EntityLike;
        fromReader(reader: Reader): UnpinAllMessages;
    }

    export interface DeleteChatArgs {
        /** Chat ID */
        chatId: int;
    }

    /**
     * Delete a <a href="https://corefork.telegram.org/api/channel">chat</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class DeleteChat extends Request<Partial<DeleteChatArgs>,Bool> implements DeleteChatArgs {
        CONSTRUCTOR_id: -2094760687;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.DeleteChat";
        chatId: int;
        fromReader(reader: Reader): DeleteChat;
    }

    export interface DeletePhoneCallHistoryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to remove phone call history for participants as well */
        revoke?: true;
    }

    /** Delete the entire phone call history.<br> */
    export class DeletePhoneCallHistory extends Request<Partial<DeletePhoneCallHistoryArgs>,messages.TypeAffectedFoundMessages> implements DeletePhoneCallHistoryArgs {
        CONSTRUCTOR_id: -104078327;
        SUBCLASS_OF_ID: 4162282798;
        classType: "request";
        className: "messages.DeletePhoneCallHistory";
        flags: number;
        revoke?: true;
        fromReader(reader: Reader): DeletePhoneCallHistory;
    }

    export interface CheckHistoryImportArgs {
        /** Beginning of the message file; up to 100 lines. */
        importHead: string;
    }

    /**
     * Obtains information about a chat export file, generated by a foreign chat app, <a href="https://corefork.telegram.org/api/import">click here for more info about imported chats »</a>.<br>
     * @link https://corefork.telegram.org/api/import
     */
    export class CheckHistoryImport extends Request<Partial<CheckHistoryImportArgs>,messages.TypeHistoryImportParsed> implements CheckHistoryImportArgs {
        CONSTRUCTOR_id: 1140726259;
        SUBCLASS_OF_ID: 1538421259;
        classType: "request";
        className: "messages.CheckHistoryImport";
        importHead: string;
        fromReader(reader: Reader): CheckHistoryImport;
    }

    export interface InitHistoryImportArgs {
        /** The Telegram chat where the <a href="https://corefork.telegram.org/api/import">history should be imported</a>. */
        peer: EntityLike;
        /** File with messages to import. */
        file: TypeInputFile;
        /** Number of media files associated with the chat that will be uploaded using <a href="https://corefork.telegram.org/method/messages.uploadImportedMedia">messages.uploadImportedMedia</a>. */
        mediaCount: int;
    }

    /**
     * Import chat history from a foreign chat app into a specific Telegram chat, <a href="https://corefork.telegram.org/api/import">click here for more info about imported chats »</a>.<br>
     * @link https://corefork.telegram.org/api/import
     * @link https://corefork.telegram.org/method/messages.uploadImportedMedia
     * @link https://corefork.telegram.org/api/import
     * @throws {{code:400,type:"IMPORT_FILE_INVALID"}} The specified chat export file is invalid.
     * @throws {{code:400,type:"IMPORT_FORMAT_UNRECOGNIZED"}} The specified chat export file was exported from an unsupported chat app.
     * @throws {{code:406,type:"PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_5MIN"}} Import for this chat is already in progress, wait 5 minutes before starting a new one.
     */
    export class InitHistoryImport extends Request<Partial<InitHistoryImportArgs>,messages.TypeHistoryImport> implements InitHistoryImportArgs {
        CONSTRUCTOR_id: 873008187;
        SUBCLASS_OF_ID: 2978723082;
        classType: "request";
        className: "messages.InitHistoryImport";
        peer: EntityLike;
        file: TypeInputFile;
        mediaCount: int;
        fromReader(reader: Reader): InitHistoryImport;
    }

    export interface UploadImportedMediaArgs {
        /** The Telegram chat where the media will be imported */
        peer: EntityLike;
        /** Identifier of a <a href="https://corefork.telegram.org/api/import">history import session</a>, returned by <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a> */
        importId: long;
        /** File name */
        fileName: string;
        /** Media metadata */
        media: TypeInputMedia;
    }

    /**
     * Upload a media file associated with an <a href="https://corefork.telegram.org/api/import">imported chat, click here for more info »</a>.<br>
     * @link https://corefork.telegram.org/api/import
     * @link https://corefork.telegram.org/method/messages.initHistoryImport
     * @link https://corefork.telegram.org/api/import
     */
    export class UploadImportedMedia extends Request<Partial<UploadImportedMediaArgs>,TypeMessageMedia> implements UploadImportedMediaArgs {
        CONSTRUCTOR_id: 713433234;
        SUBCLASS_OF_ID: 1198308914;
        classType: "request";
        className: "messages.UploadImportedMedia";
        peer: EntityLike;
        importId: long;
        fileName: string;
        media: TypeInputMedia;
        fromReader(reader: Reader): UploadImportedMedia;
    }

    export interface StartHistoryImportArgs {
        /** The Telegram chat where the messages should be <a href="https://corefork.telegram.org/api/import">imported, click here for more info »</a> */
        peer: EntityLike;
        /** Identifier of a history import session, returned by <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a>. */
        importId: long;
    }

    /**
     * Complete the <a href="https://corefork.telegram.org/api/import">history import process</a>, importing all messages into the chat.<br>
     * To be called only after initializing the import with <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a> and uploading all files using <a href="https://corefork.telegram.org/method/messages.uploadImportedMedia">messages.uploadImportedMedia</a>.<br>
     * @link https://corefork.telegram.org/api/import
     * @link https://corefork.telegram.org/method/messages.initHistoryImport
     * @link https://corefork.telegram.org/api/import
     * @link https://corefork.telegram.org/method/messages.uploadImportedMedia
     * @link https://corefork.telegram.org/api/import
     * @throws {{code:400,type:"IMPORT_ID_INVALID"}} The specified import ID is invalid.
     */
    export class StartHistoryImport extends Request<Partial<StartHistoryImportArgs>,Bool> implements StartHistoryImportArgs {
        CONSTRUCTOR_id: -1271008444;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.StartHistoryImport";
        peer: EntityLike;
        importId: long;
        fromReader(reader: Reader): StartHistoryImport;
    }

    export interface GetExportedChatInvitesArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to fetch revoked chat invites */
        revoked?: true;
        /** Chat */
        peer: EntityLike;
        /** Whether to only fetch chat invites from this admin */
        adminId: TypeInputUser;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetDate?: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetLink?: string;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get info about the chat invites of a specific chat<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetExportedChatInvites extends Request<Partial<GetExportedChatInvitesArgs>,messages.TypeExportedChatInvites> implements GetExportedChatInvitesArgs {
        CONSTRUCTOR_id: -1565154314;
        SUBCLASS_OF_ID: 1614624881;
        classType: "request";
        className: "messages.GetExportedChatInvites";
        flags: number;
        revoked?: true;
        peer: EntityLike;
        adminId: TypeInputUser;
        offsetDate?: int;
        offsetLink?: string;
        limit: int;
        fromReader(reader: Reader): GetExportedChatInvites;
    }

    export interface GetExportedChatInviteArgs {
        /** Chat */
        peer: EntityLike;
        /** Invite link */
        link: string;
    }

    /** Get info about a chat invite<br> */
    export class GetExportedChatInvite extends Request<Partial<GetExportedChatInviteArgs>,messages.TypeExportedChatInvite> implements GetExportedChatInviteArgs {
        CONSTRUCTOR_id: 1937010524;
        SUBCLASS_OF_ID: 2195510474;
        classType: "request";
        className: "messages.GetExportedChatInvite";
        peer: EntityLike;
        link: string;
        fromReader(reader: Reader): GetExportedChatInvite;
    }

    export interface EditExportedChatInviteArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to revoke the chat invite */
        revoked?: true;
        /** Chat */
        peer: EntityLike;
        /** Invite link */
        link: string;
        /** New expiration date */
        expireDate?: int;
        /** Maximum number of users that can join using this link */
        usageLimit?: int;
    }

    /**
     * Edit an exported chat invite<br>
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class EditExportedChatInvite extends Request<Partial<EditExportedChatInviteArgs>,messages.TypeExportedChatInvite> implements EditExportedChatInviteArgs {
        CONSTRUCTOR_id: 48562110;
        SUBCLASS_OF_ID: 2195510474;
        classType: "request";
        className: "messages.EditExportedChatInvite";
        flags: number;
        revoked?: true;
        peer: EntityLike;
        link: string;
        expireDate?: int;
        usageLimit?: int;
        fromReader(reader: Reader): EditExportedChatInvite;
    }

    export interface DeleteRevokedExportedChatInvitesArgs {
        /** Chat */
        peer: EntityLike;
        /** ID of the admin that originally generated the revoked chat invites */
        adminId: TypeInputUser;
    }

    /** Delete all revoked chat invites<br> */
    export class DeleteRevokedExportedChatInvites extends Request<Partial<DeleteRevokedExportedChatInvitesArgs>,Bool> implements DeleteRevokedExportedChatInvitesArgs {
        CONSTRUCTOR_id: 1452833749;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.DeleteRevokedExportedChatInvites";
        peer: EntityLike;
        adminId: TypeInputUser;
        fromReader(reader: Reader): DeleteRevokedExportedChatInvites;
    }

    export interface DeleteExportedChatInviteArgs {
        /** Peer */
        peer: EntityLike;
        /** Invite link */
        link: string;
    }

    /** Delete a chat invite<br> */
    export class DeleteExportedChatInvite extends Request<Partial<DeleteExportedChatInviteArgs>,Bool> implements DeleteExportedChatInviteArgs {
        CONSTRUCTOR_id: -731601877;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "messages.DeleteExportedChatInvite";
        peer: EntityLike;
        link: string;
        fromReader(reader: Reader): DeleteExportedChatInvite;
    }

    export interface GetAdminsWithInvitesArgs {
        /** Chat */
        peer: EntityLike;
    }

    /** Get info about chat invites generated by admins.<br> */
    export class GetAdminsWithInvites extends Request<Partial<GetAdminsWithInvitesArgs>,messages.TypeChatAdminsWithInvites> implements GetAdminsWithInvitesArgs {
        CONSTRUCTOR_id: 958457583;
        SUBCLASS_OF_ID: 2405149995;
        classType: "request";
        className: "messages.GetAdminsWithInvites";
        peer: EntityLike;
        fromReader(reader: Reader): GetAdminsWithInvites;
    }

    export interface GetChatInviteImportersArgs {
        /** Chat */
        peer: EntityLike;
        /** Invite link */
        link: string;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetDate: int;
        /** User ID for <a href="https://corefork.telegram.org/api/offsets">pagination</a> */
        offsetUser: TypeInputUser;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get info about the users that joined the chat using a specific chat invite<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetChatInviteImporters extends Request<Partial<GetChatInviteImportersArgs>,messages.TypeChatInviteImporters> implements GetChatInviteImportersArgs {
        CONSTRUCTOR_id: 654013065;
        SUBCLASS_OF_ID: 3653012134;
        classType: "request";
        className: "messages.GetChatInviteImporters";
        peer: EntityLike;
        link: string;
        offsetDate: int;
        offsetUser: TypeInputUser;
        limit: int;
        fromReader(reader: Reader): GetChatInviteImporters;
    }

    export interface SetHistoryTTLArgs {
        /** The dialog */
        peer: EntityLike;
        /** Automatically delete all messages sent in the chat after this many seconds */
        period: int;
    }

    /**
     * Set maximum Time-To-Live of all messages in the specified chat<br>
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"TTL_PERIOD_INVALID"}} The specified TTL period is invalid.
     */
    export class SetHistoryTTL extends Request<Partial<SetHistoryTTLArgs>,TypeUpdates> implements SetHistoryTTLArgs {
        CONSTRUCTOR_id: -1207017500;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "messages.SetHistoryTTL";
        peer: EntityLike;
        period: int;
        fromReader(reader: Reader): SetHistoryTTL;
    }

    export interface CheckHistoryImportPeerArgs {
        /** The chat where we want to <a href="https://corefork.telegram.org/api/import">import history »</a>. */
        peer: EntityLike;
    }

    /**
     * Check whether chat history exported from another chat app can be <a href="https://corefork.telegram.org/api/import">imported into a specific Telegram chat, click here for more info »</a>.<br>If the check succeeds, and no RPC errors are returned, a <a href="https://corefork.telegram.org/type/messages.CheckedHistoryImportPeer">messages.CheckedHistoryImportPeer</a> constructor will be returned, with a confirmation text to be shown to the user, before actually initializing the import.<br>
     * @link https://corefork.telegram.org/api/import
     * @link https://corefork.telegram.org/type/messages.CheckedHistoryImportPeer
     * @link https://corefork.telegram.org/api/import
     * @throws {{code:400,type:"USER_NOT_MUTUAL_CONTACT"}} The provided user is not a mutual contact.
     */
    export class CheckHistoryImportPeer extends Request<Partial<CheckHistoryImportPeerArgs>,messages.TypeCheckedHistoryImportPeer> implements CheckHistoryImportPeerArgs {
        CONSTRUCTOR_id: 1573261059;
        SUBCLASS_OF_ID: 3091968823;
        classType: "request";
        className: "messages.CheckHistoryImportPeer";
        peer: EntityLike;
        fromReader(reader: Reader): CheckHistoryImportPeer;
    }

    type TypeDialogs = Dialogs | DialogsSlice | DialogsNotModified;
    type TypeMessages = Messages | MessagesSlice | ChannelMessages | MessagesNotModified;
    type TypeChats = Chats | ChatsSlice;
    type TypeChatFull = ChatFull;
    type TypeAffectedHistory = AffectedHistory;
    type TypeDhConfig = DhConfigNotModified | DhConfig;
    type TypeSentEncryptedMessage = SentEncryptedMessage | SentEncryptedFile;
    type TypeStickers = StickersNotModified | Stickers;
    type TypeAllStickers = AllStickersNotModified | AllStickers;
    type TypeAffectedMessages = AffectedMessages;
    type TypeStickerSet = StickerSet;
    type TypeSavedGifs = SavedGifsNotModified | SavedGifs;
    type TypeBotResults = BotResults;
    type TypeBotCallbackAnswer = BotCallbackAnswer;
    type TypeMessageEditData = MessageEditData;
    type TypePeerDialogs = PeerDialogs;
    type TypeFeaturedStickers = FeaturedStickersNotModified | FeaturedStickers;
    type TypeRecentStickers = RecentStickersNotModified | RecentStickers;
    type TypeArchivedStickers = ArchivedStickers;
    type TypeStickerSetInstallResult = StickerSetInstallResultSuccess | StickerSetInstallResultArchive;
    type TypeHighScores = HighScores;
    type TypeFavedStickers = FavedStickersNotModified | FavedStickers;
    type TypeFoundStickerSets = FoundStickerSetsNotModified | FoundStickerSets;
    type TypeSearchCounter = SearchCounter;
    type TypeInactiveChats = InactiveChats;
    type TypeVotesList = VotesList;
    type TypeMessageViews = MessageViews;
    type TypeDiscussionMessage = DiscussionMessage;
    type TypeHistoryImport = HistoryImport;
    type TypeHistoryImportParsed = HistoryImportParsed;
    type TypeAffectedFoundMessages = AffectedFoundMessages;
    type TypeExportedChatInvites = ExportedChatInvites;
    type TypeExportedChatInvite = ExportedChatInvite | ExportedChatInviteReplaced;
    type TypeChatInviteImporters = ChatInviteImporters;
    type TypeChatAdminsWithInvites = ChatAdminsWithInvites;
    type TypeCheckedHistoryImportPeer = CheckedHistoryImportPeer;
    }

    namespace updates {
    export interface StateArgs {
        /** Number of events occured in a text box */
        pts: int;
        /** Position in a sequence of updates in secret chats. For further detailes refer to article <a href="https://corefork.telegram.org/api/end-to-end">secret chats</a><br>Parameter was added in <a href="https://corefork.telegram.org/api/layers#layer-8">eigth layer</a>. */
        qts: int;
        /** Date of condition */
        date: int;
        /** Number of sent updates */
        seq: int;
        /** Number of unread messages */
        unreadCount: int;
    }

    /**
     * Updates state.<br>
     * @link https://corefork.telegram.org/api/end-to-end
     * @link https://corefork.telegram.org/api/layers
     */
    export class State extends VirtualClass<StateArgs> implements StateArgs {
        CONSTRUCTOR_id: -1519637954;
        SUBCLASS_OF_ID: 601823745;
        classType: "constructor";
        className: "updates.State";
        pts: int;
        qts: int;
        date: int;
        seq: int;
        unreadCount: int;
        fromReader(reader: Reader): State;
    }

    export interface DifferenceEmptyArgs {
        /** Current date */
        date: int;
        /** Number of sent updates */
        seq: int;
    }

    /** No events.<br> */
    export class DifferenceEmpty extends VirtualClass<DifferenceEmptyArgs> implements DifferenceEmptyArgs {
        CONSTRUCTOR_id: 1567990072;
        SUBCLASS_OF_ID: 541599860;
        classType: "constructor";
        className: "updates.DifferenceEmpty";
        date: int;
        seq: int;
        fromReader(reader: Reader): DifferenceEmpty;
    }

    export interface DifferenceArgs {
        /** List of new messages */
        newMessages: TypeMessage[];
        /** List of new encrypted secret chat messages */
        newEncryptedMessages: TypeEncryptedMessage[];
        /** List of updates */
        otherUpdates: TypeUpdate[];
        /** List of chats mentioned in events */
        chats: TypeChat[];
        /** List of users mentioned in events */
        users: TypeUser[];
        /** Current state */
        state: updates.TypeState;
    }

    /** Full list of occurred events.<br> */
    export class Difference extends VirtualClass<DifferenceArgs> implements DifferenceArgs {
        CONSTRUCTOR_id: -746336;
        SUBCLASS_OF_ID: 541599860;
        classType: "constructor";
        className: "updates.Difference";
        newMessages: TypeMessage[];
        newEncryptedMessages: TypeEncryptedMessage[];
        otherUpdates: TypeUpdate[];
        chats: TypeChat[];
        users: TypeUser[];
        state: updates.TypeState;
        fromReader(reader: Reader): Difference;
    }

    export interface DifferenceSliceArgs {
        /** List of new messgaes */
        newMessages: TypeMessage[];
        /** New messages from the <a href="https://corefork.telegram.org/api/updates">encrypted event sequence</a> */
        newEncryptedMessages: TypeEncryptedMessage[];
        /** List of updates */
        otherUpdates: TypeUpdate[];
        /** List of chats mentioned in events */
        chats: TypeChat[];
        /** List of users mentioned in events */
        users: TypeUser[];
        /** Intermediary state */
        intermediateState: updates.TypeState;
    }

    /**
     * Incomplete list of occurred events.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class DifferenceSlice extends VirtualClass<DifferenceSliceArgs> implements DifferenceSliceArgs {
        CONSTRUCTOR_id: -1459938943;
        SUBCLASS_OF_ID: 541599860;
        classType: "constructor";
        className: "updates.DifferenceSlice";
        newMessages: TypeMessage[];
        newEncryptedMessages: TypeEncryptedMessage[];
        otherUpdates: TypeUpdate[];
        chats: TypeChat[];
        users: TypeUser[];
        intermediateState: updates.TypeState;
        fromReader(reader: Reader): DifferenceSlice;
    }

    export interface DifferenceTooLongArgs {
        /** The new state to use. */
        pts: int;
    }

    /**
     * The difference is <a href="https://corefork.telegram.org/api/updates#recovering-gaps">too long</a>, and the specified state must be used to refetch updates.<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class DifferenceTooLong extends VirtualClass<DifferenceTooLongArgs> implements DifferenceTooLongArgs {
        CONSTRUCTOR_id: 1258196845;
        SUBCLASS_OF_ID: 541599860;
        classType: "constructor";
        className: "updates.DifferenceTooLong";
        pts: int;
        fromReader(reader: Reader): DifferenceTooLong;
    }

    export interface ChannelDifferenceEmptyArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether there are more updates that must be fetched (always false) */
        final?: true;
        /** The latest <a href="https://corefork.telegram.org/api/updates">PTS</a> */
        pts: int;
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        timeout?: int;
    }

    /**
     * There are no new updates<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class ChannelDifferenceEmpty extends VirtualClass<ChannelDifferenceEmptyArgs> implements ChannelDifferenceEmptyArgs {
        CONSTRUCTOR_id: 1041346555;
        SUBCLASS_OF_ID: 696872797;
        classType: "constructor";
        className: "updates.ChannelDifferenceEmpty";
        flags: number;
        final?: true;
        pts: int;
        timeout?: int;
        fromReader(reader: Reader): ChannelDifferenceEmpty;
    }

    export interface ChannelDifferenceTooLongArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether there are more updates that must be fetched (always false) */
        final?: true;
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        timeout?: int;
        /** Dialog containing the latest <a href="https://corefork.telegram.org/api/updates">PTS</a> that can be used to reset the channel state */
        dialog: TypeDialog;
        /** The latest messages */
        messages: TypeMessage[];
        /** Chats from messages */
        chats: TypeChat[];
        /** Users from messages */
        users: TypeUser[];
    }

    /**
     * The provided <code>pts + limit &lt; remote pts</code>. Simply, there are too many updates to be fetched (more than <code>limit</code>), the client has to resolve the update gap in one of the following ways:
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/method/messages.getHistory
     * @link https://corefork.telegram.org/method/messages.getMessages
     */
    export class ChannelDifferenceTooLong extends VirtualClass<ChannelDifferenceTooLongArgs> implements ChannelDifferenceTooLongArgs {
        CONSTRUCTOR_id: -1531132162;
        SUBCLASS_OF_ID: 696872797;
        classType: "constructor";
        className: "updates.ChannelDifferenceTooLong";
        flags: number;
        final?: true;
        timeout?: int;
        dialog: TypeDialog;
        messages: TypeMessage[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChannelDifferenceTooLong;
    }

    export interface ChannelDifferenceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether there are more updates to be fetched using getDifference, starting from the provided <code>pts</code> */
        final?: true;
        /** The <a href="https://corefork.telegram.org/api/updates">PTS</a> from which to start getting updates the next time */
        pts: int;
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        timeout?: int;
        /** New messages */
        newMessages: TypeMessage[];
        /** Other updates */
        otherUpdates: TypeUpdate[];
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /**
     * The new updates<br>
     * @link https://corefork.telegram.org/api/updates
     */
    export class ChannelDifference extends VirtualClass<ChannelDifferenceArgs> implements ChannelDifferenceArgs {
        CONSTRUCTOR_id: 543450958;
        SUBCLASS_OF_ID: 696872797;
        classType: "constructor";
        className: "updates.ChannelDifference";
        flags: number;
        final?: true;
        pts: int;
        timeout?: int;
        newMessages: TypeMessage[];
        otherUpdates: TypeUpdate[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChannelDifference;
    }

    /** Returns a current state of updates.<br> */
    export class GetState extends Request<Partial<void>,updates.TypeState> {
        CONSTRUCTOR_id: -304838614;
        SUBCLASS_OF_ID: 601823745;
        classType: "request";
        className: "updates.GetState";
        fromReader(reader: Reader): GetState;
    }

    export interface GetDifferenceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** PTS, see <a href="https://corefork.telegram.org/api/updates">updates</a>. */
        pts: int;
        /** For fast updating: if provided and <code>pts + pts_total_limit &lt; remote pts</code>, <a href="https://corefork.telegram.org/constructor/updates.differenceTooLong">updates.differenceTooLong</a> will be returned.<br>Simply tells the server to not return the difference if it is bigger than <code>pts_total_limit</code><br>If the remote pts is too big (&gt; ~4000000), this field will default to 1000000 */
        ptsTotalLimit?: int;
        /** date, see <a href="https://corefork.telegram.org/api/updates">updates</a>. */
        date: int;
        /** QTS, see <a href="https://corefork.telegram.org/api/updates">updates</a>. */
        qts: int;
    }

    /**
     * Get new <a href="https://corefork.telegram.org/api/updates">updates</a>.<br>
     * @link https://corefork.telegram.org/api/updates
     * @link https://corefork.telegram.org/constructor/updates.differenceTooLong
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"CDN_METHOD_INVALID"}} You can't call this method in a CDN DC.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"DATE_EMPTY"}} Date empty.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PERSISTENT_TIMESTAMP_EMPTY"}} Persistent timestamp empty.
     * @throws {{code:400,type:"PERSISTENT_TIMESTAMP_INVALID"}} Persistent timestamp invalid.
     */
    export class GetDifference extends Request<Partial<GetDifferenceArgs>,updates.TypeDifference> implements GetDifferenceArgs {
        CONSTRUCTOR_id: 630429265;
        SUBCLASS_OF_ID: 541599860;
        classType: "request";
        className: "updates.GetDifference";
        flags: number;
        pts: int;
        ptsTotalLimit?: int;
        date: int;
        qts: int;
        fromReader(reader: Reader): GetDifference;
    }

    export interface GetChannelDifferenceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Set to true to skip some possibly unneeded updates and reduce server-side load */
        force?: true;
        /** The channel */
        channel: TypeInputChannel;
        /** Messsage filter */
        filter: TypeChannelMessagesFilter;
        /** Persistent timestamp (see <a href="https://corefork.telegram.org/api/updates">updates</a>) */
        pts: int;
        /** How many updates to fetch, max <code>100000</code><br>Ordinary (non-bot) users are supposed to pass <code>10-100</code> */
        limit: int;
    }

    /**
     * Returns the difference between the current state of updates of a certain channel and transmitted.<br>
     * @link https://corefork.telegram.org/api/updates
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:403,type:"CHANNEL_PUBLIC_GROUP_NA"}} channel/supergroup not available.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"FROM_MESSAGE_BOT_DISABLED"}} Bots can't use fromMessage min constructors.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PERSISTENT_TIMESTAMP_EMPTY"}} Persistent timestamp empty.
     * @throws {{code:400,type:"PERSISTENT_TIMESTAMP_INVALID"}} Persistent timestamp invalid.
     * @throws {{code:400,type:"PINNED_DIALOGS_TOO_MUCH"}} Too many pinned dialogs.
     * @throws {{code:400,type:"RANGES_INVALID"}} Invalid range provided.
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     */
    export class GetChannelDifference extends Request<Partial<GetChannelDifferenceArgs>,updates.TypeChannelDifference> implements GetChannelDifferenceArgs {
        CONSTRUCTOR_id: 51854712;
        SUBCLASS_OF_ID: 696872797;
        classType: "request";
        className: "updates.GetChannelDifference";
        flags: number;
        force?: true;
        channel: TypeInputChannel;
        filter: TypeChannelMessagesFilter;
        pts: int;
        limit: int;
        fromReader(reader: Reader): GetChannelDifference;
    }

    type TypeState = State;
    type TypeDifference = DifferenceEmpty | Difference | DifferenceSlice | DifferenceTooLong;
    type TypeChannelDifference = ChannelDifferenceEmpty | ChannelDifferenceTooLong | ChannelDifference;
    }

    namespace photos {
    export interface PhotosArgs {
        /** List of photos */
        photos: TypePhoto[];
        /** List of mentioned users */
        users: TypeUser[];
    }

    /** Full list of photos with auxiliary data.<br> */
    export class Photos extends VirtualClass<PhotosArgs> implements PhotosArgs {
        CONSTRUCTOR_id: -1916114267;
        SUBCLASS_OF_ID: 667924839;
        classType: "constructor";
        className: "photos.Photos";
        photos: TypePhoto[];
        users: TypeUser[];
        fromReader(reader: Reader): Photos;
    }

    export interface PhotosSliceArgs {
        /** Total number of photos */
        count: int;
        /** List of photos */
        photos: TypePhoto[];
        /** List of mentioned users */
        users: TypeUser[];
    }

    /** Incomplete list of photos with auxiliary data.<br> */
    export class PhotosSlice extends VirtualClass<PhotosSliceArgs> implements PhotosSliceArgs {
        CONSTRUCTOR_id: 352657236;
        SUBCLASS_OF_ID: 667924839;
        classType: "constructor";
        className: "photos.PhotosSlice";
        count: int;
        photos: TypePhoto[];
        users: TypeUser[];
        fromReader(reader: Reader): PhotosSlice;
    }

    export interface PhotoArgs {
        /** Photo */
        photo: TypePhoto;
        /** Users */
        users: TypeUser[];
    }

    /** Photo with auxiliary data.<br> */
    export class Photo extends VirtualClass<PhotoArgs> implements PhotoArgs {
        CONSTRUCTOR_id: 539045032;
        SUBCLASS_OF_ID: 3264396580;
        classType: "constructor";
        className: "photos.Photo";
        photo: TypePhoto;
        users: TypeUser[];
        fromReader(reader: Reader): Photo;
    }

    export interface UpdateProfilePhotoArgs {
        /** Input photo */
        id: TypeInputPhoto;
    }

    /**
     * Installs a previously uploaded photo as a profile photo.<br>
     * @throws {{code:400,type:"ALBUM_PHOTOS_TOO_MANY"}} Too many.
     * @throws {{code:400,type:"FILE_PARTS_INVALID"}} The number of file parts is invalid.
     * @throws {{code:400,type:"IMAGE_PROCESS_FAILED"}} Failure while processing image.
     * @throws {{code:400,type:"LOCATION_INVALID"}} The provided location is invalid.
     * @throws {{code:400,type:"PHOTO_CROP_SIZE_SMALL"}} Photo is too small.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_ID_INVALID"}} Photo ID invalid.
     */
    export class UpdateProfilePhoto extends Request<Partial<UpdateProfilePhotoArgs>,photos.TypePhoto> implements UpdateProfilePhotoArgs {
        CONSTRUCTOR_id: 1926525996;
        SUBCLASS_OF_ID: 3264396580;
        classType: "request";
        className: "photos.UpdateProfilePhoto";
        id: TypeInputPhoto;
        fromReader(reader: Reader): UpdateProfilePhoto;
    }

    export interface UploadProfilePhotoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** File saved in parts by means of <a href="https://corefork.telegram.org/method/upload.saveFilePart">upload.saveFilePart</a> method */
        file?: TypeInputFile;
        /** <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">Animated profile picture</a> video */
        video?: TypeInputFile;
        /** Floating point UNIX timestamp in seconds, indicating the frame of the video that should be used as static preview. */
        videoStartTs?: double;
    }

    /**
     * Updates current user profile photo.<br>
     * @link https://corefork.telegram.org/method/upload.saveFilePart
     * @link https://corefork.telegram.org/api/files
     * @throws {{code:400,type:"ALBUM_PHOTOS_TOO_MANY"}} Too many .
     * @throws {{code:400,type:"FILE_PARTS_INVALID"}} The number of file parts is invalid.
     * @throws {{code:400,type:"IMAGE_PROCESS_FAILED"}} Failure while processing image.
     * @throws {{code:400,type:"PHOTO_CROP_FILE_MISSING"}} Photo crop file missing.
     * @throws {{code:400,type:"PHOTO_CROP_SIZE_SMALL"}} Photo is too small.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_FILE_MISSING"}} Profile photo file missing.
     * @throws {{code:400,type:"VIDEO_FILE_INVALID"}} The specified video file is invalid.
     */
    export class UploadProfilePhoto extends Request<Partial<UploadProfilePhotoArgs>,photos.TypePhoto> implements UploadProfilePhotoArgs {
        CONSTRUCTOR_id: -1980559511;
        SUBCLASS_OF_ID: 3264396580;
        classType: "request";
        className: "photos.UploadProfilePhoto";
        flags: number;
        file?: TypeInputFile;
        video?: TypeInputFile;
        videoStartTs?: double;
        fromReader(reader: Reader): UploadProfilePhoto;
    }

    export interface DeletePhotosArgs {
        /** Input photos to delete */
        id: TypeInputPhoto[];
    }

    /** Deletes profile photos.<br> */
    export class DeletePhotos extends Request<Partial<DeletePhotosArgs>,long[]> implements DeletePhotosArgs {
        CONSTRUCTOR_id: -2016444625;
        SUBCLASS_OF_ID: 2300109160;
        classType: "request";
        className: "photos.DeletePhotos";
        id: TypeInputPhoto[];
        fromReader(reader: Reader): DeletePhotos;
    }

    export interface GetUserPhotosArgs {
        /** User ID */
        userId: TypeInputUser;
        /** Number of list elements to be skipped */
        offset: int;
        /** If a positive value was transferred, the method will return only photos with IDs less than the set one */
        maxId: long;
        /** Number of list elements to be returned */
        limit: int;
    }

    /**
     * Returns the list of user photos.<br>
     * @throws {{code:400,type:"MAX_ID_INVALID"}} The provided max ID is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class GetUserPhotos extends Request<Partial<GetUserPhotosArgs>,photos.TypePhotos> implements GetUserPhotosArgs {
        CONSTRUCTOR_id: -1848823128;
        SUBCLASS_OF_ID: 667924839;
        classType: "request";
        className: "photos.GetUserPhotos";
        userId: TypeInputUser;
        offset: int;
        maxId: long;
        limit: int;
        fromReader(reader: Reader): GetUserPhotos;
    }

    type TypePhotos = Photos | PhotosSlice;
    type TypePhoto = Photo;
    }

    namespace upload {
    export interface FileArgs {
        /** File type */
        type: storage.TypeFileType;
        /** Modification type */
        mtime: int;
        /** Binary data, file content */
        bytes: bytes;
    }

    /** File content.<br> */
    export class File extends VirtualClass<FileArgs> implements FileArgs {
        CONSTRUCTOR_id: 157948117;
        SUBCLASS_OF_ID: 1822152488;
        classType: "constructor";
        className: "upload.File";
        type: storage.TypeFileType;
        mtime: int;
        bytes: bytes;
        fromReader(reader: Reader): File;
    }

    export interface FileCdnRedirectArgs {
        /** <a href="https://corefork.telegram.org/cdn">CDN DC</a> ID */
        dcId: int;
        /** File token (see <a href="https://corefork.telegram.org/cdn">CDN files</a>) */
        fileToken: bytes;
        /** Encryption key (see <a href="https://corefork.telegram.org/cdn">CDN files</a>) */
        encryptionKey: bytes;
        /** Encryption IV (see <a href="https://corefork.telegram.org/cdn">CDN files</a>) */
        encryptionIv: bytes;
        /** File hashes (see <a href="https://corefork.telegram.org/cdn">CDN files</a>) */
        fileHashes: TypeFileHash[];
    }

    /**
     * The file must be downloaded from a <a href="https://corefork.telegram.org/cdn">CDN DC</a>.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class FileCdnRedirect extends VirtualClass<FileCdnRedirectArgs> implements FileCdnRedirectArgs {
        CONSTRUCTOR_id: -242427324;
        SUBCLASS_OF_ID: 1822152488;
        classType: "constructor";
        className: "upload.FileCdnRedirect";
        dcId: int;
        fileToken: bytes;
        encryptionKey: bytes;
        encryptionIv: bytes;
        fileHashes: TypeFileHash[];
        fromReader(reader: Reader): FileCdnRedirect;
    }

    export interface WebFileArgs {
        /** File size */
        size: int;
        /** Mime type */
        mimeType: string;
        /** File type */
        fileType: storage.TypeFileType;
        /** Modified time */
        mtime: int;
        /** Data */
        bytes: bytes;
    }

    /**
     * Represents a chunk of an <a href="https://corefork.telegram.org/api/files">HTTP webfile</a> downloaded through telegram's secure MTProto servers<br>
     * @link https://corefork.telegram.org/api/files
     */
    export class WebFile extends VirtualClass<WebFileArgs> implements WebFileArgs {
        CONSTRUCTOR_id: 568808380;
        SUBCLASS_OF_ID: 1760657233;
        classType: "constructor";
        className: "upload.WebFile";
        size: int;
        mimeType: string;
        fileType: storage.TypeFileType;
        mtime: int;
        bytes: bytes;
        fromReader(reader: Reader): WebFile;
    }

    export interface CdnFileReuploadNeededArgs {
        /** Request token (see <a href="https://corefork.telegram.org/cdn">CDN</a>) */
        requestToken: bytes;
    }

    /**
     * The file was cleared from the temporary RAM cache of the <a href="https://corefork.telegram.org/cdn">CDN</a> and has to be reuploaded.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class CdnFileReuploadNeeded extends VirtualClass<CdnFileReuploadNeededArgs> implements CdnFileReuploadNeededArgs {
        CONSTRUCTOR_id: -290921362;
        SUBCLASS_OF_ID: 4123851048;
        classType: "constructor";
        className: "upload.CdnFileReuploadNeeded";
        requestToken: bytes;
        fromReader(reader: Reader): CdnFileReuploadNeeded;
    }

    export interface CdnFileArgs {
        /** The data */
        bytes: bytes;
    }

    /**
     * Represent a chunk of a <a href="https://corefork.telegram.org/cdn">CDN</a> file.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class CdnFile extends VirtualClass<CdnFileArgs> implements CdnFileArgs {
        CONSTRUCTOR_id: -1449145777;
        SUBCLASS_OF_ID: 4123851048;
        classType: "constructor";
        className: "upload.CdnFile";
        bytes: bytes;
        fromReader(reader: Reader): CdnFile;
    }

    export interface SaveFilePartArgs {
        /** Random file identifier created by the client */
        fileId: long;
        /** Numerical order of a part */
        filePart: int;
        /** Binary data, contend of a part */
        bytes: bytes;
    }

    /**
     * Saves a part of file for futher sending to one of the methods.<br>
     * @throws {{code:400,type:"FILE_PART_EMPTY"}} The provided file part is empty.
     * @throws {{code:400,type:"FILE_PART_INVALID"}} The file part number is invalid.
     */
    export class SaveFilePart extends Request<Partial<SaveFilePartArgs>,Bool> implements SaveFilePartArgs {
        CONSTRUCTOR_id: -1291540959;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "upload.SaveFilePart";
        fileId: long;
        filePart: int;
        bytes: bytes;
        fromReader(reader: Reader): SaveFilePart;
    }

    export interface GetFileArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Disable some checks on limit and offset values, useful for example to stream videos by keyframes */
        precise?: true;
        /** Whether the current client supports <a href="https://corefork.telegram.org/cdn">CDN downloads</a> */
        cdnSupported?: true;
        /** File location */
        location: TypeInputFileLocation;
        /** Number of bytes to be skipped */
        offset: int;
        /** Number of bytes to be returned */
        limit: int;
    }

    /**
     * Returns content of a whole file or its part.<br>
     * @link https://corefork.telegram.org/cdn
     * @link https://corefork.telegram.org/api/file_reference
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:406,type:"FILEREF_UPGRADE_NEEDED"}} The client has to be updated in order to support file references.
     * @throws {{code:400,type:"FILE_ID_INVALID"}} The provided file id is invalid.
     * @throws {{code:400,type:"FILE_REFERENCE_*"}} The file reference expired, it must be refreshed.
     * @throws {{code:400,type:"FILE_REFERENCE_EXPIRED"}} File reference expired, it must be refetched as described in https://core.telegram.org/api/file_reference.
     * @throws {{code:400,type:"LIMIT_INVALID"}} The provided limit is invalid.
     * @throws {{code:400,type:"LOCATION_INVALID"}} The provided location is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"OFFSET_INVALID"}} The provided offset is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetFile extends Request<Partial<GetFileArgs>,upload.TypeFile> implements GetFileArgs {
        CONSTRUCTOR_id: -1319462148;
        SUBCLASS_OF_ID: 1822152488;
        classType: "request";
        className: "upload.GetFile";
        flags: number;
        precise?: true;
        cdnSupported?: true;
        location: TypeInputFileLocation;
        offset: int;
        limit: int;
        fromReader(reader: Reader): GetFile;
    }

    export interface SaveBigFilePartArgs {
        /** Random file id, created by the client */
        fileId: long;
        /** Part sequence number */
        filePart: int;
        /** Total number of parts */
        fileTotalParts: int;
        /** Binary data, part contents */
        bytes: bytes;
    }

    /**
     * Saves a part of a large file (over 10Mb in size) to be later passed to one of the methods.<br>
     * @throws {{code:400,type:"FILE_PARTS_INVALID"}} The number of file parts is invalid.
     * @throws {{code:400,type:"FILE_PART_EMPTY"}} The provided file part is empty.
     * @throws {{code:400,type:"FILE_PART_INVALID"}} The file part number is invalid.
     * @throws {{code:400,type:"FILE_PART_SIZE_CHANGED"}} Provided file part size has changed.
     * @throws {{code:400,type:"FILE_PART_SIZE_INVALID"}} The provided file part size is invalid.
     * @throws {{code:400,type:"FILE_PART_TOO_BIG"}} The uploaded file part is too big.
     */
    export class SaveBigFilePart extends Request<Partial<SaveBigFilePartArgs>,Bool> implements SaveBigFilePartArgs {
        CONSTRUCTOR_id: -562337987;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "upload.SaveBigFilePart";
        fileId: long;
        filePart: int;
        fileTotalParts: int;
        bytes: bytes;
        fromReader(reader: Reader): SaveBigFilePart;
    }

    export interface GetWebFileArgs {
        /** The file to download */
        location: TypeInputWebFileLocation;
        /** Number of bytes to be skipped */
        offset: int;
        /** Number of bytes to be returned */
        limit: int;
    }

    /**
     * Returns content of an HTTP file or a part, by proxying the request through telegram.<br>
     * @throws {{code:400,type:"LOCATION_INVALID"}} The provided location is invalid.
     */
    export class GetWebFile extends Request<Partial<GetWebFileArgs>,upload.TypeWebFile> implements GetWebFileArgs {
        CONSTRUCTOR_id: 619086221;
        SUBCLASS_OF_ID: 1760657233;
        classType: "request";
        className: "upload.GetWebFile";
        location: TypeInputWebFileLocation;
        offset: int;
        limit: int;
        fromReader(reader: Reader): GetWebFile;
    }

    export interface GetCdnFileArgs {
        /** File token */
        fileToken: bytes;
        /** Offset of chunk to download */
        offset: int;
        /** Length of chunk to download */
        limit: int;
    }

    /**
     * Download a <a href="https://corefork.telegram.org/cdn">CDN</a> file.<br>
     * @link https://corefork.telegram.org/cdn
     */
    export class GetCdnFile extends Request<Partial<GetCdnFileArgs>,upload.TypeCdnFile> implements GetCdnFileArgs {
        CONSTRUCTOR_id: 536919235;
        SUBCLASS_OF_ID: 4123851048;
        classType: "request";
        className: "upload.GetCdnFile";
        fileToken: bytes;
        offset: int;
        limit: int;
        fromReader(reader: Reader): GetCdnFile;
    }

    export interface ReuploadCdnFileArgs {
        /** File token */
        fileToken: bytes;
        /** Request token */
        requestToken: bytes;
    }

    /**
     * Request a reupload of a certain file to a <a href="https://corefork.telegram.org/cdn">CDN DC</a>.<br>
     * @link https://corefork.telegram.org/cdn
     * @throws {{code:400,type:"RSA_DECRYPT_FAILED"}} Internal RSA decryption failed.
     */
    export class ReuploadCdnFile extends Request<Partial<ReuploadCdnFileArgs>,TypeFileHash[]> implements ReuploadCdnFileArgs {
        CONSTRUCTOR_id: -1691921240;
        SUBCLASS_OF_ID: 2777941798;
        classType: "request";
        className: "upload.ReuploadCdnFile";
        fileToken: bytes;
        requestToken: bytes;
        fromReader(reader: Reader): ReuploadCdnFile;
    }

    export interface GetCdnFileHashesArgs {
        /** File */
        fileToken: bytes;
        /** Offset from which to start getting hashes */
        offset: int;
    }

    /**
     * Get SHA256 hashes for verifying downloaded <a href="https://corefork.telegram.org/cdn">CDN</a> files<br>
     * @link https://corefork.telegram.org/cdn
     * @throws {{code:400,type:"CDN_METHOD_INVALID"}} You can't call this method in a CDN DC.
     * @throws {{code:400,type:"RSA_DECRYPT_FAILED"}} Internal RSA decryption failed.
     */
    export class GetCdnFileHashes extends Request<Partial<GetCdnFileHashesArgs>,TypeFileHash[]> implements GetCdnFileHashesArgs {
        CONSTRUCTOR_id: 1302676017;
        SUBCLASS_OF_ID: 2777941798;
        classType: "request";
        className: "upload.GetCdnFileHashes";
        fileToken: bytes;
        offset: int;
        fromReader(reader: Reader): GetCdnFileHashes;
    }

    export interface GetFileHashesArgs {
        /** File */
        location: TypeInputFileLocation;
        /** Offset from which to get file hashes */
        offset: int;
    }

    /**
     * Get SHA256 hashes for verifying downloaded files<br>
     * @throws {{code:400,type:"LOCATION_INVALID"}} The provided location is invalid.
     */
    export class GetFileHashes extends Request<Partial<GetFileHashesArgs>,TypeFileHash[]> implements GetFileHashesArgs {
        CONSTRUCTOR_id: -956147407;
        SUBCLASS_OF_ID: 2777941798;
        classType: "request";
        className: "upload.GetFileHashes";
        location: TypeInputFileLocation;
        offset: int;
        fromReader(reader: Reader): GetFileHashes;
    }

    type TypeFile = File | FileCdnRedirect;
    type TypeWebFile = WebFile;
    type TypeCdnFile = CdnFileReuploadNeeded | CdnFile;
    }

    namespace help {
    export interface AppUpdateArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Unskippable, the new info must be shown to the user (with a popup or something else) */
        canNotSkip?: true;
        /** Update ID */
        id: int;
        /** New version name */
        version: string;
        /** Text description of the update */
        text: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities: TypeMessageEntity[];
        /** Application binary */
        document?: TypeDocument;
        /** Application download URL */
        url?: string;
        /** Associated sticker */
        sticker?: TypeDocument;
    }

    /**
     * An update is available for the application.<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class AppUpdate extends VirtualClass<AppUpdateArgs> implements AppUpdateArgs {
        CONSTRUCTOR_id: -860107216;
        SUBCLASS_OF_ID: 1486292638;
        classType: "constructor";
        className: "help.AppUpdate";
        flags: number;
        canNotSkip?: true;
        id: int;
        version: string;
        text: string;
        entities: TypeMessageEntity[];
        document?: TypeDocument;
        url?: string;
        sticker?: TypeDocument;
        fromReader(reader: Reader): AppUpdate;
    }

    /** No updates are available for the application.<br> */
    export class NoAppUpdate extends VirtualClass<void> {
        CONSTRUCTOR_id: -1000708810;
        SUBCLASS_OF_ID: 1486292638;
        classType: "constructor";
        className: "help.NoAppUpdate";
        fromReader(reader: Reader): NoAppUpdate;
    }

    export interface InviteTextArgs {
        /** Text of the message */
        message: string;
    }

    /** Text of a text message with an invitation to install Telegram.<br> */
    export class InviteText extends VirtualClass<InviteTextArgs> implements InviteTextArgs {
        CONSTRUCTOR_id: 415997816;
        SUBCLASS_OF_ID: 3480267317;
        classType: "constructor";
        className: "help.InviteText";
        message: string;
        fromReader(reader: Reader): InviteText;
    }

    export interface SupportArgs {
        /** Phone number */
        phoneNumber: string;
        /** User */
        user: TypeUser;
    }

    /** Info on support user.<br> */
    export class Support extends VirtualClass<SupportArgs> implements SupportArgs {
        CONSTRUCTOR_id: 398898678;
        SUBCLASS_OF_ID: 1901706475;
        classType: "constructor";
        className: "help.Support";
        phoneNumber: string;
        user: TypeUser;
        fromReader(reader: Reader): Support;
    }

    export interface TermsOfServiceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether a prompt must be showed to the user, in order to accept the new terms. */
        popup?: true;
        /** ID of the new terms */
        id: TypeDataJSON;
        /** Text of the new terms */
        text: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities: TypeMessageEntity[];
        /** Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age. */
        minAgeConfirm?: int;
    }

    /**
     * Info about the latest telegram Terms Of Service<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class TermsOfService extends VirtualClass<TermsOfServiceArgs> implements TermsOfServiceArgs {
        CONSTRUCTOR_id: 2013922064;
        SUBCLASS_OF_ID: 552502034;
        classType: "constructor";
        className: "help.TermsOfService";
        flags: number;
        popup?: true;
        id: TypeDataJSON;
        text: string;
        entities: TypeMessageEntity[];
        minAgeConfirm?: int;
        fromReader(reader: Reader): TermsOfService;
    }

    export interface RecentMeUrlsArgs {
        /** URLs */
        urls: TypeRecentMeUrl[];
        /** Chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /** Recent t.me URLs<br> */
    export class RecentMeUrls extends VirtualClass<RecentMeUrlsArgs> implements RecentMeUrlsArgs {
        CONSTRUCTOR_id: 235081943;
        SUBCLASS_OF_ID: 4067017847;
        classType: "constructor";
        className: "help.RecentMeUrls";
        urls: TypeRecentMeUrl[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): RecentMeUrls;
    }

    export interface TermsOfServiceUpdateEmptyArgs {
        /** New TOS updates will have to be queried using <a href="https://corefork.telegram.org/method/help.getTermsOfServiceUpdate">help.getTermsOfServiceUpdate</a> in <code>expires</code> seconds */
        expires: int;
    }

    /**
     * No changes were made to telegram's terms of service<br>
     * @link https://corefork.telegram.org/method/help.getTermsOfServiceUpdate
     */
    export class TermsOfServiceUpdateEmpty extends VirtualClass<TermsOfServiceUpdateEmptyArgs> implements TermsOfServiceUpdateEmptyArgs {
        CONSTRUCTOR_id: -483352705;
        SUBCLASS_OF_ID: 691808631;
        classType: "constructor";
        className: "help.TermsOfServiceUpdateEmpty";
        expires: int;
        fromReader(reader: Reader): TermsOfServiceUpdateEmpty;
    }

    export interface TermsOfServiceUpdateArgs {
        /** New TOS updates will have to be queried using <a href="https://corefork.telegram.org/method/help.getTermsOfServiceUpdate">help.getTermsOfServiceUpdate</a> in <code>expires</code> seconds */
        expires: int;
        /** New terms of service */
        termsOfService: help.TypeTermsOfService;
    }

    /**
     * Info about an update of telegram's terms of service. If the terms of service are declined, then the <a href="https://corefork.telegram.org/method/account.deleteAccount">account.deleteAccount</a> method should be called with the reason "Decline ToS update"<br>
     * @link https://corefork.telegram.org/method/help.getTermsOfServiceUpdate
     * @link https://corefork.telegram.org/method/account.deleteAccount
     * @link https://corefork.telegram.org/api/srp
     */
    export class TermsOfServiceUpdate extends VirtualClass<TermsOfServiceUpdateArgs> implements TermsOfServiceUpdateArgs {
        CONSTRUCTOR_id: 686618977;
        SUBCLASS_OF_ID: 691808631;
        classType: "constructor";
        className: "help.TermsOfServiceUpdate";
        expires: int;
        termsOfService: help.TypeTermsOfService;
        fromReader(reader: Reader): TermsOfServiceUpdate;
    }

    /** Deep link info empty<br> */
    export class DeepLinkInfoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: 1722786150;
        SUBCLASS_OF_ID: 2555030584;
        classType: "constructor";
        className: "help.DeepLinkInfoEmpty";
        fromReader(reader: Reader): DeepLinkInfoEmpty;
    }

    export interface DeepLinkInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** An update of the app is required to parse this link */
        updateApp?: true;
        /** Message to show to the user */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities?: TypeMessageEntity[];
    }

    /**
     * Deep linking info<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class DeepLinkInfo extends VirtualClass<DeepLinkInfoArgs> implements DeepLinkInfoArgs {
        CONSTRUCTOR_id: 1783556146;
        SUBCLASS_OF_ID: 2555030584;
        classType: "constructor";
        className: "help.DeepLinkInfo";
        flags: number;
        updateApp?: true;
        message: string;
        entities?: TypeMessageEntity[];
        fromReader(reader: Reader): DeepLinkInfo;
    }

    /** Password configuration not modified<br> */
    export class PassportConfigNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -1078332329;
        SUBCLASS_OF_ID: 3328622765;
        classType: "constructor";
        className: "help.PassportConfigNotModified";
        fromReader(reader: Reader): PassportConfigNotModified;
    }

    export interface PassportConfigArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Localization */
        countriesLangs: TypeDataJSON;
    }

    /**
     * Telegram <a href="https://corefork.telegram.org/passport">passport</a> configuration<br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/passport
     */
    export class PassportConfig extends VirtualClass<PassportConfigArgs> implements PassportConfigArgs {
        CONSTRUCTOR_id: -1600596305;
        SUBCLASS_OF_ID: 3328622765;
        classType: "constructor";
        className: "help.PassportConfig";
        hash: int;
        countriesLangs: TypeDataJSON;
        fromReader(reader: Reader): PassportConfig;
    }

    export interface SupportNameArgs {
        /** Localized name */
        name: string;
    }

    /** Localized name for telegram support<br> */
    export class SupportName extends VirtualClass<SupportNameArgs> implements SupportNameArgs {
        CONSTRUCTOR_id: -1945767479;
        SUBCLASS_OF_ID: 2135996354;
        classType: "constructor";
        className: "help.SupportName";
        name: string;
        fromReader(reader: Reader): SupportName;
    }

    /** Internal use<br> */
    export class UserInfoEmpty extends VirtualClass<void> {
        CONSTRUCTOR_id: -206688531;
        SUBCLASS_OF_ID: 1548998616;
        classType: "constructor";
        className: "help.UserInfoEmpty";
        fromReader(reader: Reader): UserInfoEmpty;
    }

    export interface UserInfoArgs {
        /** Info */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities: TypeMessageEntity[];
        /** Author */
        author: string;
        /** Date */
        date: int;
    }

    /**
     * Internal use<br>
     * @link https://corefork.telegram.org/api/entities
     */
    export class UserInfo extends VirtualClass<UserInfoArgs> implements UserInfoArgs {
        CONSTRUCTOR_id: 32192344;
        SUBCLASS_OF_ID: 1548998616;
        classType: "constructor";
        className: "help.UserInfo";
        message: string;
        entities: TypeMessageEntity[];
        author: string;
        date: int;
        fromReader(reader: Reader): UserInfo;
    }

    export interface PromoDataEmptyArgs {
        /** Re-fetch PSA/MTProxy info after the specified number of seconds */
        expires: int;
    }

    /** No PSA/MTProxy info is available<br> */
    export class PromoDataEmpty extends VirtualClass<PromoDataEmptyArgs> implements PromoDataEmptyArgs {
        CONSTRUCTOR_id: -1728664459;
        SUBCLASS_OF_ID: 2639877442;
        classType: "constructor";
        className: "help.PromoDataEmpty";
        expires: int;
        fromReader(reader: Reader): PromoDataEmpty;
    }

    export interface PromoDataArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** MTProxy-related channel */
        proxy?: true;
        /** Expiry of PSA/MTProxy info */
        expires: int;
        /** MTProxy/PSA peer */
        peer: TypePeer;
        /** Chat info */
        chats: TypeChat[];
        /** User info */
        users: TypeUser[];
        /** PSA type */
        psaType?: string;
        /** PSA message */
        psaMessage?: string;
    }

    /** MTProxy/Public Service Announcement information<br> */
    export class PromoData extends VirtualClass<PromoDataArgs> implements PromoDataArgs {
        CONSTRUCTOR_id: -1942390465;
        SUBCLASS_OF_ID: 2639877442;
        classType: "constructor";
        className: "help.PromoData";
        flags: number;
        proxy?: true;
        expires: int;
        peer: TypePeer;
        chats: TypeChat[];
        users: TypeUser[];
        psaType?: string;
        psaMessage?: string;
        fromReader(reader: Reader): PromoData;
    }

    export interface CountryCodeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** ISO country code */
        countryCode: string;
        /** Possible phone prefixes */
        prefixes?: string[];
        /** Phone patterns: for example, <code>XXX XXX XXX</code> */
        patterns?: string[];
    }

    /** Country code and phone number pattern of a specific country<br> */
    export class CountryCode extends VirtualClass<CountryCodeArgs> implements CountryCodeArgs {
        CONSTRUCTOR_id: 1107543535;
        SUBCLASS_OF_ID: 1995654757;
        classType: "constructor";
        className: "help.CountryCode";
        flags: number;
        countryCode: string;
        prefixes?: string[];
        patterns?: string[];
        fromReader(reader: Reader): CountryCode;
    }

    export interface CountryArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this country should not be shown in the list */
        hidden?: true;
        /** ISO code of country */
        iso2: string;
        /** Name of the country in the country's language */
        defaultName: string;
        /** Name of the country in the user's language, if different from the original name */
        name?: string;
        /** Phone codes/patterns */
        countryCodes: help.TypeCountryCode[];
    }

    /** Name, ISO code, localized name and phone codes/patterns of a specific country<br> */
    export class Country extends VirtualClass<CountryArgs> implements CountryArgs {
        CONSTRUCTOR_id: -1014526429;
        SUBCLASS_OF_ID: 2720964136;
        classType: "constructor";
        className: "help.Country";
        flags: number;
        hidden?: true;
        iso2: string;
        defaultName: string;
        name?: string;
        countryCodes: help.TypeCountryCode[];
        fromReader(reader: Reader): Country;
    }

    /** The country list has not changed<br> */
    export class CountriesListNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -1815339214;
        SUBCLASS_OF_ID: 3929144968;
        classType: "constructor";
        className: "help.CountriesListNotModified";
        fromReader(reader: Reader): CountriesListNotModified;
    }

    export interface CountriesListArgs {
        /** Name, ISO code, localized name and phone codes/patterns of all available countries */
        countries: help.TypeCountry[];
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Name, ISO code, localized name and phone codes/patterns of all available countries<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class CountriesList extends VirtualClass<CountriesListArgs> implements CountriesListArgs {
        CONSTRUCTOR_id: -2016381538;
        SUBCLASS_OF_ID: 3929144968;
        classType: "constructor";
        className: "help.CountriesList";
        countries: help.TypeCountry[];
        hash: int;
        fromReader(reader: Reader): CountriesList;
    }

    /**
     * Returns current configuration, including data center configuration.<br>
     * @throws {{code:400,type:"CONNECTION_API_ID_INVALID"}} The provided API id is invalid.
     * @throws {{code:400,type:"CONNECTION_APP_VERSION_EMPTY"}} App version is empty.
     * @throws {{code:400,type:"CONNECTION_LAYER_INVALID"}} Layer invalid.
     * @throws {{code:400,type:"CONNECTION_NOT_INITED"}} Connection not initialized.
     * @throws {{code:400,type:"DATA_INVALID"}} Encrypted data invalid.
     * @throws {{code:400,type:"INPUT_LAYER_INVALID"}} The provided layer is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USERNAME_INVALID"}} The provided username is not valid.
     * @throws {{code:403,type:"USER_PRIVACY_RESTRICTED"}} The user's privacy settings do not allow you to do this.
     */
    export class GetConfig extends Request<Partial<void>,TypeConfig> {
        CONSTRUCTOR_id: -990308245;
        SUBCLASS_OF_ID: 3542493770;
        classType: "request";
        className: "help.GetConfig";
        fromReader(reader: Reader): GetConfig;
    }

    /** Returns info on data centre nearest to the user.<br> */
    export class GetNearestDc extends Request<Partial<void>,TypeNearestDc> {
        CONSTRUCTOR_id: 531836966;
        SUBCLASS_OF_ID: 947323999;
        classType: "request";
        className: "help.GetNearestDc";
        fromReader(reader: Reader): GetNearestDc;
    }

    export interface GetAppUpdateArgs {
        /** Source */
        source: string;
    }

    /** Returns information on update availability for the current application.<br> */
    export class GetAppUpdate extends Request<Partial<GetAppUpdateArgs>,help.TypeAppUpdate> implements GetAppUpdateArgs {
        CONSTRUCTOR_id: 1378703997;
        SUBCLASS_OF_ID: 1486292638;
        classType: "request";
        className: "help.GetAppUpdate";
        source: string;
        fromReader(reader: Reader): GetAppUpdate;
    }

    /** Returns localized text of a text message with an invitation.<br> */
    export class GetInviteText extends Request<Partial<void>,help.TypeInviteText> {
        CONSTRUCTOR_id: 1295590211;
        SUBCLASS_OF_ID: 3480267317;
        classType: "request";
        className: "help.GetInviteText";
        fromReader(reader: Reader): GetInviteText;
    }

    /** Returns the support user for the 'ask a question' feature.<br> */
    export class GetSupport extends Request<Partial<void>,help.TypeSupport> {
        CONSTRUCTOR_id: -1663104819;
        SUBCLASS_OF_ID: 1901706475;
        classType: "request";
        className: "help.GetSupport";
        fromReader(reader: Reader): GetSupport;
    }

    export interface GetAppChangelogArgs {
        /** Previous app version */
        prevAppVersion: string;
    }

    /**
     * Get changelog of current app.<br>
     * Typically, an <a href="https://corefork.telegram.org/constructor/updates">updates</a> constructor will be returned, containing one or more <a href="https://corefork.telegram.org/constructor/updateServiceNotification">updateServiceNotification</a> updates with app-specific changelogs.<br>
     * @link https://corefork.telegram.org/constructor/updates
     * @link https://corefork.telegram.org/constructor/updateServiceNotification
     */
    export class GetAppChangelog extends Request<Partial<GetAppChangelogArgs>,TypeUpdates> implements GetAppChangelogArgs {
        CONSTRUCTOR_id: -1877938321;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "help.GetAppChangelog";
        prevAppVersion: string;
        fromReader(reader: Reader): GetAppChangelog;
    }

    export interface SetBotUpdatesStatusArgs {
        /** Number of pending updates */
        pendingUpdatesCount: int;
        /** Error message, if present */
        message: string;
    }

    /** Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only<br> */
    export class SetBotUpdatesStatus extends Request<Partial<SetBotUpdatesStatusArgs>,Bool> implements SetBotUpdatesStatusArgs {
        CONSTRUCTOR_id: -333262899;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "help.SetBotUpdatesStatus";
        pendingUpdatesCount: int;
        message: string;
        fromReader(reader: Reader): SetBotUpdatesStatus;
    }

    /**
     * Get configuration for <a href="https://corefork.telegram.org/cdn">CDN</a> file downloads.<br>
     * @link https://corefork.telegram.org/cdn
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     */
    export class GetCdnConfig extends Request<Partial<void>,TypeCdnConfig> {
        CONSTRUCTOR_id: 1375900482;
        SUBCLASS_OF_ID: 3973724540;
        classType: "request";
        className: "help.GetCdnConfig";
        fromReader(reader: Reader): GetCdnConfig;
    }

    export interface GetRecentMeUrlsArgs {
        /** Referer */
        referer: string;
    }

    /** Get recently used <code>t.me</code> links<br> */
    export class GetRecentMeUrls extends Request<Partial<GetRecentMeUrlsArgs>,help.TypeRecentMeUrls> implements GetRecentMeUrlsArgs {
        CONSTRUCTOR_id: 1036054804;
        SUBCLASS_OF_ID: 4067017847;
        classType: "request";
        className: "help.GetRecentMeUrls";
        referer: string;
        fromReader(reader: Reader): GetRecentMeUrls;
    }

    /** Look for updates of telegram's terms of service<br> */
    export class GetTermsOfServiceUpdate extends Request<Partial<void>,help.TypeTermsOfServiceUpdate> {
        CONSTRUCTOR_id: 749019089;
        SUBCLASS_OF_ID: 691808631;
        classType: "request";
        className: "help.GetTermsOfServiceUpdate";
        fromReader(reader: Reader): GetTermsOfServiceUpdate;
    }

    export interface AcceptTermsOfServiceArgs {
        /** ID of terms of service */
        id: TypeDataJSON;
    }

    /** Accept the new terms of service<br> */
    export class AcceptTermsOfService extends Request<Partial<AcceptTermsOfServiceArgs>,Bool> implements AcceptTermsOfServiceArgs {
        CONSTRUCTOR_id: -294455398;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "help.AcceptTermsOfService";
        id: TypeDataJSON;
        fromReader(reader: Reader): AcceptTermsOfService;
    }

    export interface GetDeepLinkInfoArgs {
        /** Path in <code>t.me/path</code> */
        path: string;
    }

    /** Get info about a <code>t.me</code> link<br> */
    export class GetDeepLinkInfo extends Request<Partial<GetDeepLinkInfoArgs>,help.TypeDeepLinkInfo> implements GetDeepLinkInfoArgs {
        CONSTRUCTOR_id: 1072547679;
        SUBCLASS_OF_ID: 2555030584;
        classType: "request";
        className: "help.GetDeepLinkInfo";
        path: string;
        fromReader(reader: Reader): GetDeepLinkInfo;
    }

    /**
     * Get app-specific configuration, see <a href="https://corefork.telegram.org/api/config#client-configuration">client configuration</a> for more info on the result.<br>
     * @link https://corefork.telegram.org/api/config
     */
    export class GetAppConfig extends Request<Partial<void>,TypeJSONValue> {
        CONSTRUCTOR_id: -1735311088;
        SUBCLASS_OF_ID: 3952707507;
        classType: "request";
        className: "help.GetAppConfig";
        fromReader(reader: Reader): GetAppConfig;
    }

    export interface SaveAppLogArgs {
        /** List of input events */
        events: TypeInputAppEvent[];
    }

    /** Saves logs of application on the server.<br> */
    export class SaveAppLog extends Request<Partial<SaveAppLogArgs>,Bool> implements SaveAppLogArgs {
        CONSTRUCTOR_id: 1862465352;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "help.SaveAppLog";
        events: TypeInputAppEvent[];
        fromReader(reader: Reader): SaveAppLog;
    }

    export interface GetPassportConfigArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get <a href="https://corefork.telegram.org/passport">passport</a> configuration<br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/passport
     */
    export class GetPassportConfig extends Request<Partial<GetPassportConfigArgs>,help.TypePassportConfig> implements GetPassportConfigArgs {
        CONSTRUCTOR_id: -966677240;
        SUBCLASS_OF_ID: 3328622765;
        classType: "request";
        className: "help.GetPassportConfig";
        hash: int;
        fromReader(reader: Reader): GetPassportConfig;
    }

    /**
     * Get localized name of the telegram support user<br>
     * @throws {{code:403,type:"USER_INVALID"}} Invalid user provided.
     */
    export class GetSupportName extends Request<Partial<void>,help.TypeSupportName> {
        CONSTRUCTOR_id: -748624084;
        SUBCLASS_OF_ID: 2135996354;
        classType: "request";
        className: "help.GetSupportName";
        fromReader(reader: Reader): GetSupportName;
    }

    export interface GetUserInfoArgs {
        /** User ID */
        userId: TypeInputUser;
    }

    /**
     * Internal use<br>
     * @throws {{code:403,type:"USER_INVALID"}} Invalid user provided.
     */
    export class GetUserInfo extends Request<Partial<GetUserInfoArgs>,help.TypeUserInfo> implements GetUserInfoArgs {
        CONSTRUCTOR_id: 59377875;
        SUBCLASS_OF_ID: 1548998616;
        classType: "request";
        className: "help.GetUserInfo";
        userId: TypeInputUser;
        fromReader(reader: Reader): GetUserInfo;
    }

    export interface EditUserInfoArgs {
        /** User */
        userId: TypeInputUser;
        /** Message */
        message: string;
        /** <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> */
        entities: TypeMessageEntity[];
    }

    /**
     * Internal use<br>
     * @link https://corefork.telegram.org/api/entities
     * @throws {{code:400,type:"USER_INVALID"}} Invalid user provided.
     */
    export class EditUserInfo extends Request<Partial<EditUserInfoArgs>,help.TypeUserInfo> implements EditUserInfoArgs {
        CONSTRUCTOR_id: 1723407216;
        SUBCLASS_OF_ID: 1548998616;
        classType: "request";
        className: "help.EditUserInfo";
        userId: TypeInputUser;
        message: string;
        entities: TypeMessageEntity[];
        fromReader(reader: Reader): EditUserInfo;
    }

    /** Get MTProxy/Public Service Announcement information<br> */
    export class GetPromoData extends Request<Partial<void>,help.TypePromoData> {
        CONSTRUCTOR_id: -1063816159;
        SUBCLASS_OF_ID: 2639877442;
        classType: "request";
        className: "help.GetPromoData";
        fromReader(reader: Reader): GetPromoData;
    }

    export interface HidePromoDataArgs {
        /** Peer to hide */
        peer: EntityLike;
    }

    /** Hide MTProxy/Public Service Announcement information<br> */
    export class HidePromoData extends Request<Partial<HidePromoDataArgs>,Bool> implements HidePromoDataArgs {
        CONSTRUCTOR_id: 505748629;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "help.HidePromoData";
        peer: EntityLike;
        fromReader(reader: Reader): HidePromoData;
    }

    export interface DismissSuggestionArgs {
        /** In the case of pending suggestions in <a href="https://corefork.telegram.org/constructor/channelFull">channels</a>, the channel ID. */
        peer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/config#suggestions">Suggestion, see here for more info »</a>. */
        suggestion: string;
    }

    /**
     * Dismiss a <a href="https://corefork.telegram.org/api/config#suggestions">suggestion, see here for more info »</a>.<br>
     * @link https://corefork.telegram.org/constructor/channelFull
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/config
     */
    export class DismissSuggestion extends Request<Partial<DismissSuggestionArgs>,Bool> implements DismissSuggestionArgs {
        CONSTRUCTOR_id: -183649631;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "help.DismissSuggestion";
        peer: EntityLike;
        suggestion: string;
        fromReader(reader: Reader): DismissSuggestion;
    }

    export interface GetCountriesListArgs {
        /** Language code of the current user */
        langCode: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get name, ISO code, localized name and phone codes/patterns of all available countries<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetCountriesList extends Request<Partial<GetCountriesListArgs>,help.TypeCountriesList> implements GetCountriesListArgs {
        CONSTRUCTOR_id: 1935116200;
        SUBCLASS_OF_ID: 3929144968;
        classType: "request";
        className: "help.GetCountriesList";
        langCode: string;
        hash: int;
        fromReader(reader: Reader): GetCountriesList;
    }

    type TypeAppUpdate = AppUpdate | NoAppUpdate;
    type TypeInviteText = InviteText;
    type TypeSupport = Support;
    type TypeTermsOfService = TermsOfService;
    type TypeRecentMeUrls = RecentMeUrls;
    type TypeTermsOfServiceUpdate = TermsOfServiceUpdateEmpty | TermsOfServiceUpdate;
    type TypeDeepLinkInfo = DeepLinkInfoEmpty | DeepLinkInfo;
    type TypePassportConfig = PassportConfigNotModified | PassportConfig;
    type TypeSupportName = SupportName;
    type TypeUserInfo = UserInfoEmpty | UserInfo;
    type TypePromoData = PromoDataEmpty | PromoData;
    type TypeCountryCode = CountryCode;
    type TypeCountry = Country;
    type TypeCountriesList = CountriesListNotModified | CountriesList;
    }

    namespace account {
    export interface PrivacyRulesArgs {
        /** Privacy rules */
        rules: TypePrivacyRule[];
        /** Chats to which the rules apply */
        chats: TypeChat[];
        /** Users to which the rules apply */
        users: TypeUser[];
    }

    /** Privacy rules<br> */
    export class PrivacyRules extends VirtualClass<PrivacyRulesArgs> implements PrivacyRulesArgs {
        CONSTRUCTOR_id: 1352683077;
        SUBCLASS_OF_ID: 3042622082;
        classType: "constructor";
        className: "account.PrivacyRules";
        rules: TypePrivacyRule[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): PrivacyRules;
    }

    export interface AuthorizationsArgs {
        /** Logged-in sessions */
        authorizations: TypeAuthorization[];
    }

    /** Logged-in sessions<br> */
    export class Authorizations extends VirtualClass<AuthorizationsArgs> implements AuthorizationsArgs {
        CONSTRUCTOR_id: 307276766;
        SUBCLASS_OF_ID: 200663295;
        classType: "constructor";
        className: "account.Authorizations";
        authorizations: TypeAuthorization[];
        fromReader(reader: Reader): Authorizations;
    }

    export interface PasswordArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user has a recovery method configured */
        hasRecovery?: true;
        /** Whether telegram <a href="https://corefork.telegram.org/passport">passport</a> is enabled */
        hasSecureValues?: true;
        /** Whether the user has a password */
        hasPassword?: true;
        /** The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> of the current password */
        currentAlgo?: TypePasswordKdfAlgo;
        /** Srp B param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a> */
        srpB?: bytes;
        /** Srp ID param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a> */
        srpId?: long;
        /** Text hint for the password */
        hint?: string;
        /** A <a href="https://corefork.telegram.org/api/srp#email-verification">password recovery email</a> with the specified <a href="https://corefork.telegram.org/api/pattern">pattern</a> is still awaiting verification */
        emailUnconfirmedPattern?: string;
        /** The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> to use when creating new passwords */
        newAlgo: TypePasswordKdfAlgo;
        /** The KDF algorithm for telegram <a href="https://corefork.telegram.org/passport">passport</a> */
        newSecureAlgo: TypeSecurePasswordKdfAlgo;
        /** Secure random string */
        secureRandom: bytes;
        /** The 2FA password will be automatically removed at this date, unless the user cancels the operation */
        pendingResetDate?: int;
    }

    /**
     * Configuration for two-factor authorization<br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/api/pattern
     */
    export class Password extends VirtualClass<PasswordArgs> implements PasswordArgs {
        CONSTRUCTOR_id: 408623183;
        SUBCLASS_OF_ID: 1403130275;
        classType: "constructor";
        className: "account.Password";
        flags: number;
        hasRecovery?: true;
        hasSecureValues?: true;
        hasPassword?: true;
        currentAlgo?: TypePasswordKdfAlgo;
        srpB?: bytes;
        srpId?: long;
        hint?: string;
        emailUnconfirmedPattern?: string;
        newAlgo: TypePasswordKdfAlgo;
        newSecureAlgo: TypeSecurePasswordKdfAlgo;
        secureRandom: bytes;
        pendingResetDate?: int;
        fromReader(reader: Reader): Password;
    }

    export interface PasswordSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** <a href="https://corefork.telegram.org/api/srp#email-verification">2FA Recovery email</a> */
        email?: string;
        /** Telegram <a href="https://corefork.telegram.org/passport">passport</a> settings */
        secureSettings?: TypeSecureSecretSettings;
    }

    /**
     * Private info associated to the password info (recovery email, telegram <a href="https://corefork.telegram.org/passport">passport</a> info &amp; so on)<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/passport
     */
    export class PasswordSettings extends VirtualClass<PasswordSettingsArgs> implements PasswordSettingsArgs {
        CONSTRUCTOR_id: -1705233435;
        SUBCLASS_OF_ID: 3527389304;
        classType: "constructor";
        className: "account.PasswordSettings";
        flags: number;
        email?: string;
        secureSettings?: TypeSecureSecretSettings;
        fromReader(reader: Reader): PasswordSettings;
    }

    export interface PasswordInputSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The <a href="https://corefork.telegram.org/api/srp">SRP algorithm</a> to use */
        newAlgo?: TypePasswordKdfAlgo;
        /** The <a href="https://corefork.telegram.org/api/srp">computed password hash</a> */
        newPasswordHash?: bytes;
        /** Text hint for the password */
        hint?: string;
        /** Password recovery email */
        email?: string;
        /** Telegram <a href="https://corefork.telegram.org/passport">passport</a> settings */
        newSecureSettings?: TypeSecureSecretSettings;
    }

    /**
     * Settings for setting up a new password<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/passport
     */
    export class PasswordInputSettings extends VirtualClass<PasswordInputSettingsArgs> implements PasswordInputSettingsArgs {
        CONSTRUCTOR_id: -1036572727;
        SUBCLASS_OF_ID: 205679782;
        classType: "constructor";
        className: "account.PasswordInputSettings";
        flags: number;
        newAlgo?: TypePasswordKdfAlgo;
        newPasswordHash?: bytes;
        hint?: string;
        email?: string;
        newSecureSettings?: TypeSecureSecretSettings;
        fromReader(reader: Reader): PasswordInputSettings;
    }

    export interface TmpPasswordArgs {
        /** Temporary password */
        tmpPassword: bytes;
        /** Validity period */
        validUntil: int;
    }

    /** Temporary payment password<br> */
    export class TmpPassword extends VirtualClass<TmpPasswordArgs> implements TmpPasswordArgs {
        CONSTRUCTOR_id: -614138572;
        SUBCLASS_OF_ID: 2959382829;
        classType: "constructor";
        className: "account.TmpPassword";
        tmpPassword: bytes;
        validUntil: int;
        fromReader(reader: Reader): TmpPassword;
    }

    export interface WebAuthorizationsArgs {
        /** Web authorization list */
        authorizations: TypeWebAuthorization[];
        /** Users */
        users: TypeUser[];
    }

    /** Web authorizations<br> */
    export class WebAuthorizations extends VirtualClass<WebAuthorizationsArgs> implements WebAuthorizationsArgs {
        CONSTRUCTOR_id: -313079300;
        SUBCLASS_OF_ID: 2587253554;
        classType: "constructor";
        className: "account.WebAuthorizations";
        authorizations: TypeWebAuthorization[];
        users: TypeUser[];
        fromReader(reader: Reader): WebAuthorizations;
    }

    export interface AuthorizationFormArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Required <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents */
        requiredTypes: TypeSecureRequiredType[];
        /** Already submitted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents */
        values: TypeSecureValue[];
        /** <a href="https://corefork.telegram.org/passport">Telegram Passport</a> errors */
        errors: TypeSecureValueError[];
        /** Info about the bot to which the form will be submitted */
        users: TypeUser[];
        /** URL of the service's privacy policy */
        privacyPolicyUrl?: string;
    }

    /**
     * <a href="https://corefork.telegram.org/passport">Telegram Passport</a> authorization form<br>
     * @link https://corefork.telegram.org/passport
     */
    export class AuthorizationForm extends VirtualClass<AuthorizationFormArgs> implements AuthorizationFormArgs {
        CONSTRUCTOR_id: -1389486888;
        SUBCLASS_OF_ID: 2013567636;
        classType: "constructor";
        className: "account.AuthorizationForm";
        flags: number;
        requiredTypes: TypeSecureRequiredType[];
        values: TypeSecureValue[];
        errors: TypeSecureValueError[];
        users: TypeUser[];
        privacyPolicyUrl?: string;
        fromReader(reader: Reader): AuthorizationForm;
    }

    export interface SentEmailCodeArgs {
        /** The email (to which the code was sent) must match this <a href="https://corefork.telegram.org/api/pattern">pattern</a> */
        emailPattern: string;
        /** The length of the verification code */
        length: int;
    }

    /**
     * The sent email code<br>
     * @link https://corefork.telegram.org/api/pattern
     */
    export class SentEmailCode extends VirtualClass<SentEmailCodeArgs> implements SentEmailCodeArgs {
        CONSTRUCTOR_id: -2128640689;
        SUBCLASS_OF_ID: 1777582190;
        classType: "constructor";
        className: "account.SentEmailCode";
        emailPattern: string;
        length: int;
        fromReader(reader: Reader): SentEmailCode;
    }

    export interface TakeoutArgs {
        /** Takeout ID */
        id: long;
    }

    /** Takout info<br> */
    export class Takeout extends VirtualClass<TakeoutArgs> implements TakeoutArgs {
        CONSTRUCTOR_id: 1304052993;
        SUBCLASS_OF_ID: 2218704517;
        classType: "constructor";
        className: "account.Takeout";
        id: long;
        fromReader(reader: Reader): Takeout;
    }

    /** No new wallpapers were found<br> */
    export class WallPapersNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: 471437699;
        SUBCLASS_OF_ID: 2730838269;
        classType: "constructor";
        className: "account.WallPapersNotModified";
        fromReader(reader: Reader): WallPapersNotModified;
    }

    export interface WallPapersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Wallpapers */
        wallpapers: TypeWallPaper[];
    }

    /**
     * Installed wallpapers<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class WallPapers extends VirtualClass<WallPapersArgs> implements WallPapersArgs {
        CONSTRUCTOR_id: 1881892265;
        SUBCLASS_OF_ID: 2730838269;
        classType: "constructor";
        className: "account.WallPapers";
        hash: int;
        wallpapers: TypeWallPaper[];
        fromReader(reader: Reader): WallPapers;
    }

    export interface AutoDownloadSettingsArgs {
        /** Low data usage preset */
        low: TypeAutoDownloadSettings;
        /** Medium data usage preset */
        medium: TypeAutoDownloadSettings;
        /** High data usage preset */
        high: TypeAutoDownloadSettings;
    }

    /** Media autodownload settings<br> */
    export class AutoDownloadSettings extends VirtualClass<AutoDownloadSettingsArgs> implements AutoDownloadSettingsArgs {
        CONSTRUCTOR_id: 1674235686;
        SUBCLASS_OF_ID: 800610593;
        classType: "constructor";
        className: "account.AutoDownloadSettings";
        low: TypeAutoDownloadSettings;
        medium: TypeAutoDownloadSettings;
        high: TypeAutoDownloadSettings;
        fromReader(reader: Reader): AutoDownloadSettings;
    }

    /** No new themes were installed<br> */
    export class ThemesNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -199313886;
        SUBCLASS_OF_ID: 2143625732;
        classType: "constructor";
        className: "account.ThemesNotModified";
        fromReader(reader: Reader): ThemesNotModified;
    }

    export interface ThemesArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
        /** Themes */
        themes: TypeTheme[];
    }

    /**
     * Installed themes<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class Themes extends VirtualClass<ThemesArgs> implements ThemesArgs {
        CONSTRUCTOR_id: 2137482273;
        SUBCLASS_OF_ID: 2143625732;
        classType: "constructor";
        className: "account.Themes";
        hash: int;
        themes: TypeTheme[];
        fromReader(reader: Reader): Themes;
    }

    export interface ContentSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether viewing of sensitive (NSFW) content is enabled */
        sensitiveEnabled?: true;
        /** Whether the current client can change the sensitive content settings to view NSFW content */
        sensitiveCanChange?: true;
    }

    /** Sensitive content settings<br> */
    export class ContentSettings extends VirtualClass<ContentSettingsArgs> implements ContentSettingsArgs {
        CONSTRUCTOR_id: 1474462241;
        SUBCLASS_OF_ID: 2923427985;
        classType: "constructor";
        className: "account.ContentSettings";
        flags: number;
        sensitiveEnabled?: true;
        sensitiveCanChange?: true;
        fromReader(reader: Reader): ContentSettings;
    }

    export interface ResetPasswordFailedWaitArgs {
        /** Wait until this date before requesting another reset. */
        retryDate: int;
    }

    /** You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.<br> */
    export class ResetPasswordFailedWait extends VirtualClass<ResetPasswordFailedWaitArgs> implements ResetPasswordFailedWaitArgs {
        CONSTRUCTOR_id: -478701471;
        SUBCLASS_OF_ID: 1230009366;
        classType: "constructor";
        className: "account.ResetPasswordFailedWait";
        retryDate: int;
        fromReader(reader: Reader): ResetPasswordFailedWait;
    }

    export interface ResetPasswordRequestedWaitArgs {
        /** Wait until this date before finalizing the reset. */
        untilDate: int;
    }

    /** You successfully requested a password reset, please wait until the specified date before finalizing the reset.<br> */
    export class ResetPasswordRequestedWait extends VirtualClass<ResetPasswordRequestedWaitArgs> implements ResetPasswordRequestedWaitArgs {
        CONSTRUCTOR_id: -370148227;
        SUBCLASS_OF_ID: 1230009366;
        classType: "constructor";
        className: "account.ResetPasswordRequestedWait";
        untilDate: int;
        fromReader(reader: Reader): ResetPasswordRequestedWait;
    }

    /** The 2FA password was reset successfully.<br> */
    export class ResetPasswordOk extends VirtualClass<void> {
        CONSTRUCTOR_id: -383330754;
        SUBCLASS_OF_ID: 1230009366;
        classType: "constructor";
        className: "account.ResetPasswordOk";
        fromReader(reader: Reader): ResetPasswordOk;
    }

    export interface RegisterDeviceArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Avoid receiving (silent and invisible background) notifications. Useful to save battery. */
        noMuted?: true;
        /** Device token type.<br><strong>Possible values</strong>:<br><code>1</code> - APNS (device token for apple push)<br><code>2</code> - FCM (firebase token for google firebase)<br><code>3</code> - MPNS (channel URI for microsoft push)<br><code>4</code> - Simple push (endpoint for firefox's simple push API)<br><code>5</code> - Ubuntu phone (token for ubuntu push)<br><code>6</code> - Blackberry (token for blackberry push)<br><code>7</code> - Unused<br><code>8</code> - WNS (windows push)<br><code>9</code> - APNS VoIP (token for apple push VoIP)<br><code>10</code> - Web push (web push, see below)<br><code>11</code> - MPNS VoIP (token for microsoft push VoIP)<br><code>12</code> - Tizen (token for tizen push)<br><br>For <code>10</code> web push, the token must be a JSON-encoded object containing the keys described in <a href="https://corefork.telegram.org/api/push-updates">PUSH updates</a> */
        tokenType: int;
        /** Device token */
        token: string;
        /** If <a href="https://corefork.telegram.org/constructor/boolTrue">(boolTrue)</a> is transmitted, a sandbox-certificate will be used during transmission. */
        appSandbox: Bool;
        /** For FCM and APNS VoIP, optional encryption key used to encrypt push notifications */
        secret: bytes;
        /** List of user identifiers of other users currently using the client */
        otherUids: int[];
    }

    /**
     * Register device to receive <a href="https://corefork.telegram.org/api/push-updates">PUSH notifications</a><br>
     * @link https://corefork.telegram.org/api/push-updates
     * @link https://corefork.telegram.org/constructor/boolTrue
     * @throws {{code:400,type:"TOKEN_INVALID"}} The provided token is invalid.
     * @throws {{code:400,type:"WEBPUSH_AUTH_INVALID"}} The specified web push authentication secret is invalid.
     * @throws {{code:400,type:"WEBPUSH_KEY_INVALID"}} The specified web push elliptic curve Diffie-Hellman public key is invalid.
     * @throws {{code:400,type:"WEBPUSH_TOKEN_INVALID"}} The specified web push token is invalid.
     */
    export class RegisterDevice extends Request<Partial<RegisterDeviceArgs>,Bool> implements RegisterDeviceArgs {
        CONSTRUCTOR_id: 1754754159;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.RegisterDevice";
        flags: number;
        noMuted?: true;
        tokenType: int;
        token: string;
        appSandbox: Bool;
        secret: bytes;
        otherUids: int[];
        fromReader(reader: Reader): RegisterDevice;
    }

    export interface UnregisterDeviceArgs {
        /** Device token type.<br><strong>Possible values</strong>:<br><code>1</code> - APNS (device token for apple push)<br><code>2</code> - FCM (firebase token for google firebase)<br><code>3</code> - MPNS (channel URI for microsoft push)<br><code>4</code> - Simple push (endpoint for firefox's simple push API)<br><code>5</code> - Ubuntu phone (token for ubuntu push)<br><code>6</code> - Blackberry (token for blackberry push)<br><code>7</code> - Unused<br><code>8</code> - WNS (windows push)<br><code>9</code> - APNS VoIP (token for apple push VoIP)<br><code>10</code> - Web push (web push, see below)<br><code>11</code> - MPNS VoIP (token for microsoft push VoIP)<br><code>12</code> - Tizen (token for tizen push)<br><br>For <code>10</code> web push, the token must be a JSON-encoded object containing the keys described in <a href="https://corefork.telegram.org/api/push-updates">PUSH updates</a> */
        tokenType: int;
        /** Device token */
        token: string;
        /** List of user identifiers of other users currently using the client */
        otherUids: int[];
    }

    /**
     * Deletes a device by its token, stops sending PUSH-notifications to it.<br>
     * @link https://corefork.telegram.org/api/push-updates
     * @throws {{code:400,type:"TOKEN_INVALID"}} The provided token is invalid.
     */
    export class UnregisterDevice extends Request<Partial<UnregisterDeviceArgs>,Bool> implements UnregisterDeviceArgs {
        CONSTRUCTOR_id: 813089983;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.UnregisterDevice";
        tokenType: int;
        token: string;
        otherUids: int[];
        fromReader(reader: Reader): UnregisterDevice;
    }

    export interface UpdateNotifySettingsArgs {
        /** Notification source */
        peer: TypeInputNotifyPeer;
        /** Notification settings */
        settings: TypeInputPeerNotifySettings;
    }

    /**
     * Edits notification settings from a given user/group, from all users/all groups.<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"SETTINGS_INVALID"}} Invalid settings were provided.
     */
    export class UpdateNotifySettings extends Request<Partial<UpdateNotifySettingsArgs>,Bool> implements UpdateNotifySettingsArgs {
        CONSTRUCTOR_id: -2067899501;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.UpdateNotifySettings";
        peer: TypeInputNotifyPeer;
        settings: TypeInputPeerNotifySettings;
        fromReader(reader: Reader): UpdateNotifySettings;
    }

    export interface GetNotifySettingsArgs {
        /** Notification source */
        peer: TypeInputNotifyPeer;
    }

    /**
     * Gets current notification settings for a given user/group, from all users/all groups.<br>
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class GetNotifySettings extends Request<Partial<GetNotifySettingsArgs>,TypePeerNotifySettings> implements GetNotifySettingsArgs {
        CONSTRUCTOR_id: 313765169;
        SUBCLASS_OF_ID: 3475030132;
        classType: "request";
        className: "account.GetNotifySettings";
        peer: TypeInputNotifyPeer;
        fromReader(reader: Reader): GetNotifySettings;
    }

    /** Resets all notification settings from users and groups.<br> */
    export class ResetNotifySettings extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -612493497;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResetNotifySettings";
        fromReader(reader: Reader): ResetNotifySettings;
    }

    export interface UpdateProfileArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** New user first name */
        firstName?: string;
        /** New user last name */
        lastName?: string;
        /** New bio */
        about?: string;
    }

    /**
     * Updates user profile.<br>
     * @throws {{code:400,type:"ABOUT_TOO_LONG"}} About string too long.
     * @throws {{code:400,type:"FIRSTNAME_INVALID"}} The first name is invalid.
     */
    export class UpdateProfile extends Request<Partial<UpdateProfileArgs>,TypeUser> implements UpdateProfileArgs {
        CONSTRUCTOR_id: 2018596725;
        SUBCLASS_OF_ID: 765557111;
        classType: "request";
        className: "account.UpdateProfile";
        flags: number;
        firstName?: string;
        lastName?: string;
        about?: string;
        fromReader(reader: Reader): UpdateProfile;
    }

    export interface UpdateStatusArgs {
        /** If <a href="https://corefork.telegram.org/constructor/boolTrue">(boolTrue)</a> is transmitted, user status will change to <a href="https://corefork.telegram.org/constructor/userStatusOffline">(userStatusOffline)</a>. */
        offline: Bool;
    }

    /**
     * Updates online user status.<br>
     * @link https://corefork.telegram.org/constructor/boolTrue
     * @link https://corefork.telegram.org/constructor/userStatusOffline
     */
    export class UpdateStatus extends Request<Partial<UpdateStatusArgs>,Bool> implements UpdateStatusArgs {
        CONSTRUCTOR_id: 1713919532;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.UpdateStatus";
        offline: Bool;
        fromReader(reader: Reader): UpdateStatus;
    }

    export interface GetWallPapersArgs {
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Returns a list of available wallpapers.<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetWallPapers extends Request<Partial<GetWallPapersArgs>,account.TypeWallPapers> implements GetWallPapersArgs {
        CONSTRUCTOR_id: -1430579357;
        SUBCLASS_OF_ID: 2730838269;
        classType: "request";
        className: "account.GetWallPapers";
        hash: int;
        fromReader(reader: Reader): GetWallPapers;
    }

    export interface ReportPeerArgs {
        /** The peer to report */
        peer: EntityLike;
        /** The reason why this peer is being reported */
        reason: TypeReportReason;
        /** Comment for report moderation */
        message: string;
    }

    /**
     * Report a peer for violation of telegram's Terms of Service<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     */
    export class ReportPeer extends Request<Partial<ReportPeerArgs>,Bool> implements ReportPeerArgs {
        CONSTRUCTOR_id: -977650298;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ReportPeer";
        peer: EntityLike;
        reason: TypeReportReason;
        message: string;
        fromReader(reader: Reader): ReportPeer;
    }

    export interface CheckUsernameArgs {
        /** username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters. */
        username: string;
    }

    /**
     * Validates a username and checks availability.<br>
     * @throws {{code:400,type:"USERNAME_INVALID"}} Unacceptable username.
     */
    export class CheckUsername extends Request<Partial<CheckUsernameArgs>,Bool> implements CheckUsernameArgs {
        CONSTRUCTOR_id: 655677548;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.CheckUsername";
        username: string;
        fromReader(reader: Reader): CheckUsername;
    }

    export interface UpdateUsernameArgs {
        /** username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters. */
        username: string;
    }

    /**
     * Changes username for the current user.<br>
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"USERNAME_INVALID"}} Unacceptable username.
     * @throws {{code:400,type:"USERNAME_NOT_MODIFIED"}} Username is not different from the current username.
     * @throws {{code:400,type:"USERNAME_OCCUPIED"}} Username is taken.
     */
    export class UpdateUsername extends Request<Partial<UpdateUsernameArgs>,TypeUser> implements UpdateUsernameArgs {
        CONSTRUCTOR_id: 1040964988;
        SUBCLASS_OF_ID: 765557111;
        classType: "request";
        className: "account.UpdateUsername";
        username: string;
        fromReader(reader: Reader): UpdateUsername;
    }

    export interface GetPrivacyArgs {
        /** Peer category whose privacy settings should be fetched */
        key: TypeInputPrivacyKey;
    }

    /**
     * Get privacy settings of current account<br>
     * @throws {{code:400,type:"PRIVACY_KEY_INVALID"}} The privacy key is invalid.
     */
    export class GetPrivacy extends Request<Partial<GetPrivacyArgs>,account.TypePrivacyRules> implements GetPrivacyArgs {
        CONSTRUCTOR_id: -623130288;
        SUBCLASS_OF_ID: 3042622082;
        classType: "request";
        className: "account.GetPrivacy";
        key: TypeInputPrivacyKey;
        fromReader(reader: Reader): GetPrivacy;
    }

    export interface SetPrivacyArgs {
        /** Peers to which the privacy rules apply */
        key: TypeInputPrivacyKey;
        /** New privacy rules */
        rules: TypeInputPrivacyRule[];
    }

    /**
     * Change privacy settings of current account<br>
     * @throws {{code:400,type:"PRIVACY_KEY_INVALID"}} The privacy key is invalid.
     * @throws {{code:400,type:"PRIVACY_TOO_LONG"}} Too many privacy rules were specified, the current limit is 1000.
     * @throws {{code:400,type:"PRIVACY_VALUE_INVALID"}} The specified privacy rule combination is invalid.
     */
    export class SetPrivacy extends Request<Partial<SetPrivacyArgs>,account.TypePrivacyRules> implements SetPrivacyArgs {
        CONSTRUCTOR_id: -906486552;
        SUBCLASS_OF_ID: 3042622082;
        classType: "request";
        className: "account.SetPrivacy";
        key: TypeInputPrivacyKey;
        rules: TypeInputPrivacyRule[];
        fromReader(reader: Reader): SetPrivacy;
    }

    export interface DeleteAccountArgs {
        /** Why is the account being deleted, can be empty */
        reason: string;
    }

    /**
     * Delete the user's account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the <a href="https://corefork.telegram.org/api/srp">2FA password and no recovery method is configured</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:420,type:"2FA_CONFIRM_WAIT_X"}} Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in X seconds.
     */
    export class DeleteAccount extends Request<Partial<DeleteAccountArgs>,Bool> implements DeleteAccountArgs {
        CONSTRUCTOR_id: 1099779595;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.DeleteAccount";
        reason: string;
        fromReader(reader: Reader): DeleteAccount;
    }

    /** Get days to live of account<br> */
    export class GetAccountTTL extends Request<Partial<void>,TypeAccountDaysTTL> {
        CONSTRUCTOR_id: 150761757;
        SUBCLASS_OF_ID: 3131284872;
        classType: "request";
        className: "account.GetAccountTTL";
        fromReader(reader: Reader): GetAccountTTL;
    }

    export interface SetAccountTTLArgs {
        /** Time to live in days */
        ttl: TypeAccountDaysTTL;
    }

    /**
     * Set account self-destruction period<br>
     * @throws {{code:400,type:"TTL_DAYS_INVALID"}} The provided TTL is invalid.
     */
    export class SetAccountTTL extends Request<Partial<SetAccountTTLArgs>,Bool> implements SetAccountTTLArgs {
        CONSTRUCTOR_id: 608323678;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SetAccountTTL";
        ttl: TypeAccountDaysTTL;
        fromReader(reader: Reader): SetAccountTTL;
    }

    export interface SendChangePhoneCodeArgs {
        /** New phone number */
        phoneNumber: string;
        /** Phone code settings */
        settings: TypeCodeSettings;
    }

    /**
     * Verify a new phone number to associate to the current account<br>
     * @throws {{code:406,type:"FRESH_CHANGE_PHONE_FORBIDDEN"}} You can't change phone number right after logging in, please wait at least 24 hours.
     * @throws {{code:400,type:"PHONE_NUMBER_BANNED"}} The provided phone number is banned from telegram.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     * @throws {{code:400,type:"PHONE_NUMBER_OCCUPIED"}} The phone number is already in use.
     */
    export class SendChangePhoneCode extends Request<Partial<SendChangePhoneCodeArgs>,auth.TypeSentCode> implements SendChangePhoneCodeArgs {
        CONSTRUCTOR_id: -2108208411;
        SUBCLASS_OF_ID: 1827172481;
        classType: "request";
        className: "account.SendChangePhoneCode";
        phoneNumber: string;
        settings: TypeCodeSettings;
        fromReader(reader: Reader): SendChangePhoneCode;
    }

    export interface ChangePhoneArgs {
        /** New phone number */
        phoneNumber: string;
        /** Phone code hash received when calling <a href="https://corefork.telegram.org/method/account.sendChangePhoneCode">account.sendChangePhoneCode</a> */
        phoneCodeHash: string;
        /** Phone code received when calling <a href="https://corefork.telegram.org/method/account.sendChangePhoneCode">account.sendChangePhoneCode</a> */
        phoneCode: string;
    }

    /**
     * Change the phone number of the current account<br>
     * @link https://corefork.telegram.org/method/account.sendChangePhoneCode
     * @throws {{code:400,type:"PHONE_CODE_EMPTY"}} phone_code is missing.
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     * @throws {{code:400,type:"PHONE_NUMBER_OCCUPIED"}} The phone number is already in use.
     */
    export class ChangePhone extends Request<Partial<ChangePhoneArgs>,TypeUser> implements ChangePhoneArgs {
        CONSTRUCTOR_id: 1891839707;
        SUBCLASS_OF_ID: 765557111;
        classType: "request";
        className: "account.ChangePhone";
        phoneNumber: string;
        phoneCodeHash: string;
        phoneCode: string;
        fromReader(reader: Reader): ChangePhone;
    }

    export interface UpdateDeviceLockedArgs {
        /** Inactivity period after which to start hiding message texts in <a href="https://corefork.telegram.org/api/push-updates">PUSH notifications</a>. */
        period: int;
    }

    /**
     * When client-side passcode lock feature is enabled, will not show message texts in incoming <a href="https://corefork.telegram.org/api/push-updates">PUSH notifications</a>.<br>
     * @link https://corefork.telegram.org/api/push-updates
     */
    export class UpdateDeviceLocked extends Request<Partial<UpdateDeviceLockedArgs>,Bool> implements UpdateDeviceLockedArgs {
        CONSTRUCTOR_id: 954152242;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.UpdateDeviceLocked";
        period: int;
        fromReader(reader: Reader): UpdateDeviceLocked;
    }

    /** Get logged-in sessions<br> */
    export class GetAuthorizations extends Request<Partial<void>,account.TypeAuthorizations> {
        CONSTRUCTOR_id: -484392616;
        SUBCLASS_OF_ID: 200663295;
        classType: "request";
        className: "account.GetAuthorizations";
        fromReader(reader: Reader): GetAuthorizations;
    }

    export interface ResetAuthorizationArgs {
        /** Session hash */
        hash: long;
    }

    /**
     * Log out an active <a href="https://corefork.telegram.org/api/auth">authorized session</a> by its hash<br>
     * @link https://corefork.telegram.org/api/auth
     * @throws {{code:406,type:"FRESH_RESET_AUTHORISATION_FORBIDDEN"}} You can't logout other sessions if less than 24 hours have passed since you logged on the current session.
     * @throws {{code:400,type:"HASH_INVALID"}} The provided hash is invalid.
     */
    export class ResetAuthorization extends Request<Partial<ResetAuthorizationArgs>,Bool> implements ResetAuthorizationArgs {
        CONSTRUCTOR_id: -545786948;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResetAuthorization";
        hash: long;
        fromReader(reader: Reader): ResetAuthorization;
    }

    /** Obtain configuration for two-factor authorization with password<br> */
    export class GetPassword extends Request<Partial<void>,account.TypePassword> {
        CONSTRUCTOR_id: 1418342645;
        SUBCLASS_OF_ID: 1403130275;
        classType: "request";
        className: "account.GetPassword";
        fromReader(reader: Reader): GetPassword;
    }

    export interface GetPasswordSettingsArgs {
        /** The password (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        password: TypeInputCheckPasswordSRP;
    }

    /**
     * Get private info associated to the password info (recovery email, telegram <a href="https://corefork.telegram.org/passport">passport</a> info &amp; so on)<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"PASSWORD_HASH_INVALID"}} The provided password hash is invalid.
     */
    export class GetPasswordSettings extends Request<Partial<GetPasswordSettingsArgs>,account.TypePasswordSettings> implements GetPasswordSettingsArgs {
        CONSTRUCTOR_id: -1663767815;
        SUBCLASS_OF_ID: 3527389304;
        classType: "request";
        className: "account.GetPasswordSettings";
        password: TypeInputCheckPasswordSRP;
        fromReader(reader: Reader): GetPasswordSettings;
    }

    export interface UpdatePasswordSettingsArgs {
        /** The old password (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        password: TypeInputCheckPasswordSRP;
        /** The new password (see <a href="https://corefork.telegram.org/api/srp">SRP</a>) */
        newSettings: account.TypePasswordInputSettings;
    }

    /**
     * Set a new 2FA password<br>
     * @link https://corefork.telegram.org/api/srp
     * @link https://corefork.telegram.org/method/account.verifyEmail
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"EMAIL_UNCONFIRMED"}} Email unconfirmed.
     * @throws {{code:400,type:"EMAIL_UNCONFIRMED_X"}} The provided email isn't confirmed, X is the length of the verification code that was just sent to the email: use account.verifyEmail to enter the received verification code and enable the recovery email.
     * @throws {{code:400,type:"NEW_SALT_INVALID"}} The new salt is invalid.
     * @throws {{code:400,type:"NEW_SETTINGS_INVALID"}} The new password settings are invalid.
     * @throws {{code:400,type:"PASSWORD_HASH_INVALID"}} The old password hash is invalid.
     * @throws {{code:400,type:"SRP_ID_INVALID"}} Invalid SRP ID provided.
     * @throws {{code:400,type:"SRP_PASSWORD_CHANGED"}} Password has changed.
     */
    export class UpdatePasswordSettings extends Request<Partial<UpdatePasswordSettingsArgs>,Bool> implements UpdatePasswordSettingsArgs {
        CONSTRUCTOR_id: -1516564433;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.UpdatePasswordSettings";
        password: TypeInputCheckPasswordSRP;
        newSettings: account.TypePasswordInputSettings;
        fromReader(reader: Reader): UpdatePasswordSettings;
    }

    export interface SendConfirmPhoneCodeArgs {
        /** The hash from the service notification, for more info <a href="https://corefork.telegram.org/api/account-deletion">click here »</a> */
        hash: string;
        /** Phone code settings */
        settings: TypeCodeSettings;
    }

    /**
     * Send confirmation code to cancel account deletion, for more info <a href="https://corefork.telegram.org/api/account-deletion">click here »</a><br>
     * @link https://corefork.telegram.org/api/account-deletion
     * @throws {{code:400,type:"HASH_INVALID"}} The provided hash is invalid.
     */
    export class SendConfirmPhoneCode extends Request<Partial<SendConfirmPhoneCodeArgs>,auth.TypeSentCode> implements SendConfirmPhoneCodeArgs {
        CONSTRUCTOR_id: 457157256;
        SUBCLASS_OF_ID: 1827172481;
        classType: "request";
        className: "account.SendConfirmPhoneCode";
        hash: string;
        settings: TypeCodeSettings;
        fromReader(reader: Reader): SendConfirmPhoneCode;
    }

    export interface ConfirmPhoneArgs {
        /** Phone code hash, for more info <a href="https://corefork.telegram.org/api/account-deletion">click here »</a> */
        phoneCodeHash: string;
        /** SMS code, for more info <a href="https://corefork.telegram.org/api/account-deletion">click here »</a> */
        phoneCode: string;
    }

    /**
     * Confirm a phone number to cancel account deletion, for more info <a href="https://corefork.telegram.org/api/account-deletion">click here »</a><br>
     * @link https://corefork.telegram.org/api/account-deletion
     * @throws {{code:400,type:"CODE_HASH_INVALID"}} Code hash invalid.
     * @throws {{code:400,type:"PHONE_CODE_EMPTY"}} phone_code is missing.
     */
    export class ConfirmPhone extends Request<Partial<ConfirmPhoneArgs>,Bool> implements ConfirmPhoneArgs {
        CONSTRUCTOR_id: 1596029123;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ConfirmPhone";
        phoneCodeHash: string;
        phoneCode: string;
        fromReader(reader: Reader): ConfirmPhone;
    }

    export interface GetTmpPasswordArgs {
        /** SRP password parameters */
        password: TypeInputCheckPasswordSRP;
        /** Time during which the temporary password will be valid, in seconds; should be between 60 and 86400 */
        period: int;
    }

    /**
     * Get temporary payment password<br>
     * @throws {{code:400,type:"PASSWORD_HASH_INVALID"}} The provided password hash is invalid.
     * @throws {{code:400,type:"TMP_PASSWORD_DISABLED"}} The temporary password is disabled.
     */
    export class GetTmpPassword extends Request<Partial<GetTmpPasswordArgs>,account.TypeTmpPassword> implements GetTmpPasswordArgs {
        CONSTRUCTOR_id: 1151208273;
        SUBCLASS_OF_ID: 2959382829;
        classType: "request";
        className: "account.GetTmpPassword";
        password: TypeInputCheckPasswordSRP;
        period: int;
        fromReader(reader: Reader): GetTmpPassword;
    }

    /**
     * Get web <a href="https://corefork.telegram.org/widgets/login">login widget</a> authorizations<br>
     * @link https://corefork.telegram.org/widgets/login
     */
    export class GetWebAuthorizations extends Request<Partial<void>,account.TypeWebAuthorizations> {
        CONSTRUCTOR_id: 405695855;
        SUBCLASS_OF_ID: 2587253554;
        classType: "request";
        className: "account.GetWebAuthorizations";
        fromReader(reader: Reader): GetWebAuthorizations;
    }

    export interface ResetWebAuthorizationArgs {
        /** <a href="https://corefork.telegram.org/constructor/webAuthorization">Session</a> hash */
        hash: long;
    }

    /**
     * Log out an active web <a href="https://corefork.telegram.org/widgets/login">telegram login</a> session<br>
     * @link https://corefork.telegram.org/constructor/webAuthorization
     * @link https://corefork.telegram.org/widgets/login
     * @link https://corefork.telegram.org/widgets/login
     * @throws {{code:400,type:"HASH_INVALID"}} The provided hash is invalid.
     */
    export class ResetWebAuthorization extends Request<Partial<ResetWebAuthorizationArgs>,Bool> implements ResetWebAuthorizationArgs {
        CONSTRUCTOR_id: 755087855;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResetWebAuthorization";
        hash: long;
        fromReader(reader: Reader): ResetWebAuthorization;
    }

    /**
     * Reset all active web <a href="https://corefork.telegram.org/widgets/login">telegram login</a> sessions<br>
     * @link https://corefork.telegram.org/widgets/login
     */
    export class ResetWebAuthorizations extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: 1747789204;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResetWebAuthorizations";
        fromReader(reader: Reader): ResetWebAuthorizations;
    }

    /**
     * Get all saved <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class GetAllSecureValues extends Request<Partial<void>,TypeSecureValue[]> {
        CONSTRUCTOR_id: -1299661699;
        SUBCLASS_OF_ID: 3895345441;
        classType: "request";
        className: "account.GetAllSecureValues";
        fromReader(reader: Reader): GetAllSecureValues;
    }

    export interface GetSecureValueArgs {
        /** Requested value types */
        types: TypeSecureValueType[];
    }

    /**
     * Get saved <a href="https://corefork.telegram.org/passport">Telegram Passport</a> document, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class GetSecureValue extends Request<Partial<GetSecureValueArgs>,TypeSecureValue[]> implements GetSecureValueArgs {
        CONSTRUCTOR_id: 1936088002;
        SUBCLASS_OF_ID: 3895345441;
        classType: "request";
        className: "account.GetSecureValue";
        types: TypeSecureValueType[];
        fromReader(reader: Reader): GetSecureValue;
    }

    export interface SaveSecureValueArgs {
        /** Secure value, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a> */
        value: TypeInputSecureValue;
        /** Passport secret hash, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a> */
        secureSecretId: long;
    }

    /**
     * Securely save <a href="https://corefork.telegram.org/passport">Telegram Passport</a> document, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport/encryption
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"PASSWORD_REQUIRED"}} A 2FA password must be configured to use Telegram Passport.
     */
    export class SaveSecureValue extends Request<Partial<SaveSecureValueArgs>,TypeSecureValue> implements SaveSecureValueArgs {
        CONSTRUCTOR_id: -1986010339;
        SUBCLASS_OF_ID: 85014702;
        classType: "request";
        className: "account.SaveSecureValue";
        value: TypeInputSecureValue;
        secureSecretId: long;
        fromReader(reader: Reader): SaveSecureValue;
    }

    export interface DeleteSecureValueArgs {
        /** Document types to delete */
        types: TypeSecureValueType[];
    }

    /**
     * Delete stored <a href="https://corefork.telegram.org/passport">Telegram Passport</a> documents, <a href="https://corefork.telegram.org/passport/encryption#encryption">for more info see the passport docs »</a><br>
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport/encryption
     */
    export class DeleteSecureValue extends Request<Partial<DeleteSecureValueArgs>,Bool> implements DeleteSecureValueArgs {
        CONSTRUCTOR_id: -1199522741;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.DeleteSecureValue";
        types: TypeSecureValueType[];
        fromReader(reader: Reader): DeleteSecureValue;
    }

    export interface GetAuthorizationFormArgs {
        /** User identifier of the service's bot */
        botId: int;
        /** Telegram Passport element types requested by the service */
        scope: string;
        /** Service's public key */
        publicKey: string;
    }

    /**
     * Returns a Telegram Passport authorization form for sharing data with a service<br>
     * @throws {{code:400,type:"PUBLIC_KEY_REQUIRED"}} A public key is required.
     */
    export class GetAuthorizationForm extends Request<Partial<GetAuthorizationFormArgs>,account.TypeAuthorizationForm> implements GetAuthorizationFormArgs {
        CONSTRUCTOR_id: -1200903967;
        SUBCLASS_OF_ID: 2013567636;
        classType: "request";
        className: "account.GetAuthorizationForm";
        botId: int;
        scope: string;
        publicKey: string;
        fromReader(reader: Reader): GetAuthorizationForm;
    }

    export interface AcceptAuthorizationArgs {
        /** Bot ID */
        botId: int;
        /** Telegram Passport element types requested by the service */
        scope: string;
        /** Service's public key */
        publicKey: string;
        /** Types of values sent and their hashes */
        valueHashes: TypeSecureValueHash[];
        /** Encrypted values */
        credentials: TypeSecureCredentialsEncrypted;
    }

    /** Sends a Telegram Passport authorization form, effectively sharing data with the service<br> */
    export class AcceptAuthorization extends Request<Partial<AcceptAuthorizationArgs>,Bool> implements AcceptAuthorizationArgs {
        CONSTRUCTOR_id: -419267436;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.AcceptAuthorization";
        botId: int;
        scope: string;
        publicKey: string;
        valueHashes: TypeSecureValueHash[];
        credentials: TypeSecureCredentialsEncrypted;
        fromReader(reader: Reader): AcceptAuthorization;
    }

    export interface SendVerifyPhoneCodeArgs {
        /** The phone number to verify */
        phoneNumber: string;
        /** Phone code settings */
        settings: TypeCodeSettings;
    }

    /**
     * Send the verification phone code for telegram <a href="https://corefork.telegram.org/passport">passport</a>.<br>
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     */
    export class SendVerifyPhoneCode extends Request<Partial<SendVerifyPhoneCodeArgs>,auth.TypeSentCode> implements SendVerifyPhoneCodeArgs {
        CONSTRUCTOR_id: -1516022023;
        SUBCLASS_OF_ID: 1827172481;
        classType: "request";
        className: "account.SendVerifyPhoneCode";
        phoneNumber: string;
        settings: TypeCodeSettings;
        fromReader(reader: Reader): SendVerifyPhoneCode;
    }

    export interface VerifyPhoneArgs {
        /** Phone number */
        phoneNumber: string;
        /** Phone code hash received from the call to <a href="https://corefork.telegram.org/method/account.sendVerifyPhoneCode">account.sendVerifyPhoneCode</a> */
        phoneCodeHash: string;
        /** Code received after the call to <a href="https://corefork.telegram.org/method/account.sendVerifyPhoneCode">account.sendVerifyPhoneCode</a> */
        phoneCode: string;
    }

    /**
     * Verify a phone number for telegram <a href="https://corefork.telegram.org/passport">passport</a>.<br>
     * @link https://corefork.telegram.org/method/account.sendVerifyPhoneCode
     * @link https://corefork.telegram.org/passport
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"PHONE_CODE_EMPTY"}} phone_code is missing.
     * @throws {{code:400,type:"PHONE_CODE_EXPIRED"}} The phone code you provided has expired, this may happen if it was sent to any chat on telegram (if the code is sent through a telegram chat (not the official account) to avoid it append or prepend to the code some chars).
     * @throws {{code:400,type:"PHONE_NUMBER_INVALID"}} The phone number is invalid.
     */
    export class VerifyPhone extends Request<Partial<VerifyPhoneArgs>,Bool> implements VerifyPhoneArgs {
        CONSTRUCTOR_id: 1305716726;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.VerifyPhone";
        phoneNumber: string;
        phoneCodeHash: string;
        phoneCode: string;
        fromReader(reader: Reader): VerifyPhone;
    }

    export interface SendVerifyEmailCodeArgs {
        /** The email where to send the code */
        email: string;
    }

    /**
     * Send the verification email code for telegram <a href="https://corefork.telegram.org/passport">passport</a>.<br>
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"EMAIL_INVALID"}} The specified email is invalid.
     */
    export class SendVerifyEmailCode extends Request<Partial<SendVerifyEmailCodeArgs>,account.TypeSentEmailCode> implements SendVerifyEmailCodeArgs {
        CONSTRUCTOR_id: 1880182943;
        SUBCLASS_OF_ID: 1777582190;
        classType: "request";
        className: "account.SendVerifyEmailCode";
        email: string;
        fromReader(reader: Reader): SendVerifyEmailCode;
    }

    export interface VerifyEmailArgs {
        /** The email to verify */
        email: string;
        /** The verification code that was received */
        code: string;
    }

    /**
     * Verify an email address for telegram <a href="https://corefork.telegram.org/passport">passport</a>.<br>
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"EMAIL_INVALID"}} The specified email is invalid.
     * @throws {{code:400,type:"EMAIL_VERIFY_EXPIRED"}} The verification email has expired.
     */
    export class VerifyEmail extends Request<Partial<VerifyEmailArgs>,Bool> implements VerifyEmailArgs {
        CONSTRUCTOR_id: -323339813;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.VerifyEmail";
        email: string;
        code: string;
        fromReader(reader: Reader): VerifyEmail;
    }

    export interface InitTakeoutSessionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to export contacts */
        contacts?: true;
        /** Whether to export messages in private chats */
        messageUsers?: true;
        /** Whether to export messages in <a href="https://corefork.telegram.org/api/channel">legacy groups</a> */
        messageChats?: true;
        /** Whether to export messages in <a href="https://corefork.telegram.org/api/channel">supergroups</a> */
        messageMegagroups?: true;
        /** Whether to export messages in <a href="https://corefork.telegram.org/api/channel">channels</a> */
        messageChannels?: true;
        /** Whether to export files */
        files?: true;
        /** Maximum size of files to export */
        fileMaxSize?: int;
    }

    /**
     * Initialize account takeout session<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:420,type:"TAKEOUT_INIT_DELAY_X"}} Wait X seconds before initing takeout.
     */
    export class InitTakeoutSession extends Request<Partial<InitTakeoutSessionArgs>,account.TypeTakeout> implements InitTakeoutSessionArgs {
        CONSTRUCTOR_id: -262453244;
        SUBCLASS_OF_ID: 2218704517;
        classType: "request";
        className: "account.InitTakeoutSession";
        flags: number;
        contacts?: true;
        messageUsers?: true;
        messageChats?: true;
        messageMegagroups?: true;
        messageChannels?: true;
        files?: true;
        fileMaxSize?: int;
        fromReader(reader: Reader): InitTakeoutSession;
    }

    export interface FinishTakeoutSessionArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Data exported successfully */
        success?: true;
    }

    /**
     * Finish account takeout session<br>
     * @throws {{code:403,type:"TAKEOUT_REQUIRED"}} A takeout session has to be initialized, first.
     */
    export class FinishTakeoutSession extends Request<Partial<FinishTakeoutSessionArgs>,Bool> implements FinishTakeoutSessionArgs {
        CONSTRUCTOR_id: 489050862;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.FinishTakeoutSession";
        flags: number;
        success?: true;
        fromReader(reader: Reader): FinishTakeoutSession;
    }

    export interface ConfirmPasswordEmailArgs {
        /** The phone code that was received after <a href="https://corefork.telegram.org/api/srp#email-verification">setting a recovery email</a> */
        code: string;
    }

    /**
     * Verify an email to use as <a href="https://corefork.telegram.org/api/srp">2FA recovery method</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"CODE_INVALID"}} Code invalid.
     * @throws {{code:400,type:"EMAIL_HASH_EXPIRED"}} Email hash expired.
     */
    export class ConfirmPasswordEmail extends Request<Partial<ConfirmPasswordEmailArgs>,Bool> implements ConfirmPasswordEmailArgs {
        CONSTRUCTOR_id: -1881204448;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ConfirmPasswordEmail";
        code: string;
        fromReader(reader: Reader): ConfirmPasswordEmail;
    }

    /**
     * Resend the code to verify an email to use as <a href="https://corefork.telegram.org/api/srp">2FA recovery method</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class ResendPasswordEmail extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: 2055154197;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResendPasswordEmail";
        fromReader(reader: Reader): ResendPasswordEmail;
    }

    /**
     * Cancel the code that was sent to verify an email to use as <a href="https://corefork.telegram.org/api/srp">2FA recovery method</a>.<br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class CancelPasswordEmail extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -1043606090;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.CancelPasswordEmail";
        fromReader(reader: Reader): CancelPasswordEmail;
    }

    /** Whether the user will receive notifications when contacts sign up<br> */
    export class GetContactSignUpNotification extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -1626880216;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.GetContactSignUpNotification";
        fromReader(reader: Reader): GetContactSignUpNotification;
    }

    export interface SetContactSignUpNotificationArgs {
        /** Whether to disable contact sign up notifications */
        silent: Bool;
    }

    /** Toggle contact sign up notifications<br> */
    export class SetContactSignUpNotification extends Request<Partial<SetContactSignUpNotificationArgs>,Bool> implements SetContactSignUpNotificationArgs {
        CONSTRUCTOR_id: -806076575;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SetContactSignUpNotification";
        silent: Bool;
        fromReader(reader: Reader): SetContactSignUpNotification;
    }

    export interface GetNotifyExceptionsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If true, chats with non-default sound will also be returned */
        compareSound?: true;
        /** If specified, only chats of the specified category will be returned */
        peer?: TypeInputNotifyPeer;
    }

    /** Returns list of chats with non-default notification settings<br> */
    export class GetNotifyExceptions extends Request<Partial<GetNotifyExceptionsArgs>,TypeUpdates> implements GetNotifyExceptionsArgs {
        CONSTRUCTOR_id: 1398240377;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "account.GetNotifyExceptions";
        flags: number;
        compareSound?: true;
        peer?: TypeInputNotifyPeer;
        fromReader(reader: Reader): GetNotifyExceptions;
    }

    export interface GetWallPaperArgs {
        /** The wallpaper to get info about */
        wallpaper: TypeInputWallPaper;
    }

    /**
     * Get info about a certain wallpaper<br>
     * @throws {{code:400,type:"WALLPAPER_INVALID"}} The specified wallpaper is invalid.
     */
    export class GetWallPaper extends Request<Partial<GetWallPaperArgs>,TypeWallPaper> implements GetWallPaperArgs {
        CONSTRUCTOR_id: -57811990;
        SUBCLASS_OF_ID: 2527250827;
        classType: "request";
        className: "account.GetWallPaper";
        wallpaper: TypeInputWallPaper;
        fromReader(reader: Reader): GetWallPaper;
    }

    export interface UploadWallPaperArgs {
        /** The JPG/PNG wallpaper */
        file: TypeInputFile;
        /** MIME type of uploaded wallpaper */
        mimeType: string;
        /** Wallpaper settings */
        settings: TypeWallPaperSettings;
    }

    /**
     * Create and upload a new wallpaper<br>
     * @throws {{code:400,type:"WALLPAPER_FILE_INVALID"}} The specified wallpaper file is invalid.
     * @throws {{code:400,type:"WALLPAPER_MIME_INVALID"}} The specified wallpaper MIME type is invalid.
     */
    export class UploadWallPaper extends Request<Partial<UploadWallPaperArgs>,TypeWallPaper> implements UploadWallPaperArgs {
        CONSTRUCTOR_id: -578472351;
        SUBCLASS_OF_ID: 2527250827;
        classType: "request";
        className: "account.UploadWallPaper";
        file: TypeInputFile;
        mimeType: string;
        settings: TypeWallPaperSettings;
        fromReader(reader: Reader): UploadWallPaper;
    }

    export interface SaveWallPaperArgs {
        /** Wallpaper to save */
        wallpaper: TypeInputWallPaper;
        /** Uninstall wallpaper? */
        unsave: Bool;
        /** Wallpaper settings */
        settings: TypeWallPaperSettings;
    }

    /**
     * Install/uninstall wallpaper<br>
     * @throws {{code:400,type:"WALLPAPER_INVALID"}} The specified wallpaper is invalid.
     */
    export class SaveWallPaper extends Request<Partial<SaveWallPaperArgs>,Bool> implements SaveWallPaperArgs {
        CONSTRUCTOR_id: 1817860919;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SaveWallPaper";
        wallpaper: TypeInputWallPaper;
        unsave: Bool;
        settings: TypeWallPaperSettings;
        fromReader(reader: Reader): SaveWallPaper;
    }

    export interface InstallWallPaperArgs {
        /** Wallpaper to install */
        wallpaper: TypeInputWallPaper;
        /** Wallpaper settings */
        settings: TypeWallPaperSettings;
    }

    /**
     * Install wallpaper<br>
     * @throws {{code:400,type:"WALLPAPER_INVALID"}} The specified wallpaper is invalid.
     */
    export class InstallWallPaper extends Request<Partial<InstallWallPaperArgs>,Bool> implements InstallWallPaperArgs {
        CONSTRUCTOR_id: -18000023;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.InstallWallPaper";
        wallpaper: TypeInputWallPaper;
        settings: TypeWallPaperSettings;
        fromReader(reader: Reader): InstallWallPaper;
    }

    /** Delete installed wallpapers<br> */
    export class ResetWallPapers extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: -1153722364;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ResetWallPapers";
        fromReader(reader: Reader): ResetWallPapers;
    }

    /** Get media autodownload settings<br> */
    export class GetAutoDownloadSettings extends Request<Partial<void>,account.TypeAutoDownloadSettings> {
        CONSTRUCTOR_id: 1457130303;
        SUBCLASS_OF_ID: 800610593;
        classType: "request";
        className: "account.GetAutoDownloadSettings";
        fromReader(reader: Reader): GetAutoDownloadSettings;
    }

    export interface SaveAutoDownloadSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to save settings in the low data usage preset */
        low?: true;
        /** Whether to save settings in the high data usage preset */
        high?: true;
        /** Media autodownload settings */
        settings: TypeAutoDownloadSettings;
    }

    /** Change media autodownload settings<br> */
    export class SaveAutoDownloadSettings extends Request<Partial<SaveAutoDownloadSettingsArgs>,Bool> implements SaveAutoDownloadSettingsArgs {
        CONSTRUCTOR_id: 1995661875;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SaveAutoDownloadSettings";
        flags: number;
        low?: true;
        high?: true;
        settings: TypeAutoDownloadSettings;
        fromReader(reader: Reader): SaveAutoDownloadSettings;
    }

    export interface UploadThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Theme file uploaded as described in <a href="https://corefork.telegram.org/api/files">files »</a> */
        file: TypeInputFile;
        /** Thumbnail */
        thumb?: TypeInputFile;
        /** File name */
        fileName: string;
        /** MIME type, must be <code>application/x-tgtheme-{format}</code>, where <code>format</code> depends on the client */
        mimeType: string;
    }

    /**
     * Upload theme<br>
     * @link https://corefork.telegram.org/api/files
     * @throws {{code:400,type:"THEME_FILE_INVALID"}} Invalid theme file provided.
     */
    export class UploadTheme extends Request<Partial<UploadThemeArgs>,TypeDocument> implements UploadThemeArgs {
        CONSTRUCTOR_id: 473805619;
        SUBCLASS_OF_ID: 555739168;
        classType: "request";
        className: "account.UploadTheme";
        flags: number;
        file: TypeInputFile;
        thumb?: TypeInputFile;
        fileName: string;
        mimeType: string;
        fromReader(reader: Reader): UploadTheme;
    }

    export interface CreateThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Unique theme ID */
        slug: string;
        /** Theme name */
        title: string;
        /** Theme file */
        document?: TypeInputDocument;
        /** Theme settings */
        settings?: TypeInputThemeSettings;
    }

    /**
     * Create a theme<br>
     * @throws {{code:400,type:"THEME_MIME_INVALID"}} The theme's MIME type is invalid.
     */
    export class CreateTheme extends Request<Partial<CreateThemeArgs>,TypeTheme> implements CreateThemeArgs {
        CONSTRUCTOR_id: -2077048289;
        SUBCLASS_OF_ID: 1454688268;
        classType: "request";
        className: "account.CreateTheme";
        flags: number;
        slug: string;
        title: string;
        document?: TypeInputDocument;
        settings?: TypeInputThemeSettings;
        fromReader(reader: Reader): CreateTheme;
    }

    export interface UpdateThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Theme format, a string that identifies the theming engines supported by the client */
        format: string;
        /** Theme to update */
        theme: TypeInputTheme;
        /** Unique theme ID */
        slug?: string;
        /** Theme name */
        title?: string;
        /** Theme file */
        document?: TypeInputDocument;
        /** Theme settings */
        settings?: TypeInputThemeSettings;
    }

    /**
     * Update theme<br>
     * @throws {{code:400,type:"THEME_INVALID"}} Invalid theme provided.
     */
    export class UpdateTheme extends Request<Partial<UpdateThemeArgs>,TypeTheme> implements UpdateThemeArgs {
        CONSTRUCTOR_id: 1555261397;
        SUBCLASS_OF_ID: 1454688268;
        classType: "request";
        className: "account.UpdateTheme";
        flags: number;
        format: string;
        theme: TypeInputTheme;
        slug?: string;
        title?: string;
        document?: TypeInputDocument;
        settings?: TypeInputThemeSettings;
        fromReader(reader: Reader): UpdateTheme;
    }

    export interface SaveThemeArgs {
        /** Theme to save */
        theme: TypeInputTheme;
        /** Unsave */
        unsave: Bool;
    }

    /** Save a theme<br> */
    export class SaveTheme extends Request<Partial<SaveThemeArgs>,Bool> implements SaveThemeArgs {
        CONSTRUCTOR_id: -229175188;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SaveTheme";
        theme: TypeInputTheme;
        unsave: Bool;
        fromReader(reader: Reader): SaveTheme;
    }

    export interface InstallThemeArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to install the dark version */
        dark?: true;
        /** Theme format, a string that identifies the theming engines supported by the client */
        format?: string;
        /** Theme to install */
        theme?: TypeInputTheme;
    }

    /** Install a theme<br> */
    export class InstallTheme extends Request<Partial<InstallThemeArgs>,Bool> implements InstallThemeArgs {
        CONSTRUCTOR_id: 2061776695;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.InstallTheme";
        flags: number;
        dark?: true;
        format?: string;
        theme?: TypeInputTheme;
        fromReader(reader: Reader): InstallTheme;
    }

    export interface GetThemeArgs {
        /** Theme format, a string that identifies the theming engines supported by the client */
        format: string;
        /** Theme */
        theme: TypeInputTheme;
        /** Document ID */
        documentId: long;
    }

    /**
     * Get theme information<br>
     * @throws {{code:400,type:"THEME_FORMAT_INVALID"}} Invalid theme format provided.
     * @throws {{code:400,type:"THEME_INVALID"}} Invalid theme provided.
     */
    export class GetTheme extends Request<Partial<GetThemeArgs>,TypeTheme> implements GetThemeArgs {
        CONSTRUCTOR_id: -1919060949;
        SUBCLASS_OF_ID: 1454688268;
        classType: "request";
        className: "account.GetTheme";
        format: string;
        theme: TypeInputTheme;
        documentId: long;
        fromReader(reader: Reader): GetTheme;
    }

    export interface GetThemesArgs {
        /** Theme format, a string that identifies the theming engines supported by the client */
        format: string;
        /** <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash for pagination, for more info click here</a> */
        hash: int;
    }

    /**
     * Get installed themes<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetThemes extends Request<Partial<GetThemesArgs>,account.TypeThemes> implements GetThemesArgs {
        CONSTRUCTOR_id: 676939512;
        SUBCLASS_OF_ID: 2143625732;
        classType: "request";
        className: "account.GetThemes";
        format: string;
        hash: int;
        fromReader(reader: Reader): GetThemes;
    }

    export interface SetContentSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Enable NSFW content */
        sensitiveEnabled?: true;
    }

    /**
     * Set sensitive content settings (for viewing or hiding NSFW content)<br>
     * @throws {{code:403,type:"SENSITIVE_CHANGE_FORBIDDEN"}} You can't change your sensitive content settings.
     */
    export class SetContentSettings extends Request<Partial<SetContentSettingsArgs>,Bool> implements SetContentSettingsArgs {
        CONSTRUCTOR_id: -1250643605;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.SetContentSettings";
        flags: number;
        sensitiveEnabled?: true;
        fromReader(reader: Reader): SetContentSettings;
    }

    /** Get sensitive content settings<br> */
    export class GetContentSettings extends Request<Partial<void>,account.TypeContentSettings> {
        CONSTRUCTOR_id: -1952756306;
        SUBCLASS_OF_ID: 2923427985;
        classType: "request";
        className: "account.GetContentSettings";
        fromReader(reader: Reader): GetContentSettings;
    }

    export interface GetMultiWallPapersArgs {
        /** Wallpapers to fetch info about */
        wallpapers: TypeInputWallPaper[];
    }

    /** Get info about multiple wallpapers<br> */
    export class GetMultiWallPapers extends Request<Partial<GetMultiWallPapersArgs>,TypeWallPaper[]> implements GetMultiWallPapersArgs {
        CONSTRUCTOR_id: 1705865692;
        SUBCLASS_OF_ID: 2395165315;
        classType: "request";
        className: "account.GetMultiWallPapers";
        wallpapers: TypeInputWallPaper[];
        fromReader(reader: Reader): GetMultiWallPapers;
    }

    /** Get global privacy settings<br> */
    export class GetGlobalPrivacySettings extends Request<Partial<void>,TypeGlobalPrivacySettings> {
        CONSTRUCTOR_id: -349483786;
        SUBCLASS_OF_ID: 3373160304;
        classType: "request";
        className: "account.GetGlobalPrivacySettings";
        fromReader(reader: Reader): GetGlobalPrivacySettings;
    }

    export interface SetGlobalPrivacySettingsArgs {
        /** Global privacy settings */
        settings: TypeGlobalPrivacySettings;
    }

    /**
     * Set global privacy settings<br>
     * @throws {{code:400,type:"AUTOARCHIVE_NOT_AVAILABLE"}} The autoarchive setting is not available at this time: please check the value of the autoarchive_setting_available field in client config » before calling this method.
     */
    export class SetGlobalPrivacySettings extends Request<Partial<SetGlobalPrivacySettingsArgs>,TypeGlobalPrivacySettings> implements SetGlobalPrivacySettingsArgs {
        CONSTRUCTOR_id: 517647042;
        SUBCLASS_OF_ID: 3373160304;
        classType: "request";
        className: "account.SetGlobalPrivacySettings";
        settings: TypeGlobalPrivacySettings;
        fromReader(reader: Reader): SetGlobalPrivacySettings;
    }

    export interface ReportProfilePhotoArgs {
        /** The dialog */
        peer: EntityLike;
        /** Dialog photo ID */
        photoId: TypeInputPhoto;
        /** Report reason */
        reason: TypeReportReason;
        /** Comment for report moderation */
        message: string;
    }

    /** Report a profile photo of a dialog<br> */
    export class ReportProfilePhoto extends Request<Partial<ReportProfilePhotoArgs>,Bool> implements ReportProfilePhotoArgs {
        CONSTRUCTOR_id: -91437323;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.ReportProfilePhoto";
        peer: EntityLike;
        photoId: TypeInputPhoto;
        reason: TypeReportReason;
        message: string;
        fromReader(reader: Reader): ReportProfilePhoto;
    }

    /**
     * Initiate a 2FA password reset: can only be used if the user is already logged-in, <a href="https://corefork.telegram.org/api/srp#password-reset">see here for more info »</a><br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class ResetPassword extends Request<Partial<void>,account.TypeResetPasswordResult> {
        CONSTRUCTOR_id: -1828139493;
        SUBCLASS_OF_ID: 1230009366;
        classType: "request";
        className: "account.ResetPassword";
        fromReader(reader: Reader): ResetPassword;
    }

    /**
     * Abort a pending 2FA password reset, <a href="https://corefork.telegram.org/api/srp#password-reset">see here for more info »</a><br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"RESET_REQUEST_MISSING"}} No password reset is in progress.
     */
    export class DeclinePasswordReset extends Request<Partial<void>,Bool> {
        CONSTRUCTOR_id: 1284770294;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "account.DeclinePasswordReset";
        fromReader(reader: Reader): DeclinePasswordReset;
    }

    type TypePrivacyRules = PrivacyRules;
    type TypeAuthorizations = Authorizations;
    type TypePassword = Password;
    type TypePasswordSettings = PasswordSettings;
    type TypePasswordInputSettings = PasswordInputSettings;
    type TypeTmpPassword = TmpPassword;
    type TypeWebAuthorizations = WebAuthorizations;
    type TypeAuthorizationForm = AuthorizationForm;
    type TypeSentEmailCode = SentEmailCode;
    type TypeTakeout = Takeout;
    type TypeWallPapers = WallPapersNotModified | WallPapers;
    type TypeAutoDownloadSettings = AutoDownloadSettings;
    type TypeThemes = ThemesNotModified | Themes;
    type TypeContentSettings = ContentSettings;
    type TypeResetPasswordResult = ResetPasswordFailedWait | ResetPasswordRequestedWait | ResetPasswordOk;
    }

    namespace channels {
    export interface ChannelParticipantsArgs {
        /** Total number of participants that correspond to the given query */
        count: int;
        /** Participants */
        participants: TypeChannelParticipant[];
        /** Mentioned chats */
        chats: TypeChat[];
        /** Users mentioned in participant info */
        users: TypeUser[];
    }

    /** Represents multiple channel participants<br> */
    export class ChannelParticipants extends VirtualClass<ChannelParticipantsArgs> implements ChannelParticipantsArgs {
        CONSTRUCTOR_id: -1699676497;
        SUBCLASS_OF_ID: 3859443300;
        classType: "constructor";
        className: "channels.ChannelParticipants";
        count: int;
        participants: TypeChannelParticipant[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChannelParticipants;
    }

    /** No new participant info could be found<br> */
    export class ChannelParticipantsNotModified extends VirtualClass<void> {
        CONSTRUCTOR_id: -266911767;
        SUBCLASS_OF_ID: 3859443300;
        classType: "constructor";
        className: "channels.ChannelParticipantsNotModified";
        fromReader(reader: Reader): ChannelParticipantsNotModified;
    }

    export interface ChannelParticipantArgs {
        /** The channel participant */
        participant: TypeChannelParticipant;
        /** Mentioned chats */
        chats: TypeChat[];
        /** Users */
        users: TypeUser[];
    }

    /** Represents a channel participant<br> */
    export class ChannelParticipant extends VirtualClass<ChannelParticipantArgs> implements ChannelParticipantArgs {
        CONSTRUCTOR_id: -541588713;
        SUBCLASS_OF_ID: 1717048602;
        classType: "constructor";
        className: "channels.ChannelParticipant";
        participant: TypeChannelParticipant;
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): ChannelParticipant;
    }

    export interface AdminLogResultsArgs {
        /** Admin log events */
        events: TypeChannelAdminLogEvent[];
        /** Chats mentioned in events */
        chats: TypeChat[];
        /** Users mentioned in events */
        users: TypeUser[];
    }

    /** Admin log events<br> */
    export class AdminLogResults extends VirtualClass<AdminLogResultsArgs> implements AdminLogResultsArgs {
        CONSTRUCTOR_id: -309659827;
        SUBCLASS_OF_ID: 1374713532;
        classType: "constructor";
        className: "channels.AdminLogResults";
        events: TypeChannelAdminLogEvent[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): AdminLogResults;
    }

    export interface ReadHistoryArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> */
        channel: TypeInputChannel;
        /** ID of message up to which messages should be marked as read */
        maxId: int;
    }

    /**
     * Mark <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> history as read<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class ReadHistory extends Request<Partial<ReadHistoryArgs>,Bool> implements ReadHistoryArgs {
        CONSTRUCTOR_id: -871347913;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.ReadHistory";
        channel: TypeInputChannel;
        maxId: int;
        fromReader(reader: Reader): ReadHistory;
    }

    export interface DeleteMessagesArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> */
        channel: TypeInputChannel;
        /** IDs of messages to delete */
        id: int[];
    }

    /**
     * Delete messages in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:403,type:"MESSAGE_DELETE_FORBIDDEN"}} You can't delete one of the messages you tried to delete, most likely because it is a service message.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class DeleteMessages extends Request<Partial<DeleteMessagesArgs>,messages.TypeAffectedMessages> implements DeleteMessagesArgs {
        CONSTRUCTOR_id: -2067661490;
        SUBCLASS_OF_ID: 3469983854;
        classType: "request";
        className: "channels.DeleteMessages";
        channel: TypeInputChannel;
        id: int[];
        fromReader(reader: Reader): DeleteMessages;
    }

    export interface DeleteUserHistoryArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Supergroup</a> */
        channel: TypeInputChannel;
        /** User whose messages should be deleted */
        userId: TypeInputUser;
    }

    /**
     * Delete all messages sent by a certain user in a <a href="https://corefork.telegram.org/api/channel">supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class DeleteUserHistory extends Request<Partial<DeleteUserHistoryArgs>,messages.TypeAffectedHistory> implements DeleteUserHistoryArgs {
        CONSTRUCTOR_id: -787622117;
        SUBCLASS_OF_ID: 743031062;
        classType: "request";
        className: "channels.DeleteUserHistory";
        channel: TypeInputChannel;
        userId: TypeInputUser;
        fromReader(reader: Reader): DeleteUserHistory;
    }

    export interface ReportSpamArgs {
        /** Supergroup */
        channel: TypeInputChannel;
        /** ID of the user that sent the spam messages */
        userId: TypeInputUser;
        /** IDs of spam messages */
        id: int[];
    }

    /**
     * Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class ReportSpam extends Request<Partial<ReportSpamArgs>,Bool> implements ReportSpamArgs {
        CONSTRUCTOR_id: -32999408;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.ReportSpam";
        channel: TypeInputChannel;
        userId: TypeInputUser;
        id: int[];
        fromReader(reader: Reader): ReportSpam;
    }

    export interface GetMessagesArgs {
        /** Channel/supergroup */
        channel: TypeInputChannel;
        /** IDs of messages to get */
        id: TypeInputMessage[];
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> messages<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MESSAGE_IDS_EMPTY"}} No message ids were provided.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class GetMessages extends Request<Partial<GetMessagesArgs>,messages.TypeMessages> implements GetMessagesArgs {
        CONSTRUCTOR_id: -1383294429;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "channels.GetMessages";
        channel: TypeInputChannel;
        id: TypeInputMessage[];
        fromReader(reader: Reader): GetMessages;
    }

    export interface GetParticipantsArgs {
        /** Channel */
        channel: TypeInputChannel;
        /** Which participant types to fetch */
        filter: TypeChannelParticipantsFilter;
        /** <a href="https://corefork.telegram.org/api/offsets">Offset</a> */
        offset: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Limit</a> */
        limit: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Hash</a> */
        hash: int;
    }

    /**
     * Get the participants of a <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a><br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     */
    export class GetParticipants extends Request<Partial<GetParticipantsArgs>,channels.TypeChannelParticipants> implements GetParticipantsArgs {
        CONSTRUCTOR_id: 306054633;
        SUBCLASS_OF_ID: 3859443300;
        classType: "request";
        className: "channels.GetParticipants";
        channel: TypeInputChannel;
        filter: TypeChannelParticipantsFilter;
        offset: int;
        limit: int;
        hash: int;
        fromReader(reader: Reader): GetParticipants;
    }

    export interface GetParticipantArgs {
        /** Channel/supergroup */
        channel: TypeInputChannel;
        /** Participant to get info about */
        participant: EntityLike;
    }

    /**
     * Get info about a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> participant<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PARTICIPANT_ID_INVALID"}} The specified participant ID is invalid.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_NOT_PARTICIPANT"}} You're not a member of this supergroup/channel.
     */
    export class GetParticipant extends Request<Partial<GetParticipantArgs>,channels.TypeChannelParticipant> implements GetParticipantArgs {
        CONSTRUCTOR_id: -1599378234;
        SUBCLASS_OF_ID: 1717048602;
        classType: "request";
        className: "channels.GetParticipant";
        channel: TypeInputChannel;
        participant: EntityLike;
        fromReader(reader: Reader): GetParticipant;
    }

    export interface GetChannelsArgs {
        /** IDs of channels/supergroups to get info about */
        id: TypeInputChannel[];
    }

    /**
     * Get info about <a href="https://corefork.telegram.org/api/channel">channels/supergroups</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class GetChannels extends Request<Partial<GetChannelsArgs>,messages.TypeChats> implements GetChannelsArgs {
        CONSTRUCTOR_id: 176122811;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "channels.GetChannels";
        id: TypeInputChannel[];
        fromReader(reader: Reader): GetChannels;
    }

    export interface GetFullChannelArgs {
        /** The channel to get info about */
        channel: TypeInputChannel;
    }

    /**
     * Get full info about a channel<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:403,type:"CHANNEL_PUBLIC_GROUP_NA"}} channel/supergroup not available.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class GetFullChannel extends Request<Partial<GetFullChannelArgs>,messages.TypeChatFull> implements GetFullChannelArgs {
        CONSTRUCTOR_id: 141781513;
        SUBCLASS_OF_ID: 576344329;
        classType: "request";
        className: "channels.GetFullChannel";
        channel: TypeInputChannel;
        fromReader(reader: Reader): GetFullChannel;
    }

    export interface CreateChannelArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to create a <a href="https://corefork.telegram.org/api/channel">channel</a> */
        broadcast?: true;
        /** Whether to create a <a href="https://corefork.telegram.org/api/channel">supergroup</a> */
        megagroup?: true;
        /** Whether the supergroup is being created to import messages from a foreign chat service using <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a> */
        forImport?: true;
        /** Channel title */
        title: string;
        /** Channel description */
        about: string;
        /** Geogroup location */
        geoPoint?: TypeInputGeoPoint;
        /** Geogroup address */
        address?: string;
    }

    /**
     * Create a <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/method/messages.initHistoryImport
     * @link https://corefork.telegram.org/api/import
     * @throws {{code:400,type:"CHANNELS_ADMIN_LOCATED_TOO_MUCH"}} The user has reached the limit of public geogroups.
     * @throws {{code:400,type:"CHANNELS_TOO_MUCH"}} You have joined too many channels/supergroups.
     * @throws {{code:400,type:"CHAT_ABOUT_TOO_LONG"}} Chat about too long.
     * @throws {{code:400,type:"CHAT_TITLE_EMPTY"}} No chat title provided.
     * @throws {{code:403,type:"USER_RESTRICTED"}} You're spamreported, you can't create channels or chats.
     */
    export class CreateChannel extends Request<Partial<CreateChannelArgs>,TypeUpdates> implements CreateChannelArgs {
        CONSTRUCTOR_id: 1029681423;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.CreateChannel";
        flags: number;
        broadcast?: true;
        megagroup?: true;
        forImport?: true;
        title: string;
        about: string;
        geoPoint?: TypeInputGeoPoint;
        address?: string;
        fromReader(reader: Reader): CreateChannel;
    }

    export interface EditAdminArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a>. */
        channel: TypeInputChannel;
        /** The ID of the user whose admin rights should be modified */
        userId: TypeInputUser;
        /** The admin rights */
        adminRights: TypeChatAdminRights;
        /** Indicates the role (rank) of the admin in the group: just an arbitrary string */
        rank: string;
    }

    /**
     * Modify the admin rights of a user in a <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"ADMINS_TOO_MUCH"}} There are too many admins.
     * @throws {{code:400,type:"ADMIN_RANK_EMOJI_NOT_ALLOWED"}} An admin rank cannot contain emojis.
     * @throws {{code:400,type:"ADMIN_RANK_INVALID"}} The specified admin rank is invalid.
     * @throws {{code:400,type:"BOTS_TOO_MUCH"}} There are too many bots in this chat/channel.
     * @throws {{code:400,type:"BOT_CHANNELS_NA"}} Bots can't edit admin privileges.
     * @throws {{code:400,type:"BOT_GROUPS_BLOCKED"}} This bot can't be added to groups.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:403,type:"CHAT_ADMIN_INVITE_REQUIRED"}} You do not have the rights to do this.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:406,type:"FRESH_CHANGE_ADMINS_FORBIDDEN"}} You were just elected admin, you can't add or modify other admins yet.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:403,type:"RIGHT_FORBIDDEN"}} Your admin rights do not allow you to do this.
     * @throws {{code:400,type:"USERS_TOO_MUCH"}} The maximum number of users has been exceeded (to create a chat, for example).
     * @throws {{code:400,type:"USER_BLOCKED"}} User blocked.
     * @throws {{code:403,type:"USER_CHANNELS_TOO_MUCH"}} One of the users you tried to add is already in too many channels/supergroups.
     * @throws {{code:400,type:"USER_CREATOR"}} You can't leave this channel, because you're its creator.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_NOT_MUTUAL_CONTACT"}} The provided user is not a mutual contact.
     * @throws {{code:403,type:"USER_PRIVACY_RESTRICTED"}} The user's privacy settings do not allow you to do this.
     * @throws {{code:403,type:"USER_RESTRICTED"}} You're spamreported, you can't create channels or chats.
     */
    export class EditAdmin extends Request<Partial<EditAdminArgs>,TypeUpdates> implements EditAdminArgs {
        CONSTRUCTOR_id: -751007486;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.EditAdmin";
        channel: TypeInputChannel;
        userId: TypeInputUser;
        adminRights: TypeChatAdminRights;
        rank: string;
        fromReader(reader: Reader): EditAdmin;
    }

    export interface EditTitleArgs {
        /** Channel/supergroup */
        channel: TypeInputChannel;
        /** New name */
        title: string;
    }

    /**
     * Edit the name of a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"CHAT_TITLE_EMPTY"}} No chat title provided.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     */
    export class EditTitle extends Request<Partial<EditTitleArgs>,TypeUpdates> implements EditTitleArgs {
        CONSTRUCTOR_id: 1450044624;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.EditTitle";
        channel: TypeInputChannel;
        title: string;
        fromReader(reader: Reader): EditTitle;
    }

    export interface EditPhotoArgs {
        /** Channel/supergroup whose photo should be edited */
        channel: TypeInputChannel;
        /** New photo */
        photo: TypeInputChatPhoto;
    }

    /**
     * Change the photo of a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"FILE_REFERENCE_INVALID"}} The specified file reference is invalid.
     * @throws {{code:400,type:"PHOTO_CROP_SIZE_SMALL"}} Photo is too small.
     * @throws {{code:400,type:"PHOTO_EXT_INVALID"}} The extension of the photo is invalid.
     * @throws {{code:400,type:"PHOTO_INVALID"}} Photo invalid.
     */
    export class EditPhoto extends Request<Partial<EditPhotoArgs>,TypeUpdates> implements EditPhotoArgs {
        CONSTRUCTOR_id: -248621111;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.EditPhoto";
        channel: TypeInputChannel;
        photo: TypeInputChatPhoto;
        fromReader(reader: Reader): EditPhoto;
    }

    export interface CheckUsernameArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> that will assigned the specified username */
        channel: TypeInputChannel;
        /** The username to check */
        username: string;
    }

    /**
     * Check if a username is free and can be assigned to a channel/supergroup<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNELS_ADMIN_PUBLIC_TOO_MUCH"}} You're admin of too many public channels, make some channels private to change the username of this channel.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"USERNAME_INVALID"}} The provided username is not valid.
     */
    export class CheckUsername extends Request<Partial<CheckUsernameArgs>,Bool> implements CheckUsernameArgs {
        CONSTRUCTOR_id: 283557164;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.CheckUsername";
        channel: TypeInputChannel;
        username: string;
        fromReader(reader: Reader): CheckUsername;
    }

    export interface UpdateUsernameArgs {
        /** Channel */
        channel: TypeInputChannel;
        /** New username */
        username: string;
    }

    /**
     * Change the username of a supergroup/channel<br>
     * @throws {{code:400,type:"CHANNELS_ADMIN_PUBLIC_TOO_MUCH"}} You're admin of too many public channels, make some channels private to change the username of this channel.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"USERNAME_INVALID"}} The provided username is not valid.
     * @throws {{code:400,type:"USERNAME_NOT_MODIFIED"}} The username was not modified.
     * @throws {{code:400,type:"USERNAME_OCCUPIED"}} The provided username is already occupied.
     */
    export class UpdateUsername extends Request<Partial<UpdateUsernameArgs>,Bool> implements UpdateUsernameArgs {
        CONSTRUCTOR_id: 890549214;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.UpdateUsername";
        channel: TypeInputChannel;
        username: string;
        fromReader(reader: Reader): UpdateUsername;
    }

    export interface JoinChannelArgs {
        /** Channel/supergroup to join */
        channel: TypeInputChannel;
    }

    /**
     * Join a channel/supergroup<br>
     * @throws {{code:400,type:"CHANNELS_TOO_MUCH"}} You have joined too many channels/supergroups.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_INVALID"}} Invalid chat.
     * @throws {{code:400,type:"INVITE_HASH_EMPTY"}} The invite hash is empty.
     * @throws {{code:400,type:"INVITE_HASH_EXPIRED"}} The invite link has expired.
     * @throws {{code:400,type:"INVITE_HASH_INVALID"}} The invite hash is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"USERS_TOO_MUCH"}} The maximum number of users has been exceeded (to create a chat, for example).
     * @throws {{code:400,type:"USER_ALREADY_PARTICIPANT"}} The user is already in the group.
     * @throws {{code:400,type:"USER_CHANNELS_TOO_MUCH"}} One of the users you tried to add is already in too many channels/supergroups.
     */
    export class JoinChannel extends Request<Partial<JoinChannelArgs>,TypeUpdates> implements JoinChannelArgs {
        CONSTRUCTOR_id: 615851205;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.JoinChannel";
        channel: TypeInputChannel;
        fromReader(reader: Reader): JoinChannel;
    }

    export interface LeaveChannelArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> to leave */
        channel: TypeInputChannel;
    }

    /**
     * Leave a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:403,type:"CHANNEL_PUBLIC_GROUP_NA"}} channel/supergroup not available.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USER_CREATOR"}} You can't leave this channel, because you're its creator.
     * @throws {{code:400,type:"USER_NOT_PARTICIPANT"}} You're not a member of this supergroup/channel.
     */
    export class LeaveChannel extends Request<Partial<LeaveChannelArgs>,TypeUpdates> implements LeaveChannelArgs {
        CONSTRUCTOR_id: -130635115;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.LeaveChannel";
        channel: TypeInputChannel;
        fromReader(reader: Reader): LeaveChannel;
    }

    export interface InviteToChannelArgs {
        /** Channel/supergroup */
        channel: TypeInputChannel;
        /** Users to invite */
        users: TypeInputUser[];
    }

    /**
     * Invite users to a channel/supergroup<br>
     * @throws {{code:400,type:"BOTS_TOO_MUCH"}} There are too many bots in this chat/channel.
     * @throws {{code:400,type:"BOT_GROUPS_BLOCKED"}} This bot can't be added to groups.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_INVALID"}} Invalid chat.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USERS_TOO_MUCH"}} The maximum number of users has been exceeded (to create a chat, for example).
     * @throws {{code:400,type:"USER_BANNED_IN_CHANNEL"}} You're banned from sending messages in supergroups/channels.
     * @throws {{code:400,type:"USER_BLOCKED"}} User blocked.
     * @throws {{code:400,type:"USER_BOT"}} Bots can only be admins in channels.
     * @throws {{code:403,type:"USER_CHANNELS_TOO_MUCH"}} One of the users you tried to add is already in too many channels/supergroups.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:400,type:"USER_KICKED"}} This user was kicked from this supergroup/channel.
     * @throws {{code:400,type:"USER_NOT_MUTUAL_CONTACT"}} The provided user is not a mutual contact.
     * @throws {{code:403,type:"USER_PRIVACY_RESTRICTED"}} The user's privacy settings do not allow you to do this.
     */
    export class InviteToChannel extends Request<Partial<InviteToChannelArgs>,TypeUpdates> implements InviteToChannelArgs {
        CONSTRUCTOR_id: 429865580;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.InviteToChannel";
        channel: TypeInputChannel;
        users: TypeInputUser[];
        fromReader(reader: Reader): InviteToChannel;
    }

    export interface DeleteChannelArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> to delete */
        channel: TypeInputChannel;
    }

    /**
     * Delete a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHANNEL_TOO_LARGE"}} Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     */
    export class DeleteChannel extends Request<Partial<DeleteChannelArgs>,TypeUpdates> implements DeleteChannelArgs {
        CONSTRUCTOR_id: -1072619549;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.DeleteChannel";
        channel: TypeInputChannel;
        fromReader(reader: Reader): DeleteChannel;
    }

    export interface ExportMessageLinkArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to include other grouped media (for albums) */
        grouped?: true;
        /** Whether to also include a thread ID, if available, inside of the link */
        thread?: true;
        /** Channel */
        channel: TypeInputChannel;
        /** Message ID */
        id: int;
    }

    /**
     * Get link and embed info of a message in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class ExportMessageLink extends Request<Partial<ExportMessageLinkArgs>,TypeExportedMessageLink> implements ExportMessageLinkArgs {
        CONSTRUCTOR_id: -432034325;
        SUBCLASS_OF_ID: 3739632844;
        classType: "request";
        className: "channels.ExportMessageLink";
        flags: number;
        grouped?: true;
        thread?: true;
        channel: TypeInputChannel;
        id: int;
        fromReader(reader: Reader): ExportMessageLink;
    }

    export interface ToggleSignaturesArgs {
        /** Channel */
        channel: TypeInputChannel;
        /** Value */
        enabled: Bool;
    }

    /**
     * Enable/disable message signatures in channels<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     */
    export class ToggleSignatures extends Request<Partial<ToggleSignaturesArgs>,TypeUpdates> implements ToggleSignaturesArgs {
        CONSTRUCTOR_id: 527021574;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.ToggleSignatures";
        channel: TypeInputChannel;
        enabled: Bool;
        fromReader(reader: Reader): ToggleSignatures;
    }

    export interface GetAdminedPublicChannelsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Get geogroups */
        byLocation?: true;
        /** If set and the user has reached the limit of owned public <a href="https://corefork.telegram.org/api/channel">channels/supergroups/geogroups</a>, instead of returning the channel list one of the specified <a href="https://corefork.telegram.org/#possible-errors">errors</a> will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in <a href="https://corefork.telegram.org/method/channels.checkUsername">channels.checkUsername</a>/<a href="https://corefork.telegram.org/method/channels.updateUsername">channels.updateUsername</a>. */
        checkLimit?: true;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/channel">channels/supergroups/geogroups</a> we're admin in. Usually called when the user exceeds the <a href="https://corefork.telegram.org/constructor/config">limit</a> for owned public <a href="https://corefork.telegram.org/api/channel">channels/supergroups/geogroups</a>, and the user is given the choice to remove one of his channels/supergroups/geogroups.<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/method/channels.checkUsername
     * @link https://corefork.telegram.org/method/channels.updateUsername
     * @link https://corefork.telegram.org/constructor/config
     * @throws {{code:400,type:"CHANNELS_ADMIN_LOCATED_TOO_MUCH"}} Returned if both the check_limit and the by_location flags are set and the user has reached the limit of public geogroups.
     * @throws {{code:400,type:"CHANNELS_ADMIN_PUBLIC_TOO_MUCH"}} Returned if the check_limit flag is set and the user has reached the limit of public channels/supergroups.
     */
    export class GetAdminedPublicChannels extends Request<Partial<GetAdminedPublicChannelsArgs>,messages.TypeChats> implements GetAdminedPublicChannelsArgs {
        CONSTRUCTOR_id: -122669393;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "channels.GetAdminedPublicChannels";
        flags: number;
        byLocation?: true;
        checkLimit?: true;
        fromReader(reader: Reader): GetAdminedPublicChannels;
    }

    export interface EditBannedArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a>. */
        channel: TypeInputChannel;
        /** Participant to ban */
        participant: EntityLike;
        /** The banned rights */
        bannedRights: TypeChatBannedRights;
    }

    /**
     * Ban/unban/kick a user in a <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_ADD_INVALID"}} Internal error.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"INPUT_USER_DEACTIVATED"}} The specified user was deleted.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"PARTICIPANT_ID_INVALID"}} The specified participant ID is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"PINNED_DIALOGS_TOO_MUCH"}} Too many pinned dialogs.
     * @throws {{code:400,type:"USER_ADMIN_INVALID"}} You're not an admin.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class EditBanned extends Request<Partial<EditBannedArgs>,TypeUpdates> implements EditBannedArgs {
        CONSTRUCTOR_id: -1763259007;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.EditBanned";
        channel: TypeInputChannel;
        participant: EntityLike;
        bannedRights: TypeChatBannedRights;
        fromReader(reader: Reader): EditBanned;
    }

    export interface GetAdminLogArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Channel */
        channel: TypeInputChannel;
        /** Search query, can be empty */
        q: string;
        /** Event filter */
        eventsFilter?: TypeChannelAdminLogEventsFilter;
        /** Only show events from these admins */
        admins?: TypeInputUser[];
        /** Maximum ID of message to return (see <a href="https://corefork.telegram.org/api/offsets">pagination</a>) */
        maxId: long;
        /** Minimum ID of message to return (see <a href="https://corefork.telegram.org/api/offsets">pagination</a>) */
        minId: long;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get the admin log of a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a><br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class GetAdminLog extends Request<Partial<GetAdminLogArgs>,channels.TypeAdminLogResults> implements GetAdminLogArgs {
        CONSTRUCTOR_id: 870184064;
        SUBCLASS_OF_ID: 1374713532;
        classType: "request";
        className: "channels.GetAdminLog";
        flags: number;
        channel: TypeInputChannel;
        q: string;
        eventsFilter?: TypeChannelAdminLogEventsFilter;
        admins?: TypeInputUser[];
        maxId: long;
        minId: long;
        limit: int;
        fromReader(reader: Reader): GetAdminLog;
    }

    export interface SetStickersArgs {
        /** Supergroup */
        channel: TypeInputChannel;
        /** The stickerset to associate */
        stickerset: TypeInputStickerSet;
    }

    /**
     * Associate a stickerset to the supergroup<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"PARTICIPANTS_TOO_FEW"}} Not enough participants.
     * @throws {{code:406,type:"STICKERSET_OWNER_ANONYMOUS"}} Provided stickerset can't be installed as group stickerset to prevent admin deanonymisation.
     */
    export class SetStickers extends Request<Partial<SetStickersArgs>,Bool> implements SetStickersArgs {
        CONSTRUCTOR_id: -359881479;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.SetStickers";
        channel: TypeInputChannel;
        stickerset: TypeInputStickerSet;
        fromReader(reader: Reader): SetStickers;
    }

    export interface ReadMessageContentsArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Channel/supergroup</a> */
        channel: TypeInputChannel;
        /** IDs of messages whose contents should be marked as read */
        id: int[];
    }

    /**
     * Mark <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> message contents as read<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class ReadMessageContents extends Request<Partial<ReadMessageContentsArgs>,Bool> implements ReadMessageContentsArgs {
        CONSTRUCTOR_id: -357180360;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.ReadMessageContents";
        channel: TypeInputChannel;
        id: int[];
        fromReader(reader: Reader): ReadMessageContents;
    }

    export interface DeleteHistoryArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Supergroup</a> whose history must be deleted */
        channel: TypeInputChannel;
        /** ID of message <strong>up to which</strong> the history must be deleted */
        maxId: int;
    }

    /**
     * Delete the history of a <a href="https://corefork.telegram.org/api/channel">supergroup</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     */
    export class DeleteHistory extends Request<Partial<DeleteHistoryArgs>,Bool> implements DeleteHistoryArgs {
        CONSTRUCTOR_id: -1355375294;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.DeleteHistory";
        channel: TypeInputChannel;
        maxId: int;
        fromReader(reader: Reader): DeleteHistory;
    }

    export interface TogglePreHistoryHiddenArgs {
        /** Channel/supergroup */
        channel: TypeInputChannel;
        /** Hide/unhide */
        enabled: Bool;
    }

    /**
     * Hide/unhide message history for new channel/supergroup users<br>
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_ID_INVALID"}} The provided chat id is invalid.
     * @throws {{code:400,type:"CHAT_LINK_EXISTS"}} The chat is public, you can't hide the history to new users.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     */
    export class TogglePreHistoryHidden extends Request<Partial<TogglePreHistoryHiddenArgs>,TypeUpdates> implements TogglePreHistoryHiddenArgs {
        CONSTRUCTOR_id: -356796084;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.TogglePreHistoryHidden";
        channel: TypeInputChannel;
        enabled: Bool;
        fromReader(reader: Reader): TogglePreHistoryHidden;
    }

    export interface GetLeftChannelsArgs {
        /** Offset for <a href="https://corefork.telegram.org/api/offsets">pagination</a> */
        offset: int;
    }

    /**
     * Get a list of <a href="https://corefork.telegram.org/api/channel">channels/supergroups</a> we left<br>
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:403,type:"TAKEOUT_REQUIRED"}} A takeout session has to be initialized, first.
     */
    export class GetLeftChannels extends Request<Partial<GetLeftChannelsArgs>,messages.TypeChats> implements GetLeftChannelsArgs {
        CONSTRUCTOR_id: -2092831552;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "channels.GetLeftChannels";
        offset: int;
        fromReader(reader: Reader): GetLeftChannels;
    }

    /**
     * Get all groups that can be used as <a href="https://corefork.telegram.org/api/discussion">discussion groups</a>.<br>Returned <a href="https://corefork.telegram.org/api/channel">legacy group chats</a> must be first upgraded to <a href="https://corefork.telegram.org/api/channel">supergroups</a> before they can be set as a discussion group.<br>
     * To set a returned supergroup as a discussion group, access to its old messages must be enabled using <a href="https://corefork.telegram.org/method/channels.togglePreHistoryHidden">channels.togglePreHistoryHidden</a>, first.<br>
     * @link https://corefork.telegram.org/api/discussion
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://telegram.org/blog/privacy-discussions-web-bots
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/method/channels.togglePreHistoryHidden
     */
    export class GetGroupsForDiscussion extends Request<Partial<void>,messages.TypeChats> {
        CONSTRUCTOR_id: -170208392;
        SUBCLASS_OF_ID: 2580925204;
        classType: "request";
        className: "channels.GetGroupsForDiscussion";
        fromReader(reader: Reader): GetGroupsForDiscussion;
    }

    export interface SetDiscussionGroupArgs {
        /** Channel */
        broadcast: TypeInputChannel;
        /** <a href="https://corefork.telegram.org/api/discussion">Discussion group</a> to associate to the channel */
        group: TypeInputChannel;
    }

    /**
     * Associate a group to a channel as <a href="https://corefork.telegram.org/api/discussion">discussion group</a> for that channel<br>
     * @link https://corefork.telegram.org/api/discussion
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/channel
     * @link https://telegram.org/blog/privacy-discussions-web-bots
     * @throws {{code:400,type:"BROADCAST_ID_INVALID"}} Broadcast ID invalid.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"LINK_NOT_MODIFIED"}} Discussion link not modified.
     * @throws {{code:400,type:"MEGAGROUP_ID_INVALID"}} Invalid supergroup ID.
     * @throws {{code:400,type:"MEGAGROUP_PREHISTORY_HIDDEN"}} Group with hidden history for new members can't be set as discussion groups.
     */
    export class SetDiscussionGroup extends Request<Partial<SetDiscussionGroupArgs>,Bool> implements SetDiscussionGroupArgs {
        CONSTRUCTOR_id: 1079520178;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.SetDiscussionGroup";
        broadcast: TypeInputChannel;
        group: TypeInputChannel;
        fromReader(reader: Reader): SetDiscussionGroup;
    }

    export interface EditCreatorArgs {
        /** Channel */
        channel: TypeInputChannel;
        /** New channel owner */
        userId: TypeInputUser;
        /** <a href="https://corefork.telegram.org/api/srp">2FA password</a> of account */
        password: TypeInputCheckPasswordSRP;
    }

    /**
     * Transfer channel ownership<br>
     * @link https://corefork.telegram.org/api/srp
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:403,type:"CHAT_WRITE_FORBIDDEN"}} You can't write in this chat.
     * @throws {{code:400,type:"PASSWORD_HASH_INVALID"}} The provided password hash is invalid.
     * @throws {{code:400,type:"PASSWORD_MISSING"}} You must enable 2FA in order to transfer ownership of a channel.
     * @throws {{code:400,type:"PASSWORD_TOO_FRESH_X"}} The password was modified less than 24 hours ago, try again in X seconds.
     * @throws {{code:400,type:"SESSION_TOO_FRESH_X"}} This session was created less than 24 hours ago, try again in X seconds.
     * @throws {{code:400,type:"SRP_ID_INVALID"}} Invalid SRP ID provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class EditCreator extends Request<Partial<EditCreatorArgs>,TypeUpdates> implements EditCreatorArgs {
        CONSTRUCTOR_id: -1892102881;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.EditCreator";
        channel: TypeInputChannel;
        userId: TypeInputUser;
        password: TypeInputCheckPasswordSRP;
        fromReader(reader: Reader): EditCreator;
    }

    export interface EditLocationArgs {
        /** <a href="https://corefork.telegram.org/api/channel">Geogroup</a> */
        channel: TypeInputChannel;
        /** New geolocation */
        geoPoint: TypeInputGeoPoint;
        /** Address string */
        address: string;
    }

    /**
     * Edit location of geogroup<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"MEGAGROUP_REQUIRED"}} You can only use this method on a supergroup.
     */
    export class EditLocation extends Request<Partial<EditLocationArgs>,Bool> implements EditLocationArgs {
        CONSTRUCTOR_id: 1491484525;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "channels.EditLocation";
        channel: TypeInputChannel;
        geoPoint: TypeInputGeoPoint;
        address: string;
        fromReader(reader: Reader): EditLocation;
    }

    export interface ToggleSlowModeArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">supergroup</a> */
        channel: TypeInputChannel;
        /** Users will only be able to send one message every <code>seconds</code> seconds, <code>0</code> to disable the limitation */
        seconds: int;
    }

    /**
     * Toggle supergroup slow mode: if enabled, users will only be able to send one message every <code>seconds</code> seconds<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"CHAT_NOT_MODIFIED"}} The pinned message wasn't modified.
     * @throws {{code:400,type:"SECONDS_INVALID"}} Invalid duration provided.
     */
    export class ToggleSlowMode extends Request<Partial<ToggleSlowModeArgs>,TypeUpdates> implements ToggleSlowModeArgs {
        CONSTRUCTOR_id: -304832784;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.ToggleSlowMode";
        channel: TypeInputChannel;
        seconds: int;
        fromReader(reader: Reader): ToggleSlowMode;
    }

    /** Get inactive channels and supergroups<br> */
    export class GetInactiveChannels extends Request<Partial<void>,messages.TypeInactiveChats> {
        CONSTRUCTOR_id: 300429806;
        SUBCLASS_OF_ID: 2348013524;
        classType: "request";
        className: "channels.GetInactiveChannels";
        fromReader(reader: Reader): GetInactiveChannels;
    }

    export interface ConvertToGigagroupArgs {
        /** The <a href="https://corefork.telegram.org/api/channel">supergroup</a> to convert */
        channel: TypeInputChannel;
    }

    /**
     * Convert a <a href="https://corefork.telegram.org/api/channel">supergroup</a> to a <a href="https://corefork.telegram.org/api/channel">gigagroup</a>, when requested by <a href="https://corefork.telegram.org/api/config#channel-suggestions">channel suggestions</a>.<br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/config
     * @throws {{code:400,type:"PARTICIPANTS_TOO_FEW"}} Not enough participants.
     */
    export class ConvertToGigagroup extends Request<Partial<ConvertToGigagroupArgs>,TypeUpdates> implements ConvertToGigagroupArgs {
        CONSTRUCTOR_id: 187239529;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "channels.ConvertToGigagroup";
        channel: TypeInputChannel;
        fromReader(reader: Reader): ConvertToGigagroup;
    }

    type TypeChannelParticipants = ChannelParticipants | ChannelParticipantsNotModified;
    type TypeChannelParticipant = ChannelParticipant;
    type TypeAdminLogResults = AdminLogResults;
    }

    namespace payments {
    export interface PaymentFormArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user can choose to save credentials. */
        canSaveCredentials?: true;
        /** Indicates that the user can save payment credentials, but only after setting up a <a href="https://corefork.telegram.org/api/srp">2FA password</a> (currently the account doesn't have a <a href="https://corefork.telegram.org/api/srp">2FA password</a>) */
        passwordMissing?: true;
        /** Form ID */
        formId: long;
        /** Bot ID */
        botId: int;
        /** Invoice */
        invoice: TypeInvoice;
        /** Payment provider ID. */
        providerId: int;
        /** Payment form URL */
        url: string;
        /** Payment provider name.<br>One of the following:<br>- <code>stripe</code> */
        nativeProvider?: string;
        /** Contains information about the payment provider, if available, to support it natively without the need for opening the URL.<br>A JSON object that can contain the following fields:<br><br>- <code>apple_pay_merchant_id</code>: Apple Pay merchant ID<br>- <code>google_pay_public_key</code>: Google Pay public key<br>- <code>need_country</code>: True, if the user country must be provided,<br>- <code>need_zip</code>: True, if the user ZIP/postal code must be provided,<br>- <code>need_cardholder_name</code>: True, if the cardholder name must be provided<br> */
        nativeParams?: TypeDataJSON;
        /** Saved server-side order information */
        savedInfo?: TypePaymentRequestedInfo;
        /** Contains information about saved card credentials */
        savedCredentials?: TypePaymentSavedCredentials;
        /** Users */
        users: TypeUser[];
    }

    /**
     * Payment form<br>
     * @link https://corefork.telegram.org/api/srp
     */
    export class PaymentForm extends VirtualClass<PaymentFormArgs> implements PaymentFormArgs {
        CONSTRUCTOR_id: -1928649707;
        SUBCLASS_OF_ID: 2689089305;
        classType: "constructor";
        className: "payments.PaymentForm";
        flags: number;
        canSaveCredentials?: true;
        passwordMissing?: true;
        formId: long;
        botId: int;
        invoice: TypeInvoice;
        providerId: int;
        url: string;
        nativeProvider?: string;
        nativeParams?: TypeDataJSON;
        savedInfo?: TypePaymentRequestedInfo;
        savedCredentials?: TypePaymentSavedCredentials;
        users: TypeUser[];
        fromReader(reader: Reader): PaymentForm;
    }

    export interface ValidatedRequestedInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** ID */
        id?: string;
        /** Shipping options */
        shippingOptions?: TypeShippingOption[];
    }

    /** Validated user-provided info<br> */
    export class ValidatedRequestedInfo extends VirtualClass<ValidatedRequestedInfoArgs> implements ValidatedRequestedInfoArgs {
        CONSTRUCTOR_id: -784000893;
        SUBCLASS_OF_ID: 2407548087;
        classType: "constructor";
        className: "payments.ValidatedRequestedInfo";
        flags: number;
        id?: string;
        shippingOptions?: TypeShippingOption[];
        fromReader(reader: Reader): ValidatedRequestedInfo;
    }

    export interface PaymentResultArgs {
        /** Info about the payment */
        updates: TypeUpdates;
    }

    /** Payment result<br> */
    export class PaymentResult extends VirtualClass<PaymentResultArgs> implements PaymentResultArgs {
        CONSTRUCTOR_id: 1314881805;
        SUBCLASS_OF_ID: 2330028701;
        classType: "constructor";
        className: "payments.PaymentResult";
        updates: TypeUpdates;
        fromReader(reader: Reader): PaymentResult;
    }

    export interface PaymentVerificationNeededArgs {
        /** URL for additional payment credentials verification */
        url: string;
    }

    /** Payment was not successful, additional verification is needed<br> */
    export class PaymentVerificationNeeded extends VirtualClass<PaymentVerificationNeededArgs> implements PaymentVerificationNeededArgs {
        CONSTRUCTOR_id: -666824391;
        SUBCLASS_OF_ID: 2330028701;
        classType: "constructor";
        className: "payments.PaymentVerificationNeeded";
        url: string;
        fromReader(reader: Reader): PaymentVerificationNeeded;
    }

    export interface PaymentReceiptArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Date of generation */
        date: int;
        /** Bot ID */
        botId: int;
        /** Provider ID */
        providerId: int;
        /** Title */
        title: string;
        /** Description */
        description: string;
        /** Photo */
        photo?: TypeWebDocument;
        /** Invoice */
        invoice: TypeInvoice;
        /** Info */
        info?: TypePaymentRequestedInfo;
        /** Selected shipping option */
        shipping?: TypeShippingOption;
        /** Tipped amount */
        tipAmount?: long;
        /** Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code */
        currency: string;
        /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        totalAmount: long;
        /** Payment credential name */
        credentialsTitle: string;
        /** Users */
        users: TypeUser[];
    }

    /**
     * Receipt<br>
     * @link https://corefork.telegram.org/bots/payments
     */
    export class PaymentReceipt extends VirtualClass<PaymentReceiptArgs> implements PaymentReceiptArgs {
        CONSTRUCTOR_id: 280319440;
        SUBCLASS_OF_ID: 1493210057;
        classType: "constructor";
        className: "payments.PaymentReceipt";
        flags: number;
        date: int;
        botId: int;
        providerId: int;
        title: string;
        description: string;
        photo?: TypeWebDocument;
        invoice: TypeInvoice;
        info?: TypePaymentRequestedInfo;
        shipping?: TypeShippingOption;
        tipAmount?: long;
        currency: string;
        totalAmount: long;
        credentialsTitle: string;
        users: TypeUser[];
        fromReader(reader: Reader): PaymentReceipt;
    }

    export interface SavedInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user has some saved payment credentials */
        hasSavedCredentials?: true;
        /** Saved server-side order information */
        savedInfo?: TypePaymentRequestedInfo;
    }

    /** Saved server-side order information<br> */
    export class SavedInfo extends VirtualClass<SavedInfoArgs> implements SavedInfoArgs {
        CONSTRUCTOR_id: -74456004;
        SUBCLASS_OF_ID: 2906452294;
        classType: "constructor";
        className: "payments.SavedInfo";
        flags: number;
        hasSavedCredentials?: true;
        savedInfo?: TypePaymentRequestedInfo;
        fromReader(reader: Reader): SavedInfo;
    }

    export interface BankCardDataArgs {
        /** Credit card title */
        title: string;
        /** Info URL(s) provided by the card's bank(s) */
        openUrls: TypeBankCardOpenUrl[];
    }

    /** Credit card info, provided by the card's bank(s)<br> */
    export class BankCardData extends VirtualClass<BankCardDataArgs> implements BankCardDataArgs {
        CONSTRUCTOR_id: 1042605427;
        SUBCLASS_OF_ID: 2356008587;
        classType: "constructor";
        className: "payments.BankCardData";
        title: string;
        openUrls: TypeBankCardOpenUrl[];
        fromReader(reader: Reader): BankCardData;
    }

    export interface GetPaymentFormArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The peer where the payment form was sent */
        peer: EntityLike;
        /** Message ID of payment form */
        msgId: MessageIDLike;
        /** A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages: <br><code>bg_color</code> - Background color <br><code>text_color</code> - Text color <br><code>hint_color</code> - Hint text color <br><code>link_color</code> - Link color <br><code>button_color</code> - Button color <br><code>button_text_color</code> - Button text color */
        themeParams?: TypeDataJSON;
    }

    /**
     * Get a payment form<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class GetPaymentForm extends Request<Partial<GetPaymentFormArgs>,payments.TypePaymentForm> implements GetPaymentFormArgs {
        CONSTRUCTOR_id: -1976353651;
        SUBCLASS_OF_ID: 2689089305;
        classType: "request";
        className: "payments.GetPaymentForm";
        flags: number;
        peer: EntityLike;
        msgId: MessageIDLike;
        themeParams?: TypeDataJSON;
        fromReader(reader: Reader): GetPaymentForm;
    }

    export interface GetPaymentReceiptArgs {
        /** The peer where the payment receipt was sent */
        peer: EntityLike;
        /** Message ID of receipt */
        msgId: MessageIDLike;
    }

    /**
     * Get payment receipt<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class GetPaymentReceipt extends Request<Partial<GetPaymentReceiptArgs>,payments.TypePaymentReceipt> implements GetPaymentReceiptArgs {
        CONSTRUCTOR_id: 611897804;
        SUBCLASS_OF_ID: 1493210057;
        classType: "request";
        className: "payments.GetPaymentReceipt";
        peer: EntityLike;
        msgId: MessageIDLike;
        fromReader(reader: Reader): GetPaymentReceipt;
    }

    export interface ValidateRequestedInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Save order information to re-use it for future orders */
        save?: true;
        /** Peer where the payment form was sent */
        peer: EntityLike;
        /** Message ID of payment form */
        msgId: MessageIDLike;
        /** Requested order information */
        info: TypePaymentRequestedInfo;
    }

    /**
     * Submit requested order information for validation<br>
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class ValidateRequestedInfo extends Request<Partial<ValidateRequestedInfoArgs>,payments.TypeValidatedRequestedInfo> implements ValidateRequestedInfoArgs {
        CONSTRUCTOR_id: -619695760;
        SUBCLASS_OF_ID: 2407548087;
        classType: "request";
        className: "payments.ValidateRequestedInfo";
        flags: number;
        save?: true;
        peer: EntityLike;
        msgId: MessageIDLike;
        info: TypePaymentRequestedInfo;
        fromReader(reader: Reader): ValidateRequestedInfo;
    }

    export interface SendPaymentFormArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Form ID */
        formId: long;
        /** The peer where the payment form was sent */
        peer: EntityLike;
        /** Message ID of form */
        msgId: MessageIDLike;
        /** ID of saved and validated <a href="https://corefork.telegram.org/constructor/payments.validatedRequestedInfo">order info</a> */
        requestedInfoId?: string;
        /** Chosen shipping option ID */
        shippingOptionId?: string;
        /** Payment credentials */
        credentials: TypeInputPaymentCredentials;
        /** Tip, in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        tipAmount?: long;
    }

    /**
     * Send compiled payment form<br>
     * @link https://corefork.telegram.org/constructor/payments.validatedRequestedInfo
     * @link https://corefork.telegram.org/bots/payments
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class SendPaymentForm extends Request<Partial<SendPaymentFormArgs>,payments.TypePaymentResult> implements SendPaymentFormArgs {
        CONSTRUCTOR_id: 818134173;
        SUBCLASS_OF_ID: 2330028701;
        classType: "request";
        className: "payments.SendPaymentForm";
        flags: number;
        formId: long;
        peer: EntityLike;
        msgId: MessageIDLike;
        requestedInfoId?: string;
        shippingOptionId?: string;
        credentials: TypeInputPaymentCredentials;
        tipAmount?: long;
        fromReader(reader: Reader): SendPaymentForm;
    }

    /** Get saved payment information<br> */
    export class GetSavedInfo extends Request<Partial<void>,payments.TypeSavedInfo> {
        CONSTRUCTOR_id: 578650699;
        SUBCLASS_OF_ID: 2906452294;
        classType: "request";
        className: "payments.GetSavedInfo";
        fromReader(reader: Reader): GetSavedInfo;
    }

    export interface ClearSavedInfoArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Remove saved payment credentials */
        credentials?: true;
        /** Clear the last order settings saved by the user */
        info?: true;
    }

    /** Clear saved payment information<br> */
    export class ClearSavedInfo extends Request<Partial<ClearSavedInfoArgs>,Bool> implements ClearSavedInfoArgs {
        CONSTRUCTOR_id: -667062079;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "payments.ClearSavedInfo";
        flags: number;
        credentials?: true;
        info?: true;
        fromReader(reader: Reader): ClearSavedInfo;
    }

    export interface GetBankCardDataArgs {
        /** Credit card number */
        number: string;
    }

    /**
     * Get info about a credit card<br>
     * @throws {{code:400,type:"BANK_CARD_NUMBER_INVALID"}} The specified card number is invalid.
     */
    export class GetBankCardData extends Request<Partial<GetBankCardDataArgs>,payments.TypeBankCardData> implements GetBankCardDataArgs {
        CONSTRUCTOR_id: 779736953;
        SUBCLASS_OF_ID: 2356008587;
        classType: "request";
        className: "payments.GetBankCardData";
        number: string;
        fromReader(reader: Reader): GetBankCardData;
    }

    type TypePaymentForm = PaymentForm;
    type TypeValidatedRequestedInfo = ValidatedRequestedInfo;
    type TypePaymentResult = PaymentResult | PaymentVerificationNeeded;
    type TypePaymentReceipt = PaymentReceipt;
    type TypeSavedInfo = SavedInfo;
    type TypeBankCardData = BankCardData;
    }

    namespace phone {
    export interface PhoneCallArgs {
        /** The VoIP phone call */
        phoneCall: TypePhoneCall;
        /** VoIP phone call participants */
        users: TypeUser[];
    }

    /** A VoIP phone call<br> */
    export class PhoneCall extends VirtualClass<PhoneCallArgs> implements PhoneCallArgs {
        CONSTRUCTOR_id: -326966976;
        SUBCLASS_OF_ID: 3565878863;
        classType: "constructor";
        className: "phone.PhoneCall";
        phoneCall: TypePhoneCall;
        users: TypeUser[];
        fromReader(reader: Reader): PhoneCall;
    }

    export interface GroupCallArgs {
        /** Info about the group call */
        call: TypeGroupCall;
        /** A partial list of participants. */
        participants: TypeGroupCallParticipant[];
        /** Next offset to use when fetching the remaining participants using <a href="https://corefork.telegram.org/method/phone.getGroupParticipants">phone.getGroupParticipants</a> */
        participantsNextOffset: string;
        /** Chats mentioned in the participants vector */
        chats: TypeChat[];
        /** Users mentioned in the participants vector */
        users: TypeUser[];
    }

    /**
     * Contains info about a group call, and partial info about its participants.<br>
     * @link https://corefork.telegram.org/method/phone.getGroupParticipants
     */
    export class GroupCall extends VirtualClass<GroupCallArgs> implements GroupCallArgs {
        CONSTRUCTOR_id: -1636664659;
        SUBCLASS_OF_ID: 809572030;
        classType: "constructor";
        className: "phone.GroupCall";
        call: TypeGroupCall;
        participants: TypeGroupCallParticipant[];
        participantsNextOffset: string;
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): GroupCall;
    }

    export interface GroupParticipantsArgs {
        /** Number of participants */
        count: int;
        /** List of participants */
        participants: TypeGroupCallParticipant[];
        /** If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as <code>offset</code> in <a href="https://corefork.telegram.org/method/phone.getGroupParticipants">phone.getGroupParticipants</a>. */
        nextOffset: string;
        /** Mentioned chats */
        chats: TypeChat[];
        /** Mentioned users */
        users: TypeUser[];
        /** Version info */
        version: int;
    }

    /**
     * Info about the participants of a group call or livestream<br>
     * @link https://corefork.telegram.org/method/phone.getGroupParticipants
     */
    export class GroupParticipants extends VirtualClass<GroupParticipantsArgs> implements GroupParticipantsArgs {
        CONSTRUCTOR_id: -193506890;
        SUBCLASS_OF_ID: 1926431988;
        classType: "constructor";
        className: "phone.GroupParticipants";
        count: int;
        participants: TypeGroupCallParticipant[];
        nextOffset: string;
        chats: TypeChat[];
        users: TypeUser[];
        version: int;
        fromReader(reader: Reader): GroupParticipants;
    }

    export interface JoinAsPeersArgs {
        /** Peers */
        peers: TypePeer[];
        /** Chats mentioned in the peers vector */
        chats: TypeChat[];
        /** Users mentioned in the peers vector */
        users: TypeUser[];
    }

    /** A list of peers that can be used to join a group call, presenting yourself as a specific user/channel.<br> */
    export class JoinAsPeers extends VirtualClass<JoinAsPeersArgs> implements JoinAsPeersArgs {
        CONSTRUCTOR_id: -1343921601;
        SUBCLASS_OF_ID: 3031920891;
        classType: "constructor";
        className: "phone.JoinAsPeers";
        peers: TypePeer[];
        chats: TypeChat[];
        users: TypeUser[];
        fromReader(reader: Reader): JoinAsPeers;
    }

    export interface ExportedGroupCallInviteArgs {
        /** Invite link */
        link: string;
    }

    /** An invite to a group call or livestream<br> */
    export class ExportedGroupCallInvite extends VirtualClass<ExportedGroupCallInviteArgs> implements ExportedGroupCallInviteArgs {
        CONSTRUCTOR_id: 541839704;
        SUBCLASS_OF_ID: 993787535;
        classType: "constructor";
        className: "phone.ExportedGroupCallInvite";
        link: string;
        fromReader(reader: Reader): ExportedGroupCallInvite;
    }

    /** Get phone call configuration to be passed to libtgvoip's shared config<br> */
    export class GetCallConfig extends Request<Partial<void>,TypeDataJSON> {
        CONSTRUCTOR_id: 1430593449;
        SUBCLASS_OF_ID: 2902676200;
        classType: "request";
        className: "phone.GetCallConfig";
        fromReader(reader: Reader): GetCallConfig;
    }

    export interface RequestCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to start a video call */
        video?: true;
        /** Destination of the phone call */
        userId: TypeInputUser;
        /** Random ID to avoid resending the same object */
        randomId: int;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Parameter for E2E encryption key exchange »</a> */
        gAHash: bytes;
        /** Phone call settings */
        protocol: TypePhoneCallProtocol;
    }

    /**
     * Start a telegram phone call<br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     * @throws {{code:400,type:"CALL_PROTOCOL_FLAGS_INVALID"}} Call protocol flags invalid.
     * @throws {{code:400,type:"PARTICIPANT_VERSION_OUTDATED"}} The other participant does not use an up to date telegram client with support for calls.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     * @throws {{code:403,type:"USER_IS_BLOCKED"}} You were blocked by this user.
     * @throws {{code:403,type:"USER_PRIVACY_RESTRICTED"}} The user's privacy settings do not allow you to do this.
     */
    export class RequestCall extends Request<Partial<RequestCallArgs>,phone.TypePhoneCall> implements RequestCallArgs {
        CONSTRUCTOR_id: 1124046573;
        SUBCLASS_OF_ID: 3565878863;
        classType: "request";
        className: "phone.RequestCall";
        flags: number;
        video?: true;
        userId: TypeInputUser;
        randomId: int;
        gAHash: bytes;
        protocol: TypePhoneCallProtocol;
        fromReader(reader: Reader): RequestCall;
    }

    export interface AcceptCallArgs {
        /** The call to accept */
        peer: TypeInputPhoneCall;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Parameter for E2E encryption key exchange »</a> */
        gB: bytes;
        /** Phone call settings */
        protocol: TypePhoneCallProtocol;
    }

    /**
     * Accept incoming call<br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     * @throws {{code:400,type:"CALL_ALREADY_ACCEPTED"}} The call was already accepted.
     * @throws {{code:400,type:"CALL_ALREADY_DECLINED"}} The call was already declined.
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     * @throws {{code:400,type:"CALL_PROTOCOL_FLAGS_INVALID"}} Call protocol flags invalid.
     */
    export class AcceptCall extends Request<Partial<AcceptCallArgs>,phone.TypePhoneCall> implements AcceptCallArgs {
        CONSTRUCTOR_id: 1003664544;
        SUBCLASS_OF_ID: 3565878863;
        classType: "request";
        className: "phone.AcceptCall";
        peer: TypeInputPhoneCall;
        gB: bytes;
        protocol: TypePhoneCallProtocol;
        fromReader(reader: Reader): AcceptCall;
    }

    export interface ConfirmCallArgs {
        /** The phone call */
        peer: TypeInputPhoneCall;
        /** <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Parameter for E2E encryption key exchange »</a> */
        gA: bytes;
        /** Key fingerprint */
        keyFingerprint: long;
        /** Phone call settings */
        protocol: TypePhoneCallProtocol;
    }

    /**
     * <a href="https://corefork.telegram.org/api/end-to-end/voice-calls">Complete phone call E2E encryption key exchange »</a><br>
     * @link https://corefork.telegram.org/api/end-to-end/voice-calls
     * @throws {{code:400,type:"CALL_ALREADY_DECLINED"}} The call was already declined.
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     */
    export class ConfirmCall extends Request<Partial<ConfirmCallArgs>,phone.TypePhoneCall> implements ConfirmCallArgs {
        CONSTRUCTOR_id: 788404002;
        SUBCLASS_OF_ID: 3565878863;
        classType: "request";
        className: "phone.ConfirmCall";
        peer: TypeInputPhoneCall;
        gA: bytes;
        keyFingerprint: long;
        protocol: TypePhoneCallProtocol;
        fromReader(reader: Reader): ConfirmCall;
    }

    export interface ReceivedCallArgs {
        /** The phone call we're currently in */
        peer: TypeInputPhoneCall;
    }

    /**
     * Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.<br>
     * @throws {{code:400,type:"CALL_ALREADY_DECLINED"}} The call was already declined.
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     */
    export class ReceivedCall extends Request<Partial<ReceivedCallArgs>,Bool> implements ReceivedCallArgs {
        CONSTRUCTOR_id: 399855457;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "phone.ReceivedCall";
        peer: TypeInputPhoneCall;
        fromReader(reader: Reader): ReceivedCall;
    }

    export interface DiscardCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a video call */
        video?: true;
        /** The phone call */
        peer: TypeInputPhoneCall;
        /** Call duration */
        duration: int;
        /** Why was the call discarded */
        reason: TypePhoneCallDiscardReason;
        /** Preferred libtgvoip relay ID */
        connectionId: long;
    }

    /**
     * Refuse or end running call<br>
     * @throws {{code:400,type:"CALL_ALREADY_ACCEPTED"}} The call was already accepted.
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     */
    export class DiscardCall extends Request<Partial<DiscardCallArgs>,TypeUpdates> implements DiscardCallArgs {
        CONSTRUCTOR_id: -1295269440;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.DiscardCall";
        flags: number;
        video?: true;
        peer: TypeInputPhoneCall;
        duration: int;
        reason: TypePhoneCallDiscardReason;
        connectionId: long;
        fromReader(reader: Reader): DiscardCall;
    }

    export interface SetCallRatingArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether the user decided on their own initiative to rate the call */
        userInitiative?: true;
        /** The call to rate */
        peer: TypeInputPhoneCall;
        /** Rating in <code>1-5</code> stars */
        rating: int;
        /** An additional comment */
        comment: string;
    }

    /**
     * Rate a call<br>
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     */
    export class SetCallRating extends Request<Partial<SetCallRatingArgs>,TypeUpdates> implements SetCallRatingArgs {
        CONSTRUCTOR_id: 1508562471;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.SetCallRating";
        flags: number;
        userInitiative?: true;
        peer: TypeInputPhoneCall;
        rating: int;
        comment: string;
        fromReader(reader: Reader): SetCallRating;
    }

    export interface SaveCallDebugArgs {
        /** Phone call */
        peer: TypeInputPhoneCall;
        /** Debug statistics obtained from libtgvoip */
        debug: TypeDataJSON;
    }

    /**
     * Send phone call debug data to server<br>
     * @throws {{code:400,type:"CALL_PEER_INVALID"}} The provided call peer object is invalid.
     * @throws {{code:400,type:"DATA_JSON_INVALID"}} The provided JSON data is invalid.
     */
    export class SaveCallDebug extends Request<Partial<SaveCallDebugArgs>,Bool> implements SaveCallDebugArgs {
        CONSTRUCTOR_id: 662363518;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "phone.SaveCallDebug";
        peer: TypeInputPhoneCall;
        debug: TypeDataJSON;
        fromReader(reader: Reader): SaveCallDebug;
    }

    export interface SendSignalingDataArgs {
        /** Phone call */
        peer: TypeInputPhoneCall;
        /** Signaling payload */
        data: bytes;
    }

    /** Send VoIP signaling data<br> */
    export class SendSignalingData extends Request<Partial<SendSignalingDataArgs>,Bool> implements SendSignalingDataArgs {
        CONSTRUCTOR_id: -8744061;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "phone.SendSignalingData";
        peer: TypeInputPhoneCall;
        data: bytes;
        fromReader(reader: Reader): SendSignalingData;
    }

    export interface CreateGroupCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Associate the group call or livestream to the provided <a href="https://corefork.telegram.org/api/channel">group/supergroup/channel</a> */
        peer: EntityLike;
        /** Unique client message ID required to prevent creation of duplicate group calls */
        randomId: int;
        /** Call title */
        title?: string;
        /** For scheduled group call or livestreams, the absolute date when the group call will start */
        scheduleDate?: int;
    }

    /**
     * Create a group call or livestream<br>
     * @link https://corefork.telegram.org/api/channel
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"SCHEDULE_DATE_INVALID"}} Invalid schedule date provided.
     */
    export class CreateGroupCall extends Request<Partial<CreateGroupCallArgs>,TypeUpdates> implements CreateGroupCallArgs {
        CONSTRUCTOR_id: 1221445336;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.CreateGroupCall";
        flags: number;
        peer: EntityLike;
        randomId: int;
        title?: string;
        scheduleDate?: int;
        fromReader(reader: Reader): CreateGroupCall;
    }

    export interface JoinGroupCallArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** If set, the user will be muted by default upon joining. */
        muted?: true;
        /** If set, the user's video will be disabled by default upon joining. */
        videoStopped?: true;
        /** The group call */
        call: TypeInputGroupCall;
        /** Join the group call, presenting yourself as the specified user/channel */
        joinAs: EntityLike;
        /** The invitation hash from the invite link: <code>https://t.me/username?voicechat=hash</code> */
        inviteHash?: string;
        /** WebRTC parameters */
        params: TypeDataJSON;
    }

    /**
     * Join a group call<br>
     * @throws {{code:400,type:"GROUPCALL_SSRC_DUPLICATE_MUCH"}} The app needs to retry joining the group call with a new SSRC value.
     */
    export class JoinGroupCall extends Request<Partial<JoinGroupCallArgs>,TypeUpdates> implements JoinGroupCallArgs {
        CONSTRUCTOR_id: -1322057861;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.JoinGroupCall";
        flags: number;
        muted?: true;
        videoStopped?: true;
        call: TypeInputGroupCall;
        joinAs: EntityLike;
        inviteHash?: string;
        params: TypeDataJSON;
        fromReader(reader: Reader): JoinGroupCall;
    }

    export interface LeaveGroupCallArgs {
        /** The group call */
        call: TypeInputGroupCall;
        /** Your source ID */
        source: int;
    }

    /** Leave a group call<br> */
    export class LeaveGroupCall extends Request<Partial<LeaveGroupCallArgs>,TypeUpdates> implements LeaveGroupCallArgs {
        CONSTRUCTOR_id: 1342404601;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.LeaveGroupCall";
        call: TypeInputGroupCall;
        source: int;
        fromReader(reader: Reader): LeaveGroupCall;
    }

    export interface InviteToGroupCallArgs {
        /** The group call */
        call: TypeInputGroupCall;
        /** The users to invite. */
        users: TypeInputUser[];
    }

    /**
     * Invite a set of users to a group call.<br>
     * @throws {{code:403,type:"GROUPCALL_FORBIDDEN"}} The group call has already ended.
     */
    export class InviteToGroupCall extends Request<Partial<InviteToGroupCallArgs>,TypeUpdates> implements InviteToGroupCallArgs {
        CONSTRUCTOR_id: 2067345760;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.InviteToGroupCall";
        call: TypeInputGroupCall;
        users: TypeInputUser[];
        fromReader(reader: Reader): InviteToGroupCall;
    }

    export interface DiscardGroupCallArgs {
        /** The group call to terminate */
        call: TypeInputGroupCall;
    }

    /** Terminate a group call<br> */
    export class DiscardGroupCall extends Request<Partial<DiscardGroupCallArgs>,TypeUpdates> implements DiscardGroupCallArgs {
        CONSTRUCTOR_id: 2054648117;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.DiscardGroupCall";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): DiscardGroupCall;
    }

    export interface ToggleGroupCallSettingsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Invalidate existing invite links */
        resetInviteHash?: true;
        /** Group call */
        call: TypeInputGroupCall;
        /** Whether all users will bthat join this group calle muted by default upon joining the group call */
        joinMuted?: Bool;
    }

    /**
     * Change group call settings<br>
     * @throws {{code:400,type:"GROUPCALL_NOT_MODIFIED"}} Group call settings weren't modified.
     */
    export class ToggleGroupCallSettings extends Request<Partial<ToggleGroupCallSettingsArgs>,TypeUpdates> implements ToggleGroupCallSettingsArgs {
        CONSTRUCTOR_id: 1958458429;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.ToggleGroupCallSettings";
        flags: number;
        resetInviteHash?: true;
        call: TypeInputGroupCall;
        joinMuted?: Bool;
        fromReader(reader: Reader): ToggleGroupCallSettings;
    }

    export interface GetGroupCallArgs {
        /** The group call */
        call: TypeInputGroupCall;
    }

    /**
     * Get info about a group call<br>
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetGroupCall extends Request<Partial<GetGroupCallArgs>,phone.TypeGroupCall> implements GetGroupCallArgs {
        CONSTRUCTOR_id: 209498135;
        SUBCLASS_OF_ID: 809572030;
        classType: "request";
        className: "phone.GetGroupCall";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): GetGroupCall;
    }

    export interface GetGroupParticipantsArgs {
        /** Group call */
        call: TypeInputGroupCall;
        /** If specified, will fetch group participant info about the specified peers */
        ids: EntityLike[];
        /** If specified, will fetch group participant info about the specified WebRTC source IDs */
        sources: int[];
        /** Offset for results, taken from the <code>next_offset</code> field of <a href="https://corefork.telegram.org/constructor/phone.groupParticipants">phone.groupParticipants</a>, initially an empty string. <br>Note: if no more results are available, the method call will return an empty <code>next_offset</code>; thus, avoid providing the <code>next_offset</code> returned in <a href="https://corefork.telegram.org/constructor/phone.groupParticipants">phone.groupParticipants</a> if it is empty, to avoid an infinite loop. */
        offset: string;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Get group call participants<br>
     * @link https://corefork.telegram.org/constructor/phone.groupParticipants
     * @link https://corefork.telegram.org/api/offsets
     */
    export class GetGroupParticipants extends Request<Partial<GetGroupParticipantsArgs>,phone.TypeGroupParticipants> implements GetGroupParticipantsArgs {
        CONSTRUCTOR_id: -984033109;
        SUBCLASS_OF_ID: 1926431988;
        classType: "request";
        className: "phone.GetGroupParticipants";
        call: TypeInputGroupCall;
        ids: EntityLike[];
        sources: int[];
        offset: string;
        limit: int;
        fromReader(reader: Reader): GetGroupParticipants;
    }

    export interface CheckGroupCallArgs {
        /** Group call */
        call: TypeInputGroupCall;
        /** Source IDs */
        sources: int[];
    }

    /** Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs<br> */
    export class CheckGroupCall extends Request<Partial<CheckGroupCallArgs>,int[]> implements CheckGroupCallArgs {
        CONSTRUCTOR_id: -1248003721;
        SUBCLASS_OF_ID: 1344696591;
        classType: "request";
        className: "phone.CheckGroupCall";
        call: TypeInputGroupCall;
        sources: int[];
        fromReader(reader: Reader): CheckGroupCall;
    }

    export interface ToggleGroupCallRecordArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to start or stop recording */
        start?: true;
        /** Whether to also record video streams */
        call: TypeInputGroupCall;
        /** The group call or livestream */
        title?: string;
    }

    /** Start or stop recording a group call: the recorded audio and video streams will be automatically sent to <code>Saved messages</code> (the chat with ourselves).<br> */
    export class ToggleGroupCallRecord extends Request<Partial<ToggleGroupCallRecordArgs>,TypeUpdates> implements ToggleGroupCallRecordArgs {
        CONSTRUCTOR_id: -1070962985;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.ToggleGroupCallRecord";
        flags: number;
        start?: true;
        call: TypeInputGroupCall;
        title?: string;
        fromReader(reader: Reader): ToggleGroupCallRecord;
    }

    export interface EditGroupCallParticipantArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** The group call */
        call: TypeInputGroupCall;
        /** The group call participant (can also be the user itself) */
        participant: EntityLike;
        /** Whether to mute or unmute the specified participant */
        muted?: Bool;
        /** New volume */
        volume?: int;
        /** Raise or lower hand */
        raiseHand?: Bool;
        /** Start or stop the video stream */
        videoStopped?: Bool;
        /** Pause or resume the video stream */
        videoPaused?: Bool;
        /** Pause or resume the screen sharing stream */
        presentationPaused?: Bool;
    }

    /**
     * Edit information about a given group call participant<br>Note: <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">flags</a>.N?<a href="https://corefork.telegram.org/type/Bool">Bool</a> parameters can have three possible values:
     * @link https://corefork.telegram.org/type/Bool
     * @link https://corefork.telegram.org/constructor/boolTrue
     * @link https://corefork.telegram.org/constructor/boolFalse
     * @throws {{code:400,type:"USER_VOLUME_INVALID"}} The specified user volume is invalid.
     */
    export class EditGroupCallParticipant extends Request<Partial<EditGroupCallParticipantArgs>,TypeUpdates> implements EditGroupCallParticipantArgs {
        CONSTRUCTOR_id: -1524155713;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.EditGroupCallParticipant";
        flags: number;
        call: TypeInputGroupCall;
        participant: EntityLike;
        muted?: Bool;
        volume?: int;
        raiseHand?: Bool;
        videoStopped?: Bool;
        videoPaused?: Bool;
        presentationPaused?: Bool;
        fromReader(reader: Reader): EditGroupCallParticipant;
    }

    export interface EditGroupCallTitleArgs {
        /** Group call */
        call: TypeInputGroupCall;
        /** New title */
        title: string;
    }

    /** Edit the title of a group call or livestream<br> */
    export class EditGroupCallTitle extends Request<Partial<EditGroupCallTitleArgs>,TypeUpdates> implements EditGroupCallTitleArgs {
        CONSTRUCTOR_id: 480685066;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.EditGroupCallTitle";
        call: TypeInputGroupCall;
        title: string;
        fromReader(reader: Reader): EditGroupCallTitle;
    }

    export interface GetGroupCallJoinAsArgs {
        /** The dialog whose group call or livestream we're trying to join */
        peer: EntityLike;
    }

    /** Get a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.<br> */
    export class GetGroupCallJoinAs extends Request<Partial<GetGroupCallJoinAsArgs>,phone.TypeJoinAsPeers> implements GetGroupCallJoinAsArgs {
        CONSTRUCTOR_id: -277077702;
        SUBCLASS_OF_ID: 3031920891;
        classType: "request";
        className: "phone.GetGroupCallJoinAs";
        peer: EntityLike;
        fromReader(reader: Reader): GetGroupCallJoinAs;
    }

    export interface ExportGroupCallInviteArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** For livestreams, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand). */
        canSelfUnmute?: true;
        /** The group call */
        call: TypeInputGroupCall;
    }

    /** Get an invite link for a group call or livestream<br> */
    export class ExportGroupCallInvite extends Request<Partial<ExportGroupCallInviteArgs>,phone.TypeExportedGroupCallInvite> implements ExportGroupCallInviteArgs {
        CONSTRUCTOR_id: -425040769;
        SUBCLASS_OF_ID: 993787535;
        classType: "request";
        className: "phone.ExportGroupCallInvite";
        flags: number;
        canSelfUnmute?: true;
        call: TypeInputGroupCall;
        fromReader(reader: Reader): ExportGroupCallInvite;
    }

    export interface ToggleGroupCallStartSubscriptionArgs {
        /** Scheduled group call */
        call: TypeInputGroupCall;
        /** Enable or disable subscription */
        subscribed: Bool;
    }

    /** Subscribe or unsubscribe to a scheduled group call<br> */
    export class ToggleGroupCallStartSubscription extends Request<Partial<ToggleGroupCallStartSubscriptionArgs>,TypeUpdates> implements ToggleGroupCallStartSubscriptionArgs {
        CONSTRUCTOR_id: 563885286;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.ToggleGroupCallStartSubscription";
        call: TypeInputGroupCall;
        subscribed: Bool;
        fromReader(reader: Reader): ToggleGroupCallStartSubscription;
    }

    export interface StartScheduledGroupCallArgs {
        /** The scheduled group call */
        call: TypeInputGroupCall;
    }

    /** Start a scheduled group call.<br> */
    export class StartScheduledGroupCall extends Request<Partial<StartScheduledGroupCallArgs>,TypeUpdates> implements StartScheduledGroupCallArgs {
        CONSTRUCTOR_id: 1451287362;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.StartScheduledGroupCall";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): StartScheduledGroupCall;
    }

    export interface SaveDefaultGroupCallJoinAsArgs {
        /** The dialog */
        peer: EntityLike;
        /** The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user/channel. */
        joinAs: EntityLike;
    }

    /** Set the default peer that will be used to join a group call in a specific dialog.<br> */
    export class SaveDefaultGroupCallJoinAs extends Request<Partial<SaveDefaultGroupCallJoinAsArgs>,Bool> implements SaveDefaultGroupCallJoinAsArgs {
        CONSTRUCTOR_id: 1465786252;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "phone.SaveDefaultGroupCallJoinAs";
        peer: EntityLike;
        joinAs: EntityLike;
        fromReader(reader: Reader): SaveDefaultGroupCallJoinAs;
    }

    export interface JoinGroupCallPresentationArgs {
        /** The group call */
        call: TypeInputGroupCall;
        /** WebRTC parameters */
        params: TypeDataJSON;
    }

    /**
     * Start screen sharing in a call<br>
     * @link https://corefork.telegram.org/method/phone.joinGroupCall
     * @throws {{code:403,type:"PARTICIPANT_JOIN_MISSING"}} Trying to enable a presentation, when the user hasn't joined the Video Chat with phone.joinGroupCall.
     */
    export class JoinGroupCallPresentation extends Request<Partial<JoinGroupCallPresentationArgs>,TypeUpdates> implements JoinGroupCallPresentationArgs {
        CONSTRUCTOR_id: -873829436;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.JoinGroupCallPresentation";
        call: TypeInputGroupCall;
        params: TypeDataJSON;
        fromReader(reader: Reader): JoinGroupCallPresentation;
    }

    export interface LeaveGroupCallPresentationArgs {
        /** The group call */
        call: TypeInputGroupCall;
    }

    /** Stop screen sharing in a group call<br> */
    export class LeaveGroupCallPresentation extends Request<Partial<LeaveGroupCallPresentationArgs>,TypeUpdates> implements LeaveGroupCallPresentationArgs {
        CONSTRUCTOR_id: 475058500;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "phone.LeaveGroupCallPresentation";
        call: TypeInputGroupCall;
        fromReader(reader: Reader): LeaveGroupCallPresentation;
    }

    type TypePhoneCall = PhoneCall;
    type TypeGroupCall = GroupCall;
    type TypeGroupParticipants = GroupParticipants;
    type TypeJoinAsPeers = JoinAsPeers;
    type TypeExportedGroupCallInvite = ExportedGroupCallInvite;
    }

    namespace stats {
    export interface BroadcastStatsArgs {
        /** Period in consideration */
        period: TypeStatsDateRangeDays;
        /** Follower count change for period in consideration */
        followers: TypeStatsAbsValueAndPrev;
        /** <code>total_viewcount/postcount</code>, for posts posted during the period in consideration (<code>views_per_post</code>). <br>Note that in this case, <code>current</code> refers to the <code>period</code> in consideration (<code>min_date</code> till <code>max_date</code>), and <code>prev</code> refers to the previous period (<code>(min_date - (max_date - min_date))</code> till <code>min_date</code>). */
        viewsPerPost: TypeStatsAbsValueAndPrev;
        /** <code>total_viewcount/postcount</code>, for posts posted during the period in consideration (<code>views_per_post</code>). <br>Note that in this case, <code>current</code> refers to the <code>period</code> in consideration (<code>min_date</code> till <code>max_date</code>), and <code>prev</code> refers to the previous period (<code>(min_date - (max_date - min_date))</code> till <code>min_date</code>) */
        sharesPerPost: TypeStatsAbsValueAndPrev;
        /** Percentage of subscribers with enabled notifications */
        enabledNotifications: TypeStatsPercentValue;
        /** Channel growth graph (absolute subscriber count) */
        growthGraph: TypeStatsGraph;
        /** Followers growth graph (relative subscriber count) */
        followersGraph: TypeStatsGraph;
        /** Muted users graph (relative) */
        muteGraph: TypeStatsGraph;
        /** Views per hour graph (absolute) */
        topHoursGraph: TypeStatsGraph;
        /** Interactions graph (absolute) */
        interactionsGraph: TypeStatsGraph;
        /** IV interactions graph (absolute) */
        ivInteractionsGraph: TypeStatsGraph;
        /** Views by source graph (absolute) */
        viewsBySourceGraph: TypeStatsGraph;
        /** New followers by source graph (absolute) */
        newFollowersBySourceGraph: TypeStatsGraph;
        /** Subscriber language graph (piechart) */
        languagesGraph: TypeStatsGraph;
        /** Recent message interactions */
        recentMessageInteractions: TypeMessageInteractionCounters[];
    }

    /**
     * <a href="https://corefork.telegram.org/api/stats">Channel statistics</a>.<br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class BroadcastStats extends VirtualClass<BroadcastStatsArgs> implements BroadcastStatsArgs {
        CONSTRUCTOR_id: -1107852396;
        SUBCLASS_OF_ID: 2146587688;
        classType: "constructor";
        className: "stats.BroadcastStats";
        period: TypeStatsDateRangeDays;
        followers: TypeStatsAbsValueAndPrev;
        viewsPerPost: TypeStatsAbsValueAndPrev;
        sharesPerPost: TypeStatsAbsValueAndPrev;
        enabledNotifications: TypeStatsPercentValue;
        growthGraph: TypeStatsGraph;
        followersGraph: TypeStatsGraph;
        muteGraph: TypeStatsGraph;
        topHoursGraph: TypeStatsGraph;
        interactionsGraph: TypeStatsGraph;
        ivInteractionsGraph: TypeStatsGraph;
        viewsBySourceGraph: TypeStatsGraph;
        newFollowersBySourceGraph: TypeStatsGraph;
        languagesGraph: TypeStatsGraph;
        recentMessageInteractions: TypeMessageInteractionCounters[];
        fromReader(reader: Reader): BroadcastStats;
    }

    export interface MegagroupStatsArgs {
        /** Period in consideration */
        period: TypeStatsDateRangeDays;
        /** Member count change for period in consideration */
        members: TypeStatsAbsValueAndPrev;
        /** Message number change for period in consideration */
        messages: TypeStatsAbsValueAndPrev;
        /** Number of users that viewed messages, for range in consideration */
        viewers: TypeStatsAbsValueAndPrev;
        /** Number of users that posted messages, for range in consideration */
        posters: TypeStatsAbsValueAndPrev;
        /** Supergroup growth graph (absolute subscriber count) */
        growthGraph: TypeStatsGraph;
        /** Members growth (relative subscriber count) */
        membersGraph: TypeStatsGraph;
        /** New members by source graph */
        newMembersBySourceGraph: TypeStatsGraph;
        /** Subscriber language graph (piechart) */
        languagesGraph: TypeStatsGraph;
        /** Message activity graph (stacked bar graph, message type) */
        messagesGraph: TypeStatsGraph;
        /** Group activity graph (deleted, modified messages, blocked users) */
        actionsGraph: TypeStatsGraph;
        /** Activity per hour graph (absolute) */
        topHoursGraph: TypeStatsGraph;
        /** Activity per day of week graph (absolute) */
        weekdaysGraph: TypeStatsGraph;
        /** Info about most active group members */
        topPosters: TypeStatsGroupTopPoster[];
        /** Info about most active group admins */
        topAdmins: TypeStatsGroupTopAdmin[];
        /** Info about most active group inviters */
        topInviters: TypeStatsGroupTopInviter[];
        /** Info about users mentioned in statistics */
        users: TypeUser[];
    }

    /**
     * Supergroup <a href="https://corefork.telegram.org/api/stats">statistics</a><br>
     * @link https://corefork.telegram.org/api/stats
     */
    export class MegagroupStats extends VirtualClass<MegagroupStatsArgs> implements MegagroupStatsArgs {
        CONSTRUCTOR_id: -276825834;
        SUBCLASS_OF_ID: 1532608141;
        classType: "constructor";
        className: "stats.MegagroupStats";
        period: TypeStatsDateRangeDays;
        members: TypeStatsAbsValueAndPrev;
        messages: TypeStatsAbsValueAndPrev;
        viewers: TypeStatsAbsValueAndPrev;
        posters: TypeStatsAbsValueAndPrev;
        growthGraph: TypeStatsGraph;
        membersGraph: TypeStatsGraph;
        newMembersBySourceGraph: TypeStatsGraph;
        languagesGraph: TypeStatsGraph;
        messagesGraph: TypeStatsGraph;
        actionsGraph: TypeStatsGraph;
        topHoursGraph: TypeStatsGraph;
        weekdaysGraph: TypeStatsGraph;
        topPosters: TypeStatsGroupTopPoster[];
        topAdmins: TypeStatsGroupTopAdmin[];
        topInviters: TypeStatsGroupTopInviter[];
        users: TypeUser[];
        fromReader(reader: Reader): MegagroupStats;
    }

    export interface MessageStatsArgs {
        /** Message view graph */
        viewsGraph: TypeStatsGraph;
    }

    /** Message statistics<br> */
    export class MessageStats extends VirtualClass<MessageStatsArgs> implements MessageStatsArgs {
        CONSTRUCTOR_id: -1986399595;
        SUBCLASS_OF_ID: 2516886306;
        classType: "constructor";
        className: "stats.MessageStats";
        viewsGraph: TypeStatsGraph;
        fromReader(reader: Reader): MessageStats;
    }

    export interface GetBroadcastStatsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to enable dark theme for graph colors */
        dark?: true;
        /** The channel */
        channel: TypeInputChannel;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/stats">channel statistics</a><br>
     * @link https://corefork.telegram.org/api/stats
     * @throws {{code:400,type:"BROADCAST_REQUIRED"}} This method can only be called on a channel, please use stats.getMegagroupStats for supergroups.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     */
    export class GetBroadcastStats extends Request<Partial<GetBroadcastStatsArgs>,stats.TypeBroadcastStats> implements GetBroadcastStatsArgs {
        CONSTRUCTOR_id: -1421720550;
        SUBCLASS_OF_ID: 2146587688;
        classType: "request";
        className: "stats.GetBroadcastStats";
        flags: number;
        dark?: true;
        channel: TypeInputChannel;
        fromReader(reader: Reader): GetBroadcastStats;
    }

    export interface LoadAsyncGraphArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Graph token from <a href="https://corefork.telegram.org/constructor/statsGraphAsync">statsGraphAsync</a> constructor */
        token: string;
        /** Zoom value, if required */
        x?: long;
    }

    /**
     * Load <a href="https://corefork.telegram.org/api/stats">channel statistics graph</a> asynchronously<br>
     * @link https://corefork.telegram.org/constructor/statsGraphAsync
     * @link https://corefork.telegram.org/api/stats
     * @link https://corefork.telegram.org/method/stats.loadAsyncGraph
     * @link https://corefork.telegram.org/api/stats
     * @throws {{code:400,type:"GRAPH_EXPIRED_RELOAD"}} This graph has expired, please obtain a new graph token.
     * @throws {{code:400,type:"GRAPH_INVALID_RELOAD"}} Invalid graph token provided, please reload the stats and provide the updated token.
     * @throws {{code:400,type:"GRAPH_OUTDATED_RELOAD"}} The graph is outdated, please get a new async token using stats.getBroadcastStats.
     */
    export class LoadAsyncGraph extends Request<Partial<LoadAsyncGraphArgs>,TypeStatsGraph> implements LoadAsyncGraphArgs {
        CONSTRUCTOR_id: 1646092192;
        SUBCLASS_OF_ID: 2609918291;
        classType: "request";
        className: "stats.LoadAsyncGraph";
        flags: number;
        token: string;
        x?: long;
        fromReader(reader: Reader): LoadAsyncGraph;
    }

    export interface GetMegagroupStatsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to enable dark theme for graph colors */
        dark?: true;
        /** <a href="https://corefork.telegram.org/api/channel">Supergroup ID</a> */
        channel: TypeInputChannel;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/stats">supergroup statistics</a><br>
     * @link https://corefork.telegram.org/api/channel
     * @link https://corefork.telegram.org/api/stats
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"MEGAGROUP_REQUIRED"}} You can only use this method on a supergroup.
     */
    export class GetMegagroupStats extends Request<Partial<GetMegagroupStatsArgs>,stats.TypeMegagroupStats> implements GetMegagroupStatsArgs {
        CONSTRUCTOR_id: -589330937;
        SUBCLASS_OF_ID: 1532608141;
        classType: "request";
        className: "stats.GetMegagroupStats";
        flags: number;
        dark?: true;
        channel: TypeInputChannel;
        fromReader(reader: Reader): GetMegagroupStats;
    }

    export interface GetMessagePublicForwardsArgs {
        /** Source channel */
        channel: TypeInputChannel;
        /** Source message ID */
        msgId: MessageIDLike;
        /** Initially 0, then set to the <code>next_rate</code> parameter of <a href="https://corefork.telegram.org/constructor/messages.messagesSlice">messages.messagesSlice</a> */
        offsetRate: int;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetPeer: EntityLike;
        /** <a href="https://corefork.telegram.org/api/offsets">Offsets for pagination, for more info click here</a> */
        offsetId: int;
        /** Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a> */
        limit: int;
    }

    /**
     * Obtains a list of messages, indicating to which other public channels was a channel message forwarded.<br>
     * Will return a list of <a href="https://corefork.telegram.org/constructor/message">messages</a> with <code>peer_id</code> equal to the public channel to which this message was forwarded.<br>
     * @link https://corefork.telegram.org/constructor/messages.messagesSlice
     * @link https://corefork.telegram.org/api/offsets
     * @link https://corefork.telegram.org/constructor/message
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     * @throws {{code:400,type:"MESSAGE_ID_INVALID"}} The provided message id is invalid.
     */
    export class GetMessagePublicForwards extends Request<Partial<GetMessagePublicForwardsArgs>,messages.TypeMessages> implements GetMessagePublicForwardsArgs {
        CONSTRUCTOR_id: 1445996571;
        SUBCLASS_OF_ID: 3568569182;
        classType: "request";
        className: "stats.GetMessagePublicForwards";
        channel: TypeInputChannel;
        msgId: MessageIDLike;
        offsetRate: int;
        offsetPeer: EntityLike;
        offsetId: int;
        limit: int;
        fromReader(reader: Reader): GetMessagePublicForwards;
    }

    export interface GetMessageStatsArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether to enable dark theme for graph colors */
        dark?: true;
        /** Channel ID */
        channel: TypeInputChannel;
        /** Message ID */
        msgId: MessageIDLike;
    }

    /**
     * Get <a href="https://corefork.telegram.org/api/stats">message statistics</a><br>
     * @link https://corefork.telegram.org/api/stats
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHAT_ADMIN_REQUIRED"}} You must be an admin in this chat to do this.
     */
    export class GetMessageStats extends Request<Partial<GetMessageStatsArgs>,stats.TypeMessageStats> implements GetMessageStatsArgs {
        CONSTRUCTOR_id: -1226791947;
        SUBCLASS_OF_ID: 2516886306;
        classType: "request";
        className: "stats.GetMessageStats";
        flags: number;
        dark?: true;
        channel: TypeInputChannel;
        msgId: MessageIDLike;
        fromReader(reader: Reader): GetMessageStats;
    }

    type TypeBroadcastStats = BroadcastStats;
    type TypeMegagroupStats = MegagroupStats;
    type TypeMessageStats = MessageStats;
    }

    namespace stickers {
    export interface SuggestedShortNameArgs {
        /** Suggested short name */
        shortName: string;
    }

    /** A suggested short name for a stickerpack<br> */
    export class SuggestedShortName extends VirtualClass<SuggestedShortNameArgs> implements SuggestedShortNameArgs {
        CONSTRUCTOR_id: -2046910401;
        SUBCLASS_OF_ID: 3293203233;
        classType: "constructor";
        className: "stickers.SuggestedShortName";
        shortName: string;
        fromReader(reader: Reader): SuggestedShortName;
    }

    export interface CreateStickerSetArgs {
        /** Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a> */
        flags: number;
        /** Whether this is a mask stickerset */
        masks?: true;
        /** Whether this is an animated stickerset */
        animated?: true;
        /** Stickerset owner */
        userId: TypeInputUser;
        /** Stickerset name, <code>1-64</code> chars */
        title: string;
        /** Sticker set name. Can contain only English letters, digits and underscores. Must end with <em>"</em>by<em><bot username="">"</bot></em> (<em><bot_username></bot_username></em> is case insensitive); 1-64 characters */
        shortName: string;
        /** Thumbnail */
        thumb?: TypeInputDocument;
        /** Stickers */
        stickers: TypeInputStickerSetItem[];
        /** Used when <a href="https://corefork.telegram.org/import-stickers">importing stickers using the sticker import SDKs</a>, specifies the name of the software that created the stickers */
        software?: string;
    }

    /**
     * Create a stickerset, bots only.<br>
     * @throws {{code:400,type:"BOT_MISSING"}} This method can only be run by a bot.
     * @throws {{code:400,type:"PACK_SHORT_NAME_INVALID"}} Short pack name invalid.
     * @throws {{code:400,type:"PACK_SHORT_NAME_OCCUPIED"}} A stickerpack with this name already exists.
     * @throws {{code:400,type:"PACK_TITLE_INVALID"}} The stickerpack title is invalid.
     * @throws {{code:400,type:"PEER_ID_INVALID"}} The provided peer id is invalid.
     * @throws {{code:400,type:"SHORTNAME_OCCUPY_FAILED"}} An internal error occurred.
     * @throws {{code:400,type:"STICKERS_EMPTY"}} No sticker provided.
     * @throws {{code:400,type:"STICKER_EMOJI_INVALID"}} Sticker emoji invalid.
     * @throws {{code:400,type:"STICKER_FILE_INVALID"}} Sticker file invalid.
     * @throws {{code:400,type:"STICKER_PNG_DIMENSIONS"}} Sticker png dimensions invalid.
     * @throws {{code:400,type:"STICKER_PNG_NOPNG"}} One of the specified stickers is not a valid PNG file.
     * @throws {{code:400,type:"STICKER_TGS_NODOC"}} Incorrect document type for sticker.
     * @throws {{code:400,type:"STICKER_TGS_NOTGS"}} Invalid TGS sticker provided.
     * @throws {{code:400,type:"STICKER_THUMB_PNG_NOPNG"}} Incorrect stickerset thumb file provided, PNG / WEBP expected.
     * @throws {{code:400,type:"STICKER_THUMB_TGS_NOTGS"}} Incorrect stickerset TGS thumb file provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class CreateStickerSet extends Request<Partial<CreateStickerSetArgs>,messages.TypeStickerSet> implements CreateStickerSetArgs {
        CONSTRUCTOR_id: -1876841625;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "stickers.CreateStickerSet";
        flags: number;
        masks?: true;
        animated?: true;
        userId: TypeInputUser;
        title: string;
        shortName: string;
        thumb?: TypeInputDocument;
        stickers: TypeInputStickerSetItem[];
        software?: string;
        fromReader(reader: Reader): CreateStickerSet;
    }

    export interface RemoveStickerFromSetArgs {
        /** The sticker to remove */
        sticker: TypeInputDocument;
    }

    /**
     * Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.<br>
     * @throws {{code:400,type:"BOT_MISSING"}} This method can only be run by a bot.
     * @throws {{code:400,type:"STICKER_INVALID"}} The provided sticker is invalid.
     */
    export class RemoveStickerFromSet extends Request<Partial<RemoveStickerFromSetArgs>,messages.TypeStickerSet> implements RemoveStickerFromSetArgs {
        CONSTRUCTOR_id: -143257775;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "stickers.RemoveStickerFromSet";
        sticker: TypeInputDocument;
        fromReader(reader: Reader): RemoveStickerFromSet;
    }

    export interface ChangeStickerPositionArgs {
        /** The sticker */
        sticker: TypeInputDocument;
        /** The new position of the sticker, zero-based */
        position: int;
    }

    /**
     * Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot<br>
     * @throws {{code:400,type:"BOT_MISSING"}} This method can only be run by a bot.
     * @throws {{code:400,type:"STICKER_INVALID"}} The provided sticker is invalid.
     */
    export class ChangeStickerPosition extends Request<Partial<ChangeStickerPositionArgs>,messages.TypeStickerSet> implements ChangeStickerPositionArgs {
        CONSTRUCTOR_id: -4795190;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "stickers.ChangeStickerPosition";
        sticker: TypeInputDocument;
        position: int;
        fromReader(reader: Reader): ChangeStickerPosition;
    }

    export interface AddStickerToSetArgs {
        /** The stickerset */
        stickerset: TypeInputStickerSet;
        /** The sticker */
        sticker: TypeInputStickerSetItem;
    }

    /**
     * Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.<br>
     * @throws {{code:400,type:"BOT_MISSING"}} This method can only be run by a bot.
     * @throws {{code:400,type:"STICKERSET_INVALID"}} The provided sticker set is invalid.
     * @throws {{code:400,type:"STICKER_PNG_NOPNG"}} One of the specified stickers is not a valid PNG file.
     * @throws {{code:400,type:"STICKER_TGS_NOTGS"}} Invalid TGS sticker provided.
     */
    export class AddStickerToSet extends Request<Partial<AddStickerToSetArgs>,messages.TypeStickerSet> implements AddStickerToSetArgs {
        CONSTRUCTOR_id: -2041315650;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "stickers.AddStickerToSet";
        stickerset: TypeInputStickerSet;
        sticker: TypeInputStickerSetItem;
        fromReader(reader: Reader): AddStickerToSet;
    }

    export interface SetStickerSetThumbArgs {
        /** Stickerset */
        stickerset: TypeInputStickerSet;
        /** Thumbnail */
        thumb: TypeInputDocument;
    }

    /**
     * Set stickerset thumbnail<br>
     * @throws {{code:400,type:"STICKERSET_INVALID"}} The provided sticker set is invalid.
     * @throws {{code:400,type:"STICKER_THUMB_PNG_NOPNG"}} Incorrect stickerset thumb file provided, PNG / WEBP expected.
     * @throws {{code:400,type:"STICKER_THUMB_TGS_NOTGS"}} Incorrect stickerset TGS thumb file provided.
     */
    export class SetStickerSetThumb extends Request<Partial<SetStickerSetThumbArgs>,messages.TypeStickerSet> implements SetStickerSetThumbArgs {
        CONSTRUCTOR_id: -1707717072;
        SUBCLASS_OF_ID: 2607827546;
        classType: "request";
        className: "stickers.SetStickerSetThumb";
        stickerset: TypeInputStickerSet;
        thumb: TypeInputDocument;
        fromReader(reader: Reader): SetStickerSetThumb;
    }

    export interface CheckShortNameArgs {
        /** Short name */
        shortName: string;
    }

    /**
     * Check whether the given short name is available<br>
     * @throws {{code:400,type:"SHORT_NAME_INVALID"}} The specified short name is invalid.
     * @throws {{code:400,type:"SHORT_NAME_OCCUPIED"}} The specified short name is already in use.
     */
    export class CheckShortName extends Request<Partial<CheckShortNameArgs>,Bool> implements CheckShortNameArgs {
        CONSTRUCTOR_id: 676017721;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "stickers.CheckShortName";
        shortName: string;
        fromReader(reader: Reader): CheckShortName;
    }

    export interface SuggestShortNameArgs {
        /** Sticker pack name */
        title: string;
    }

    /**
     * Suggests a short name for a given stickerpack name<br>
     * @throws {{code:400,type:"TITLE_INVALID"}} The specified stickerpack title is invalid.
     */
    export class SuggestShortName extends Request<Partial<SuggestShortNameArgs>,stickers.TypeSuggestedShortName> implements SuggestShortNameArgs {
        CONSTRUCTOR_id: 1303364867;
        SUBCLASS_OF_ID: 3293203233;
        classType: "request";
        className: "stickers.SuggestShortName";
        title: string;
        fromReader(reader: Reader): SuggestShortName;
    }

    type TypeSuggestedShortName = SuggestedShortName;
    }

    namespace users {
    export interface GetUsersArgs {
        /** List of user identifiers */
        id: TypeInputUser[];
    }

    /**
     * Returns basic user info according to their identifiers.<br>
     * @throws {{code:401,type:"AUTH_KEY_PERM_EMPTY"}} The temporary auth key must be binded to the permanent auth key to use these methods.
     * @throws {{code:400,type:"CHANNEL_INVALID"}} The provided channel is invalid.
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"CONNECTION_NOT_INITED"}} Connection not initialized.
     * @throws {{code:400,type:"INPUT_LAYER_INVALID"}} The provided layer is invalid.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     */
    export class GetUsers extends Request<Partial<GetUsersArgs>,TypeUser[]> implements GetUsersArgs {
        CONSTRUCTOR_id: 227648840;
        SUBCLASS_OF_ID: 67557965;
        classType: "request";
        className: "users.GetUsers";
        id: TypeInputUser[];
        fromReader(reader: Reader): GetUsers;
    }

    export interface GetFullUserArgs {
        /** User ID */
        id: TypeInputUser;
    }

    /**
     * Returns extended user info by ID.<br>
     * @throws {{code:400,type:"CHANNEL_PRIVATE"}} You haven't joined this channel/supergroup.
     * @throws {{code:400,type:"MSG_ID_INVALID"}} Invalid message ID provided.
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class GetFullUser extends Request<Partial<GetFullUserArgs>,TypeUserFull> implements GetFullUserArgs {
        CONSTRUCTOR_id: -902781519;
        SUBCLASS_OF_ID: 524706233;
        classType: "request";
        className: "users.GetFullUser";
        id: TypeInputUser;
        fromReader(reader: Reader): GetFullUser;
    }

    export interface SetSecureValueErrorsArgs {
        /** The user */
        id: TypeInputUser;
        /** Errors */
        errors: TypeSecureValueError[];
    }

    /**
     * Notify the user that the sent <a href="https://corefork.telegram.org/passport">passport</a> data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).<br>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.<br>
     * @link https://corefork.telegram.org/passport
     * @throws {{code:400,type:"USER_ID_INVALID"}} The provided user ID is invalid.
     */
    export class SetSecureValueErrors extends Request<Partial<SetSecureValueErrorsArgs>,Bool> implements SetSecureValueErrorsArgs {
        CONSTRUCTOR_id: -1865902923;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "users.SetSecureValueErrors";
        id: TypeInputUser;
        errors: TypeSecureValueError[];
        fromReader(reader: Reader): SetSecureValueErrors;
    }
    }

    namespace bots {
    export interface SendCustomRequestArgs {
        /** The method name */
        customMethod: string;
        /** JSON-serialized method parameters */
        params: TypeDataJSON;
    }

    /**
     * Sends a custom request; for bots only<br>
     * @throws {{code:400,type:"METHOD_INVALID"}} The specified method is invalid.
     * @throws {{code:400,type:"USER_BOT_INVALID"}} This method can only be called by a bot.
     */
    export class SendCustomRequest extends Request<Partial<SendCustomRequestArgs>,TypeDataJSON> implements SendCustomRequestArgs {
        CONSTRUCTOR_id: -1440257555;
        SUBCLASS_OF_ID: 2902676200;
        classType: "request";
        className: "bots.SendCustomRequest";
        customMethod: string;
        params: TypeDataJSON;
        fromReader(reader: Reader): SendCustomRequest;
    }

    export interface AnswerWebhookJSONQueryArgs {
        /** Identifier of a custom query */
        queryId: long;
        /** JSON-serialized answer to the query */
        data: TypeDataJSON;
    }

    /**
     * Answers a custom query; for bots only<br>
     * @throws {{code:400,type:"QUERY_ID_INVALID"}} The query ID is invalid.
     * @throws {{code:400,type:"USER_BOT_INVALID"}} This method can only be called by a bot.
     */
    export class AnswerWebhookJSONQuery extends Request<Partial<AnswerWebhookJSONQueryArgs>,Bool> implements AnswerWebhookJSONQueryArgs {
        CONSTRUCTOR_id: -434028723;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "bots.AnswerWebhookJSONQuery";
        queryId: long;
        data: TypeDataJSON;
        fromReader(reader: Reader): AnswerWebhookJSONQuery;
    }

    export interface SetBotCommandsArgs {
        /** Command scope */
        scope: TypeBotCommandScope;
        /** Language code */
        langCode: string;
        /** Bot commands */
        commands: TypeBotCommand[];
    }

    /**
     * Set bot command list<br>
     * @throws {{code:400,type:"BOT_COMMAND_DESCRIPTION_INVALID"}} The specified command description is invalid.
     * @throws {{code:400,type:"BOT_COMMAND_INVALID"}} The specified command is invalid.
     * @throws {{code:400,type:"LANG_CODE_INVALID"}} The specified language code is invalid.
     */
    export class SetBotCommands extends Request<Partial<SetBotCommandsArgs>,Bool> implements SetBotCommandsArgs {
        CONSTRUCTOR_id: 85399130;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "bots.SetBotCommands";
        scope: TypeBotCommandScope;
        langCode: string;
        commands: TypeBotCommand[];
        fromReader(reader: Reader): SetBotCommands;
    }

    export interface ResetBotCommandsArgs {
        /** Command scope */
        scope: TypeBotCommandScope;
        /** Language code */
        langCode: string;
    }

    /** Clear bot commands for the specified bot scope and language code<br> */
    export class ResetBotCommands extends Request<Partial<ResetBotCommandsArgs>,Bool> implements ResetBotCommandsArgs {
        CONSTRUCTOR_id: 1032708345;
        SUBCLASS_OF_ID: 4122188204;
        classType: "request";
        className: "bots.ResetBotCommands";
        scope: TypeBotCommandScope;
        langCode: string;
        fromReader(reader: Reader): ResetBotCommands;
    }

    export interface GetBotCommandsArgs {
        /** Command scope */
        scope: TypeBotCommandScope;
        /** Language code */
        langCode: string;
    }

    /** Obtain a list of bot commands for the specified bot scope and language code<br> */
    export class GetBotCommands extends Request<Partial<GetBotCommandsArgs>,TypeBotCommand[]> implements GetBotCommandsArgs {
        CONSTRUCTOR_id: -481554986;
        SUBCLASS_OF_ID: 4209579305;
        classType: "request";
        className: "bots.GetBotCommands";
        scope: TypeBotCommandScope;
        langCode: string;
        fromReader(reader: Reader): GetBotCommands;
    }
    }

    namespace langpack {
    export interface GetLangPackArgs {
        /** Language pack name */
        langPack: string;
        /** Language code */
        langCode: string;
    }

    /**
     * Get localization pack strings<br>
     * @throws {{code:400,type:"LANG_PACK_INVALID"}} The provided language pack is invalid.
     */
    export class GetLangPack extends Request<Partial<GetLangPackArgs>,TypeLangPackDifference> implements GetLangPackArgs {
        CONSTRUCTOR_id: -219008246;
        SUBCLASS_OF_ID: 1382427989;
        classType: "request";
        className: "langpack.GetLangPack";
        langPack: string;
        langCode: string;
        fromReader(reader: Reader): GetLangPack;
    }

    export interface GetStringsArgs {
        /** Language pack name */
        langPack: string;
        /** Language code */
        langCode: string;
        /** Strings to get */
        keys: string[];
    }

    /**
     * Get strings from a language pack<br>
     * @throws {{code:400,type:"LANG_PACK_INVALID"}} The provided language pack is invalid.
     */
    export class GetStrings extends Request<Partial<GetStringsArgs>,TypeLangPackString[]> implements GetStringsArgs {
        CONSTRUCTOR_id: -269862909;
        SUBCLASS_OF_ID: 3350672701;
        classType: "request";
        className: "langpack.GetStrings";
        langPack: string;
        langCode: string;
        keys: string[];
        fromReader(reader: Reader): GetStrings;
    }

    export interface GetDifferenceArgs {
        /** Language pack */
        langPack: string;
        /** Language code */
        langCode: string;
        /** Previous localization pack version */
        fromVersion: int;
    }

    /**
     * Get new strings in languagepack<br>
     * @throws {{code:400,type:"LANG_PACK_INVALID"}} The provided language pack is invalid.
     */
    export class GetDifference extends Request<Partial<GetDifferenceArgs>,TypeLangPackDifference> implements GetDifferenceArgs {
        CONSTRUCTOR_id: -845657435;
        SUBCLASS_OF_ID: 1382427989;
        classType: "request";
        className: "langpack.GetDifference";
        langPack: string;
        langCode: string;
        fromVersion: int;
        fromReader(reader: Reader): GetDifference;
    }

    export interface GetLanguagesArgs {
        /** Language pack */
        langPack: string;
    }

    /**
     * Get information about all languages in a localization pack<br>
     * @throws {{code:400,type:"LANG_PACK_INVALID"}} The provided language pack is invalid.
     */
    export class GetLanguages extends Request<Partial<GetLanguagesArgs>,TypeLangPackLanguage[]> implements GetLanguagesArgs {
        CONSTRUCTOR_id: 1120311183;
        SUBCLASS_OF_ID: 671683273;
        classType: "request";
        className: "langpack.GetLanguages";
        langPack: string;
        fromReader(reader: Reader): GetLanguages;
    }

    export interface GetLanguageArgs {
        /** Language pack name */
        langPack: string;
        /** Language code */
        langCode: string;
    }

    /** Get information about a language in a localization pack<br> */
    export class GetLanguage extends Request<Partial<GetLanguageArgs>,TypeLangPackLanguage> implements GetLanguageArgs {
        CONSTRUCTOR_id: 1784243458;
        SUBCLASS_OF_ID: 2880211383;
        classType: "request";
        className: "langpack.GetLanguage";
        langPack: string;
        langCode: string;
        fromReader(reader: Reader): GetLanguage;
    }
    }

    namespace folders {
    export interface EditPeerFoldersArgs {
        /** New peer list */
        folderPeers: TypeInputFolderPeer[];
    }

    /**
     * Edit peers in <a href="https://corefork.telegram.org/api/folders#peer-folders">peer folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     * @throws {{code:400,type:"FOLDER_ID_INVALID"}} Invalid folder ID.
     */
    export class EditPeerFolders extends Request<Partial<EditPeerFoldersArgs>,TypeUpdates> implements EditPeerFoldersArgs {
        CONSTRUCTOR_id: 1749536939;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "folders.EditPeerFolders";
        folderPeers: TypeInputFolderPeer[];
        fromReader(reader: Reader): EditPeerFolders;
    }

    export interface DeleteFolderArgs {
        /** <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a> */
        folderId: int;
    }

    /**
     * Delete a <a href="https://corefork.telegram.org/api/folders#peer-folders">peer folder</a><br>
     * @link https://corefork.telegram.org/api/folders
     * @throws {{code:400,type:"FOLDER_ID_EMPTY"}} An empty folder ID was specified.
     */
    export class DeleteFolder extends Request<Partial<DeleteFolderArgs>,TypeUpdates> implements DeleteFolderArgs {
        CONSTRUCTOR_id: 472471681;
        SUBCLASS_OF_ID: 2331323052;
        classType: "request";
        className: "folders.DeleteFolder";
        folderId: int;
        fromReader(reader: Reader): DeleteFolder;
    }
    }
}
