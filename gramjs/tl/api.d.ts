// This file is autogenerated. All changes will be overwritten.

import { BigInteger } from "big-integer";
import { EntityLike, MessageIDLike } from "../define";

export namespace Api {
    type AnyLiteral = Record<string, any> | void;

    type Reader = any; // To be defined.
    type Client = any; // To be defined.
    type Utils = any; // To be defined.

    type X = unknown;
    type Type = unknown;
    type Bool = boolean;
    type int = number;
    type double = number;
    type float = number;
    type int128 = BigInteger;
    type int256 = BigInteger;
    type long = BigInteger;
    type bytes = Buffer;

    class VirtualClass<Args extends AnyLiteral> {
        static CONSTRUCTOR_ID: number;
        static SUBCLASS_OF_ID: number;
        static className: string;
        static classType: "constructor" | "request";

        static serializeBytes(data: Buffer | string): Buffer;
        static serializeDate(date: Date | number): Buffer;

        getBytes(): Buffer;

        CONSTRUCTOR_ID: number;
        SUBCLASS_OF_ID: number;
        className: string;
        classType: "constructor" | "request";

        constructor(args: Args);
    }

    class Request<Args, Response> extends VirtualClass<Partial<Args>> {
        static readResult(reader: Reader): Buffer;
        resolve(client: Client, utils: Utils): Promise<void>;

        __response: Response;
    }

    export class InputPeerEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPeerEmpty;
    }
    export class InputPeerSelf extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPeerSelf;
    }
    export class InputPeerChat extends VirtualClass<{
        chatId: int;
    }> {
        static fromReader(reader: Reader): InputPeerChat;
        chatId: int;
    }
    export class InputPeerUser extends VirtualClass<{
        userId: int;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputPeerUser;
        userId: int;
        accessHash: long;
    }
    export class InputPeerChannel extends VirtualClass<{
        channelId: int;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputPeerChannel;
        channelId: int;
        accessHash: long;
    }
    export class InputPeerUserFromMessage extends VirtualClass<{
        peer: Api.TypeInputPeer;
        msgId: int;
        userId: int;
    }> {
        static fromReader(reader: Reader): InputPeerUserFromMessage;
        peer: Api.TypeInputPeer;
        msgId: int;
        userId: int;
    }
    export class InputPeerChannelFromMessage extends VirtualClass<{
        peer: Api.TypeInputPeer;
        msgId: int;
        channelId: int;
    }> {
        static fromReader(reader: Reader): InputPeerChannelFromMessage;
        peer: Api.TypeInputPeer;
        msgId: int;
        channelId: int;
    }
    export class InputUserEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputUserEmpty;
    }
    export class InputUserSelf extends VirtualClass<void> {
        static fromReader(reader: Reader): InputUserSelf;
    }
    export class InputUser extends VirtualClass<{
        userId: int;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputUser;
        userId: int;
        accessHash: long;
    }
    export class InputUserFromMessage extends VirtualClass<{
        peer: Api.TypeInputPeer;
        msgId: int;
        userId: int;
    }> {
        static fromReader(reader: Reader): InputUserFromMessage;
        peer: Api.TypeInputPeer;
        msgId: int;
        userId: int;
    }
    export class InputPhoneContact extends VirtualClass<{
        clientId: long;
        phone: string;
        firstName: string;
        lastName: string;
    }> {
        static fromReader(reader: Reader): InputPhoneContact;
        clientId: long;
        phone: string;
        firstName: string;
        lastName: string;
    }
    export class InputFile extends VirtualClass<{
        id: long;
        parts: int;
        name: string;
        md5Checksum: string;
    }> {
        static fromReader(reader: Reader): InputFile;
        id: long;
        parts: int;
        name: string;
        md5Checksum: string;
    }
    export class InputFileBig extends VirtualClass<{
        id: long;
        parts: int;
        name: string;
    }> {
        static fromReader(reader: Reader): InputFileBig;
        id: long;
        parts: int;
        name: string;
    }
    export class InputMediaEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMediaEmpty;
    }
    export class InputMediaUploadedPhoto extends VirtualClass<{
        // flags: null;
        file: Api.TypeInputFile;
        stickers?: Api.TypeInputDocument[];
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): InputMediaUploadedPhoto;
        // flags: null;
        file: Api.TypeInputFile;
        stickers?: Api.TypeInputDocument[];
        ttlSeconds?: int;
    }
    export class InputMediaPhoto extends VirtualClass<{
        // flags: null;
        id: Api.TypeInputPhoto;
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): InputMediaPhoto;
        // flags: null;
        id: Api.TypeInputPhoto;
        ttlSeconds?: int;
    }
    export class InputMediaGeoPoint extends VirtualClass<{
        geoPoint: Api.TypeInputGeoPoint;
    }> {
        static fromReader(reader: Reader): InputMediaGeoPoint;
        geoPoint: Api.TypeInputGeoPoint;
    }
    export class InputMediaContact extends VirtualClass<{
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
    }> {
        static fromReader(reader: Reader): InputMediaContact;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
    }
    export class InputMediaUploadedDocument extends VirtualClass<{
        // flags: null;
        nosoundVideo?: boolean;
        forceFile?: boolean;
        file: Api.TypeInputFile;
        thumb?: Api.TypeInputFile;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
        stickers?: Api.TypeInputDocument[];
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): InputMediaUploadedDocument;
        // flags: null;
        nosoundVideo?: boolean;
        forceFile?: boolean;
        file: Api.TypeInputFile;
        thumb?: Api.TypeInputFile;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
        stickers?: Api.TypeInputDocument[];
        ttlSeconds?: int;
    }
    export class InputMediaDocument extends VirtualClass<{
        // flags: null;
        id: Api.TypeInputDocument;
        ttlSeconds?: int;
        query?: string;
    }> {
        static fromReader(reader: Reader): InputMediaDocument;
        // flags: null;
        id: Api.TypeInputDocument;
        ttlSeconds?: int;
        query?: string;
    }
    export class InputMediaVenue extends VirtualClass<{
        geoPoint: Api.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
    }> {
        static fromReader(reader: Reader): InputMediaVenue;
        geoPoint: Api.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
    }
    export class InputMediaPhotoExternal extends VirtualClass<{
        // flags: null;
        url: string;
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): InputMediaPhotoExternal;
        // flags: null;
        url: string;
        ttlSeconds?: int;
    }
    export class InputMediaDocumentExternal extends VirtualClass<{
        // flags: null;
        url: string;
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): InputMediaDocumentExternal;
        // flags: null;
        url: string;
        ttlSeconds?: int;
    }
    export class InputMediaGame extends VirtualClass<{
        id: Api.TypeInputGame;
    }> {
        static fromReader(reader: Reader): InputMediaGame;
        id: Api.TypeInputGame;
    }
    export class InputMediaInvoice extends VirtualClass<{
        // flags: null;
        title: string;
        description: string;
        photo?: Api.TypeInputWebDocument;
        invoice: Api.TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: Api.TypeDataJSON;
        startParam?: string;
    }> {
        static fromReader(reader: Reader): InputMediaInvoice;
        // flags: null;
        title: string;
        description: string;
        photo?: Api.TypeInputWebDocument;
        invoice: Api.TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: Api.TypeDataJSON;
        startParam?: string;
    }
    export class InputMediaGeoLive extends VirtualClass<{
        // flags: null;
        stopped?: boolean;
        geoPoint: Api.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
    }> {
        static fromReader(reader: Reader): InputMediaGeoLive;
        // flags: null;
        stopped?: boolean;
        geoPoint: Api.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
    }
    export class InputMediaPoll extends VirtualClass<{
        // flags: null;
        poll: Api.TypePoll;
        correctAnswers?: bytes[];
        solution?: string;
        solutionEntities?: Api.TypeMessageEntity[];
    }> {
        static fromReader(reader: Reader): InputMediaPoll;
        // flags: null;
        poll: Api.TypePoll;
        correctAnswers?: bytes[];
        solution?: string;
        solutionEntities?: Api.TypeMessageEntity[];
    }
    export class InputMediaDice extends VirtualClass<{
        emoticon: string;
    }> {
        static fromReader(reader: Reader): InputMediaDice;
        emoticon: string;
    }
    export class InputChatPhotoEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputChatPhotoEmpty;
    }
    export class InputChatUploadedPhoto extends VirtualClass<{
        // flags: null;
        file?: Api.TypeInputFile;
        video?: Api.TypeInputFile;
        videoStartTs?: double;
    }> {
        static fromReader(reader: Reader): InputChatUploadedPhoto;
        // flags: null;
        file?: Api.TypeInputFile;
        video?: Api.TypeInputFile;
        videoStartTs?: double;
    }
    export class InputChatPhoto extends VirtualClass<{
        id: Api.TypeInputPhoto;
    }> {
        static fromReader(reader: Reader): InputChatPhoto;
        id: Api.TypeInputPhoto;
    }
    export class InputGeoPointEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputGeoPointEmpty;
    }
    export class InputGeoPoint extends VirtualClass<{
        // flags: null;
        lat: double;
        long: double;
        accuracyRadius?: int;
    }> {
        static fromReader(reader: Reader): InputGeoPoint;
        // flags: null;
        lat: double;
        long: double;
        accuracyRadius?: int;
    }
    export class InputPhotoEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPhotoEmpty;
    }
    export class InputPhoto extends VirtualClass<{
        id: long;
        accessHash: long;
        fileReference: bytes;
    }> {
        static fromReader(reader: Reader): InputPhoto;
        id: long;
        accessHash: long;
        fileReference: bytes;
    }
    export class InputFileLocation extends VirtualClass<{
        volumeId: long;
        localId: int;
        secret: long;
        fileReference: bytes;
    }> {
        static fromReader(reader: Reader): InputFileLocation;
        volumeId: long;
        localId: int;
        secret: long;
        fileReference: bytes;
    }
    export class InputEncryptedFileLocation extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputEncryptedFileLocation;
        id: long;
        accessHash: long;
    }
    export class InputDocumentFileLocation extends VirtualClass<{
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
    }> {
        static fromReader(reader: Reader): InputDocumentFileLocation;
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
    }
    export class InputSecureFileLocation extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputSecureFileLocation;
        id: long;
        accessHash: long;
    }
    export class InputTakeoutFileLocation extends VirtualClass<void> {
        static fromReader(reader: Reader): InputTakeoutFileLocation;
    }
    export class InputPhotoFileLocation extends VirtualClass<{
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
    }> {
        static fromReader(reader: Reader): InputPhotoFileLocation;
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
    }
    export class InputPhotoLegacyFileLocation extends VirtualClass<{
        id: long;
        accessHash: long;
        fileReference: bytes;
        volumeId: long;
        localId: int;
        secret: long;
    }> {
        static fromReader(reader: Reader): InputPhotoLegacyFileLocation;
        id: long;
        accessHash: long;
        fileReference: bytes;
        volumeId: long;
        localId: int;
        secret: long;
    }
    export class InputPeerPhotoFileLocation extends VirtualClass<{
        // flags: null;
        big?: boolean;
        peer: Api.TypeInputPeer;
        photoId: long;
    }> {
        static fromReader(reader: Reader): InputPeerPhotoFileLocation;
        // flags: null;
        big?: boolean;
        peer: Api.TypeInputPeer;
        photoId: long;
    }
    export class InputStickerSetThumb extends VirtualClass<{
        stickerset: Api.TypeInputStickerSet;
        thumbVersion: int;
    }> {
        static fromReader(reader: Reader): InputStickerSetThumb;
        stickerset: Api.TypeInputStickerSet;
        thumbVersion: int;
    }
    export class InputGroupCallStream extends VirtualClass<{
        call: Api.TypeInputGroupCall;
        timeMs: long;
        scale: int;
    }> {
        static fromReader(reader: Reader): InputGroupCallStream;
        call: Api.TypeInputGroupCall;
        timeMs: long;
        scale: int;
    }
    export class PeerUser extends VirtualClass<{
        userId: int;
    }> {
        static fromReader(reader: Reader): PeerUser;
        userId: int;
    }
    export class PeerChat extends VirtualClass<{
        chatId: int;
    }> {
        static fromReader(reader: Reader): PeerChat;
        chatId: int;
    }
    export class PeerChannel extends VirtualClass<{
        channelId: int;
    }> {
        static fromReader(reader: Reader): PeerChannel;
        channelId: int;
    }
    export class UserEmpty extends VirtualClass<{
        id: int;
    }> {
        static fromReader(reader: Reader): UserEmpty;
        id: int;
    }
    export class User extends VirtualClass<{
        // flags: null;
        self?: boolean;
        contact?: boolean;
        mutualContact?: boolean;
        deleted?: boolean;
        bot?: boolean;
        botChatHistory?: boolean;
        botNochats?: boolean;
        verified?: boolean;
        restricted?: boolean;
        min?: boolean;
        botInlineGeo?: boolean;
        support?: boolean;
        scam?: boolean;
        applyMinPhoto?: boolean;
        fake?: boolean;
        id: int;
        accessHash?: long;
        firstName?: string;
        lastName?: string;
        username?: string;
        phone?: string;
        photo?: Api.TypeUserProfilePhoto;
        status?: Api.TypeUserStatus;
        botInfoVersion?: int;
        restrictionReason?: Api.TypeRestrictionReason[];
        botInlinePlaceholder?: string;
        langCode?: string;
    }> {
        static fromReader(reader: Reader): User;
        // flags: null;
        self?: boolean;
        contact?: boolean;
        mutualContact?: boolean;
        deleted?: boolean;
        bot?: boolean;
        botChatHistory?: boolean;
        botNochats?: boolean;
        verified?: boolean;
        restricted?: boolean;
        min?: boolean;
        botInlineGeo?: boolean;
        support?: boolean;
        scam?: boolean;
        applyMinPhoto?: boolean;
        fake?: boolean;
        id: int;
        accessHash?: long;
        firstName?: string;
        lastName?: string;
        username?: string;
        phone?: string;
        photo?: Api.TypeUserProfilePhoto;
        status?: Api.TypeUserStatus;
        botInfoVersion?: int;
        restrictionReason?: Api.TypeRestrictionReason[];
        botInlinePlaceholder?: string;
        langCode?: string;
    }
    export class UserProfilePhotoEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): UserProfilePhotoEmpty;
    }
    export class UserProfilePhoto extends VirtualClass<{
        // flags: null;
        hasVideo?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
    }> {
        static fromReader(reader: Reader): UserProfilePhoto;
        // flags: null;
        hasVideo?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
    }
    export class UserStatusEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): UserStatusEmpty;
    }
    export class UserStatusOnline extends VirtualClass<{
        expires: int;
    }> {
        static fromReader(reader: Reader): UserStatusOnline;
        expires: int;
    }
    export class UserStatusOffline extends VirtualClass<{
        wasOnline: int;
    }> {
        static fromReader(reader: Reader): UserStatusOffline;
        wasOnline: int;
    }
    export class UserStatusRecently extends VirtualClass<void> {
        static fromReader(reader: Reader): UserStatusRecently;
    }
    export class UserStatusLastWeek extends VirtualClass<void> {
        static fromReader(reader: Reader): UserStatusLastWeek;
    }
    export class UserStatusLastMonth extends VirtualClass<void> {
        static fromReader(reader: Reader): UserStatusLastMonth;
    }
    export class ChatEmpty extends VirtualClass<{
        id: int;
    }> {
        static fromReader(reader: Reader): ChatEmpty;
        id: int;
    }
    export class Chat extends VirtualClass<{
        // flags: null;
        creator?: boolean;
        kicked?: boolean;
        left?: boolean;
        deactivated?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        id: int;
        title: string;
        photo: Api.TypeChatPhoto;
        participantsCount: int;
        date: int;
        version: int;
        migratedTo?: Api.TypeInputChannel;
        adminRights?: Api.TypeChatAdminRights;
        defaultBannedRights?: Api.TypeChatBannedRights;
    }> {
        static fromReader(reader: Reader): Chat;
        // flags: null;
        creator?: boolean;
        kicked?: boolean;
        left?: boolean;
        deactivated?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        id: int;
        title: string;
        photo: Api.TypeChatPhoto;
        participantsCount: int;
        date: int;
        version: int;
        migratedTo?: Api.TypeInputChannel;
        adminRights?: Api.TypeChatAdminRights;
        defaultBannedRights?: Api.TypeChatBannedRights;
    }
    export class ChatForbidden extends VirtualClass<{
        id: int;
        title: string;
    }> {
        static fromReader(reader: Reader): ChatForbidden;
        id: int;
        title: string;
    }
    export class Channel extends VirtualClass<{
        // flags: null;
        creator?: boolean;
        left?: boolean;
        broadcast?: boolean;
        verified?: boolean;
        megagroup?: boolean;
        restricted?: boolean;
        signatures?: boolean;
        min?: boolean;
        scam?: boolean;
        hasLink?: boolean;
        hasGeo?: boolean;
        slowmodeEnabled?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        fake?: boolean;
        gigagroup?: boolean;
        id: int;
        accessHash?: long;
        title: string;
        username?: string;
        photo: Api.TypeChatPhoto;
        date: int;
        version: int;
        restrictionReason?: Api.TypeRestrictionReason[];
        adminRights?: Api.TypeChatAdminRights;
        bannedRights?: Api.TypeChatBannedRights;
        defaultBannedRights?: Api.TypeChatBannedRights;
        participantsCount?: int;
    }> {
        static fromReader(reader: Reader): Channel;
        // flags: null;
        creator?: boolean;
        left?: boolean;
        broadcast?: boolean;
        verified?: boolean;
        megagroup?: boolean;
        restricted?: boolean;
        signatures?: boolean;
        min?: boolean;
        scam?: boolean;
        hasLink?: boolean;
        hasGeo?: boolean;
        slowmodeEnabled?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        fake?: boolean;
        gigagroup?: boolean;
        id: int;
        accessHash?: long;
        title: string;
        username?: string;
        photo: Api.TypeChatPhoto;
        date: int;
        version: int;
        restrictionReason?: Api.TypeRestrictionReason[];
        adminRights?: Api.TypeChatAdminRights;
        bannedRights?: Api.TypeChatBannedRights;
        defaultBannedRights?: Api.TypeChatBannedRights;
        participantsCount?: int;
    }
    export class ChannelForbidden extends VirtualClass<{
        // flags: null;
        broadcast?: boolean;
        megagroup?: boolean;
        id: int;
        accessHash: long;
        title: string;
        untilDate?: int;
    }> {
        static fromReader(reader: Reader): ChannelForbidden;
        // flags: null;
        broadcast?: boolean;
        megagroup?: boolean;
        id: int;
        accessHash: long;
        title: string;
        untilDate?: int;
    }
    export class ChatFull extends VirtualClass<{
        // flags: null;
        canSetUsername?: boolean;
        hasScheduled?: boolean;
        id: int;
        about: string;
        participants: Api.TypeChatParticipants;
        chatPhoto?: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        exportedInvite?: Api.TypeExportedChatInvite;
        botInfo?: Api.TypeBotInfo[];
        pinnedMsgId?: int;
        folderId?: int;
        call?: Api.TypeInputGroupCall;
        ttlPeriod?: int;
        groupcallDefaultJoinAs?: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): ChatFull;
        // flags: null;
        canSetUsername?: boolean;
        hasScheduled?: boolean;
        id: int;
        about: string;
        participants: Api.TypeChatParticipants;
        chatPhoto?: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        exportedInvite?: Api.TypeExportedChatInvite;
        botInfo?: Api.TypeBotInfo[];
        pinnedMsgId?: int;
        folderId?: int;
        call?: Api.TypeInputGroupCall;
        ttlPeriod?: int;
        groupcallDefaultJoinAs?: Api.TypePeer;
    }
    export class ChannelFull extends VirtualClass<{
        // flags: null;
        canViewParticipants?: boolean;
        canSetUsername?: boolean;
        canSetStickers?: boolean;
        hiddenPrehistory?: boolean;
        canSetLocation?: boolean;
        hasScheduled?: boolean;
        canViewStats?: boolean;
        blocked?: boolean;
        id: int;
        about: string;
        participantsCount?: int;
        adminsCount?: int;
        kickedCount?: int;
        bannedCount?: int;
        onlineCount?: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        chatPhoto: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        exportedInvite?: Api.TypeExportedChatInvite;
        botInfo: Api.TypeBotInfo[];
        migratedFromChatId?: int;
        migratedFromMaxId?: int;
        pinnedMsgId?: int;
        stickerset?: Api.TypeStickerSet;
        availableMinId?: int;
        folderId?: int;
        linkedChatId?: int;
        location?: Api.TypeChannelLocation;
        slowmodeSeconds?: int;
        slowmodeNextSendDate?: int;
        statsDc?: int;
        pts: int;
        call?: Api.TypeInputGroupCall;
        ttlPeriod?: int;
        pendingSuggestions?: string[];
        groupcallDefaultJoinAs?: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): ChannelFull;
        // flags: null;
        canViewParticipants?: boolean;
        canSetUsername?: boolean;
        canSetStickers?: boolean;
        hiddenPrehistory?: boolean;
        canSetLocation?: boolean;
        hasScheduled?: boolean;
        canViewStats?: boolean;
        blocked?: boolean;
        id: int;
        about: string;
        participantsCount?: int;
        adminsCount?: int;
        kickedCount?: int;
        bannedCount?: int;
        onlineCount?: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        chatPhoto: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        exportedInvite?: Api.TypeExportedChatInvite;
        botInfo: Api.TypeBotInfo[];
        migratedFromChatId?: int;
        migratedFromMaxId?: int;
        pinnedMsgId?: int;
        stickerset?: Api.TypeStickerSet;
        availableMinId?: int;
        folderId?: int;
        linkedChatId?: int;
        location?: Api.TypeChannelLocation;
        slowmodeSeconds?: int;
        slowmodeNextSendDate?: int;
        statsDc?: int;
        pts: int;
        call?: Api.TypeInputGroupCall;
        ttlPeriod?: int;
        pendingSuggestions?: string[];
        groupcallDefaultJoinAs?: Api.TypePeer;
    }
    export class ChatParticipant extends VirtualClass<{
        userId: int;
        inviterId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): ChatParticipant;
        userId: int;
        inviterId: int;
        date: int;
    }
    export class ChatParticipantCreator extends VirtualClass<{
        userId: int;
    }> {
        static fromReader(reader: Reader): ChatParticipantCreator;
        userId: int;
    }
    export class ChatParticipantAdmin extends VirtualClass<{
        userId: int;
        inviterId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): ChatParticipantAdmin;
        userId: int;
        inviterId: int;
        date: int;
    }
    export class ChatParticipantsForbidden extends VirtualClass<{
        // flags: null;
        chatId: int;
        selfParticipant?: Api.TypeChatParticipant;
    }> {
        static fromReader(reader: Reader): ChatParticipantsForbidden;
        // flags: null;
        chatId: int;
        selfParticipant?: Api.TypeChatParticipant;
    }
    export class ChatParticipants extends VirtualClass<{
        chatId: int;
        participants: Api.TypeChatParticipant[];
        version: int;
    }> {
        static fromReader(reader: Reader): ChatParticipants;
        chatId: int;
        participants: Api.TypeChatParticipant[];
        version: int;
    }
    export class ChatPhotoEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): ChatPhotoEmpty;
    }
    export class ChatPhoto extends VirtualClass<{
        // flags: null;
        hasVideo?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
    }> {
        static fromReader(reader: Reader): ChatPhoto;
        // flags: null;
        hasVideo?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
    }
    export class MessageEmpty extends VirtualClass<{
        // flags: null;
        id: int;
        peerId?: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): MessageEmpty;
        // flags: null;
        id: int;
        peerId?: Api.TypePeer;
    }
    export class Message extends VirtualClass<{
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        fromScheduled?: boolean;
        legacy?: boolean;
        editHide?: boolean;
        pinned?: boolean;
        id: int;
        fromId?: Api.TypePeer;
        peerId: Api.TypePeer;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        date: int;
        message: string;
        media?: Api.TypeMessageMedia;
        replyMarkup?: Api.TypeReplyMarkup;
        entities?: Api.TypeMessageEntity[];
        views?: int;
        forwards?: int;
        replies?: Api.TypeMessageReplies;
        editDate?: int;
        postAuthor?: string;
        groupedId?: long;
        restrictionReason?: Api.TypeRestrictionReason[];
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): Message;
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        fromScheduled?: boolean;
        legacy?: boolean;
        editHide?: boolean;
        pinned?: boolean;
        id: int;
        fromId?: Api.TypePeer;
        peerId: Api.TypePeer;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        date: int;
        message: string;
        media?: Api.TypeMessageMedia;
        replyMarkup?: Api.TypeReplyMarkup;
        entities?: Api.TypeMessageEntity[];
        views?: int;
        forwards?: int;
        replies?: Api.TypeMessageReplies;
        editDate?: int;
        postAuthor?: string;
        groupedId?: long;
        restrictionReason?: Api.TypeRestrictionReason[];
        ttlPeriod?: int;
    }
    export class MessageService extends VirtualClass<{
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        legacy?: boolean;
        id: int;
        fromId?: Api.TypePeer;
        peerId: Api.TypePeer;
        replyTo?: Api.TypeMessageReplyHeader;
        date: int;
        action: Api.TypeMessageAction;
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): MessageService;
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        legacy?: boolean;
        id: int;
        fromId?: Api.TypePeer;
        peerId: Api.TypePeer;
        replyTo?: Api.TypeMessageReplyHeader;
        date: int;
        action: Api.TypeMessageAction;
        ttlPeriod?: int;
    }
    export class MessageMediaEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageMediaEmpty;
    }
    export class MessageMediaPhoto extends VirtualClass<{
        // flags: null;
        photo?: Api.TypePhoto;
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): MessageMediaPhoto;
        // flags: null;
        photo?: Api.TypePhoto;
        ttlSeconds?: int;
    }
    export class MessageMediaGeo extends VirtualClass<{
        geo: Api.TypeGeoPoint;
    }> {
        static fromReader(reader: Reader): MessageMediaGeo;
        geo: Api.TypeGeoPoint;
    }
    export class MessageMediaContact extends VirtualClass<{
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        userId: int;
    }> {
        static fromReader(reader: Reader): MessageMediaContact;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        userId: int;
    }
    export class MessageMediaUnsupported extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageMediaUnsupported;
    }
    export class MessageMediaDocument extends VirtualClass<{
        // flags: null;
        document?: Api.TypeDocument;
        ttlSeconds?: int;
    }> {
        static fromReader(reader: Reader): MessageMediaDocument;
        // flags: null;
        document?: Api.TypeDocument;
        ttlSeconds?: int;
    }
    export class MessageMediaWebPage extends VirtualClass<{
        webpage: Api.TypeWebPage;
    }> {
        static fromReader(reader: Reader): MessageMediaWebPage;
        webpage: Api.TypeWebPage;
    }
    export class MessageMediaVenue extends VirtualClass<{
        geo: Api.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
    }> {
        static fromReader(reader: Reader): MessageMediaVenue;
        geo: Api.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
    }
    export class MessageMediaGame extends VirtualClass<{
        game: Api.TypeGame;
    }> {
        static fromReader(reader: Reader): MessageMediaGame;
        game: Api.TypeGame;
    }
    export class MessageMediaInvoice extends VirtualClass<{
        // flags: null;
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Api.TypeWebDocument;
        receiptMsgId?: int;
        currency: string;
        totalAmount: long;
        startParam: string;
    }> {
        static fromReader(reader: Reader): MessageMediaInvoice;
        // flags: null;
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Api.TypeWebDocument;
        receiptMsgId?: int;
        currency: string;
        totalAmount: long;
        startParam: string;
    }
    export class MessageMediaGeoLive extends VirtualClass<{
        // flags: null;
        geo: Api.TypeGeoPoint;
        heading?: int;
        period: int;
        proximityNotificationRadius?: int;
    }> {
        static fromReader(reader: Reader): MessageMediaGeoLive;
        // flags: null;
        geo: Api.TypeGeoPoint;
        heading?: int;
        period: int;
        proximityNotificationRadius?: int;
    }
    export class MessageMediaPoll extends VirtualClass<{
        poll: Api.TypePoll;
        results: Api.TypePollResults;
    }> {
        static fromReader(reader: Reader): MessageMediaPoll;
        poll: Api.TypePoll;
        results: Api.TypePollResults;
    }
    export class MessageMediaDice extends VirtualClass<{
        value: int;
        emoticon: string;
    }> {
        static fromReader(reader: Reader): MessageMediaDice;
        value: int;
        emoticon: string;
    }
    export class MessageActionEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionEmpty;
    }
    export class MessageActionChatCreate extends VirtualClass<{
        title: string;
        users: int[];
    }> {
        static fromReader(reader: Reader): MessageActionChatCreate;
        title: string;
        users: int[];
    }
    export class MessageActionChatEditTitle extends VirtualClass<{
        title: string;
    }> {
        static fromReader(reader: Reader): MessageActionChatEditTitle;
        title: string;
    }
    export class MessageActionChatEditPhoto extends VirtualClass<{
        photo: Api.TypePhoto;
    }> {
        static fromReader(reader: Reader): MessageActionChatEditPhoto;
        photo: Api.TypePhoto;
    }
    export class MessageActionChatDeletePhoto extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionChatDeletePhoto;
    }
    export class MessageActionChatAddUser extends VirtualClass<{
        users: int[];
    }> {
        static fromReader(reader: Reader): MessageActionChatAddUser;
        users: int[];
    }
    export class MessageActionChatDeleteUser extends VirtualClass<{
        userId: int;
    }> {
        static fromReader(reader: Reader): MessageActionChatDeleteUser;
        userId: int;
    }
    export class MessageActionChatJoinedByLink extends VirtualClass<{
        inviterId: int;
    }> {
        static fromReader(reader: Reader): MessageActionChatJoinedByLink;
        inviterId: int;
    }
    export class MessageActionChannelCreate extends VirtualClass<{
        title: string;
    }> {
        static fromReader(reader: Reader): MessageActionChannelCreate;
        title: string;
    }
    export class MessageActionChatMigrateTo extends VirtualClass<{
        channelId: int;
    }> {
        static fromReader(reader: Reader): MessageActionChatMigrateTo;
        channelId: int;
    }
    export class MessageActionChannelMigrateFrom extends VirtualClass<{
        title: string;
        chatId: int;
    }> {
        static fromReader(reader: Reader): MessageActionChannelMigrateFrom;
        title: string;
        chatId: int;
    }
    export class MessageActionPinMessage extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionPinMessage;
    }
    export class MessageActionHistoryClear extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionHistoryClear;
    }
    export class MessageActionGameScore extends VirtualClass<{
        gameId: long;
        score: int;
    }> {
        static fromReader(reader: Reader): MessageActionGameScore;
        gameId: long;
        score: int;
    }
    export class MessageActionPaymentSentMe extends VirtualClass<{
        // flags: null;
        currency: string;
        totalAmount: long;
        payload: bytes;
        info?: Api.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        charge: Api.TypePaymentCharge;
    }> {
        static fromReader(reader: Reader): MessageActionPaymentSentMe;
        // flags: null;
        currency: string;
        totalAmount: long;
        payload: bytes;
        info?: Api.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        charge: Api.TypePaymentCharge;
    }
    export class MessageActionPaymentSent extends VirtualClass<{
        currency: string;
        totalAmount: long;
    }> {
        static fromReader(reader: Reader): MessageActionPaymentSent;
        currency: string;
        totalAmount: long;
    }
    export class MessageActionPhoneCall extends VirtualClass<{
        // flags: null;
        video?: boolean;
        callId: long;
        reason?: Api.TypePhoneCallDiscardReason;
        duration?: int;
    }> {
        static fromReader(reader: Reader): MessageActionPhoneCall;
        // flags: null;
        video?: boolean;
        callId: long;
        reason?: Api.TypePhoneCallDiscardReason;
        duration?: int;
    }
    export class MessageActionScreenshotTaken extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionScreenshotTaken;
    }
    export class MessageActionCustomAction extends VirtualClass<{
        message: string;
    }> {
        static fromReader(reader: Reader): MessageActionCustomAction;
        message: string;
    }
    export class MessageActionBotAllowed extends VirtualClass<{
        domain: string;
    }> {
        static fromReader(reader: Reader): MessageActionBotAllowed;
        domain: string;
    }
    export class MessageActionSecureValuesSentMe extends VirtualClass<{
        values: Api.TypeSecureValue[];
        credentials: Api.TypeSecureCredentialsEncrypted;
    }> {
        static fromReader(reader: Reader): MessageActionSecureValuesSentMe;
        values: Api.TypeSecureValue[];
        credentials: Api.TypeSecureCredentialsEncrypted;
    }
    export class MessageActionSecureValuesSent extends VirtualClass<{
        types: Api.TypeSecureValueType[];
    }> {
        static fromReader(reader: Reader): MessageActionSecureValuesSent;
        types: Api.TypeSecureValueType[];
    }
    export class MessageActionContactSignUp extends VirtualClass<void> {
        static fromReader(reader: Reader): MessageActionContactSignUp;
    }
    export class MessageActionGeoProximityReached extends VirtualClass<{
        fromId: Api.TypePeer;
        toId: Api.TypePeer;
        distance: int;
    }> {
        static fromReader(reader: Reader): MessageActionGeoProximityReached;
        fromId: Api.TypePeer;
        toId: Api.TypePeer;
        distance: int;
    }
    export class MessageActionGroupCall extends VirtualClass<{
        // flags: null;
        call: Api.TypeInputGroupCall;
        duration?: int;
    }> {
        static fromReader(reader: Reader): MessageActionGroupCall;
        // flags: null;
        call: Api.TypeInputGroupCall;
        duration?: int;
    }
    export class MessageActionInviteToGroupCall extends VirtualClass<{
        call: Api.TypeInputGroupCall;
        users: int[];
    }> {
        static fromReader(reader: Reader): MessageActionInviteToGroupCall;
        call: Api.TypeInputGroupCall;
        users: int[];
    }
    export class MessageActionSetMessagesTTL extends VirtualClass<{
        period: int;
    }> {
        static fromReader(reader: Reader): MessageActionSetMessagesTTL;
        period: int;
    }
    export class MessageActionGroupCallScheduled extends VirtualClass<{
        call: Api.TypeInputGroupCall;
        scheduleDate: int;
    }> {
        static fromReader(reader: Reader): MessageActionGroupCallScheduled;
        call: Api.TypeInputGroupCall;
        scheduleDate: int;
    }
    export class Dialog extends VirtualClass<{
        // flags: null;
        pinned?: boolean;
        unreadMark?: boolean;
        peer: Api.TypePeer;
        topMessage: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        unreadMentionsCount: int;
        notifySettings: Api.TypePeerNotifySettings;
        pts?: int;
        draft?: Api.TypeDraftMessage;
        folderId?: int;
    }> {
        static fromReader(reader: Reader): Dialog;
        // flags: null;
        pinned?: boolean;
        unreadMark?: boolean;
        peer: Api.TypePeer;
        topMessage: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        unreadMentionsCount: int;
        notifySettings: Api.TypePeerNotifySettings;
        pts?: int;
        draft?: Api.TypeDraftMessage;
        folderId?: int;
    }
    export class DialogFolder extends VirtualClass<{
        // flags: null;
        pinned?: boolean;
        folder: Api.TypeFolder;
        peer: Api.TypePeer;
        topMessage: int;
        unreadMutedPeersCount: int;
        unreadUnmutedPeersCount: int;
        unreadMutedMessagesCount: int;
        unreadUnmutedMessagesCount: int;
    }> {
        static fromReader(reader: Reader): DialogFolder;
        // flags: null;
        pinned?: boolean;
        folder: Api.TypeFolder;
        peer: Api.TypePeer;
        topMessage: int;
        unreadMutedPeersCount: int;
        unreadUnmutedPeersCount: int;
        unreadMutedMessagesCount: int;
        unreadUnmutedMessagesCount: int;
    }
    export class PhotoEmpty extends VirtualClass<{
        id: long;
    }> {
        static fromReader(reader: Reader): PhotoEmpty;
        id: long;
    }
    export class Photo extends VirtualClass<{
        // flags: null;
        hasStickers?: boolean;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        sizes: Api.TypePhotoSize[];
        videoSizes?: Api.TypeVideoSize[];
        dcId: int;
    }> {
        static fromReader(reader: Reader): Photo;
        // flags: null;
        hasStickers?: boolean;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        sizes: Api.TypePhotoSize[];
        videoSizes?: Api.TypeVideoSize[];
        dcId: int;
    }
    export class PhotoSizeEmpty extends VirtualClass<{
        type: string;
    }> {
        static fromReader(reader: Reader): PhotoSizeEmpty;
        type: string;
    }
    export class PhotoSize extends VirtualClass<{
        type: string;
        w: int;
        h: int;
        size: int;
    }> {
        static fromReader(reader: Reader): PhotoSize;
        type: string;
        w: int;
        h: int;
        size: int;
    }
    export class PhotoCachedSize extends VirtualClass<{
        type: string;
        w: int;
        h: int;
        bytes: bytes;
    }> {
        static fromReader(reader: Reader): PhotoCachedSize;
        type: string;
        w: int;
        h: int;
        bytes: bytes;
    }
    export class PhotoStrippedSize extends VirtualClass<{
        type: string;
        bytes: bytes;
    }> {
        static fromReader(reader: Reader): PhotoStrippedSize;
        type: string;
        bytes: bytes;
    }
    export class PhotoSizeProgressive extends VirtualClass<{
        type: string;
        w: int;
        h: int;
        sizes: int[];
    }> {
        static fromReader(reader: Reader): PhotoSizeProgressive;
        type: string;
        w: int;
        h: int;
        sizes: int[];
    }
    export class PhotoPathSize extends VirtualClass<{
        type: string;
        bytes: bytes;
    }> {
        static fromReader(reader: Reader): PhotoPathSize;
        type: string;
        bytes: bytes;
    }
    export class GeoPointEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): GeoPointEmpty;
    }
    export class GeoPoint extends VirtualClass<{
        // flags: null;
        long: double;
        lat: double;
        accessHash: long;
        accuracyRadius?: int;
    }> {
        static fromReader(reader: Reader): GeoPoint;
        // flags: null;
        long: double;
        lat: double;
        accessHash: long;
        accuracyRadius?: int;
    }
    export class InputNotifyPeer extends VirtualClass<{
        peer: Api.TypeInputPeer;
    }> {
        static fromReader(reader: Reader): InputNotifyPeer;
        peer: Api.TypeInputPeer;
    }
    export class InputNotifyUsers extends VirtualClass<void> {
        static fromReader(reader: Reader): InputNotifyUsers;
    }
    export class InputNotifyChats extends VirtualClass<void> {
        static fromReader(reader: Reader): InputNotifyChats;
    }
    export class InputNotifyBroadcasts extends VirtualClass<void> {
        static fromReader(reader: Reader): InputNotifyBroadcasts;
    }
    export class InputPeerNotifySettings extends VirtualClass<{
        // flags: null;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
    }> {
        static fromReader(reader: Reader): InputPeerNotifySettings;
        // flags: null;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
    }
    export class PeerNotifySettings extends VirtualClass<{
        // flags: null;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
    }> {
        static fromReader(reader: Reader): PeerNotifySettings;
        // flags: null;
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: string;
    }
    export class PeerSettings extends VirtualClass<{
        // flags: null;
        reportSpam?: boolean;
        addContact?: boolean;
        blockContact?: boolean;
        shareContact?: boolean;
        needContactsException?: boolean;
        reportGeo?: boolean;
        autoarchived?: boolean;
        inviteMembers?: boolean;
        geoDistance?: int;
    }> {
        static fromReader(reader: Reader): PeerSettings;
        // flags: null;
        reportSpam?: boolean;
        addContact?: boolean;
        blockContact?: boolean;
        shareContact?: boolean;
        needContactsException?: boolean;
        reportGeo?: boolean;
        autoarchived?: boolean;
        inviteMembers?: boolean;
        geoDistance?: int;
    }
    export class WallPaper extends VirtualClass<{
        id: long;
        // flags: null;
        creator?: boolean;
        default?: boolean;
        pattern?: boolean;
        dark?: boolean;
        accessHash: long;
        slug: string;
        document: Api.TypeDocument;
        settings?: Api.TypeWallPaperSettings;
    }> {
        static fromReader(reader: Reader): WallPaper;
        id: long;
        // flags: null;
        creator?: boolean;
        default?: boolean;
        pattern?: boolean;
        dark?: boolean;
        accessHash: long;
        slug: string;
        document: Api.TypeDocument;
        settings?: Api.TypeWallPaperSettings;
    }
    export class WallPaperNoFile extends VirtualClass<{
        id: long;
        // flags: null;
        default?: boolean;
        dark?: boolean;
        settings?: Api.TypeWallPaperSettings;
    }> {
        static fromReader(reader: Reader): WallPaperNoFile;
        id: long;
        // flags: null;
        default?: boolean;
        dark?: boolean;
        settings?: Api.TypeWallPaperSettings;
    }
    export class InputReportReasonSpam extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonSpam;
    }
    export class InputReportReasonViolence extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonViolence;
    }
    export class InputReportReasonPornography extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonPornography;
    }
    export class InputReportReasonChildAbuse extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonChildAbuse;
    }
    export class InputReportReasonOther extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonOther;
    }
    export class InputReportReasonCopyright extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonCopyright;
    }
    export class InputReportReasonGeoIrrelevant extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonGeoIrrelevant;
    }
    export class InputReportReasonFake extends VirtualClass<void> {
        static fromReader(reader: Reader): InputReportReasonFake;
    }
    export class UserFull extends VirtualClass<{
        // flags: null;
        blocked?: boolean;
        phoneCallsAvailable?: boolean;
        phoneCallsPrivate?: boolean;
        canPinMessage?: boolean;
        hasScheduled?: boolean;
        videoCallsAvailable?: boolean;
        user: Api.TypeUser;
        about?: string;
        settings: Api.TypePeerSettings;
        profilePhoto?: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        botInfo?: Api.TypeBotInfo;
        pinnedMsgId?: int;
        commonChatsCount: int;
        folderId?: int;
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): UserFull;
        // flags: null;
        blocked?: boolean;
        phoneCallsAvailable?: boolean;
        phoneCallsPrivate?: boolean;
        canPinMessage?: boolean;
        hasScheduled?: boolean;
        videoCallsAvailable?: boolean;
        user: Api.TypeUser;
        about?: string;
        settings: Api.TypePeerSettings;
        profilePhoto?: Api.TypePhoto;
        notifySettings: Api.TypePeerNotifySettings;
        botInfo?: Api.TypeBotInfo;
        pinnedMsgId?: int;
        commonChatsCount: int;
        folderId?: int;
        ttlPeriod?: int;
    }
    export class Contact extends VirtualClass<{
        userId: int;
        mutual: Bool;
    }> {
        static fromReader(reader: Reader): Contact;
        userId: int;
        mutual: Bool;
    }
    export class ImportedContact extends VirtualClass<{
        userId: int;
        clientId: long;
    }> {
        static fromReader(reader: Reader): ImportedContact;
        userId: int;
        clientId: long;
    }
    export class ContactStatus extends VirtualClass<{
        userId: int;
        status: Api.TypeUserStatus;
    }> {
        static fromReader(reader: Reader): ContactStatus;
        userId: int;
        status: Api.TypeUserStatus;
    }
    export class InputMessagesFilterEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterEmpty;
    }
    export class InputMessagesFilterPhotos extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterPhotos;
    }
    export class InputMessagesFilterVideo extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterVideo;
    }
    export class InputMessagesFilterPhotoVideo extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterPhotoVideo;
    }
    export class InputMessagesFilterDocument extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterDocument;
    }
    export class InputMessagesFilterUrl extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterUrl;
    }
    export class InputMessagesFilterGif extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterGif;
    }
    export class InputMessagesFilterVoice extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterVoice;
    }
    export class InputMessagesFilterMusic extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterMusic;
    }
    export class InputMessagesFilterChatPhotos extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterChatPhotos;
    }
    export class InputMessagesFilterPhoneCalls extends VirtualClass<{
        // flags: null;
        missed?: boolean;
    }> {
        static fromReader(reader: Reader): InputMessagesFilterPhoneCalls;
        // flags: null;
        missed?: boolean;
    }
    export class InputMessagesFilterRoundVoice extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterRoundVoice;
    }
    export class InputMessagesFilterRoundVideo extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterRoundVideo;
    }
    export class InputMessagesFilterMyMentions extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterMyMentions;
    }
    export class InputMessagesFilterGeo extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterGeo;
    }
    export class InputMessagesFilterContacts extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterContacts;
    }
    export class InputMessagesFilterPinned extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagesFilterPinned;
    }
    export class UpdateNewMessage extends VirtualClass<{
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateNewMessage;
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateMessageID extends VirtualClass<{
        id: int;
        randomId: long;
    }> {
        static fromReader(reader: Reader): UpdateMessageID;
        id: int;
        randomId: long;
    }
    export class UpdateDeleteMessages extends VirtualClass<{
        messages: int[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateDeleteMessages;
        messages: int[];
        pts: int;
        ptsCount: int;
    }
    export class UpdateUserTyping extends VirtualClass<{
        userId: int;
        action: Api.TypeSendMessageAction;
    }> {
        static fromReader(reader: Reader): UpdateUserTyping;
        userId: int;
        action: Api.TypeSendMessageAction;
    }
    export class UpdateChatUserTyping extends VirtualClass<{
        chatId: int;
        fromId: Api.TypePeer;
        action: Api.TypeSendMessageAction;
    }> {
        static fromReader(reader: Reader): UpdateChatUserTyping;
        chatId: int;
        fromId: Api.TypePeer;
        action: Api.TypeSendMessageAction;
    }
    export class UpdateChatParticipants extends VirtualClass<{
        participants: Api.TypeChatParticipants;
    }> {
        static fromReader(reader: Reader): UpdateChatParticipants;
        participants: Api.TypeChatParticipants;
    }
    export class UpdateUserStatus extends VirtualClass<{
        userId: int;
        status: Api.TypeUserStatus;
    }> {
        static fromReader(reader: Reader): UpdateUserStatus;
        userId: int;
        status: Api.TypeUserStatus;
    }
    export class UpdateUserName extends VirtualClass<{
        userId: int;
        firstName: string;
        lastName: string;
        username: string;
    }> {
        static fromReader(reader: Reader): UpdateUserName;
        userId: int;
        firstName: string;
        lastName: string;
        username: string;
    }
    export class UpdateUserPhoto extends VirtualClass<{
        userId: int;
        date: int;
        photo: Api.TypeUserProfilePhoto;
        previous: Bool;
    }> {
        static fromReader(reader: Reader): UpdateUserPhoto;
        userId: int;
        date: int;
        photo: Api.TypeUserProfilePhoto;
        previous: Bool;
    }
    export class UpdateNewEncryptedMessage extends VirtualClass<{
        message: Api.TypeEncryptedMessage;
        qts: int;
    }> {
        static fromReader(reader: Reader): UpdateNewEncryptedMessage;
        message: Api.TypeEncryptedMessage;
        qts: int;
    }
    export class UpdateEncryptedChatTyping extends VirtualClass<{
        chatId: int;
    }> {
        static fromReader(reader: Reader): UpdateEncryptedChatTyping;
        chatId: int;
    }
    export class UpdateEncryption extends VirtualClass<{
        chat: Api.TypeEncryptedChat;
        date: int;
    }> {
        static fromReader(reader: Reader): UpdateEncryption;
        chat: Api.TypeEncryptedChat;
        date: int;
    }
    export class UpdateEncryptedMessagesRead extends VirtualClass<{
        chatId: int;
        maxDate: int;
        date: int;
    }> {
        static fromReader(reader: Reader): UpdateEncryptedMessagesRead;
        chatId: int;
        maxDate: int;
        date: int;
    }
    export class UpdateChatParticipantAdd extends VirtualClass<{
        chatId: int;
        userId: int;
        inviterId: int;
        date: int;
        version: int;
    }> {
        static fromReader(reader: Reader): UpdateChatParticipantAdd;
        chatId: int;
        userId: int;
        inviterId: int;
        date: int;
        version: int;
    }
    export class UpdateChatParticipantDelete extends VirtualClass<{
        chatId: int;
        userId: int;
        version: int;
    }> {
        static fromReader(reader: Reader): UpdateChatParticipantDelete;
        chatId: int;
        userId: int;
        version: int;
    }
    export class UpdateDcOptions extends VirtualClass<{
        dcOptions: Api.TypeDcOption[];
    }> {
        static fromReader(reader: Reader): UpdateDcOptions;
        dcOptions: Api.TypeDcOption[];
    }
    export class UpdateNotifySettings extends VirtualClass<{
        peer: Api.TypeNotifyPeer;
        notifySettings: Api.TypePeerNotifySettings;
    }> {
        static fromReader(reader: Reader): UpdateNotifySettings;
        peer: Api.TypeNotifyPeer;
        notifySettings: Api.TypePeerNotifySettings;
    }
    export class UpdateServiceNotification extends VirtualClass<{
        // flags: null;
        popup?: boolean;
        inboxDate?: int;
        type: string;
        message: string;
        media: Api.TypeMessageMedia;
        entities: Api.TypeMessageEntity[];
    }> {
        static fromReader(reader: Reader): UpdateServiceNotification;
        // flags: null;
        popup?: boolean;
        inboxDate?: int;
        type: string;
        message: string;
        media: Api.TypeMessageMedia;
        entities: Api.TypeMessageEntity[];
    }
    export class UpdatePrivacy extends VirtualClass<{
        key: Api.TypePrivacyKey;
        rules: Api.TypePrivacyRule[];
    }> {
        static fromReader(reader: Reader): UpdatePrivacy;
        key: Api.TypePrivacyKey;
        rules: Api.TypePrivacyRule[];
    }
    export class UpdateUserPhone extends VirtualClass<{
        userId: int;
        phone: string;
    }> {
        static fromReader(reader: Reader): UpdateUserPhone;
        userId: int;
        phone: string;
    }
    export class UpdateReadHistoryInbox extends VirtualClass<{
        // flags: null;
        folderId?: int;
        peer: Api.TypePeer;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateReadHistoryInbox;
        // flags: null;
        folderId?: int;
        peer: Api.TypePeer;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        ptsCount: int;
    }
    export class UpdateReadHistoryOutbox extends VirtualClass<{
        peer: Api.TypePeer;
        maxId: int;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateReadHistoryOutbox;
        peer: Api.TypePeer;
        maxId: int;
        pts: int;
        ptsCount: int;
    }
    export class UpdateWebPage extends VirtualClass<{
        webpage: Api.TypeWebPage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateWebPage;
        webpage: Api.TypeWebPage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateReadMessagesContents extends VirtualClass<{
        messages: int[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateReadMessagesContents;
        messages: int[];
        pts: int;
        ptsCount: int;
    }
    export class UpdateChannelTooLong extends VirtualClass<{
        // flags: null;
        channelId: int;
        pts?: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelTooLong;
        // flags: null;
        channelId: int;
        pts?: int;
    }
    export class UpdateChannel extends VirtualClass<{
        channelId: int;
    }> {
        static fromReader(reader: Reader): UpdateChannel;
        channelId: int;
    }
    export class UpdateNewChannelMessage extends VirtualClass<{
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateNewChannelMessage;
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateReadChannelInbox extends VirtualClass<{
        // flags: null;
        folderId?: int;
        channelId: int;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
    }> {
        static fromReader(reader: Reader): UpdateReadChannelInbox;
        // flags: null;
        folderId?: int;
        channelId: int;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
    }
    export class UpdateDeleteChannelMessages extends VirtualClass<{
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateDeleteChannelMessages;
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
    }
    export class UpdateChannelMessageViews extends VirtualClass<{
        channelId: int;
        id: int;
        views: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelMessageViews;
        channelId: int;
        id: int;
        views: int;
    }
    export class UpdateChatParticipantAdmin extends VirtualClass<{
        chatId: int;
        userId: int;
        isAdmin: Bool;
        version: int;
    }> {
        static fromReader(reader: Reader): UpdateChatParticipantAdmin;
        chatId: int;
        userId: int;
        isAdmin: Bool;
        version: int;
    }
    export class UpdateNewStickerSet extends VirtualClass<{
        stickerset: messages.TypeStickerSet;
    }> {
        static fromReader(reader: Reader): UpdateNewStickerSet;
        stickerset: messages.TypeStickerSet;
    }
    export class UpdateStickerSetsOrder extends VirtualClass<{
        // flags: null;
        masks?: boolean;
        order: long[];
    }> {
        static fromReader(reader: Reader): UpdateStickerSetsOrder;
        // flags: null;
        masks?: boolean;
        order: long[];
    }
    export class UpdateStickerSets extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateStickerSets;
    }
    export class UpdateSavedGifs extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateSavedGifs;
    }
    export class UpdateBotInlineQuery extends VirtualClass<{
        // flags: null;
        queryId: long;
        userId: int;
        query: string;
        geo?: Api.TypeGeoPoint;
        peerType?: Api.TypeInlineQueryPeerType;
        offset: string;
    }> {
        static fromReader(reader: Reader): UpdateBotInlineQuery;
        // flags: null;
        queryId: long;
        userId: int;
        query: string;
        geo?: Api.TypeGeoPoint;
        peerType?: Api.TypeInlineQueryPeerType;
        offset: string;
    }
    export class UpdateBotInlineSend extends VirtualClass<{
        // flags: null;
        userId: int;
        query: string;
        geo?: Api.TypeGeoPoint;
        id: string;
        msgId?: Api.TypeInputBotInlineMessageID;
    }> {
        static fromReader(reader: Reader): UpdateBotInlineSend;
        // flags: null;
        userId: int;
        query: string;
        geo?: Api.TypeGeoPoint;
        id: string;
        msgId?: Api.TypeInputBotInlineMessageID;
    }
    export class UpdateEditChannelMessage extends VirtualClass<{
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateEditChannelMessage;
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateBotCallbackQuery extends VirtualClass<{
        // flags: null;
        queryId: long;
        userId: int;
        peer: Api.TypePeer;
        msgId: int;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
    }> {
        static fromReader(reader: Reader): UpdateBotCallbackQuery;
        // flags: null;
        queryId: long;
        userId: int;
        peer: Api.TypePeer;
        msgId: int;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
    }
    export class UpdateEditMessage extends VirtualClass<{
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateEditMessage;
        message: Api.TypeMessage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateInlineBotCallbackQuery extends VirtualClass<{
        // flags: null;
        queryId: long;
        userId: int;
        msgId: Api.TypeInputBotInlineMessageID;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
    }> {
        static fromReader(reader: Reader): UpdateInlineBotCallbackQuery;
        // flags: null;
        queryId: long;
        userId: int;
        msgId: Api.TypeInputBotInlineMessageID;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
    }
    export class UpdateReadChannelOutbox extends VirtualClass<{
        channelId: int;
        maxId: int;
    }> {
        static fromReader(reader: Reader): UpdateReadChannelOutbox;
        channelId: int;
        maxId: int;
    }
    export class UpdateDraftMessage extends VirtualClass<{
        peer: Api.TypePeer;
        draft: Api.TypeDraftMessage;
    }> {
        static fromReader(reader: Reader): UpdateDraftMessage;
        peer: Api.TypePeer;
        draft: Api.TypeDraftMessage;
    }
    export class UpdateReadFeaturedStickers extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateReadFeaturedStickers;
    }
    export class UpdateRecentStickers extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateRecentStickers;
    }
    export class UpdateConfig extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateConfig;
    }
    export class UpdatePtsChanged extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdatePtsChanged;
    }
    export class UpdateChannelWebPage extends VirtualClass<{
        channelId: int;
        webpage: Api.TypeWebPage;
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelWebPage;
        channelId: int;
        webpage: Api.TypeWebPage;
        pts: int;
        ptsCount: int;
    }
    export class UpdateDialogPinned extends VirtualClass<{
        // flags: null;
        pinned?: boolean;
        folderId?: int;
        peer: Api.TypeDialogPeer;
    }> {
        static fromReader(reader: Reader): UpdateDialogPinned;
        // flags: null;
        pinned?: boolean;
        folderId?: int;
        peer: Api.TypeDialogPeer;
    }
    export class UpdatePinnedDialogs extends VirtualClass<{
        // flags: null;
        folderId?: int;
        order?: Api.TypeDialogPeer[];
    }> {
        static fromReader(reader: Reader): UpdatePinnedDialogs;
        // flags: null;
        folderId?: int;
        order?: Api.TypeDialogPeer[];
    }
    export class UpdateBotWebhookJSON extends VirtualClass<{
        data: Api.TypeDataJSON;
    }> {
        static fromReader(reader: Reader): UpdateBotWebhookJSON;
        data: Api.TypeDataJSON;
    }
    export class UpdateBotWebhookJSONQuery extends VirtualClass<{
        queryId: long;
        data: Api.TypeDataJSON;
        timeout: int;
    }> {
        static fromReader(reader: Reader): UpdateBotWebhookJSONQuery;
        queryId: long;
        data: Api.TypeDataJSON;
        timeout: int;
    }
    export class UpdateBotShippingQuery extends VirtualClass<{
        queryId: long;
        userId: int;
        payload: bytes;
        shippingAddress: Api.TypePostAddress;
    }> {
        static fromReader(reader: Reader): UpdateBotShippingQuery;
        queryId: long;
        userId: int;
        payload: bytes;
        shippingAddress: Api.TypePostAddress;
    }
    export class UpdateBotPrecheckoutQuery extends VirtualClass<{
        // flags: null;
        queryId: long;
        userId: int;
        payload: bytes;
        info?: Api.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        currency: string;
        totalAmount: long;
    }> {
        static fromReader(reader: Reader): UpdateBotPrecheckoutQuery;
        // flags: null;
        queryId: long;
        userId: int;
        payload: bytes;
        info?: Api.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        currency: string;
        totalAmount: long;
    }
    export class UpdatePhoneCall extends VirtualClass<{
        phoneCall: Api.TypePhoneCall;
    }> {
        static fromReader(reader: Reader): UpdatePhoneCall;
        phoneCall: Api.TypePhoneCall;
    }
    export class UpdateLangPackTooLong extends VirtualClass<{
        langCode: string;
    }> {
        static fromReader(reader: Reader): UpdateLangPackTooLong;
        langCode: string;
    }
    export class UpdateLangPack extends VirtualClass<{
        difference: Api.TypeLangPackDifference;
    }> {
        static fromReader(reader: Reader): UpdateLangPack;
        difference: Api.TypeLangPackDifference;
    }
    export class UpdateFavedStickers extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateFavedStickers;
    }
    export class UpdateChannelReadMessagesContents extends VirtualClass<{
        channelId: int;
        messages: int[];
    }> {
        static fromReader(reader: Reader): UpdateChannelReadMessagesContents;
        channelId: int;
        messages: int[];
    }
    export class UpdateContactsReset extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateContactsReset;
    }
    export class UpdateChannelAvailableMessages extends VirtualClass<{
        channelId: int;
        availableMinId: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelAvailableMessages;
        channelId: int;
        availableMinId: int;
    }
    export class UpdateDialogUnreadMark extends VirtualClass<{
        // flags: null;
        unread?: boolean;
        peer: Api.TypeDialogPeer;
    }> {
        static fromReader(reader: Reader): UpdateDialogUnreadMark;
        // flags: null;
        unread?: boolean;
        peer: Api.TypeDialogPeer;
    }
    export class UpdateMessagePoll extends VirtualClass<{
        // flags: null;
        pollId: long;
        poll?: Api.TypePoll;
        results: Api.TypePollResults;
    }> {
        static fromReader(reader: Reader): UpdateMessagePoll;
        // flags: null;
        pollId: long;
        poll?: Api.TypePoll;
        results: Api.TypePollResults;
    }
    export class UpdateChatDefaultBannedRights extends VirtualClass<{
        peer: Api.TypePeer;
        defaultBannedRights: Api.TypeChatBannedRights;
        version: int;
    }> {
        static fromReader(reader: Reader): UpdateChatDefaultBannedRights;
        peer: Api.TypePeer;
        defaultBannedRights: Api.TypeChatBannedRights;
        version: int;
    }
    export class UpdateFolderPeers extends VirtualClass<{
        folderPeers: Api.TypeFolderPeer[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdateFolderPeers;
        folderPeers: Api.TypeFolderPeer[];
        pts: int;
        ptsCount: int;
    }
    export class UpdatePeerSettings extends VirtualClass<{
        peer: Api.TypePeer;
        settings: Api.TypePeerSettings;
    }> {
        static fromReader(reader: Reader): UpdatePeerSettings;
        peer: Api.TypePeer;
        settings: Api.TypePeerSettings;
    }
    export class UpdatePeerLocated extends VirtualClass<{
        peers: Api.TypePeerLocated[];
    }> {
        static fromReader(reader: Reader): UpdatePeerLocated;
        peers: Api.TypePeerLocated[];
    }
    export class UpdateNewScheduledMessage extends VirtualClass<{
        message: Api.TypeMessage;
    }> {
        static fromReader(reader: Reader): UpdateNewScheduledMessage;
        message: Api.TypeMessage;
    }
    export class UpdateDeleteScheduledMessages extends VirtualClass<{
        peer: Api.TypePeer;
        messages: int[];
    }> {
        static fromReader(reader: Reader): UpdateDeleteScheduledMessages;
        peer: Api.TypePeer;
        messages: int[];
    }
    export class UpdateTheme extends VirtualClass<{
        theme: Api.TypeTheme;
    }> {
        static fromReader(reader: Reader): UpdateTheme;
        theme: Api.TypeTheme;
    }
    export class UpdateGeoLiveViewed extends VirtualClass<{
        peer: Api.TypePeer;
        msgId: int;
    }> {
        static fromReader(reader: Reader): UpdateGeoLiveViewed;
        peer: Api.TypePeer;
        msgId: int;
    }
    export class UpdateLoginToken extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateLoginToken;
    }
    export class UpdateMessagePollVote extends VirtualClass<{
        pollId: long;
        userId: int;
        options: bytes[];
        qts: int;
    }> {
        static fromReader(reader: Reader): UpdateMessagePollVote;
        pollId: long;
        userId: int;
        options: bytes[];
        qts: int;
    }
    export class UpdateDialogFilter extends VirtualClass<{
        // flags: null;
        id: int;
        filter?: Api.TypeDialogFilter;
    }> {
        static fromReader(reader: Reader): UpdateDialogFilter;
        // flags: null;
        id: int;
        filter?: Api.TypeDialogFilter;
    }
    export class UpdateDialogFilterOrder extends VirtualClass<{
        order: int[];
    }> {
        static fromReader(reader: Reader): UpdateDialogFilterOrder;
        order: int[];
    }
    export class UpdateDialogFilters extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdateDialogFilters;
    }
    export class UpdatePhoneCallSignalingData extends VirtualClass<{
        phoneCallId: long;
        data: bytes;
    }> {
        static fromReader(reader: Reader): UpdatePhoneCallSignalingData;
        phoneCallId: long;
        data: bytes;
    }
    export class UpdateChannelMessageForwards extends VirtualClass<{
        channelId: int;
        id: int;
        forwards: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelMessageForwards;
        channelId: int;
        id: int;
        forwards: int;
    }
    export class UpdateReadChannelDiscussionInbox extends VirtualClass<{
        // flags: null;
        channelId: int;
        topMsgId: int;
        readMaxId: int;
        broadcastId?: int;
        broadcastPost?: int;
    }> {
        static fromReader(reader: Reader): UpdateReadChannelDiscussionInbox;
        // flags: null;
        channelId: int;
        topMsgId: int;
        readMaxId: int;
        broadcastId?: int;
        broadcastPost?: int;
    }
    export class UpdateReadChannelDiscussionOutbox extends VirtualClass<{
        channelId: int;
        topMsgId: int;
        readMaxId: int;
    }> {
        static fromReader(reader: Reader): UpdateReadChannelDiscussionOutbox;
        channelId: int;
        topMsgId: int;
        readMaxId: int;
    }
    export class UpdatePeerBlocked extends VirtualClass<{
        peerId: Api.TypePeer;
        blocked: Bool;
    }> {
        static fromReader(reader: Reader): UpdatePeerBlocked;
        peerId: Api.TypePeer;
        blocked: Bool;
    }
    export class UpdateChannelUserTyping extends VirtualClass<{
        // flags: null;
        channelId: int;
        topMsgId?: int;
        fromId: Api.TypePeer;
        action: Api.TypeSendMessageAction;
    }> {
        static fromReader(reader: Reader): UpdateChannelUserTyping;
        // flags: null;
        channelId: int;
        topMsgId?: int;
        fromId: Api.TypePeer;
        action: Api.TypeSendMessageAction;
    }
    export class UpdatePinnedMessages extends VirtualClass<{
        // flags: null;
        pinned?: boolean;
        peer: Api.TypePeer;
        messages: int[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdatePinnedMessages;
        // flags: null;
        pinned?: boolean;
        peer: Api.TypePeer;
        messages: int[];
        pts: int;
        ptsCount: int;
    }
    export class UpdatePinnedChannelMessages extends VirtualClass<{
        // flags: null;
        pinned?: boolean;
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
    }> {
        static fromReader(reader: Reader): UpdatePinnedChannelMessages;
        // flags: null;
        pinned?: boolean;
        channelId: int;
        messages: int[];
        pts: int;
        ptsCount: int;
    }
    export class UpdateChat extends VirtualClass<{
        chatId: int;
    }> {
        static fromReader(reader: Reader): UpdateChat;
        chatId: int;
    }
    export class UpdateGroupCallParticipants extends VirtualClass<{
        call: Api.TypeInputGroupCall;
        participants: Api.TypeGroupCallParticipant[];
        version: int;
    }> {
        static fromReader(reader: Reader): UpdateGroupCallParticipants;
        call: Api.TypeInputGroupCall;
        participants: Api.TypeGroupCallParticipant[];
        version: int;
    }
    export class UpdateGroupCall extends VirtualClass<{
        chatId: int;
        call: Api.TypeGroupCall;
    }> {
        static fromReader(reader: Reader): UpdateGroupCall;
        chatId: int;
        call: Api.TypeGroupCall;
    }
    export class UpdatePeerHistoryTTL extends VirtualClass<{
        // flags: null;
        peer: Api.TypePeer;
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): UpdatePeerHistoryTTL;
        // flags: null;
        peer: Api.TypePeer;
        ttlPeriod?: int;
    }
    export class UpdateChatParticipant extends VirtualClass<{
        // flags: null;
        chatId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: Api.TypeChatParticipant;
        newParticipant?: Api.TypeChatParticipant;
        invite?: Api.TypeExportedChatInvite;
        qts: int;
    }> {
        static fromReader(reader: Reader): UpdateChatParticipant;
        // flags: null;
        chatId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: Api.TypeChatParticipant;
        newParticipant?: Api.TypeChatParticipant;
        invite?: Api.TypeExportedChatInvite;
        qts: int;
    }
    export class UpdateChannelParticipant extends VirtualClass<{
        // flags: null;
        channelId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: Api.TypeChannelParticipant;
        newParticipant?: Api.TypeChannelParticipant;
        invite?: Api.TypeExportedChatInvite;
        qts: int;
    }> {
        static fromReader(reader: Reader): UpdateChannelParticipant;
        // flags: null;
        channelId: int;
        date: int;
        actorId: int;
        userId: int;
        prevParticipant?: Api.TypeChannelParticipant;
        newParticipant?: Api.TypeChannelParticipant;
        invite?: Api.TypeExportedChatInvite;
        qts: int;
    }
    export class UpdateBotStopped extends VirtualClass<{
        userId: int;
        date: int;
        stopped: Bool;
        qts: int;
    }> {
        static fromReader(reader: Reader): UpdateBotStopped;
        userId: int;
        date: int;
        stopped: Bool;
        qts: int;
    }
    export class UpdateGroupCallConnection extends VirtualClass<{
        // flags: null;
        presentation?: boolean;
        params: Api.TypeDataJSON;
    }> {
        static fromReader(reader: Reader): UpdateGroupCallConnection;
        // flags: null;
        presentation?: boolean;
        params: Api.TypeDataJSON;
    }
    export class UpdateBotCommands extends VirtualClass<{
        peer: Api.TypePeer;
        botId: int;
        commands: Api.TypeBotCommand[];
    }> {
        static fromReader(reader: Reader): UpdateBotCommands;
        peer: Api.TypePeer;
        botId: int;
        commands: Api.TypeBotCommand[];
    }
    export class UpdatesTooLong extends VirtualClass<void> {
        static fromReader(reader: Reader): UpdatesTooLong;
    }
    export class UpdateShortMessage extends VirtualClass<{
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        userId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): UpdateShortMessage;
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        userId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }
    export class UpdateShortChatMessage extends VirtualClass<{
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        fromId: int;
        chatId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): UpdateShortChatMessage;
        // flags: null;
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        fromId: int;
        chatId: int;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Api.TypeMessageFwdHeader;
        viaBotId?: int;
        replyTo?: Api.TypeMessageReplyHeader;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }
    export class UpdateShort extends VirtualClass<{
        update: Api.TypeUpdate;
        date: int;
    }> {
        static fromReader(reader: Reader): UpdateShort;
        update: Api.TypeUpdate;
        date: int;
    }
    export class UpdatesCombined extends VirtualClass<{
        updates: Api.TypeUpdate[];
        users: Api.TypeUser[];
        chats: Api.TypeChat[];
        date: int;
        seqStart: int;
        seq: int;
    }> {
        static fromReader(reader: Reader): UpdatesCombined;
        updates: Api.TypeUpdate[];
        users: Api.TypeUser[];
        chats: Api.TypeChat[];
        date: int;
        seqStart: int;
        seq: int;
    }
    export class Updates extends VirtualClass<{
        updates: Api.TypeUpdate[];
        users: Api.TypeUser[];
        chats: Api.TypeChat[];
        date: int;
        seq: int;
    }> {
        static fromReader(reader: Reader): Updates;
        updates: Api.TypeUpdate[];
        users: Api.TypeUser[];
        chats: Api.TypeChat[];
        date: int;
        seq: int;
    }
    export class UpdateShortSentMessage extends VirtualClass<{
        // flags: null;
        out?: boolean;
        id: int;
        pts: int;
        ptsCount: int;
        date: int;
        media?: Api.TypeMessageMedia;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }> {
        static fromReader(reader: Reader): UpdateShortSentMessage;
        // flags: null;
        out?: boolean;
        id: int;
        pts: int;
        ptsCount: int;
        date: int;
        media?: Api.TypeMessageMedia;
        entities?: Api.TypeMessageEntity[];
        ttlPeriod?: int;
    }
    export class DcOption extends VirtualClass<{
        // flags: null;
        ipv6?: boolean;
        mediaOnly?: boolean;
        tcpoOnly?: boolean;
        cdn?: boolean;
        static?: boolean;
        id: int;
        ipAddress: string;
        port: int;
        secret?: bytes;
    }> {
        static fromReader(reader: Reader): DcOption;
        // flags: null;
        ipv6?: boolean;
        mediaOnly?: boolean;
        tcpoOnly?: boolean;
        cdn?: boolean;
        static?: boolean;
        id: int;
        ipAddress: string;
        port: int;
        secret?: bytes;
    }
    export class Config extends VirtualClass<{
        // flags: null;
        phonecallsEnabled?: boolean;
        defaultP2pContacts?: boolean;
        preloadFeaturedStickers?: boolean;
        ignorePhoneEntities?: boolean;
        revokePmInbox?: boolean;
        blockedMode?: boolean;
        pfsEnabled?: boolean;
        date: int;
        expires: int;
        testMode: Bool;
        thisDc: int;
        dcOptions: Api.TypeDcOption[];
        dcTxtDomainName: string;
        chatSizeMax: int;
        megagroupSizeMax: int;
        forwardedCountMax: int;
        onlineUpdatePeriodMs: int;
        offlineBlurTimeoutMs: int;
        offlineIdleTimeoutMs: int;
        onlineCloudTimeoutMs: int;
        notifyCloudDelayMs: int;
        notifyDefaultDelayMs: int;
        pushChatPeriodMs: int;
        pushChatLimit: int;
        savedGifsLimit: int;
        editTimeLimit: int;
        revokeTimeLimit: int;
        revokePmTimeLimit: int;
        ratingEDecay: int;
        stickersRecentLimit: int;
        stickersFavedLimit: int;
        channelsReadMediaPeriod: int;
        tmpSessions?: int;
        pinnedDialogsCountMax: int;
        pinnedInfolderCountMax: int;
        callReceiveTimeoutMs: int;
        callRingTimeoutMs: int;
        callConnectTimeoutMs: int;
        callPacketTimeoutMs: int;
        meUrlPrefix: string;
        autoupdateUrlPrefix?: string;
        gifSearchUsername?: string;
        venueSearchUsername?: string;
        imgSearchUsername?: string;
        staticMapsProvider?: string;
        captionLengthMax: int;
        messageLengthMax: int;
        webfileDcId: int;
        suggestedLangCode?: string;
        langPackVersion?: int;
        baseLangPackVersion?: int;
    }> {
        static fromReader(reader: Reader): Config;
        // flags: null;
        phonecallsEnabled?: boolean;
        defaultP2pContacts?: boolean;
        preloadFeaturedStickers?: boolean;
        ignorePhoneEntities?: boolean;
        revokePmInbox?: boolean;
        blockedMode?: boolean;
        pfsEnabled?: boolean;
        date: int;
        expires: int;
        testMode: Bool;
        thisDc: int;
        dcOptions: Api.TypeDcOption[];
        dcTxtDomainName: string;
        chatSizeMax: int;
        megagroupSizeMax: int;
        forwardedCountMax: int;
        onlineUpdatePeriodMs: int;
        offlineBlurTimeoutMs: int;
        offlineIdleTimeoutMs: int;
        onlineCloudTimeoutMs: int;
        notifyCloudDelayMs: int;
        notifyDefaultDelayMs: int;
        pushChatPeriodMs: int;
        pushChatLimit: int;
        savedGifsLimit: int;
        editTimeLimit: int;
        revokeTimeLimit: int;
        revokePmTimeLimit: int;
        ratingEDecay: int;
        stickersRecentLimit: int;
        stickersFavedLimit: int;
        channelsReadMediaPeriod: int;
        tmpSessions?: int;
        pinnedDialogsCountMax: int;
        pinnedInfolderCountMax: int;
        callReceiveTimeoutMs: int;
        callRingTimeoutMs: int;
        callConnectTimeoutMs: int;
        callPacketTimeoutMs: int;
        meUrlPrefix: string;
        autoupdateUrlPrefix?: string;
        gifSearchUsername?: string;
        venueSearchUsername?: string;
        imgSearchUsername?: string;
        staticMapsProvider?: string;
        captionLengthMax: int;
        messageLengthMax: int;
        webfileDcId: int;
        suggestedLangCode?: string;
        langPackVersion?: int;
        baseLangPackVersion?: int;
    }
    export class NearestDc extends VirtualClass<{
        country: string;
        thisDc: int;
        nearestDc: int;
    }> {
        static fromReader(reader: Reader): NearestDc;
        country: string;
        thisDc: int;
        nearestDc: int;
    }
    export class EncryptedChatEmpty extends VirtualClass<{
        id: int;
    }> {
        static fromReader(reader: Reader): EncryptedChatEmpty;
        id: int;
    }
    export class EncryptedChatWaiting extends VirtualClass<{
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
    }> {
        static fromReader(reader: Reader): EncryptedChatWaiting;
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
    }
    export class EncryptedChatRequested extends VirtualClass<{
        // flags: null;
        folderId?: int;
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gA: bytes;
    }> {
        static fromReader(reader: Reader): EncryptedChatRequested;
        // flags: null;
        folderId?: int;
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gA: bytes;
    }
    export class EncryptedChat extends VirtualClass<{
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
    }> {
        static fromReader(reader: Reader): EncryptedChat;
        id: int;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
    }
    export class EncryptedChatDiscarded extends VirtualClass<{
        // flags: null;
        historyDeleted?: boolean;
        id: int;
    }> {
        static fromReader(reader: Reader): EncryptedChatDiscarded;
        // flags: null;
        historyDeleted?: boolean;
        id: int;
    }
    export class InputEncryptedChat extends VirtualClass<{
        chatId: int;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputEncryptedChat;
        chatId: int;
        accessHash: long;
    }
    export class EncryptedFileEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): EncryptedFileEmpty;
    }
    export class EncryptedFile extends VirtualClass<{
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        keyFingerprint: int;
    }> {
        static fromReader(reader: Reader): EncryptedFile;
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        keyFingerprint: int;
    }
    export class InputEncryptedFileEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputEncryptedFileEmpty;
    }
    export class InputEncryptedFileUploaded extends VirtualClass<{
        id: long;
        parts: int;
        md5Checksum: string;
        keyFingerprint: int;
    }> {
        static fromReader(reader: Reader): InputEncryptedFileUploaded;
        id: long;
        parts: int;
        md5Checksum: string;
        keyFingerprint: int;
    }
    export class InputEncryptedFile extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputEncryptedFile;
        id: long;
        accessHash: long;
    }
    export class InputEncryptedFileBigUploaded extends VirtualClass<{
        id: long;
        parts: int;
        keyFingerprint: int;
    }> {
        static fromReader(reader: Reader): InputEncryptedFileBigUploaded;
        id: long;
        parts: int;
        keyFingerprint: int;
    }
    export class EncryptedMessage extends VirtualClass<{
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        file: Api.TypeEncryptedFile;
    }> {
        static fromReader(reader: Reader): EncryptedMessage;
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        file: Api.TypeEncryptedFile;
    }
    export class EncryptedMessageService extends VirtualClass<{
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
    }> {
        static fromReader(reader: Reader): EncryptedMessageService;
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
    }
    export class InputDocumentEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputDocumentEmpty;
    }
    export class InputDocument extends VirtualClass<{
        id: long;
        accessHash: long;
        fileReference: bytes;
    }> {
        static fromReader(reader: Reader): InputDocument;
        id: long;
        accessHash: long;
        fileReference: bytes;
    }
    export class DocumentEmpty extends VirtualClass<{
        id: long;
    }> {
        static fromReader(reader: Reader): DocumentEmpty;
        id: long;
    }
    export class Document extends VirtualClass<{
        // flags: null;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        mimeType: string;
        size: int;
        thumbs?: Api.TypePhotoSize[];
        videoThumbs?: Api.TypeVideoSize[];
        dcId: int;
        attributes: Api.TypeDocumentAttribute[];
    }> {
        static fromReader(reader: Reader): Document;
        // flags: null;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        mimeType: string;
        size: int;
        thumbs?: Api.TypePhotoSize[];
        videoThumbs?: Api.TypeVideoSize[];
        dcId: int;
        attributes: Api.TypeDocumentAttribute[];
    }
    export class NotifyPeer extends VirtualClass<{
        peer: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): NotifyPeer;
        peer: Api.TypePeer;
    }
    export class NotifyUsers extends VirtualClass<void> {
        static fromReader(reader: Reader): NotifyUsers;
    }
    export class NotifyChats extends VirtualClass<void> {
        static fromReader(reader: Reader): NotifyChats;
    }
    export class NotifyBroadcasts extends VirtualClass<void> {
        static fromReader(reader: Reader): NotifyBroadcasts;
    }
    export class SendMessageTypingAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageTypingAction;
    }
    export class SendMessageCancelAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageCancelAction;
    }
    export class SendMessageRecordVideoAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageRecordVideoAction;
    }
    export class SendMessageUploadVideoAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageUploadVideoAction;
        progress: int;
    }
    export class SendMessageRecordAudioAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageRecordAudioAction;
    }
    export class SendMessageUploadAudioAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageUploadAudioAction;
        progress: int;
    }
    export class SendMessageUploadPhotoAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageUploadPhotoAction;
        progress: int;
    }
    export class SendMessageUploadDocumentAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageUploadDocumentAction;
        progress: int;
    }
    export class SendMessageGeoLocationAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageGeoLocationAction;
    }
    export class SendMessageChooseContactAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageChooseContactAction;
    }
    export class SendMessageGamePlayAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageGamePlayAction;
    }
    export class SendMessageRecordRoundAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SendMessageRecordRoundAction;
    }
    export class SendMessageUploadRoundAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageUploadRoundAction;
        progress: int;
    }
    export class SpeakingInGroupCallAction extends VirtualClass<void> {
        static fromReader(reader: Reader): SpeakingInGroupCallAction;
    }
    export class SendMessageHistoryImportAction extends VirtualClass<{
        progress: int;
    }> {
        static fromReader(reader: Reader): SendMessageHistoryImportAction;
        progress: int;
    }
    export class InputPrivacyKeyStatusTimestamp extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyStatusTimestamp;
    }
    export class InputPrivacyKeyChatInvite extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyChatInvite;
    }
    export class InputPrivacyKeyPhoneCall extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyPhoneCall;
    }
    export class InputPrivacyKeyPhoneP2P extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyPhoneP2P;
    }
    export class InputPrivacyKeyForwards extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyForwards;
    }
    export class InputPrivacyKeyProfilePhoto extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyProfilePhoto;
    }
    export class InputPrivacyKeyPhoneNumber extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyPhoneNumber;
    }
    export class InputPrivacyKeyAddedByPhone extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyKeyAddedByPhone;
    }
    export class PrivacyKeyStatusTimestamp extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyStatusTimestamp;
    }
    export class PrivacyKeyChatInvite extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyChatInvite;
    }
    export class PrivacyKeyPhoneCall extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyPhoneCall;
    }
    export class PrivacyKeyPhoneP2P extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyPhoneP2P;
    }
    export class PrivacyKeyForwards extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyForwards;
    }
    export class PrivacyKeyProfilePhoto extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyProfilePhoto;
    }
    export class PrivacyKeyPhoneNumber extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyPhoneNumber;
    }
    export class PrivacyKeyAddedByPhone extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyKeyAddedByPhone;
    }
    export class InputPrivacyValueAllowContacts extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyValueAllowContacts;
    }
    export class InputPrivacyValueAllowAll extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyValueAllowAll;
    }
    export class InputPrivacyValueAllowUsers extends VirtualClass<{
        users: Api.TypeInputUser[];
    }> {
        static fromReader(reader: Reader): InputPrivacyValueAllowUsers;
        users: Api.TypeInputUser[];
    }
    export class InputPrivacyValueDisallowContacts extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyValueDisallowContacts;
    }
    export class InputPrivacyValueDisallowAll extends VirtualClass<void> {
        static fromReader(reader: Reader): InputPrivacyValueDisallowAll;
    }
    export class InputPrivacyValueDisallowUsers extends VirtualClass<{
        users: Api.TypeInputUser[];
    }> {
        static fromReader(reader: Reader): InputPrivacyValueDisallowUsers;
        users: Api.TypeInputUser[];
    }
    export class InputPrivacyValueAllowChatParticipants extends VirtualClass<{
        chats: int[];
    }> {
        static fromReader(
            reader: Reader
        ): InputPrivacyValueAllowChatParticipants;
        chats: int[];
    }
    export class InputPrivacyValueDisallowChatParticipants extends VirtualClass<{
        chats: int[];
    }> {
        static fromReader(
            reader: Reader
        ): InputPrivacyValueDisallowChatParticipants;
        chats: int[];
    }
    export class PrivacyValueAllowContacts extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyValueAllowContacts;
    }
    export class PrivacyValueAllowAll extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyValueAllowAll;
    }
    export class PrivacyValueAllowUsers extends VirtualClass<{
        users: int[];
    }> {
        static fromReader(reader: Reader): PrivacyValueAllowUsers;
        users: int[];
    }
    export class PrivacyValueDisallowContacts extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyValueDisallowContacts;
    }
    export class PrivacyValueDisallowAll extends VirtualClass<void> {
        static fromReader(reader: Reader): PrivacyValueDisallowAll;
    }
    export class PrivacyValueDisallowUsers extends VirtualClass<{
        users: int[];
    }> {
        static fromReader(reader: Reader): PrivacyValueDisallowUsers;
        users: int[];
    }
    export class PrivacyValueAllowChatParticipants extends VirtualClass<{
        chats: int[];
    }> {
        static fromReader(reader: Reader): PrivacyValueAllowChatParticipants;
        chats: int[];
    }
    export class PrivacyValueDisallowChatParticipants extends VirtualClass<{
        chats: int[];
    }> {
        static fromReader(reader: Reader): PrivacyValueDisallowChatParticipants;
        chats: int[];
    }
    export class AccountDaysTTL extends VirtualClass<{
        days: int;
    }> {
        static fromReader(reader: Reader): AccountDaysTTL;
        days: int;
    }
    export class DocumentAttributeImageSize extends VirtualClass<{
        w: int;
        h: int;
    }> {
        static fromReader(reader: Reader): DocumentAttributeImageSize;
        w: int;
        h: int;
    }
    export class DocumentAttributeAnimated extends VirtualClass<void> {
        static fromReader(reader: Reader): DocumentAttributeAnimated;
    }
    export class DocumentAttributeSticker extends VirtualClass<{
        // flags: null;
        mask?: boolean;
        alt: string;
        stickerset: Api.TypeInputStickerSet;
        maskCoords?: Api.TypeMaskCoords;
    }> {
        static fromReader(reader: Reader): DocumentAttributeSticker;
        // flags: null;
        mask?: boolean;
        alt: string;
        stickerset: Api.TypeInputStickerSet;
        maskCoords?: Api.TypeMaskCoords;
    }
    export class DocumentAttributeVideo extends VirtualClass<{
        // flags: null;
        roundMessage?: boolean;
        supportsStreaming?: boolean;
        duration: int;
        w: int;
        h: int;
    }> {
        static fromReader(reader: Reader): DocumentAttributeVideo;
        // flags: null;
        roundMessage?: boolean;
        supportsStreaming?: boolean;
        duration: int;
        w: int;
        h: int;
    }
    export class DocumentAttributeAudio extends VirtualClass<{
        // flags: null;
        voice?: boolean;
        duration: int;
        title?: string;
        performer?: string;
        waveform?: bytes;
    }> {
        static fromReader(reader: Reader): DocumentAttributeAudio;
        // flags: null;
        voice?: boolean;
        duration: int;
        title?: string;
        performer?: string;
        waveform?: bytes;
    }
    export class DocumentAttributeFilename extends VirtualClass<{
        fileName: string;
    }> {
        static fromReader(reader: Reader): DocumentAttributeFilename;
        fileName: string;
    }
    export class DocumentAttributeHasStickers extends VirtualClass<void> {
        static fromReader(reader: Reader): DocumentAttributeHasStickers;
    }
    export class StickerPack extends VirtualClass<{
        emoticon: string;
        documents: long[];
    }> {
        static fromReader(reader: Reader): StickerPack;
        emoticon: string;
        documents: long[];
    }
    export class WebPageEmpty extends VirtualClass<{
        id: long;
    }> {
        static fromReader(reader: Reader): WebPageEmpty;
        id: long;
    }
    export class WebPagePending extends VirtualClass<{
        id: long;
        date: int;
    }> {
        static fromReader(reader: Reader): WebPagePending;
        id: long;
        date: int;
    }
    export class WebPage extends VirtualClass<{
        // flags: null;
        id: long;
        url: string;
        displayUrl: string;
        hash: int;
        type?: string;
        siteName?: string;
        title?: string;
        description?: string;
        photo?: Api.TypePhoto;
        embedUrl?: string;
        embedType?: string;
        embedWidth?: int;
        embedHeight?: int;
        duration?: int;
        author?: string;
        document?: Api.TypeDocument;
        cachedPage?: Api.TypePage;
        attributes?: Api.TypeWebPageAttribute[];
    }> {
        static fromReader(reader: Reader): WebPage;
        // flags: null;
        id: long;
        url: string;
        displayUrl: string;
        hash: int;
        type?: string;
        siteName?: string;
        title?: string;
        description?: string;
        photo?: Api.TypePhoto;
        embedUrl?: string;
        embedType?: string;
        embedWidth?: int;
        embedHeight?: int;
        duration?: int;
        author?: string;
        document?: Api.TypeDocument;
        cachedPage?: Api.TypePage;
        attributes?: Api.TypeWebPageAttribute[];
    }
    export class WebPageNotModified extends VirtualClass<{
        // flags: null;
        cachedPageViews?: int;
    }> {
        static fromReader(reader: Reader): WebPageNotModified;
        // flags: null;
        cachedPageViews?: int;
    }
    export class Authorization extends VirtualClass<{
        // flags: null;
        current?: boolean;
        officialApp?: boolean;
        passwordPending?: boolean;
        hash: long;
        deviceModel: string;
        platform: string;
        systemVersion: string;
        apiId: int;
        appName: string;
        appVersion: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        country: string;
        region: string;
    }> {
        static fromReader(reader: Reader): Authorization;
        // flags: null;
        current?: boolean;
        officialApp?: boolean;
        passwordPending?: boolean;
        hash: long;
        deviceModel: string;
        platform: string;
        systemVersion: string;
        apiId: int;
        appName: string;
        appVersion: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        country: string;
        region: string;
    }
    export class ReceivedNotifyMessage extends VirtualClass<{
        id: int;
        // flags: int;
    }> {
        static fromReader(reader: Reader): ReceivedNotifyMessage;
        id: int;
        // flags: int;
    }
    export class ChatInviteExported extends VirtualClass<{
        // flags: null;
        revoked?: boolean;
        permanent?: boolean;
        link: string;
        adminId: int;
        date: int;
        startDate?: int;
        expireDate?: int;
        usageLimit?: int;
        usage?: int;
    }> {
        static fromReader(reader: Reader): ChatInviteExported;
        // flags: null;
        revoked?: boolean;
        permanent?: boolean;
        link: string;
        adminId: int;
        date: int;
        startDate?: int;
        expireDate?: int;
        usageLimit?: int;
        usage?: int;
    }
    export class ChatInviteAlready extends VirtualClass<{
        chat: Api.TypeChat;
    }> {
        static fromReader(reader: Reader): ChatInviteAlready;
        chat: Api.TypeChat;
    }
    export class ChatInvite extends VirtualClass<{
        // flags: null;
        channel?: boolean;
        broadcast?: boolean;
        public?: boolean;
        megagroup?: boolean;
        title: string;
        photo: Api.TypePhoto;
        participantsCount: int;
        participants?: Api.TypeUser[];
    }> {
        static fromReader(reader: Reader): ChatInvite;
        // flags: null;
        channel?: boolean;
        broadcast?: boolean;
        public?: boolean;
        megagroup?: boolean;
        title: string;
        photo: Api.TypePhoto;
        participantsCount: int;
        participants?: Api.TypeUser[];
    }
    export class ChatInvitePeek extends VirtualClass<{
        chat: Api.TypeChat;
        expires: int;
    }> {
        static fromReader(reader: Reader): ChatInvitePeek;
        chat: Api.TypeChat;
        expires: int;
    }
    export class InputStickerSetEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputStickerSetEmpty;
    }
    export class InputStickerSetID extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputStickerSetID;
        id: long;
        accessHash: long;
    }
    export class InputStickerSetShortName extends VirtualClass<{
        shortName: string;
    }> {
        static fromReader(reader: Reader): InputStickerSetShortName;
        shortName: string;
    }
    export class InputStickerSetAnimatedEmoji extends VirtualClass<void> {
        static fromReader(reader: Reader): InputStickerSetAnimatedEmoji;
    }
    export class InputStickerSetDice extends VirtualClass<{
        emoticon: string;
    }> {
        static fromReader(reader: Reader): InputStickerSetDice;
        emoticon: string;
    }
    export class StickerSet extends VirtualClass<{
        // flags: null;
        archived?: boolean;
        official?: boolean;
        masks?: boolean;
        animated?: boolean;
        installedDate?: int;
        id: long;
        accessHash: long;
        title: string;
        shortName: string;
        thumbs?: Api.TypePhotoSize[];
        thumbDcId?: int;
        thumbVersion?: int;
        count: int;
        hash: int;
    }> {
        static fromReader(reader: Reader): StickerSet;
        // flags: null;
        archived?: boolean;
        official?: boolean;
        masks?: boolean;
        animated?: boolean;
        installedDate?: int;
        id: long;
        accessHash: long;
        title: string;
        shortName: string;
        thumbs?: Api.TypePhotoSize[];
        thumbDcId?: int;
        thumbVersion?: int;
        count: int;
        hash: int;
    }
    export class BotCommand extends VirtualClass<{
        command: string;
        description: string;
    }> {
        static fromReader(reader: Reader): BotCommand;
        command: string;
        description: string;
    }
    export class BotInfo extends VirtualClass<{
        userId: int;
        description: string;
        commands: Api.TypeBotCommand[];
    }> {
        static fromReader(reader: Reader): BotInfo;
        userId: int;
        description: string;
        commands: Api.TypeBotCommand[];
    }
    export class KeyboardButton extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButton;
        text: string;
    }
    export class KeyboardButtonUrl extends VirtualClass<{
        text: string;
        url: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonUrl;
        text: string;
        url: string;
    }
    export class KeyboardButtonCallback extends VirtualClass<{
        // flags: null;
        requiresPassword?: boolean;
        text: string;
        data: bytes;
    }> {
        static fromReader(reader: Reader): KeyboardButtonCallback;
        // flags: null;
        requiresPassword?: boolean;
        text: string;
        data: bytes;
    }
    export class KeyboardButtonRequestPhone extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonRequestPhone;
        text: string;
    }
    export class KeyboardButtonRequestGeoLocation extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonRequestGeoLocation;
        text: string;
    }
    export class KeyboardButtonSwitchInline extends VirtualClass<{
        // flags: null;
        samePeer?: boolean;
        text: string;
        query: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonSwitchInline;
        // flags: null;
        samePeer?: boolean;
        text: string;
        query: string;
    }
    export class KeyboardButtonGame extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonGame;
        text: string;
    }
    export class KeyboardButtonBuy extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonBuy;
        text: string;
    }
    export class KeyboardButtonUrlAuth extends VirtualClass<{
        // flags: null;
        text: string;
        fwdText?: string;
        url: string;
        buttonId: int;
    }> {
        static fromReader(reader: Reader): KeyboardButtonUrlAuth;
        // flags: null;
        text: string;
        fwdText?: string;
        url: string;
        buttonId: int;
    }
    export class InputKeyboardButtonUrlAuth extends VirtualClass<{
        // flags: null;
        requestWriteAccess?: boolean;
        text: string;
        fwdText?: string;
        url: string;
        bot: Api.TypeInputUser;
    }> {
        static fromReader(reader: Reader): InputKeyboardButtonUrlAuth;
        // flags: null;
        requestWriteAccess?: boolean;
        text: string;
        fwdText?: string;
        url: string;
        bot: Api.TypeInputUser;
    }
    export class KeyboardButtonRequestPoll extends VirtualClass<{
        // flags: null;
        quiz?: Bool;
        text: string;
    }> {
        static fromReader(reader: Reader): KeyboardButtonRequestPoll;
        // flags: null;
        quiz?: Bool;
        text: string;
    }
    export class KeyboardButtonRow extends VirtualClass<{
        buttons: Api.TypeKeyboardButton[];
    }> {
        static fromReader(reader: Reader): KeyboardButtonRow;
        buttons: Api.TypeKeyboardButton[];
    }
    export class ReplyKeyboardHide extends VirtualClass<{
        // flags: null;
        selective?: boolean;
    }> {
        static fromReader(reader: Reader): ReplyKeyboardHide;
        // flags: null;
        selective?: boolean;
    }
    export class ReplyKeyboardForceReply extends VirtualClass<{
        // flags: null;
        singleUse?: boolean;
        selective?: boolean;
        placeholder?: string;
    }> {
        static fromReader(reader: Reader): ReplyKeyboardForceReply;
        // flags: null;
        singleUse?: boolean;
        selective?: boolean;
        placeholder?: string;
    }
    export class ReplyKeyboardMarkup extends VirtualClass<{
        // flags: null;
        resize?: boolean;
        singleUse?: boolean;
        selective?: boolean;
        rows: Api.TypeKeyboardButtonRow[];
        placeholder?: string;
    }> {
        static fromReader(reader: Reader): ReplyKeyboardMarkup;
        // flags: null;
        resize?: boolean;
        singleUse?: boolean;
        selective?: boolean;
        rows: Api.TypeKeyboardButtonRow[];
        placeholder?: string;
    }
    export class ReplyInlineMarkup extends VirtualClass<{
        rows: Api.TypeKeyboardButtonRow[];
    }> {
        static fromReader(reader: Reader): ReplyInlineMarkup;
        rows: Api.TypeKeyboardButtonRow[];
    }
    export class MessageEntityUnknown extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityUnknown;
        offset: int;
        length: int;
    }
    export class MessageEntityMention extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityMention;
        offset: int;
        length: int;
    }
    export class MessageEntityHashtag extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityHashtag;
        offset: int;
        length: int;
    }
    export class MessageEntityBotCommand extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityBotCommand;
        offset: int;
        length: int;
    }
    export class MessageEntityUrl extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityUrl;
        offset: int;
        length: int;
    }
    export class MessageEntityEmail extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityEmail;
        offset: int;
        length: int;
    }
    export class MessageEntityBold extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityBold;
        offset: int;
        length: int;
    }
    export class MessageEntityItalic extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityItalic;
        offset: int;
        length: int;
    }
    export class MessageEntityCode extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityCode;
        offset: int;
        length: int;
    }
    export class MessageEntityPre extends VirtualClass<{
        offset: int;
        length: int;
        language: string;
    }> {
        static fromReader(reader: Reader): MessageEntityPre;
        offset: int;
        length: int;
        language: string;
    }
    export class MessageEntityTextUrl extends VirtualClass<{
        offset: int;
        length: int;
        url: string;
    }> {
        static fromReader(reader: Reader): MessageEntityTextUrl;
        offset: int;
        length: int;
        url: string;
    }
    export class MessageEntityMentionName extends VirtualClass<{
        offset: int;
        length: int;
        userId: int;
    }> {
        static fromReader(reader: Reader): MessageEntityMentionName;
        offset: int;
        length: int;
        userId: int;
    }
    export class InputMessageEntityMentionName extends VirtualClass<{
        offset: int;
        length: int;
        userId: Api.TypeInputUser;
    }> {
        static fromReader(reader: Reader): InputMessageEntityMentionName;
        offset: int;
        length: int;
        userId: Api.TypeInputUser;
    }
    export class MessageEntityPhone extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityPhone;
        offset: int;
        length: int;
    }
    export class MessageEntityCashtag extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityCashtag;
        offset: int;
        length: int;
    }
    export class MessageEntityUnderline extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityUnderline;
        offset: int;
        length: int;
    }
    export class MessageEntityStrike extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityStrike;
        offset: int;
        length: int;
    }
    export class MessageEntityBlockquote extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityBlockquote;
        offset: int;
        length: int;
    }
    export class MessageEntityBankCard extends VirtualClass<{
        offset: int;
        length: int;
    }> {
        static fromReader(reader: Reader): MessageEntityBankCard;
        offset: int;
        length: int;
    }
    export class InputChannelEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputChannelEmpty;
    }
    export class InputChannel extends VirtualClass<{
        channelId: int;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputChannel;
        channelId: int;
        accessHash: long;
    }
    export class InputChannelFromMessage extends VirtualClass<{
        peer: Api.TypeInputPeer;
        msgId: int;
        channelId: int;
    }> {
        static fromReader(reader: Reader): InputChannelFromMessage;
        peer: Api.TypeInputPeer;
        msgId: int;
        channelId: int;
    }
    export class MessageRange extends VirtualClass<{
        minId: int;
        maxId: int;
    }> {
        static fromReader(reader: Reader): MessageRange;
        minId: int;
        maxId: int;
    }
    export class ChannelMessagesFilterEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): ChannelMessagesFilterEmpty;
    }
    export class ChannelMessagesFilter extends VirtualClass<{
        // flags: null;
        excludeNewMessages?: boolean;
        ranges: Api.TypeMessageRange[];
    }> {
        static fromReader(reader: Reader): ChannelMessagesFilter;
        // flags: null;
        excludeNewMessages?: boolean;
        ranges: Api.TypeMessageRange[];
    }
    export class ChannelParticipant extends VirtualClass<{
        userId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): ChannelParticipant;
        userId: int;
        date: int;
    }
    export class ChannelParticipantSelf extends VirtualClass<{
        userId: int;
        inviterId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): ChannelParticipantSelf;
        userId: int;
        inviterId: int;
        date: int;
    }
    export class ChannelParticipantCreator extends VirtualClass<{
        // flags: null;
        userId: int;
        adminRights: Api.TypeChatAdminRights;
        rank?: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantCreator;
        // flags: null;
        userId: int;
        adminRights: Api.TypeChatAdminRights;
        rank?: string;
    }
    export class ChannelParticipantAdmin extends VirtualClass<{
        // flags: null;
        canEdit?: boolean;
        self?: boolean;
        userId: int;
        inviterId?: int;
        promotedBy: int;
        date: int;
        adminRights: Api.TypeChatAdminRights;
        rank?: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantAdmin;
        // flags: null;
        canEdit?: boolean;
        self?: boolean;
        userId: int;
        inviterId?: int;
        promotedBy: int;
        date: int;
        adminRights: Api.TypeChatAdminRights;
        rank?: string;
    }
    export class ChannelParticipantBanned extends VirtualClass<{
        // flags: null;
        left?: boolean;
        peer: Api.TypePeer;
        kickedBy: int;
        date: int;
        bannedRights: Api.TypeChatBannedRights;
    }> {
        static fromReader(reader: Reader): ChannelParticipantBanned;
        // flags: null;
        left?: boolean;
        peer: Api.TypePeer;
        kickedBy: int;
        date: int;
        bannedRights: Api.TypeChatBannedRights;
    }
    export class ChannelParticipantLeft extends VirtualClass<{
        peer: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): ChannelParticipantLeft;
        peer: Api.TypePeer;
    }
    export class ChannelParticipantsRecent extends VirtualClass<void> {
        static fromReader(reader: Reader): ChannelParticipantsRecent;
    }
    export class ChannelParticipantsAdmins extends VirtualClass<void> {
        static fromReader(reader: Reader): ChannelParticipantsAdmins;
    }
    export class ChannelParticipantsKicked extends VirtualClass<{
        q: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantsKicked;
        q: string;
    }
    export class ChannelParticipantsBots extends VirtualClass<void> {
        static fromReader(reader: Reader): ChannelParticipantsBots;
    }
    export class ChannelParticipantsBanned extends VirtualClass<{
        q: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantsBanned;
        q: string;
    }
    export class ChannelParticipantsSearch extends VirtualClass<{
        q: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantsSearch;
        q: string;
    }
    export class ChannelParticipantsContacts extends VirtualClass<{
        q: string;
    }> {
        static fromReader(reader: Reader): ChannelParticipantsContacts;
        q: string;
    }
    export class ChannelParticipantsMentions extends VirtualClass<{
        // flags: null;
        q?: string;
        topMsgId?: int;
    }> {
        static fromReader(reader: Reader): ChannelParticipantsMentions;
        // flags: null;
        q?: string;
        topMsgId?: int;
    }
    export class InputBotInlineMessageMediaAuto extends VirtualClass<{
        // flags: null;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageMediaAuto;
        // flags: null;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageText extends VirtualClass<{
        // flags: null;
        noWebpage?: boolean;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageText;
        // flags: null;
        noWebpage?: boolean;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageMediaGeo extends VirtualClass<{
        // flags: null;
        geoPoint: Api.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageMediaGeo;
        // flags: null;
        geoPoint: Api.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageMediaVenue extends VirtualClass<{
        // flags: null;
        geoPoint: Api.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageMediaVenue;
        // flags: null;
        geoPoint: Api.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageMediaContact extends VirtualClass<{
        // flags: null;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageMediaContact;
        // flags: null;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageGame extends VirtualClass<{
        // flags: null;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageGame;
        // flags: null;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineMessageMediaInvoice extends VirtualClass<{
        // flags: null;
        title: string;
        description: string;
        photo?: Api.TypeInputWebDocument;
        invoice: Api.TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: Api.TypeDataJSON;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageMediaInvoice;
        // flags: null;
        title: string;
        description: string;
        photo?: Api.TypeInputWebDocument;
        invoice: Api.TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: Api.TypeDataJSON;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class InputBotInlineResult extends VirtualClass<{
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Api.TypeInputWebDocument;
        content?: Api.TypeInputWebDocument;
        sendMessage: Api.TypeInputBotInlineMessage;
    }> {
        static fromReader(reader: Reader): InputBotInlineResult;
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Api.TypeInputWebDocument;
        content?: Api.TypeInputWebDocument;
        sendMessage: Api.TypeInputBotInlineMessage;
    }
    export class InputBotInlineResultPhoto extends VirtualClass<{
        id: string;
        type: string;
        photo: Api.TypeInputPhoto;
        sendMessage: Api.TypeInputBotInlineMessage;
    }> {
        static fromReader(reader: Reader): InputBotInlineResultPhoto;
        id: string;
        type: string;
        photo: Api.TypeInputPhoto;
        sendMessage: Api.TypeInputBotInlineMessage;
    }
    export class InputBotInlineResultDocument extends VirtualClass<{
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        document: Api.TypeInputDocument;
        sendMessage: Api.TypeInputBotInlineMessage;
    }> {
        static fromReader(reader: Reader): InputBotInlineResultDocument;
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        document: Api.TypeInputDocument;
        sendMessage: Api.TypeInputBotInlineMessage;
    }
    export class InputBotInlineResultGame extends VirtualClass<{
        id: string;
        shortName: string;
        sendMessage: Api.TypeInputBotInlineMessage;
    }> {
        static fromReader(reader: Reader): InputBotInlineResultGame;
        id: string;
        shortName: string;
        sendMessage: Api.TypeInputBotInlineMessage;
    }
    export class BotInlineMessageMediaAuto extends VirtualClass<{
        // flags: null;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageMediaAuto;
        // flags: null;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineMessageText extends VirtualClass<{
        // flags: null;
        noWebpage?: boolean;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageText;
        // flags: null;
        noWebpage?: boolean;
        message: string;
        entities?: Api.TypeMessageEntity[];
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineMessageMediaGeo extends VirtualClass<{
        // flags: null;
        geo: Api.TypeGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageMediaGeo;
        // flags: null;
        geo: Api.TypeGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineMessageMediaVenue extends VirtualClass<{
        // flags: null;
        geo: Api.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageMediaVenue;
        // flags: null;
        geo: Api.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineMessageMediaContact extends VirtualClass<{
        // flags: null;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageMediaContact;
        // flags: null;
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineMessageMediaInvoice extends VirtualClass<{
        // flags: null;
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Api.TypeWebDocument;
        currency: string;
        totalAmount: long;
        replyMarkup?: Api.TypeReplyMarkup;
    }> {
        static fromReader(reader: Reader): BotInlineMessageMediaInvoice;
        // flags: null;
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Api.TypeWebDocument;
        currency: string;
        totalAmount: long;
        replyMarkup?: Api.TypeReplyMarkup;
    }
    export class BotInlineResult extends VirtualClass<{
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Api.TypeWebDocument;
        content?: Api.TypeWebDocument;
        sendMessage: Api.TypeBotInlineMessage;
    }> {
        static fromReader(reader: Reader): BotInlineResult;
        // flags: null;
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Api.TypeWebDocument;
        content?: Api.TypeWebDocument;
        sendMessage: Api.TypeBotInlineMessage;
    }
    export class BotInlineMediaResult extends VirtualClass<{
        // flags: null;
        id: string;
        type: string;
        photo?: Api.TypePhoto;
        document?: Api.TypeDocument;
        title?: string;
        description?: string;
        sendMessage: Api.TypeBotInlineMessage;
    }> {
        static fromReader(reader: Reader): BotInlineMediaResult;
        // flags: null;
        id: string;
        type: string;
        photo?: Api.TypePhoto;
        document?: Api.TypeDocument;
        title?: string;
        description?: string;
        sendMessage: Api.TypeBotInlineMessage;
    }
    export class ExportedMessageLink extends VirtualClass<{
        link: string;
        html: string;
    }> {
        static fromReader(reader: Reader): ExportedMessageLink;
        link: string;
        html: string;
    }
    export class MessageFwdHeader extends VirtualClass<{
        // flags: null;
        imported?: boolean;
        fromId?: Api.TypePeer;
        fromName?: string;
        date: int;
        channelPost?: int;
        postAuthor?: string;
        savedFromPeer?: Api.TypePeer;
        savedFromMsgId?: int;
        psaType?: string;
    }> {
        static fromReader(reader: Reader): MessageFwdHeader;
        // flags: null;
        imported?: boolean;
        fromId?: Api.TypePeer;
        fromName?: string;
        date: int;
        channelPost?: int;
        postAuthor?: string;
        savedFromPeer?: Api.TypePeer;
        savedFromMsgId?: int;
        psaType?: string;
    }
    export class InputBotInlineMessageID extends VirtualClass<{
        dcId: int;
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputBotInlineMessageID;
        dcId: int;
        id: long;
        accessHash: long;
    }
    export class InlineBotSwitchPM extends VirtualClass<{
        text: string;
        startParam: string;
    }> {
        static fromReader(reader: Reader): InlineBotSwitchPM;
        text: string;
        startParam: string;
    }
    export class TopPeer extends VirtualClass<{
        peer: Api.TypePeer;
        rating: double;
    }> {
        static fromReader(reader: Reader): TopPeer;
        peer: Api.TypePeer;
        rating: double;
    }
    export class TopPeerCategoryBotsPM extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryBotsPM;
    }
    export class TopPeerCategoryBotsInline extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryBotsInline;
    }
    export class TopPeerCategoryCorrespondents extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryCorrespondents;
    }
    export class TopPeerCategoryGroups extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryGroups;
    }
    export class TopPeerCategoryChannels extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryChannels;
    }
    export class TopPeerCategoryPhoneCalls extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryPhoneCalls;
    }
    export class TopPeerCategoryForwardUsers extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryForwardUsers;
    }
    export class TopPeerCategoryForwardChats extends VirtualClass<void> {
        static fromReader(reader: Reader): TopPeerCategoryForwardChats;
    }
    export class TopPeerCategoryPeers extends VirtualClass<{
        category: Api.TypeTopPeerCategory;
        count: int;
        peers: Api.TypeTopPeer[];
    }> {
        static fromReader(reader: Reader): TopPeerCategoryPeers;
        category: Api.TypeTopPeerCategory;
        count: int;
        peers: Api.TypeTopPeer[];
    }
    export class DraftMessageEmpty extends VirtualClass<{
        // flags: null;
        date?: int;
    }> {
        static fromReader(reader: Reader): DraftMessageEmpty;
        // flags: null;
        date?: int;
    }
    export class DraftMessage extends VirtualClass<{
        // flags: null;
        noWebpage?: boolean;
        replyToMsgId?: int;
        message: string;
        entities?: Api.TypeMessageEntity[];
        date: int;
    }> {
        static fromReader(reader: Reader): DraftMessage;
        // flags: null;
        noWebpage?: boolean;
        replyToMsgId?: int;
        message: string;
        entities?: Api.TypeMessageEntity[];
        date: int;
    }
    export class StickerSetCovered extends VirtualClass<{
        set: Api.TypeStickerSet;
        cover: Api.TypeDocument;
    }> {
        static fromReader(reader: Reader): StickerSetCovered;
        set: Api.TypeStickerSet;
        cover: Api.TypeDocument;
    }
    export class StickerSetMultiCovered extends VirtualClass<{
        set: Api.TypeStickerSet;
        covers: Api.TypeDocument[];
    }> {
        static fromReader(reader: Reader): StickerSetMultiCovered;
        set: Api.TypeStickerSet;
        covers: Api.TypeDocument[];
    }
    export class MaskCoords extends VirtualClass<{
        n: int;
        x: double;
        y: double;
        zoom: double;
    }> {
        static fromReader(reader: Reader): MaskCoords;
        n: int;
        x: double;
        y: double;
        zoom: double;
    }
    export class InputStickeredMediaPhoto extends VirtualClass<{
        id: Api.TypeInputPhoto;
    }> {
        static fromReader(reader: Reader): InputStickeredMediaPhoto;
        id: Api.TypeInputPhoto;
    }
    export class InputStickeredMediaDocument extends VirtualClass<{
        id: Api.TypeInputDocument;
    }> {
        static fromReader(reader: Reader): InputStickeredMediaDocument;
        id: Api.TypeInputDocument;
    }
    export class Game extends VirtualClass<{
        // flags: null;
        id: long;
        accessHash: long;
        shortName: string;
        title: string;
        description: string;
        photo: Api.TypePhoto;
        document?: Api.TypeDocument;
    }> {
        static fromReader(reader: Reader): Game;
        // flags: null;
        id: long;
        accessHash: long;
        shortName: string;
        title: string;
        description: string;
        photo: Api.TypePhoto;
        document?: Api.TypeDocument;
    }
    export class InputGameID extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputGameID;
        id: long;
        accessHash: long;
    }
    export class InputGameShortName extends VirtualClass<{
        botId: Api.TypeInputUser;
        shortName: string;
    }> {
        static fromReader(reader: Reader): InputGameShortName;
        botId: Api.TypeInputUser;
        shortName: string;
    }
    export class HighScore extends VirtualClass<{
        pos: int;
        userId: int;
        score: int;
    }> {
        static fromReader(reader: Reader): HighScore;
        pos: int;
        userId: int;
        score: int;
    }
    export class TextEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): TextEmpty;
    }
    export class TextPlain extends VirtualClass<{
        text: string;
    }> {
        static fromReader(reader: Reader): TextPlain;
        text: string;
    }
    export class TextBold extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextBold;
        text: Api.TypeRichText;
    }
    export class TextItalic extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextItalic;
        text: Api.TypeRichText;
    }
    export class TextUnderline extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextUnderline;
        text: Api.TypeRichText;
    }
    export class TextStrike extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextStrike;
        text: Api.TypeRichText;
    }
    export class TextFixed extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextFixed;
        text: Api.TypeRichText;
    }
    export class TextUrl extends VirtualClass<{
        text: Api.TypeRichText;
        url: string;
        webpageId: long;
    }> {
        static fromReader(reader: Reader): TextUrl;
        text: Api.TypeRichText;
        url: string;
        webpageId: long;
    }
    export class TextEmail extends VirtualClass<{
        text: Api.TypeRichText;
        email: string;
    }> {
        static fromReader(reader: Reader): TextEmail;
        text: Api.TypeRichText;
        email: string;
    }
    export class TextConcat extends VirtualClass<{
        texts: Api.TypeRichText[];
    }> {
        static fromReader(reader: Reader): TextConcat;
        texts: Api.TypeRichText[];
    }
    export class TextSubscript extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextSubscript;
        text: Api.TypeRichText;
    }
    export class TextSuperscript extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextSuperscript;
        text: Api.TypeRichText;
    }
    export class TextMarked extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): TextMarked;
        text: Api.TypeRichText;
    }
    export class TextPhone extends VirtualClass<{
        text: Api.TypeRichText;
        phone: string;
    }> {
        static fromReader(reader: Reader): TextPhone;
        text: Api.TypeRichText;
        phone: string;
    }
    export class TextImage extends VirtualClass<{
        documentId: long;
        w: int;
        h: int;
    }> {
        static fromReader(reader: Reader): TextImage;
        documentId: long;
        w: int;
        h: int;
    }
    export class TextAnchor extends VirtualClass<{
        text: Api.TypeRichText;
        name: string;
    }> {
        static fromReader(reader: Reader): TextAnchor;
        text: Api.TypeRichText;
        name: string;
    }
    export class PageBlockUnsupported extends VirtualClass<void> {
        static fromReader(reader: Reader): PageBlockUnsupported;
    }
    export class PageBlockTitle extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockTitle;
        text: Api.TypeRichText;
    }
    export class PageBlockSubtitle extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockSubtitle;
        text: Api.TypeRichText;
    }
    export class PageBlockAuthorDate extends VirtualClass<{
        author: Api.TypeRichText;
        publishedDate: int;
    }> {
        static fromReader(reader: Reader): PageBlockAuthorDate;
        author: Api.TypeRichText;
        publishedDate: int;
    }
    export class PageBlockHeader extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockHeader;
        text: Api.TypeRichText;
    }
    export class PageBlockSubheader extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockSubheader;
        text: Api.TypeRichText;
    }
    export class PageBlockParagraph extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockParagraph;
        text: Api.TypeRichText;
    }
    export class PageBlockPreformatted extends VirtualClass<{
        text: Api.TypeRichText;
        language: string;
    }> {
        static fromReader(reader: Reader): PageBlockPreformatted;
        text: Api.TypeRichText;
        language: string;
    }
    export class PageBlockFooter extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockFooter;
        text: Api.TypeRichText;
    }
    export class PageBlockDivider extends VirtualClass<void> {
        static fromReader(reader: Reader): PageBlockDivider;
    }
    export class PageBlockAnchor extends VirtualClass<{
        name: string;
    }> {
        static fromReader(reader: Reader): PageBlockAnchor;
        name: string;
    }
    export class PageBlockList extends VirtualClass<{
        items: Api.TypePageListItem[];
    }> {
        static fromReader(reader: Reader): PageBlockList;
        items: Api.TypePageListItem[];
    }
    export class PageBlockBlockquote extends VirtualClass<{
        text: Api.TypeRichText;
        caption: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockBlockquote;
        text: Api.TypeRichText;
        caption: Api.TypeRichText;
    }
    export class PageBlockPullquote extends VirtualClass<{
        text: Api.TypeRichText;
        caption: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockPullquote;
        text: Api.TypeRichText;
        caption: Api.TypeRichText;
    }
    export class PageBlockPhoto extends VirtualClass<{
        // flags: null;
        photoId: long;
        caption: Api.TypePageCaption;
        url?: string;
        webpageId?: long;
    }> {
        static fromReader(reader: Reader): PageBlockPhoto;
        // flags: null;
        photoId: long;
        caption: Api.TypePageCaption;
        url?: string;
        webpageId?: long;
    }
    export class PageBlockVideo extends VirtualClass<{
        // flags: null;
        autoplay?: boolean;
        loop?: boolean;
        videoId: long;
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockVideo;
        // flags: null;
        autoplay?: boolean;
        loop?: boolean;
        videoId: long;
        caption: Api.TypePageCaption;
    }
    export class PageBlockCover extends VirtualClass<{
        cover: Api.TypePageBlock;
    }> {
        static fromReader(reader: Reader): PageBlockCover;
        cover: Api.TypePageBlock;
    }
    export class PageBlockEmbed extends VirtualClass<{
        // flags: null;
        fullWidth?: boolean;
        allowScrolling?: boolean;
        url?: string;
        html?: string;
        posterPhotoId?: long;
        w?: int;
        h?: int;
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockEmbed;
        // flags: null;
        fullWidth?: boolean;
        allowScrolling?: boolean;
        url?: string;
        html?: string;
        posterPhotoId?: long;
        w?: int;
        h?: int;
        caption: Api.TypePageCaption;
    }
    export class PageBlockEmbedPost extends VirtualClass<{
        url: string;
        webpageId: long;
        authorPhotoId: long;
        author: string;
        date: int;
        blocks: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockEmbedPost;
        url: string;
        webpageId: long;
        authorPhotoId: long;
        author: string;
        date: int;
        blocks: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }
    export class PageBlockCollage extends VirtualClass<{
        items: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockCollage;
        items: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }
    export class PageBlockSlideshow extends VirtualClass<{
        items: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockSlideshow;
        items: Api.TypePageBlock[];
        caption: Api.TypePageCaption;
    }
    export class PageBlockChannel extends VirtualClass<{
        channel: Api.TypeChat;
    }> {
        static fromReader(reader: Reader): PageBlockChannel;
        channel: Api.TypeChat;
    }
    export class PageBlockAudio extends VirtualClass<{
        audioId: long;
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockAudio;
        audioId: long;
        caption: Api.TypePageCaption;
    }
    export class PageBlockKicker extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockKicker;
        text: Api.TypeRichText;
    }
    export class PageBlockTable extends VirtualClass<{
        // flags: null;
        bordered?: boolean;
        striped?: boolean;
        title: Api.TypeRichText;
        rows: Api.TypePageTableRow[];
    }> {
        static fromReader(reader: Reader): PageBlockTable;
        // flags: null;
        bordered?: boolean;
        striped?: boolean;
        title: Api.TypeRichText;
        rows: Api.TypePageTableRow[];
    }
    export class PageBlockOrderedList extends VirtualClass<{
        items: Api.TypePageListOrderedItem[];
    }> {
        static fromReader(reader: Reader): PageBlockOrderedList;
        items: Api.TypePageListOrderedItem[];
    }
    export class PageBlockDetails extends VirtualClass<{
        // flags: null;
        open?: boolean;
        blocks: Api.TypePageBlock[];
        title: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageBlockDetails;
        // flags: null;
        open?: boolean;
        blocks: Api.TypePageBlock[];
        title: Api.TypeRichText;
    }
    export class PageBlockRelatedArticles extends VirtualClass<{
        title: Api.TypeRichText;
        articles: Api.TypePageRelatedArticle[];
    }> {
        static fromReader(reader: Reader): PageBlockRelatedArticles;
        title: Api.TypeRichText;
        articles: Api.TypePageRelatedArticle[];
    }
    export class PageBlockMap extends VirtualClass<{
        geo: Api.TypeGeoPoint;
        zoom: int;
        w: int;
        h: int;
        caption: Api.TypePageCaption;
    }> {
        static fromReader(reader: Reader): PageBlockMap;
        geo: Api.TypeGeoPoint;
        zoom: int;
        w: int;
        h: int;
        caption: Api.TypePageCaption;
    }
    export class PhoneCallDiscardReasonMissed extends VirtualClass<void> {
        static fromReader(reader: Reader): PhoneCallDiscardReasonMissed;
    }
    export class PhoneCallDiscardReasonDisconnect extends VirtualClass<void> {
        static fromReader(reader: Reader): PhoneCallDiscardReasonDisconnect;
    }
    export class PhoneCallDiscardReasonHangup extends VirtualClass<void> {
        static fromReader(reader: Reader): PhoneCallDiscardReasonHangup;
    }
    export class PhoneCallDiscardReasonBusy extends VirtualClass<void> {
        static fromReader(reader: Reader): PhoneCallDiscardReasonBusy;
    }
    export class DataJSON extends VirtualClass<{
        data: string;
    }> {
        static fromReader(reader: Reader): DataJSON;
        data: string;
    }
    export class LabeledPrice extends VirtualClass<{
        label: string;
        amount: long;
    }> {
        static fromReader(reader: Reader): LabeledPrice;
        label: string;
        amount: long;
    }
    export class Invoice extends VirtualClass<{
        // flags: null;
        test?: boolean;
        nameRequested?: boolean;
        phoneRequested?: boolean;
        emailRequested?: boolean;
        shippingAddressRequested?: boolean;
        flexible?: boolean;
        phoneToProvider?: boolean;
        emailToProvider?: boolean;
        currency: string;
        prices: Api.TypeLabeledPrice[];
        maxTipAmount?: long;
        suggestedTipAmounts?: long[];
    }> {
        static fromReader(reader: Reader): Invoice;
        // flags: null;
        test?: boolean;
        nameRequested?: boolean;
        phoneRequested?: boolean;
        emailRequested?: boolean;
        shippingAddressRequested?: boolean;
        flexible?: boolean;
        phoneToProvider?: boolean;
        emailToProvider?: boolean;
        currency: string;
        prices: Api.TypeLabeledPrice[];
        maxTipAmount?: long;
        suggestedTipAmounts?: long[];
    }
    export class PaymentCharge extends VirtualClass<{
        id: string;
        providerChargeId: string;
    }> {
        static fromReader(reader: Reader): PaymentCharge;
        id: string;
        providerChargeId: string;
    }
    export class PostAddress extends VirtualClass<{
        streetLine1: string;
        streetLine2: string;
        city: string;
        state: string;
        countryIso2: string;
        postCode: string;
    }> {
        static fromReader(reader: Reader): PostAddress;
        streetLine1: string;
        streetLine2: string;
        city: string;
        state: string;
        countryIso2: string;
        postCode: string;
    }
    export class PaymentRequestedInfo extends VirtualClass<{
        // flags: null;
        name?: string;
        phone?: string;
        email?: string;
        shippingAddress?: Api.TypePostAddress;
    }> {
        static fromReader(reader: Reader): PaymentRequestedInfo;
        // flags: null;
        name?: string;
        phone?: string;
        email?: string;
        shippingAddress?: Api.TypePostAddress;
    }
    export class PaymentSavedCredentialsCard extends VirtualClass<{
        id: string;
        title: string;
    }> {
        static fromReader(reader: Reader): PaymentSavedCredentialsCard;
        id: string;
        title: string;
    }
    export class WebDocument extends VirtualClass<{
        url: string;
        accessHash: long;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }> {
        static fromReader(reader: Reader): WebDocument;
        url: string;
        accessHash: long;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }
    export class WebDocumentNoProxy extends VirtualClass<{
        url: string;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }> {
        static fromReader(reader: Reader): WebDocumentNoProxy;
        url: string;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }
    export class InputWebDocument extends VirtualClass<{
        url: string;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }> {
        static fromReader(reader: Reader): InputWebDocument;
        url: string;
        size: int;
        mimeType: string;
        attributes: Api.TypeDocumentAttribute[];
    }
    export class InputWebFileLocation extends VirtualClass<{
        url: string;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputWebFileLocation;
        url: string;
        accessHash: long;
    }
    export class InputWebFileGeoPointLocation extends VirtualClass<{
        geoPoint: Api.TypeInputGeoPoint;
        accessHash: long;
        w: int;
        h: int;
        zoom: int;
        scale: int;
    }> {
        static fromReader(reader: Reader): InputWebFileGeoPointLocation;
        geoPoint: Api.TypeInputGeoPoint;
        accessHash: long;
        w: int;
        h: int;
        zoom: int;
        scale: int;
    }
    export class InputPaymentCredentialsSaved extends VirtualClass<{
        id: string;
        tmpPassword: bytes;
    }> {
        static fromReader(reader: Reader): InputPaymentCredentialsSaved;
        id: string;
        tmpPassword: bytes;
    }
    export class InputPaymentCredentials extends VirtualClass<{
        // flags: null;
        save?: boolean;
        data: Api.TypeDataJSON;
    }> {
        static fromReader(reader: Reader): InputPaymentCredentials;
        // flags: null;
        save?: boolean;
        data: Api.TypeDataJSON;
    }
    export class InputPaymentCredentialsApplePay extends VirtualClass<{
        paymentData: Api.TypeDataJSON;
    }> {
        static fromReader(reader: Reader): InputPaymentCredentialsApplePay;
        paymentData: Api.TypeDataJSON;
    }
    export class InputPaymentCredentialsGooglePay extends VirtualClass<{
        paymentToken: Api.TypeDataJSON;
    }> {
        static fromReader(reader: Reader): InputPaymentCredentialsGooglePay;
        paymentToken: Api.TypeDataJSON;
    }
    export class ShippingOption extends VirtualClass<{
        id: string;
        title: string;
        prices: Api.TypeLabeledPrice[];
    }> {
        static fromReader(reader: Reader): ShippingOption;
        id: string;
        title: string;
        prices: Api.TypeLabeledPrice[];
    }
    export class InputStickerSetItem extends VirtualClass<{
        // flags: null;
        document: Api.TypeInputDocument;
        emoji: string;
        maskCoords?: Api.TypeMaskCoords;
    }> {
        static fromReader(reader: Reader): InputStickerSetItem;
        // flags: null;
        document: Api.TypeInputDocument;
        emoji: string;
        maskCoords?: Api.TypeMaskCoords;
    }
    export class InputPhoneCall extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputPhoneCall;
        id: long;
        accessHash: long;
    }
    export class PhoneCallEmpty extends VirtualClass<{
        id: long;
    }> {
        static fromReader(reader: Reader): PhoneCallEmpty;
        id: long;
    }
    export class PhoneCallWaiting extends VirtualClass<{
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        protocol: Api.TypePhoneCallProtocol;
        receiveDate?: int;
    }> {
        static fromReader(reader: Reader): PhoneCallWaiting;
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        protocol: Api.TypePhoneCallProtocol;
        receiveDate?: int;
    }
    export class PhoneCallRequested extends VirtualClass<{
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAHash: bytes;
        protocol: Api.TypePhoneCallProtocol;
    }> {
        static fromReader(reader: Reader): PhoneCallRequested;
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAHash: bytes;
        protocol: Api.TypePhoneCallProtocol;
    }
    export class PhoneCallAccepted extends VirtualClass<{
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gB: bytes;
        protocol: Api.TypePhoneCallProtocol;
    }> {
        static fromReader(reader: Reader): PhoneCallAccepted;
        // flags: null;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gB: bytes;
        protocol: Api.TypePhoneCallProtocol;
    }
    export class PhoneCall extends VirtualClass<{
        // flags: null;
        p2pAllowed?: boolean;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
        protocol: Api.TypePhoneCallProtocol;
        connections: Api.TypePhoneConnection[];
        startDate: int;
    }> {
        static fromReader(reader: Reader): PhoneCall;
        // flags: null;
        p2pAllowed?: boolean;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: int;
        participantId: int;
        gAOrB: bytes;
        keyFingerprint: long;
        protocol: Api.TypePhoneCallProtocol;
        connections: Api.TypePhoneConnection[];
        startDate: int;
    }
    export class PhoneCallDiscarded extends VirtualClass<{
        // flags: null;
        needRating?: boolean;
        needDebug?: boolean;
        video?: boolean;
        id: long;
        reason?: Api.TypePhoneCallDiscardReason;
        duration?: int;
    }> {
        static fromReader(reader: Reader): PhoneCallDiscarded;
        // flags: null;
        needRating?: boolean;
        needDebug?: boolean;
        video?: boolean;
        id: long;
        reason?: Api.TypePhoneCallDiscardReason;
        duration?: int;
    }
    export class PhoneConnection extends VirtualClass<{
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        peerTag: bytes;
    }> {
        static fromReader(reader: Reader): PhoneConnection;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        peerTag: bytes;
    }
    export class PhoneConnectionWebrtc extends VirtualClass<{
        // flags: null;
        turn?: boolean;
        stun?: boolean;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        username: string;
        password: string;
    }> {
        static fromReader(reader: Reader): PhoneConnectionWebrtc;
        // flags: null;
        turn?: boolean;
        stun?: boolean;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        username: string;
        password: string;
    }
    export class PhoneCallProtocol extends VirtualClass<{
        // flags: null;
        udpP2p?: boolean;
        udpReflector?: boolean;
        minLayer: int;
        maxLayer: int;
        libraryVersions: string[];
    }> {
        static fromReader(reader: Reader): PhoneCallProtocol;
        // flags: null;
        udpP2p?: boolean;
        udpReflector?: boolean;
        minLayer: int;
        maxLayer: int;
        libraryVersions: string[];
    }
    export class CdnPublicKey extends VirtualClass<{
        dcId: int;
        publicKey: string;
    }> {
        static fromReader(reader: Reader): CdnPublicKey;
        dcId: int;
        publicKey: string;
    }
    export class CdnConfig extends VirtualClass<{
        publicKeys: Api.TypeCdnPublicKey[];
    }> {
        static fromReader(reader: Reader): CdnConfig;
        publicKeys: Api.TypeCdnPublicKey[];
    }
    export class LangPackString extends VirtualClass<{
        key: string;
        value: string;
    }> {
        static fromReader(reader: Reader): LangPackString;
        key: string;
        value: string;
    }
    export class LangPackStringPluralized extends VirtualClass<{
        // flags: null;
        key: string;
        zeroValue?: string;
        oneValue?: string;
        twoValue?: string;
        fewValue?: string;
        manyValue?: string;
        otherValue: string;
    }> {
        static fromReader(reader: Reader): LangPackStringPluralized;
        // flags: null;
        key: string;
        zeroValue?: string;
        oneValue?: string;
        twoValue?: string;
        fewValue?: string;
        manyValue?: string;
        otherValue: string;
    }
    export class LangPackStringDeleted extends VirtualClass<{
        key: string;
    }> {
        static fromReader(reader: Reader): LangPackStringDeleted;
        key: string;
    }
    export class LangPackDifference extends VirtualClass<{
        langCode: string;
        fromVersion: int;
        version: int;
        strings: Api.TypeLangPackString[];
    }> {
        static fromReader(reader: Reader): LangPackDifference;
        langCode: string;
        fromVersion: int;
        version: int;
        strings: Api.TypeLangPackString[];
    }
    export class LangPackLanguage extends VirtualClass<{
        // flags: null;
        official?: boolean;
        rtl?: boolean;
        beta?: boolean;
        name: string;
        nativeName: string;
        langCode: string;
        baseLangCode?: string;
        pluralCode: string;
        stringsCount: int;
        translatedCount: int;
        translationsUrl: string;
    }> {
        static fromReader(reader: Reader): LangPackLanguage;
        // flags: null;
        official?: boolean;
        rtl?: boolean;
        beta?: boolean;
        name: string;
        nativeName: string;
        langCode: string;
        baseLangCode?: string;
        pluralCode: string;
        stringsCount: int;
        translatedCount: int;
        translationsUrl: string;
    }
    export class ChannelAdminLogEventActionChangeTitle extends VirtualClass<{
        prevValue: string;
        newValue: string;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeTitle;
        prevValue: string;
        newValue: string;
    }
    export class ChannelAdminLogEventActionChangeAbout extends VirtualClass<{
        prevValue: string;
        newValue: string;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeAbout;
        prevValue: string;
        newValue: string;
    }
    export class ChannelAdminLogEventActionChangeUsername extends VirtualClass<{
        prevValue: string;
        newValue: string;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeUsername;
        prevValue: string;
        newValue: string;
    }
    export class ChannelAdminLogEventActionChangePhoto extends VirtualClass<{
        prevPhoto: Api.TypePhoto;
        newPhoto: Api.TypePhoto;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangePhoto;
        prevPhoto: Api.TypePhoto;
        newPhoto: Api.TypePhoto;
    }
    export class ChannelAdminLogEventActionToggleInvites extends VirtualClass<{
        newValue: Bool;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionToggleInvites;
        newValue: Bool;
    }
    export class ChannelAdminLogEventActionToggleSignatures extends VirtualClass<{
        newValue: Bool;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionToggleSignatures;
        newValue: Bool;
    }
    export class ChannelAdminLogEventActionUpdatePinned extends VirtualClass<{
        message: Api.TypeMessage;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionUpdatePinned;
        message: Api.TypeMessage;
    }
    export class ChannelAdminLogEventActionEditMessage extends VirtualClass<{
        prevMessage: Api.TypeMessage;
        newMessage: Api.TypeMessage;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionEditMessage;
        prevMessage: Api.TypeMessage;
        newMessage: Api.TypeMessage;
    }
    export class ChannelAdminLogEventActionDeleteMessage extends VirtualClass<{
        message: Api.TypeMessage;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionDeleteMessage;
        message: Api.TypeMessage;
    }
    export class ChannelAdminLogEventActionParticipantJoin extends VirtualClass<void> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantJoin;
    }
    export class ChannelAdminLogEventActionParticipantLeave extends VirtualClass<void> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantLeave;
    }
    export class ChannelAdminLogEventActionParticipantInvite extends VirtualClass<{
        participant: Api.TypeChannelParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantInvite;
        participant: Api.TypeChannelParticipant;
    }
    export class ChannelAdminLogEventActionParticipantToggleBan extends VirtualClass<{
        prevParticipant: Api.TypeChannelParticipant;
        newParticipant: Api.TypeChannelParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantToggleBan;
        prevParticipant: Api.TypeChannelParticipant;
        newParticipant: Api.TypeChannelParticipant;
    }
    export class ChannelAdminLogEventActionParticipantToggleAdmin extends VirtualClass<{
        prevParticipant: Api.TypeChannelParticipant;
        newParticipant: Api.TypeChannelParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantToggleAdmin;
        prevParticipant: Api.TypeChannelParticipant;
        newParticipant: Api.TypeChannelParticipant;
    }
    export class ChannelAdminLogEventActionChangeStickerSet extends VirtualClass<{
        prevStickerset: Api.TypeInputStickerSet;
        newStickerset: Api.TypeInputStickerSet;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeStickerSet;
        prevStickerset: Api.TypeInputStickerSet;
        newStickerset: Api.TypeInputStickerSet;
    }
    export class ChannelAdminLogEventActionTogglePreHistoryHidden extends VirtualClass<{
        newValue: Bool;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionTogglePreHistoryHidden;
        newValue: Bool;
    }
    export class ChannelAdminLogEventActionDefaultBannedRights extends VirtualClass<{
        prevBannedRights: Api.TypeChatBannedRights;
        newBannedRights: Api.TypeChatBannedRights;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionDefaultBannedRights;
        prevBannedRights: Api.TypeChatBannedRights;
        newBannedRights: Api.TypeChatBannedRights;
    }
    export class ChannelAdminLogEventActionStopPoll extends VirtualClass<{
        message: Api.TypeMessage;
    }> {
        static fromReader(reader: Reader): ChannelAdminLogEventActionStopPoll;
        message: Api.TypeMessage;
    }
    export class ChannelAdminLogEventActionChangeLinkedChat extends VirtualClass<{
        prevValue: int;
        newValue: int;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeLinkedChat;
        prevValue: int;
        newValue: int;
    }
    export class ChannelAdminLogEventActionChangeLocation extends VirtualClass<{
        prevValue: Api.TypeChannelLocation;
        newValue: Api.TypeChannelLocation;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeLocation;
        prevValue: Api.TypeChannelLocation;
        newValue: Api.TypeChannelLocation;
    }
    export class ChannelAdminLogEventActionToggleSlowMode extends VirtualClass<{
        prevValue: int;
        newValue: int;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionToggleSlowMode;
        prevValue: int;
        newValue: int;
    }
    export class ChannelAdminLogEventActionStartGroupCall extends VirtualClass<{
        call: Api.TypeInputGroupCall;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionStartGroupCall;
        call: Api.TypeInputGroupCall;
    }
    export class ChannelAdminLogEventActionDiscardGroupCall extends VirtualClass<{
        call: Api.TypeInputGroupCall;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionDiscardGroupCall;
        call: Api.TypeInputGroupCall;
    }
    export class ChannelAdminLogEventActionParticipantMute extends VirtualClass<{
        participant: Api.TypeGroupCallParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantMute;
        participant: Api.TypeGroupCallParticipant;
    }
    export class ChannelAdminLogEventActionParticipantUnmute extends VirtualClass<{
        participant: Api.TypeGroupCallParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantUnmute;
        participant: Api.TypeGroupCallParticipant;
    }
    export class ChannelAdminLogEventActionToggleGroupCallSetting extends VirtualClass<{
        joinMuted: Bool;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionToggleGroupCallSetting;
        joinMuted: Bool;
    }
    export class ChannelAdminLogEventActionParticipantJoinByInvite extends VirtualClass<{
        invite: Api.TypeExportedChatInvite;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantJoinByInvite;
        invite: Api.TypeExportedChatInvite;
    }
    export class ChannelAdminLogEventActionExportedInviteDelete extends VirtualClass<{
        invite: Api.TypeExportedChatInvite;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionExportedInviteDelete;
        invite: Api.TypeExportedChatInvite;
    }
    export class ChannelAdminLogEventActionExportedInviteRevoke extends VirtualClass<{
        invite: Api.TypeExportedChatInvite;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionExportedInviteRevoke;
        invite: Api.TypeExportedChatInvite;
    }
    export class ChannelAdminLogEventActionExportedInviteEdit extends VirtualClass<{
        prevInvite: Api.TypeExportedChatInvite;
        newInvite: Api.TypeExportedChatInvite;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionExportedInviteEdit;
        prevInvite: Api.TypeExportedChatInvite;
        newInvite: Api.TypeExportedChatInvite;
    }
    export class ChannelAdminLogEventActionParticipantVolume extends VirtualClass<{
        participant: Api.TypeGroupCallParticipant;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionParticipantVolume;
        participant: Api.TypeGroupCallParticipant;
    }
    export class ChannelAdminLogEventActionChangeHistoryTTL extends VirtualClass<{
        prevValue: int;
        newValue: int;
    }> {
        static fromReader(
            reader: Reader
        ): ChannelAdminLogEventActionChangeHistoryTTL;
        prevValue: int;
        newValue: int;
    }
    export class ChannelAdminLogEvent extends VirtualClass<{
        id: long;
        date: int;
        userId: int;
        action: Api.TypeChannelAdminLogEventAction;
    }> {
        static fromReader(reader: Reader): ChannelAdminLogEvent;
        id: long;
        date: int;
        userId: int;
        action: Api.TypeChannelAdminLogEventAction;
    }
    export class ChannelAdminLogEventsFilter extends VirtualClass<{
        // flags: null;
        join?: boolean;
        leave?: boolean;
        invite?: boolean;
        ban?: boolean;
        unban?: boolean;
        kick?: boolean;
        unkick?: boolean;
        promote?: boolean;
        demote?: boolean;
        info?: boolean;
        settings?: boolean;
        pinned?: boolean;
        edit?: boolean;
        delete?: boolean;
        groupCall?: boolean;
        invites?: boolean;
    }> {
        static fromReader(reader: Reader): ChannelAdminLogEventsFilter;
        // flags: null;
        join?: boolean;
        leave?: boolean;
        invite?: boolean;
        ban?: boolean;
        unban?: boolean;
        kick?: boolean;
        unkick?: boolean;
        promote?: boolean;
        demote?: boolean;
        info?: boolean;
        settings?: boolean;
        pinned?: boolean;
        edit?: boolean;
        delete?: boolean;
        groupCall?: boolean;
        invites?: boolean;
    }
    export class PopularContact extends VirtualClass<{
        clientId: long;
        importers: int;
    }> {
        static fromReader(reader: Reader): PopularContact;
        clientId: long;
        importers: int;
    }
    export class RecentMeUrlUnknown extends VirtualClass<{
        url: string;
    }> {
        static fromReader(reader: Reader): RecentMeUrlUnknown;
        url: string;
    }
    export class RecentMeUrlUser extends VirtualClass<{
        url: string;
        userId: int;
    }> {
        static fromReader(reader: Reader): RecentMeUrlUser;
        url: string;
        userId: int;
    }
    export class RecentMeUrlChat extends VirtualClass<{
        url: string;
        chatId: int;
    }> {
        static fromReader(reader: Reader): RecentMeUrlChat;
        url: string;
        chatId: int;
    }
    export class RecentMeUrlChatInvite extends VirtualClass<{
        url: string;
        chatInvite: Api.TypeChatInvite;
    }> {
        static fromReader(reader: Reader): RecentMeUrlChatInvite;
        url: string;
        chatInvite: Api.TypeChatInvite;
    }
    export class RecentMeUrlStickerSet extends VirtualClass<{
        url: string;
        set: Api.TypeStickerSetCovered;
    }> {
        static fromReader(reader: Reader): RecentMeUrlStickerSet;
        url: string;
        set: Api.TypeStickerSetCovered;
    }
    export class InputSingleMedia extends VirtualClass<{
        // flags: null;
        media: Api.TypeInputMedia;
        randomId: long;
        message: string;
        entities?: Api.TypeMessageEntity[];
    }> {
        static fromReader(reader: Reader): InputSingleMedia;
        // flags: null;
        media: Api.TypeInputMedia;
        randomId: long;
        message: string;
        entities?: Api.TypeMessageEntity[];
    }
    export class WebAuthorization extends VirtualClass<{
        hash: long;
        botId: int;
        domain: string;
        browser: string;
        platform: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        region: string;
    }> {
        static fromReader(reader: Reader): WebAuthorization;
        hash: long;
        botId: int;
        domain: string;
        browser: string;
        platform: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        region: string;
    }
    export class InputMessageID extends VirtualClass<{
        id: int;
    }> {
        static fromReader(reader: Reader): InputMessageID;
        id: int;
    }
    export class InputMessageReplyTo extends VirtualClass<{
        id: int;
    }> {
        static fromReader(reader: Reader): InputMessageReplyTo;
        id: int;
    }
    export class InputMessagePinned extends VirtualClass<void> {
        static fromReader(reader: Reader): InputMessagePinned;
    }
    export class InputMessageCallbackQuery extends VirtualClass<{
        id: int;
        queryId: long;
    }> {
        static fromReader(reader: Reader): InputMessageCallbackQuery;
        id: int;
        queryId: long;
    }
    export class InputDialogPeer extends VirtualClass<{
        peer: Api.TypeInputPeer;
    }> {
        static fromReader(reader: Reader): InputDialogPeer;
        peer: Api.TypeInputPeer;
    }
    export class InputDialogPeerFolder extends VirtualClass<{
        folderId: int;
    }> {
        static fromReader(reader: Reader): InputDialogPeerFolder;
        folderId: int;
    }
    export class DialogPeer extends VirtualClass<{
        peer: Api.TypePeer;
    }> {
        static fromReader(reader: Reader): DialogPeer;
        peer: Api.TypePeer;
    }
    export class DialogPeerFolder extends VirtualClass<{
        folderId: int;
    }> {
        static fromReader(reader: Reader): DialogPeerFolder;
        folderId: int;
    }
    export class FileHash extends VirtualClass<{
        offset: int;
        limit: int;
        hash: bytes;
    }> {
        static fromReader(reader: Reader): FileHash;
        offset: int;
        limit: int;
        hash: bytes;
    }
    export class InputClientProxy extends VirtualClass<{
        address: string;
        port: int;
    }> {
        static fromReader(reader: Reader): InputClientProxy;
        address: string;
        port: int;
    }
    export class InputSecureFileUploaded extends VirtualClass<{
        id: long;
        parts: int;
        md5Checksum: string;
        fileHash: bytes;
        secret: bytes;
    }> {
        static fromReader(reader: Reader): InputSecureFileUploaded;
        id: long;
        parts: int;
        md5Checksum: string;
        fileHash: bytes;
        secret: bytes;
    }
    export class InputSecureFile extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputSecureFile;
        id: long;
        accessHash: long;
    }
    export class SecureFileEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureFileEmpty;
    }
    export class SecureFile extends VirtualClass<{
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        date: int;
        fileHash: bytes;
        secret: bytes;
    }> {
        static fromReader(reader: Reader): SecureFile;
        id: long;
        accessHash: long;
        size: int;
        dcId: int;
        date: int;
        fileHash: bytes;
        secret: bytes;
    }
    export class SecureData extends VirtualClass<{
        data: bytes;
        dataHash: bytes;
        secret: bytes;
    }> {
        static fromReader(reader: Reader): SecureData;
        data: bytes;
        dataHash: bytes;
        secret: bytes;
    }
    export class SecurePlainPhone extends VirtualClass<{
        phone: string;
    }> {
        static fromReader(reader: Reader): SecurePlainPhone;
        phone: string;
    }
    export class SecurePlainEmail extends VirtualClass<{
        email: string;
    }> {
        static fromReader(reader: Reader): SecurePlainEmail;
        email: string;
    }
    export class SecureValueTypePersonalDetails extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypePersonalDetails;
    }
    export class SecureValueTypePassport extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypePassport;
    }
    export class SecureValueTypeDriverLicense extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeDriverLicense;
    }
    export class SecureValueTypeIdentityCard extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeIdentityCard;
    }
    export class SecureValueTypeInternalPassport extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeInternalPassport;
    }
    export class SecureValueTypeAddress extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeAddress;
    }
    export class SecureValueTypeUtilityBill extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeUtilityBill;
    }
    export class SecureValueTypeBankStatement extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeBankStatement;
    }
    export class SecureValueTypeRentalAgreement extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeRentalAgreement;
    }
    export class SecureValueTypePassportRegistration extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypePassportRegistration;
    }
    export class SecureValueTypeTemporaryRegistration extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeTemporaryRegistration;
    }
    export class SecureValueTypePhone extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypePhone;
    }
    export class SecureValueTypeEmail extends VirtualClass<void> {
        static fromReader(reader: Reader): SecureValueTypeEmail;
    }
    export class SecureValue extends VirtualClass<{
        // flags: null;
        type: Api.TypeSecureValueType;
        data?: Api.TypeSecureData;
        frontSide?: Api.TypeSecureFile;
        reverseSide?: Api.TypeSecureFile;
        selfie?: Api.TypeSecureFile;
        translation?: Api.TypeSecureFile[];
        files?: Api.TypeSecureFile[];
        plainData?: Api.TypeSecurePlainData;
        hash: bytes;
    }> {
        static fromReader(reader: Reader): SecureValue;
        // flags: null;
        type: Api.TypeSecureValueType;
        data?: Api.TypeSecureData;
        frontSide?: Api.TypeSecureFile;
        reverseSide?: Api.TypeSecureFile;
        selfie?: Api.TypeSecureFile;
        translation?: Api.TypeSecureFile[];
        files?: Api.TypeSecureFile[];
        plainData?: Api.TypeSecurePlainData;
        hash: bytes;
    }
    export class InputSecureValue extends VirtualClass<{
        // flags: null;
        type: Api.TypeSecureValueType;
        data?: Api.TypeSecureData;
        frontSide?: Api.TypeInputSecureFile;
        reverseSide?: Api.TypeInputSecureFile;
        selfie?: Api.TypeInputSecureFile;
        translation?: Api.TypeInputSecureFile[];
        files?: Api.TypeInputSecureFile[];
        plainData?: Api.TypeSecurePlainData;
    }> {
        static fromReader(reader: Reader): InputSecureValue;
        // flags: null;
        type: Api.TypeSecureValueType;
        data?: Api.TypeSecureData;
        frontSide?: Api.TypeInputSecureFile;
        reverseSide?: Api.TypeInputSecureFile;
        selfie?: Api.TypeInputSecureFile;
        translation?: Api.TypeInputSecureFile[];
        files?: Api.TypeInputSecureFile[];
        plainData?: Api.TypeSecurePlainData;
    }
    export class SecureValueHash extends VirtualClass<{
        type: Api.TypeSecureValueType;
        hash: bytes;
    }> {
        static fromReader(reader: Reader): SecureValueHash;
        type: Api.TypeSecureValueType;
        hash: bytes;
    }
    export class SecureValueErrorData extends VirtualClass<{
        type: Api.TypeSecureValueType;
        dataHash: bytes;
        field: string;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorData;
        type: Api.TypeSecureValueType;
        dataHash: bytes;
        field: string;
        text: string;
    }
    export class SecureValueErrorFrontSide extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorFrontSide;
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }
    export class SecureValueErrorReverseSide extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorReverseSide;
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }
    export class SecureValueErrorSelfie extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorSelfie;
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }
    export class SecureValueErrorFile extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorFile;
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }
    export class SecureValueErrorFiles extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes[];
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorFiles;
        type: Api.TypeSecureValueType;
        fileHash: bytes[];
        text: string;
    }
    export class SecureValueError extends VirtualClass<{
        type: Api.TypeSecureValueType;
        hash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueError;
        type: Api.TypeSecureValueType;
        hash: bytes;
        text: string;
    }
    export class SecureValueErrorTranslationFile extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorTranslationFile;
        type: Api.TypeSecureValueType;
        fileHash: bytes;
        text: string;
    }
    export class SecureValueErrorTranslationFiles extends VirtualClass<{
        type: Api.TypeSecureValueType;
        fileHash: bytes[];
        text: string;
    }> {
        static fromReader(reader: Reader): SecureValueErrorTranslationFiles;
        type: Api.TypeSecureValueType;
        fileHash: bytes[];
        text: string;
    }
    export class SecureCredentialsEncrypted extends VirtualClass<{
        data: bytes;
        hash: bytes;
        secret: bytes;
    }> {
        static fromReader(reader: Reader): SecureCredentialsEncrypted;
        data: bytes;
        hash: bytes;
        secret: bytes;
    }
    export class SavedPhoneContact extends VirtualClass<{
        phone: string;
        firstName: string;
        lastName: string;
        date: int;
    }> {
        static fromReader(reader: Reader): SavedPhoneContact;
        phone: string;
        firstName: string;
        lastName: string;
        date: int;
    }
    export class PasswordKdfAlgoUnknown extends VirtualClass<void> {
        static fromReader(reader: Reader): PasswordKdfAlgoUnknown;
    }
    export class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends VirtualClass<{
        salt1: bytes;
        salt2: bytes;
        g: int;
        p: bytes;
    }> {
        static fromReader(
            reader: Reader
        ): PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
        salt1: bytes;
        salt2: bytes;
        g: int;
        p: bytes;
    }
    export class SecurePasswordKdfAlgoUnknown extends VirtualClass<void> {
        static fromReader(reader: Reader): SecurePasswordKdfAlgoUnknown;
    }
    export class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends VirtualClass<{
        salt: bytes;
    }> {
        static fromReader(
            reader: Reader
        ): SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000;
        salt: bytes;
    }
    export class SecurePasswordKdfAlgoSHA512 extends VirtualClass<{
        salt: bytes;
    }> {
        static fromReader(reader: Reader): SecurePasswordKdfAlgoSHA512;
        salt: bytes;
    }
    export class SecureSecretSettings extends VirtualClass<{
        secureAlgo: Api.TypeSecurePasswordKdfAlgo;
        secureSecret: bytes;
        secureSecretId: long;
    }> {
        static fromReader(reader: Reader): SecureSecretSettings;
        secureAlgo: Api.TypeSecurePasswordKdfAlgo;
        secureSecret: bytes;
        secureSecretId: long;
    }
    export class InputCheckPasswordEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): InputCheckPasswordEmpty;
    }
    export class InputCheckPasswordSRP extends VirtualClass<{
        srpId: long;
        A: bytes;
        M1: bytes;
    }> {
        static fromReader(reader: Reader): InputCheckPasswordSRP;
        srpId: long;
        A: bytes;
        M1: bytes;
    }
    export class SecureRequiredType extends VirtualClass<{
        // flags: null;
        nativeNames?: boolean;
        selfieRequired?: boolean;
        translationRequired?: boolean;
        type: Api.TypeSecureValueType;
    }> {
        static fromReader(reader: Reader): SecureRequiredType;
        // flags: null;
        nativeNames?: boolean;
        selfieRequired?: boolean;
        translationRequired?: boolean;
        type: Api.TypeSecureValueType;
    }
    export class SecureRequiredTypeOneOf extends VirtualClass<{
        types: Api.TypeSecureRequiredType[];
    }> {
        static fromReader(reader: Reader): SecureRequiredTypeOneOf;
        types: Api.TypeSecureRequiredType[];
    }
    export class InputAppEvent extends VirtualClass<{
        time: double;
        type: string;
        peer: long;
        data: Api.TypeJSONValue;
    }> {
        static fromReader(reader: Reader): InputAppEvent;
        time: double;
        type: string;
        peer: long;
        data: Api.TypeJSONValue;
    }
    export class JsonObjectValue extends VirtualClass<{
        key: string;
        value: Api.TypeJSONValue;
    }> {
        static fromReader(reader: Reader): JsonObjectValue;
        key: string;
        value: Api.TypeJSONValue;
    }
    export class JsonNull extends VirtualClass<void> {
        static fromReader(reader: Reader): JsonNull;
    }
    export class JsonBool extends VirtualClass<{
        value: Bool;
    }> {
        static fromReader(reader: Reader): JsonBool;
        value: Bool;
    }
    export class JsonNumber extends VirtualClass<{
        value: double;
    }> {
        static fromReader(reader: Reader): JsonNumber;
        value: double;
    }
    export class JsonString extends VirtualClass<{
        value: string;
    }> {
        static fromReader(reader: Reader): JsonString;
        value: string;
    }
    export class JsonArray extends VirtualClass<{
        value: Api.TypeJSONValue[];
    }> {
        static fromReader(reader: Reader): JsonArray;
        value: Api.TypeJSONValue[];
    }
    export class JsonObject extends VirtualClass<{
        value: Api.TypeJSONObjectValue[];
    }> {
        static fromReader(reader: Reader): JsonObject;
        value: Api.TypeJSONObjectValue[];
    }
    export class PageTableCell extends VirtualClass<{
        // flags: null;
        header?: boolean;
        alignCenter?: boolean;
        alignRight?: boolean;
        valignMiddle?: boolean;
        valignBottom?: boolean;
        text?: Api.TypeRichText;
        colspan?: int;
        rowspan?: int;
    }> {
        static fromReader(reader: Reader): PageTableCell;
        // flags: null;
        header?: boolean;
        alignCenter?: boolean;
        alignRight?: boolean;
        valignMiddle?: boolean;
        valignBottom?: boolean;
        text?: Api.TypeRichText;
        colspan?: int;
        rowspan?: int;
    }
    export class PageTableRow extends VirtualClass<{
        cells: Api.TypePageTableCell[];
    }> {
        static fromReader(reader: Reader): PageTableRow;
        cells: Api.TypePageTableCell[];
    }
    export class PageCaption extends VirtualClass<{
        text: Api.TypeRichText;
        credit: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageCaption;
        text: Api.TypeRichText;
        credit: Api.TypeRichText;
    }
    export class PageListItemText extends VirtualClass<{
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageListItemText;
        text: Api.TypeRichText;
    }
    export class PageListItemBlocks extends VirtualClass<{
        blocks: Api.TypePageBlock[];
    }> {
        static fromReader(reader: Reader): PageListItemBlocks;
        blocks: Api.TypePageBlock[];
    }
    export class PageListOrderedItemText extends VirtualClass<{
        num: string;
        text: Api.TypeRichText;
    }> {
        static fromReader(reader: Reader): PageListOrderedItemText;
        num: string;
        text: Api.TypeRichText;
    }
    export class PageListOrderedItemBlocks extends VirtualClass<{
        num: string;
        blocks: Api.TypePageBlock[];
    }> {
        static fromReader(reader: Reader): PageListOrderedItemBlocks;
        num: string;
        blocks: Api.TypePageBlock[];
    }
    export class PageRelatedArticle extends VirtualClass<{
        // flags: null;
        url: string;
        webpageId: long;
        title?: string;
        description?: string;
        photoId?: long;
        author?: string;
        publishedDate?: int;
    }> {
        static fromReader(reader: Reader): PageRelatedArticle;
        // flags: null;
        url: string;
        webpageId: long;
        title?: string;
        description?: string;
        photoId?: long;
        author?: string;
        publishedDate?: int;
    }
    export class Page extends VirtualClass<{
        // flags: null;
        part?: boolean;
        rtl?: boolean;
        v2?: boolean;
        url: string;
        blocks: Api.TypePageBlock[];
        photos: Api.TypePhoto[];
        documents: Api.TypeDocument[];
        views?: int;
    }> {
        static fromReader(reader: Reader): Page;
        // flags: null;
        part?: boolean;
        rtl?: boolean;
        v2?: boolean;
        url: string;
        blocks: Api.TypePageBlock[];
        photos: Api.TypePhoto[];
        documents: Api.TypeDocument[];
        views?: int;
    }
    export class PollAnswer extends VirtualClass<{
        text: string;
        option: bytes;
    }> {
        static fromReader(reader: Reader): PollAnswer;
        text: string;
        option: bytes;
    }
    export class Poll extends VirtualClass<{
        id: long;
        // flags: null;
        closed?: boolean;
        publicVoters?: boolean;
        multipleChoice?: boolean;
        quiz?: boolean;
        question: string;
        answers: Api.TypePollAnswer[];
        closePeriod?: int;
        closeDate?: int;
    }> {
        static fromReader(reader: Reader): Poll;
        id: long;
        // flags: null;
        closed?: boolean;
        publicVoters?: boolean;
        multipleChoice?: boolean;
        quiz?: boolean;
        question: string;
        answers: Api.TypePollAnswer[];
        closePeriod?: int;
        closeDate?: int;
    }
    export class PollAnswerVoters extends VirtualClass<{
        // flags: null;
        chosen?: boolean;
        correct?: boolean;
        option: bytes;
        voters: int;
    }> {
        static fromReader(reader: Reader): PollAnswerVoters;
        // flags: null;
        chosen?: boolean;
        correct?: boolean;
        option: bytes;
        voters: int;
    }
    export class PollResults extends VirtualClass<{
        // flags: null;
        min?: boolean;
        results?: Api.TypePollAnswerVoters[];
        totalVoters?: int;
        recentVoters?: int[];
        solution?: string;
        solutionEntities?: Api.TypeMessageEntity[];
    }> {
        static fromReader(reader: Reader): PollResults;
        // flags: null;
        min?: boolean;
        results?: Api.TypePollAnswerVoters[];
        totalVoters?: int;
        recentVoters?: int[];
        solution?: string;
        solutionEntities?: Api.TypeMessageEntity[];
    }
    export class ChatOnlines extends VirtualClass<{
        onlines: int;
    }> {
        static fromReader(reader: Reader): ChatOnlines;
        onlines: int;
    }
    export class StatsURL extends VirtualClass<{
        url: string;
    }> {
        static fromReader(reader: Reader): StatsURL;
        url: string;
    }
    export class ChatAdminRights extends VirtualClass<{
        // flags: null;
        changeInfo?: boolean;
        postMessages?: boolean;
        editMessages?: boolean;
        deleteMessages?: boolean;
        banUsers?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        addAdmins?: boolean;
        anonymous?: boolean;
        manageCall?: boolean;
        other?: boolean;
    }> {
        static fromReader(reader: Reader): ChatAdminRights;
        // flags: null;
        changeInfo?: boolean;
        postMessages?: boolean;
        editMessages?: boolean;
        deleteMessages?: boolean;
        banUsers?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        addAdmins?: boolean;
        anonymous?: boolean;
        manageCall?: boolean;
        other?: boolean;
    }
    export class ChatBannedRights extends VirtualClass<{
        // flags: null;
        viewMessages?: boolean;
        sendMessages?: boolean;
        sendMedia?: boolean;
        sendStickers?: boolean;
        sendGifs?: boolean;
        sendGames?: boolean;
        sendInline?: boolean;
        embedLinks?: boolean;
        sendPolls?: boolean;
        changeInfo?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        untilDate: int;
    }> {
        static fromReader(reader: Reader): ChatBannedRights;
        // flags: null;
        viewMessages?: boolean;
        sendMessages?: boolean;
        sendMedia?: boolean;
        sendStickers?: boolean;
        sendGifs?: boolean;
        sendGames?: boolean;
        sendInline?: boolean;
        embedLinks?: boolean;
        sendPolls?: boolean;
        changeInfo?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        untilDate: int;
    }
    export class InputWallPaper extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputWallPaper;
        id: long;
        accessHash: long;
    }
    export class InputWallPaperSlug extends VirtualClass<{
        slug: string;
    }> {
        static fromReader(reader: Reader): InputWallPaperSlug;
        slug: string;
    }
    export class InputWallPaperNoFile extends VirtualClass<{
        id: long;
    }> {
        static fromReader(reader: Reader): InputWallPaperNoFile;
        id: long;
    }
    export class CodeSettings extends VirtualClass<{
        // flags: null;
        allowFlashcall?: boolean;
        currentNumber?: boolean;
        allowAppHash?: boolean;
    }> {
        static fromReader(reader: Reader): CodeSettings;
        // flags: null;
        allowFlashcall?: boolean;
        currentNumber?: boolean;
        allowAppHash?: boolean;
    }
    export class WallPaperSettings extends VirtualClass<{
        // flags: null;
        blur?: boolean;
        motion?: boolean;
        backgroundColor?: int;
        secondBackgroundColor?: int;
        thirdBackgroundColor?: int;
        fourthBackgroundColor?: int;
        intensity?: int;
        rotation?: int;
    }> {
        static fromReader(reader: Reader): WallPaperSettings;
        // flags: null;
        blur?: boolean;
        motion?: boolean;
        backgroundColor?: int;
        secondBackgroundColor?: int;
        thirdBackgroundColor?: int;
        fourthBackgroundColor?: int;
        intensity?: int;
        rotation?: int;
    }
    export class AutoDownloadSettings extends VirtualClass<{
        // flags: null;
        disabled?: boolean;
        videoPreloadLarge?: boolean;
        audioPreloadNext?: boolean;
        phonecallsLessData?: boolean;
        photoSizeMax: int;
        videoSizeMax: int;
        fileSizeMax: int;
        videoUploadMaxbitrate: int;
    }> {
        static fromReader(reader: Reader): AutoDownloadSettings;
        // flags: null;
        disabled?: boolean;
        videoPreloadLarge?: boolean;
        audioPreloadNext?: boolean;
        phonecallsLessData?: boolean;
        photoSizeMax: int;
        videoSizeMax: int;
        fileSizeMax: int;
        videoUploadMaxbitrate: int;
    }
    export class EmojiKeyword extends VirtualClass<{
        keyword: string;
        emoticons: string[];
    }> {
        static fromReader(reader: Reader): EmojiKeyword;
        keyword: string;
        emoticons: string[];
    }
    export class EmojiKeywordDeleted extends VirtualClass<{
        keyword: string;
        emoticons: string[];
    }> {
        static fromReader(reader: Reader): EmojiKeywordDeleted;
        keyword: string;
        emoticons: string[];
    }
    export class EmojiKeywordsDifference extends VirtualClass<{
        langCode: string;
        fromVersion: int;
        version: int;
        keywords: Api.TypeEmojiKeyword[];
    }> {
        static fromReader(reader: Reader): EmojiKeywordsDifference;
        langCode: string;
        fromVersion: int;
        version: int;
        keywords: Api.TypeEmojiKeyword[];
    }
    export class EmojiURL extends VirtualClass<{
        url: string;
    }> {
        static fromReader(reader: Reader): EmojiURL;
        url: string;
    }
    export class EmojiLanguage extends VirtualClass<{
        langCode: string;
    }> {
        static fromReader(reader: Reader): EmojiLanguage;
        langCode: string;
    }
    export class Folder extends VirtualClass<{
        // flags: null;
        autofillNewBroadcasts?: boolean;
        autofillPublicGroups?: boolean;
        autofillNewCorrespondents?: boolean;
        id: int;
        title: string;
        photo?: Api.TypeChatPhoto;
    }> {
        static fromReader(reader: Reader): Folder;
        // flags: null;
        autofillNewBroadcasts?: boolean;
        autofillPublicGroups?: boolean;
        autofillNewCorrespondents?: boolean;
        id: int;
        title: string;
        photo?: Api.TypeChatPhoto;
    }
    export class InputFolderPeer extends VirtualClass<{
        peer: Api.TypeInputPeer;
        folderId: int;
    }> {
        static fromReader(reader: Reader): InputFolderPeer;
        peer: Api.TypeInputPeer;
        folderId: int;
    }
    export class FolderPeer extends VirtualClass<{
        peer: Api.TypePeer;
        folderId: int;
    }> {
        static fromReader(reader: Reader): FolderPeer;
        peer: Api.TypePeer;
        folderId: int;
    }
    export class UrlAuthResultRequest extends VirtualClass<{
        // flags: null;
        requestWriteAccess?: boolean;
        bot: Api.TypeUser;
        domain: string;
    }> {
        static fromReader(reader: Reader): UrlAuthResultRequest;
        // flags: null;
        requestWriteAccess?: boolean;
        bot: Api.TypeUser;
        domain: string;
    }
    export class UrlAuthResultAccepted extends VirtualClass<{
        url: string;
    }> {
        static fromReader(reader: Reader): UrlAuthResultAccepted;
        url: string;
    }
    export class UrlAuthResultDefault extends VirtualClass<void> {
        static fromReader(reader: Reader): UrlAuthResultDefault;
    }
    export class ChannelLocationEmpty extends VirtualClass<void> {
        static fromReader(reader: Reader): ChannelLocationEmpty;
    }
    export class ChannelLocation extends VirtualClass<{
        geoPoint: Api.TypeGeoPoint;
        address: string;
    }> {
        static fromReader(reader: Reader): ChannelLocation;
        geoPoint: Api.TypeGeoPoint;
        address: string;
    }
    export class PeerLocated extends VirtualClass<{
        peer: Api.TypePeer;
        expires: int;
        distance: int;
    }> {
        static fromReader(reader: Reader): PeerLocated;
        peer: Api.TypePeer;
        expires: int;
        distance: int;
    }
    export class PeerSelfLocated extends VirtualClass<{
        expires: int;
    }> {
        static fromReader(reader: Reader): PeerSelfLocated;
        expires: int;
    }
    export class RestrictionReason extends VirtualClass<{
        platform: string;
        reason: string;
        text: string;
    }> {
        static fromReader(reader: Reader): RestrictionReason;
        platform: string;
        reason: string;
        text: string;
    }
    export class InputTheme extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputTheme;
        id: long;
        accessHash: long;
    }
    export class InputThemeSlug extends VirtualClass<{
        slug: string;
    }> {
        static fromReader(reader: Reader): InputThemeSlug;
        slug: string;
    }
    export class Theme extends VirtualClass<{
        // flags: null;
        creator?: boolean;
        default?: boolean;
        id: long;
        accessHash: long;
        slug: string;
        title: string;
        document?: Api.TypeDocument;
        settings?: Api.TypeThemeSettings;
        installsCount: int;
    }> {
        static fromReader(reader: Reader): Theme;
        // flags: null;
        creator?: boolean;
        default?: boolean;
        id: long;
        accessHash: long;
        slug: string;
        title: string;
        document?: Api.TypeDocument;
        settings?: Api.TypeThemeSettings;
        installsCount: int;
    }
    export class BaseThemeClassic extends VirtualClass<void> {
        static fromReader(reader: Reader): BaseThemeClassic;
    }
    export class BaseThemeDay extends VirtualClass<void> {
        static fromReader(reader: Reader): BaseThemeDay;
    }
    export class BaseThemeNight extends VirtualClass<void> {
        static fromReader(reader: Reader): BaseThemeNight;
    }
    export class BaseThemeTinted extends VirtualClass<void> {
        static fromReader(reader: Reader): BaseThemeTinted;
    }
    export class BaseThemeArctic extends VirtualClass<void> {
        static fromReader(reader: Reader): BaseThemeArctic;
    }
    export class InputThemeSettings extends VirtualClass<{
        // flags: null;
        baseTheme: Api.TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: Api.TypeInputWallPaper;
        wallpaperSettings?: Api.TypeWallPaperSettings;
    }> {
        static fromReader(reader: Reader): InputThemeSettings;
        // flags: null;
        baseTheme: Api.TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: Api.TypeInputWallPaper;
        wallpaperSettings?: Api.TypeWallPaperSettings;
    }
    export class ThemeSettings extends VirtualClass<{
        // flags: null;
        baseTheme: Api.TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: Api.TypeWallPaper;
    }> {
        static fromReader(reader: Reader): ThemeSettings;
        // flags: null;
        baseTheme: Api.TypeBaseTheme;
        accentColor: int;
        messageTopColor?: int;
        messageBottomColor?: int;
        wallpaper?: Api.TypeWallPaper;
    }
    export class WebPageAttributeTheme extends VirtualClass<{
        // flags: null;
        documents?: Api.TypeDocument[];
        settings?: Api.TypeThemeSettings;
    }> {
        static fromReader(reader: Reader): WebPageAttributeTheme;
        // flags: null;
        documents?: Api.TypeDocument[];
        settings?: Api.TypeThemeSettings;
    }
    export class MessageUserVote extends VirtualClass<{
        userId: int;
        option: bytes;
        date: int;
    }> {
        static fromReader(reader: Reader): MessageUserVote;
        userId: int;
        option: bytes;
        date: int;
    }
    export class MessageUserVoteInputOption extends VirtualClass<{
        userId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): MessageUserVoteInputOption;
        userId: int;
        date: int;
    }
    export class MessageUserVoteMultiple extends VirtualClass<{
        userId: int;
        options: bytes[];
        date: int;
    }> {
        static fromReader(reader: Reader): MessageUserVoteMultiple;
        userId: int;
        options: bytes[];
        date: int;
    }
    export class BankCardOpenUrl extends VirtualClass<{
        url: string;
        name: string;
    }> {
        static fromReader(reader: Reader): BankCardOpenUrl;
        url: string;
        name: string;
    }
    export class DialogFilter extends VirtualClass<{
        // flags: null;
        contacts?: boolean;
        nonContacts?: boolean;
        groups?: boolean;
        broadcasts?: boolean;
        bots?: boolean;
        excludeMuted?: boolean;
        excludeRead?: boolean;
        excludeArchived?: boolean;
        id: int;
        title: string;
        emoticon?: string;
        pinnedPeers: Api.TypeInputPeer[];
        includePeers: Api.TypeInputPeer[];
        excludePeers: Api.TypeInputPeer[];
    }> {
        static fromReader(reader: Reader): DialogFilter;
        // flags: null;
        contacts?: boolean;
        nonContacts?: boolean;
        groups?: boolean;
        broadcasts?: boolean;
        bots?: boolean;
        excludeMuted?: boolean;
        excludeRead?: boolean;
        excludeArchived?: boolean;
        id: int;
        title: string;
        emoticon?: string;
        pinnedPeers: Api.TypeInputPeer[];
        includePeers: Api.TypeInputPeer[];
        excludePeers: Api.TypeInputPeer[];
    }
    export class DialogFilterSuggested extends VirtualClass<{
        filter: Api.TypeDialogFilter;
        description: string;
    }> {
        static fromReader(reader: Reader): DialogFilterSuggested;
        filter: Api.TypeDialogFilter;
        description: string;
    }
    export class StatsDateRangeDays extends VirtualClass<{
        minDate: int;
        maxDate: int;
    }> {
        static fromReader(reader: Reader): StatsDateRangeDays;
        minDate: int;
        maxDate: int;
    }
    export class StatsAbsValueAndPrev extends VirtualClass<{
        current: double;
        previous: double;
    }> {
        static fromReader(reader: Reader): StatsAbsValueAndPrev;
        current: double;
        previous: double;
    }
    export class StatsPercentValue extends VirtualClass<{
        part: double;
        total: double;
    }> {
        static fromReader(reader: Reader): StatsPercentValue;
        part: double;
        total: double;
    }
    export class StatsGraphAsync extends VirtualClass<{
        token: string;
    }> {
        static fromReader(reader: Reader): StatsGraphAsync;
        token: string;
    }
    export class StatsGraphError extends VirtualClass<{
        error: string;
    }> {
        static fromReader(reader: Reader): StatsGraphError;
        error: string;
    }
    export class StatsGraph extends VirtualClass<{
        // flags: null;
        json: Api.TypeDataJSON;
        zoomToken?: string;
    }> {
        static fromReader(reader: Reader): StatsGraph;
        // flags: null;
        json: Api.TypeDataJSON;
        zoomToken?: string;
    }
    export class MessageInteractionCounters extends VirtualClass<{
        msgId: int;
        views: int;
        forwards: int;
    }> {
        static fromReader(reader: Reader): MessageInteractionCounters;
        msgId: int;
        views: int;
        forwards: int;
    }
    export class VideoSize extends VirtualClass<{
        // flags: null;
        type: string;
        w: int;
        h: int;
        size: int;
        videoStartTs?: double;
    }> {
        static fromReader(reader: Reader): VideoSize;
        // flags: null;
        type: string;
        w: int;
        h: int;
        size: int;
        videoStartTs?: double;
    }
    export class StatsGroupTopPoster extends VirtualClass<{
        userId: int;
        messages: int;
        avgChars: int;
    }> {
        static fromReader(reader: Reader): StatsGroupTopPoster;
        userId: int;
        messages: int;
        avgChars: int;
    }
    export class StatsGroupTopAdmin extends VirtualClass<{
        userId: int;
        deleted: int;
        kicked: int;
        banned: int;
    }> {
        static fromReader(reader: Reader): StatsGroupTopAdmin;
        userId: int;
        deleted: int;
        kicked: int;
        banned: int;
    }
    export class StatsGroupTopInviter extends VirtualClass<{
        userId: int;
        invitations: int;
    }> {
        static fromReader(reader: Reader): StatsGroupTopInviter;
        userId: int;
        invitations: int;
    }
    export class GlobalPrivacySettings extends VirtualClass<{
        // flags: null;
        archiveAndMuteNewNoncontactPeers?: Bool;
    }> {
        static fromReader(reader: Reader): GlobalPrivacySettings;
        // flags: null;
        archiveAndMuteNewNoncontactPeers?: Bool;
    }
    export class MessageViews extends VirtualClass<{
        // flags: null;
        views?: int;
        forwards?: int;
        replies?: Api.TypeMessageReplies;
    }> {
        static fromReader(reader: Reader): MessageViews;
        // flags: null;
        views?: int;
        forwards?: int;
        replies?: Api.TypeMessageReplies;
    }
    export class MessageReplyHeader extends VirtualClass<{
        // flags: null;
        replyToMsgId: int;
        replyToPeerId?: Api.TypePeer;
        replyToTopId?: int;
    }> {
        static fromReader(reader: Reader): MessageReplyHeader;
        // flags: null;
        replyToMsgId: int;
        replyToPeerId?: Api.TypePeer;
        replyToTopId?: int;
    }
    export class MessageReplies extends VirtualClass<{
        // flags: null;
        comments?: boolean;
        replies: int;
        repliesPts: int;
        recentRepliers?: Api.TypePeer[];
        channelId?: int;
        maxId?: int;
        readMaxId?: int;
    }> {
        static fromReader(reader: Reader): MessageReplies;
        // flags: null;
        comments?: boolean;
        replies: int;
        repliesPts: int;
        recentRepliers?: Api.TypePeer[];
        channelId?: int;
        maxId?: int;
        readMaxId?: int;
    }
    export class PeerBlocked extends VirtualClass<{
        peerId: Api.TypePeer;
        date: int;
    }> {
        static fromReader(reader: Reader): PeerBlocked;
        peerId: Api.TypePeer;
        date: int;
    }
    export class GroupCallDiscarded extends VirtualClass<{
        id: long;
        accessHash: long;
        duration: int;
    }> {
        static fromReader(reader: Reader): GroupCallDiscarded;
        id: long;
        accessHash: long;
        duration: int;
    }
    export class GroupCall extends VirtualClass<{
        // flags: null;
        joinMuted?: boolean;
        canChangeJoinMuted?: boolean;
        joinDateAsc?: boolean;
        scheduleStartSubscribed?: boolean;
        canStartVideo?: boolean;
        id: long;
        accessHash: long;
        participantsCount: int;
        title?: string;
        streamDcId?: int;
        recordStartDate?: int;
        scheduleDate?: int;
        unmutedVideoCount?: int;
        unmutedVideoLimit: int;
        version: int;
    }> {
        static fromReader(reader: Reader): GroupCall;
        // flags: null;
        joinMuted?: boolean;
        canChangeJoinMuted?: boolean;
        joinDateAsc?: boolean;
        scheduleStartSubscribed?: boolean;
        canStartVideo?: boolean;
        id: long;
        accessHash: long;
        participantsCount: int;
        title?: string;
        streamDcId?: int;
        recordStartDate?: int;
        scheduleDate?: int;
        unmutedVideoCount?: int;
        unmutedVideoLimit: int;
        version: int;
    }
    export class InputGroupCall extends VirtualClass<{
        id: long;
        accessHash: long;
    }> {
        static fromReader(reader: Reader): InputGroupCall;
        id: long;
        accessHash: long;
    }
    export class GroupCallParticipant extends VirtualClass<{
        // flags: null;
        muted?: boolean;
        left?: boolean;
        canSelfUnmute?: boolean;
        justJoined?: boolean;
        versioned?: boolean;
        min?: boolean;
        mutedByYou?: boolean;
        volumeByAdmin?: boolean;
        self?: boolean;
        videoJoined?: boolean;
        peer: Api.TypePeer;
        date: int;
        activeDate?: int;
        source: int;
        volume?: int;
        about?: string;
        raiseHandRating?: long;
        video?: Api.TypeGroupCallParticipantVideo;
        presentation?: Api.TypeGroupCallParticipantVideo;
    }> {
        static fromReader(reader: Reader): GroupCallParticipant;
        // flags: null;
        muted?: boolean;
        left?: boolean;
        canSelfUnmute?: boolean;
        justJoined?: boolean;
        versioned?: boolean;
        min?: boolean;
        mutedByYou?: boolean;
        volumeByAdmin?: boolean;
        self?: boolean;
        videoJoined?: boolean;
        peer: Api.TypePeer;
        date: int;
        activeDate?: int;
        source: int;
        volume?: int;
        about?: string;
        raiseHandRating?: long;
        video?: Api.TypeGroupCallParticipantVideo;
        presentation?: Api.TypeGroupCallParticipantVideo;
    }
    export class InlineQueryPeerTypeSameBotPM extends VirtualClass<void> {
        static fromReader(reader: Reader): InlineQueryPeerTypeSameBotPM;
    }
    export class InlineQueryPeerTypePM extends VirtualClass<void> {
        static fromReader(reader: Reader): InlineQueryPeerTypePM;
    }
    export class InlineQueryPeerTypeChat extends VirtualClass<void> {
        static fromReader(reader: Reader): InlineQueryPeerTypeChat;
    }
    export class InlineQueryPeerTypeMegagroup extends VirtualClass<void> {
        static fromReader(reader: Reader): InlineQueryPeerTypeMegagroup;
    }
    export class InlineQueryPeerTypeBroadcast extends VirtualClass<void> {
        static fromReader(reader: Reader): InlineQueryPeerTypeBroadcast;
    }
    export class ChatInviteImporter extends VirtualClass<{
        userId: int;
        date: int;
    }> {
        static fromReader(reader: Reader): ChatInviteImporter;
        userId: int;
        date: int;
    }
    export class ChatAdminWithInvites extends VirtualClass<{
        adminId: int;
        invitesCount: int;
        revokedInvitesCount: int;
    }> {
        static fromReader(reader: Reader): ChatAdminWithInvites;
        adminId: int;
        invitesCount: int;
        revokedInvitesCount: int;
    }
    export class GroupCallParticipantVideoSourceGroup extends VirtualClass<{
        semantics: string;
        sources: int[];
    }> {
        static fromReader(reader: Reader): GroupCallParticipantVideoSourceGroup;
        semantics: string;
        sources: int[];
    }
    export class GroupCallParticipantVideo extends VirtualClass<{
        // flags: null;
        paused?: boolean;
        endpoint: string;
        sourceGroups: Api.TypeGroupCallParticipantVideoSourceGroup[];
        audioSource?: int;
    }> {
        static fromReader(reader: Reader): GroupCallParticipantVideo;
        // flags: null;
        paused?: boolean;
        endpoint: string;
        sourceGroups: Api.TypeGroupCallParticipantVideoSourceGroup[];
        audioSource?: int;
    }
    export class BotCommandScopeDefault extends VirtualClass<void> {
        static fromReader(reader: Reader): BotCommandScopeDefault;
    }
    export class BotCommandScopeUsers extends VirtualClass<void> {
        static fromReader(reader: Reader): BotCommandScopeUsers;
    }
    export class BotCommandScopeChats extends VirtualClass<void> {
        static fromReader(reader: Reader): BotCommandScopeChats;
    }
    export class BotCommandScopeChatAdmins extends VirtualClass<void> {
        static fromReader(reader: Reader): BotCommandScopeChatAdmins;
    }
    export class BotCommandScopePeer extends VirtualClass<{
        peer: Api.TypeInputPeer;
    }> {
        static fromReader(reader: Reader): BotCommandScopePeer;
        peer: Api.TypeInputPeer;
    }
    export class BotCommandScopePeerAdmins extends VirtualClass<{
        peer: Api.TypeInputPeer;
    }> {
        static fromReader(reader: Reader): BotCommandScopePeerAdmins;
        peer: Api.TypeInputPeer;
    }
    export class BotCommandScopePeerUser extends VirtualClass<{
        peer: Api.TypeInputPeer;
        userId: Api.TypeInputUser;
    }> {
        static fromReader(reader: Reader): BotCommandScopePeerUser;
        peer: Api.TypeInputPeer;
        userId: Api.TypeInputUser;
    }
    export class ResPQ extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        pq: bytes;
        serverPublicKeyFingerprints: long[];
    }> {
        static fromReader(reader: Reader): ResPQ;
        nonce: int128;
        serverNonce: int128;
        pq: bytes;
        serverPublicKeyFingerprints: long[];
    }
    export class PQInnerData extends VirtualClass<{
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
    }> {
        static fromReader(reader: Reader): PQInnerData;
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
    }
    export class PQInnerDataDc extends VirtualClass<{
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
    }> {
        static fromReader(reader: Reader): PQInnerDataDc;
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
    }
    export class PQInnerDataTemp extends VirtualClass<{
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        expiresIn: int;
    }> {
        static fromReader(reader: Reader): PQInnerDataTemp;
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        expiresIn: int;
    }
    export class PQInnerDataTempDc extends VirtualClass<{
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
        expiresIn: int;
    }> {
        static fromReader(reader: Reader): PQInnerDataTempDc;
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
        expiresIn: int;
    }
    export class BindAuthKeyInner extends VirtualClass<{
        nonce: long;
        tempAuthKeyId: long;
        permAuthKeyId: long;
        tempSessionId: long;
        expiresAt: int;
    }> {
        static fromReader(reader: Reader): BindAuthKeyInner;
        nonce: long;
        tempAuthKeyId: long;
        permAuthKeyId: long;
        tempSessionId: long;
        expiresAt: int;
    }
    export class ServerDHParamsFail extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        newNonceHash: int128;
    }> {
        static fromReader(reader: Reader): ServerDHParamsFail;
        nonce: int128;
        serverNonce: int128;
        newNonceHash: int128;
    }
    export class ServerDHParamsOk extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        encryptedAnswer: bytes;
    }> {
        static fromReader(reader: Reader): ServerDHParamsOk;
        nonce: int128;
        serverNonce: int128;
        encryptedAnswer: bytes;
    }
    export class ServerDHInnerData extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        g: int;
        dhPrime: bytes;
        gA: bytes;
        serverTime: int;
    }> {
        static fromReader(reader: Reader): ServerDHInnerData;
        nonce: int128;
        serverNonce: int128;
        g: int;
        dhPrime: bytes;
        gA: bytes;
        serverTime: int;
    }
    export class ClientDHInnerData extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        retryId: long;
        gB: bytes;
    }> {
        static fromReader(reader: Reader): ClientDHInnerData;
        nonce: int128;
        serverNonce: int128;
        retryId: long;
        gB: bytes;
    }
    export class DhGenOk extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        newNonceHash1: int128;
    }> {
        static fromReader(reader: Reader): DhGenOk;
        nonce: int128;
        serverNonce: int128;
        newNonceHash1: int128;
    }
    export class DhGenRetry extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        newNonceHash2: int128;
    }> {
        static fromReader(reader: Reader): DhGenRetry;
        nonce: int128;
        serverNonce: int128;
        newNonceHash2: int128;
    }
    export class DhGenFail extends VirtualClass<{
        nonce: int128;
        serverNonce: int128;
        newNonceHash3: int128;
    }> {
        static fromReader(reader: Reader): DhGenFail;
        nonce: int128;
        serverNonce: int128;
        newNonceHash3: int128;
    }
    export class DestroyAuthKeyOk extends VirtualClass<void> {
        static fromReader(reader: Reader): DestroyAuthKeyOk;
    }
    export class DestroyAuthKeyNone extends VirtualClass<void> {
        static fromReader(reader: Reader): DestroyAuthKeyNone;
    }
    export class DestroyAuthKeyFail extends VirtualClass<void> {
        static fromReader(reader: Reader): DestroyAuthKeyFail;
    }
    export class MsgsAck extends VirtualClass<{
        msgIds: long[];
    }> {
        static fromReader(reader: Reader): MsgsAck;
        msgIds: long[];
    }
    export class BadMsgNotification extends VirtualClass<{
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
    }> {
        static fromReader(reader: Reader): BadMsgNotification;
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
    }
    export class BadServerSalt extends VirtualClass<{
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
        newServerSalt: long;
    }> {
        static fromReader(reader: Reader): BadServerSalt;
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
        newServerSalt: long;
    }
    export class MsgsStateReq extends VirtualClass<{
        msgIds: long[];
    }> {
        static fromReader(reader: Reader): MsgsStateReq;
        msgIds: long[];
    }
    export class MsgsStateInfo extends VirtualClass<{
        reqMsgId: long;
        info: string;
    }> {
        static fromReader(reader: Reader): MsgsStateInfo;
        reqMsgId: long;
        info: string;
    }
    export class MsgsAllInfo extends VirtualClass<{
        msgIds: long[];
        info: string;
    }> {
        static fromReader(reader: Reader): MsgsAllInfo;
        msgIds: long[];
        info: string;
    }
    export class MsgDetailedInfo extends VirtualClass<{
        msgId: long;
        answerMsgId: long;
        bytes: int;
        status: int;
    }> {
        static fromReader(reader: Reader): MsgDetailedInfo;
        msgId: long;
        answerMsgId: long;
        bytes: int;
        status: int;
    }
    export class MsgNewDetailedInfo extends VirtualClass<{
        answerMsgId: long;
        bytes: int;
        status: int;
    }> {
        static fromReader(reader: Reader): MsgNewDetailedInfo;
        answerMsgId: long;
        bytes: int;
        status: int;
    }
    export class MsgResendReq extends VirtualClass<{
        msgIds: long[];
    }> {
        static fromReader(reader: Reader): MsgResendReq;
        msgIds: long[];
    }
    export class RpcError extends VirtualClass<{
        errorCode: int;
        errorMessage: string;
    }> {
        static fromReader(reader: Reader): RpcError;
        errorCode: int;
        errorMessage: string;
    }
    export class RpcAnswerUnknown extends VirtualClass<void> {
        static fromReader(reader: Reader): RpcAnswerUnknown;
    }
    export class RpcAnswerDroppedRunning extends VirtualClass<void> {
        static fromReader(reader: Reader): RpcAnswerDroppedRunning;
    }
    export class RpcAnswerDropped extends VirtualClass<{
        msgId: long;
        seqNo: int;
        bytes: int;
    }> {
        static fromReader(reader: Reader): RpcAnswerDropped;
        msgId: long;
        seqNo: int;
        bytes: int;
    }
    export class FutureSalt extends VirtualClass<{
        validSince: int;
        validUntil: int;
        salt: long;
    }> {
        static fromReader(reader: Reader): FutureSalt;
        validSince: int;
        validUntil: int;
        salt: long;
    }
    export class FutureSalts extends VirtualClass<{
        reqMsgId: long;
        now: int;
        salts: FutureSalt[];
    }> {
        static fromReader(reader: Reader): FutureSalts;
        reqMsgId: long;
        now: int;
        salts: FutureSalt[];
    }
    export class Pong extends VirtualClass<{
        msgId: long;
        pingId: long;
    }> {
        static fromReader(reader: Reader): Pong;
        msgId: long;
        pingId: long;
    }
    export class DestroySessionOk extends VirtualClass<{
        sessionId: long;
    }> {
        static fromReader(reader: Reader): DestroySessionOk;
        sessionId: long;
    }
    export class DestroySessionNone extends VirtualClass<{
        sessionId: long;
    }> {
        static fromReader(reader: Reader): DestroySessionNone;
        sessionId: long;
    }
    export class NewSessionCreated extends VirtualClass<{
        firstMsgId: long;
        uniqueId: long;
        serverSalt: long;
    }> {
        static fromReader(reader: Reader): NewSessionCreated;
        firstMsgId: long;
        uniqueId: long;
        serverSalt: long;
    }
    export class HttpWait extends VirtualClass<{
        maxDelay: int;
        waitAfter: int;
        maxWait: int;
    }> {
        static fromReader(reader: Reader): HttpWait;
        maxDelay: int;
        waitAfter: int;
        maxWait: int;
    }
    export class IpPort extends VirtualClass<{
        ipv4: int;
        port: int;
    }> {
        static fromReader(reader: Reader): IpPort;
        ipv4: int;
        port: int;
    }
    export class IpPortSecret extends VirtualClass<{
        ipv4: int;
        port: int;
        secret: bytes;
    }> {
        static fromReader(reader: Reader): IpPortSecret;
        ipv4: int;
        port: int;
        secret: bytes;
    }
    export class AccessPointRule extends VirtualClass<{
        phonePrefixRules: string;
        dcId: int;
        ips: Api.TypeIpPort[];
    }> {
        static fromReader(reader: Reader): AccessPointRule;
        phonePrefixRules: string;
        dcId: int;
        ips: Api.TypeIpPort[];
    }
    export class TlsClientHello extends VirtualClass<{
        blocks: Api.TypeTlsBlock[];
    }> {
        static fromReader(reader: Reader): TlsClientHello;
        blocks: Api.TypeTlsBlock[];
    }
    export class TlsBlockString extends VirtualClass<{
        data: string;
    }> {
        static fromReader(reader: Reader): TlsBlockString;
        data: string;
    }
    export class TlsBlockRandom extends VirtualClass<{
        length: int;
    }> {
        static fromReader(reader: Reader): TlsBlockRandom;
        length: int;
    }
    export class TlsBlockZero extends VirtualClass<{
        length: int;
    }> {
        static fromReader(reader: Reader): TlsBlockZero;
        length: int;
    }
    export class TlsBlockDomain extends VirtualClass<void> {
        static fromReader(reader: Reader): TlsBlockDomain;
    }
    export class TlsBlockGrease extends VirtualClass<{
        seed: int;
    }> {
        static fromReader(reader: Reader): TlsBlockGrease;
        seed: int;
    }
    export class TlsBlockPublicKey extends VirtualClass<void> {
        static fromReader(reader: Reader): TlsBlockPublicKey;
    }
    export class TlsBlockScope extends VirtualClass<{
        entries: Api.TypeTlsBlock[];
    }> {
        static fromReader(reader: Reader): TlsBlockScope;
        entries: Api.TypeTlsBlock[];
    }
    export class InvokeAfterMsg extends Request<
        Partial<{
            msgId: long;
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeAfterMsg;
        msgId: long;
        query: X;
    }
    export class InvokeAfterMsgs extends Request<
        Partial<{
            msgIds: long[];
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeAfterMsgs;
        msgIds: long[];
        query: X;
    }
    export class InitConnection extends Request<
        Partial<{
            // flags: null;
            apiId: int;
            deviceModel: string;
            systemVersion: string;
            appVersion: string;
            systemLangCode: string;
            langPack: string;
            langCode: string;
            proxy?: Api.TypeInputClientProxy;
            params?: Api.TypeJSONValue;
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InitConnection;
        // flags: null;
        apiId: int;
        deviceModel: string;
        systemVersion: string;
        appVersion: string;
        systemLangCode: string;
        langPack: string;
        langCode: string;
        proxy?: Api.TypeInputClientProxy;
        params?: Api.TypeJSONValue;
        query: X;
    }
    export class InvokeWithLayer extends Request<
        Partial<{
            layer: int;
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeWithLayer;
        layer: int;
        query: X;
    }
    export class InvokeWithoutUpdates extends Request<
        Partial<{
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeWithoutUpdates;
        query: X;
    }
    export class InvokeWithMessagesRange extends Request<
        Partial<{
            range: Api.TypeMessageRange;
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeWithMessagesRange;
        range: Api.TypeMessageRange;
        query: X;
    }
    export class InvokeWithTakeout extends Request<
        Partial<{
            takeoutId: long;
            query: X;
        }>,
        X
    > {
        static fromReader(reader: Reader): InvokeWithTakeout;
        takeoutId: long;
        query: X;
    }
    export class ReqPq extends Request<
        Partial<{
            nonce: int128;
        }>,
        Api.TypeResPQ
    > {
        static fromReader(reader: Reader): ReqPq;
        nonce: int128;
    }
    export class ReqPqMulti extends Request<
        Partial<{
            nonce: int128;
        }>,
        Api.TypeResPQ
    > {
        static fromReader(reader: Reader): ReqPqMulti;
        nonce: int128;
    }
    export class ReqDHParams extends Request<
        Partial<{
            nonce: int128;
            serverNonce: int128;
            p: bytes;
            q: bytes;
            publicKeyFingerprint: long;
            encryptedData: bytes;
        }>,
        Api.TypeServer_DH_Params
    > {
        static fromReader(reader: Reader): ReqDHParams;
        nonce: int128;
        serverNonce: int128;
        p: bytes;
        q: bytes;
        publicKeyFingerprint: long;
        encryptedData: bytes;
    }
    export class SetClientDHParams extends Request<
        Partial<{
            nonce: int128;
            serverNonce: int128;
            encryptedData: bytes;
        }>,
        Api.TypeSet_client_DH_params_answer
    > {
        static fromReader(reader: Reader): SetClientDHParams;
        nonce: int128;
        serverNonce: int128;
        encryptedData: bytes;
    }
    export class DestroyAuthKey extends Request<
        void,
        Api.TypeDestroyAuthKeyRes
    > {
        static fromReader(reader: Reader): DestroyAuthKey;
    }
    export class RpcDropAnswer extends Request<
        Partial<{
            reqMsgId: long;
        }>,
        Api.TypeRpcDropAnswer
    > {
        static fromReader(reader: Reader): RpcDropAnswer;
        reqMsgId: long;
    }
    export class GetFutureSalts extends Request<
        Partial<{
            num: int;
        }>,
        Api.TypeFutureSalts
    > {
        static fromReader(reader: Reader): GetFutureSalts;
        num: int;
    }
    export class Ping extends Request<
        Partial<{
            pingId: long;
        }>,
        Api.TypePong
    > {
        static fromReader(reader: Reader): Ping;
        pingId: long;
    }
    export class PingDelayDisconnect extends Request<
        Partial<{
            pingId: long;
            disconnectDelay: int;
        }>,
        Api.TypePong
    > {
        static fromReader(reader: Reader): PingDelayDisconnect;
        pingId: long;
        disconnectDelay: int;
    }
    export class DestroySession extends Request<
        Partial<{
            sessionId: long;
        }>,
        Api.TypeDestroySessionRes
    > {
        static fromReader(reader: Reader): DestroySession;
        sessionId: long;
    }

    // namespaces

    export namespace storage {
        export class FileUnknown extends VirtualClass<void> {
            static fromReader(reader: Reader): FileUnknown;
        }
        export class FilePartial extends VirtualClass<void> {
            static fromReader(reader: Reader): FilePartial;
        }
        export class FileJpeg extends VirtualClass<void> {
            static fromReader(reader: Reader): FileJpeg;
        }
        export class FileGif extends VirtualClass<void> {
            static fromReader(reader: Reader): FileGif;
        }
        export class FilePng extends VirtualClass<void> {
            static fromReader(reader: Reader): FilePng;
        }
        export class FilePdf extends VirtualClass<void> {
            static fromReader(reader: Reader): FilePdf;
        }
        export class FileMp3 extends VirtualClass<void> {
            static fromReader(reader: Reader): FileMp3;
        }
        export class FileMov extends VirtualClass<void> {
            static fromReader(reader: Reader): FileMov;
        }
        export class FileMp4 extends VirtualClass<void> {
            static fromReader(reader: Reader): FileMp4;
        }
        export class FileWebp extends VirtualClass<void> {
            static fromReader(reader: Reader): FileWebp;
        }
    }

    export namespace auth {
        export class SentCode extends VirtualClass<{
            // flags: null;
            type: auth.TypeSentCodeType;
            phoneCodeHash: string;
            nextType?: auth.TypeCodeType;
            timeout?: int;
        }> {
            static fromReader(reader: Reader): SentCode;
            // flags: null;
            type: auth.TypeSentCodeType;
            phoneCodeHash: string;
            nextType?: auth.TypeCodeType;
            timeout?: int;
        }
        export class Authorization extends VirtualClass<{
            // flags: null;
            tmpSessions?: int;
            user: Api.TypeUser;
        }> {
            static fromReader(reader: Reader): Authorization;
            // flags: null;
            tmpSessions?: int;
            user: Api.TypeUser;
        }
        export class AuthorizationSignUpRequired extends VirtualClass<{
            // flags: null;
            termsOfService?: help.TypeTermsOfService;
        }> {
            static fromReader(reader: Reader): AuthorizationSignUpRequired;
            // flags: null;
            termsOfService?: help.TypeTermsOfService;
        }
        export class ExportedAuthorization extends VirtualClass<{
            id: int;
            bytes: bytes;
        }> {
            static fromReader(reader: Reader): ExportedAuthorization;
            id: int;
            bytes: bytes;
        }
        export class PasswordRecovery extends VirtualClass<{
            emailPattern: string;
        }> {
            static fromReader(reader: Reader): PasswordRecovery;
            emailPattern: string;
        }
        export class CodeTypeSms extends VirtualClass<void> {
            static fromReader(reader: Reader): CodeTypeSms;
        }
        export class CodeTypeCall extends VirtualClass<void> {
            static fromReader(reader: Reader): CodeTypeCall;
        }
        export class CodeTypeFlashCall extends VirtualClass<void> {
            static fromReader(reader: Reader): CodeTypeFlashCall;
        }
        export class SentCodeTypeApp extends VirtualClass<{
            length: int;
        }> {
            static fromReader(reader: Reader): SentCodeTypeApp;
            length: int;
        }
        export class SentCodeTypeSms extends VirtualClass<{
            length: int;
        }> {
            static fromReader(reader: Reader): SentCodeTypeSms;
            length: int;
        }
        export class SentCodeTypeCall extends VirtualClass<{
            length: int;
        }> {
            static fromReader(reader: Reader): SentCodeTypeCall;
            length: int;
        }
        export class SentCodeTypeFlashCall extends VirtualClass<{
            pattern: string;
        }> {
            static fromReader(reader: Reader): SentCodeTypeFlashCall;
            pattern: string;
        }
        export class LoginToken extends VirtualClass<{
            expires: int;
            token: bytes;
        }> {
            static fromReader(reader: Reader): LoginToken;
            expires: int;
            token: bytes;
        }
        export class LoginTokenMigrateTo extends VirtualClass<{
            dcId: int;
            token: bytes;
        }> {
            static fromReader(reader: Reader): LoginTokenMigrateTo;
            dcId: int;
            token: bytes;
        }
        export class LoginTokenSuccess extends VirtualClass<{
            authorization: auth.TypeAuthorization;
        }> {
            static fromReader(reader: Reader): LoginTokenSuccess;
            authorization: auth.TypeAuthorization;
        }
    }

    export namespace contacts {
        export class ContactsNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): ContactsNotModified;
        }
        export class Contacts extends VirtualClass<{
            contacts: Api.TypeContact[];
            savedCount: int;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Contacts;
            contacts: Api.TypeContact[];
            savedCount: int;
            users: Api.TypeUser[];
        }
        export class ImportedContacts extends VirtualClass<{
            imported: Api.TypeImportedContact[];
            popularInvites: Api.TypePopularContact[];
            retryContacts: long[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ImportedContacts;
            imported: Api.TypeImportedContact[];
            popularInvites: Api.TypePopularContact[];
            retryContacts: long[];
            users: Api.TypeUser[];
        }
        export class Blocked extends VirtualClass<{
            blocked: Api.TypePeerBlocked[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Blocked;
            blocked: Api.TypePeerBlocked[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class BlockedSlice extends VirtualClass<{
            count: int;
            blocked: Api.TypePeerBlocked[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): BlockedSlice;
            count: int;
            blocked: Api.TypePeerBlocked[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class Found extends VirtualClass<{
            myResults: Api.TypePeer[];
            results: Api.TypePeer[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Found;
            myResults: Api.TypePeer[];
            results: Api.TypePeer[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class ResolvedPeer extends VirtualClass<{
            peer: Api.TypePeer;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ResolvedPeer;
            peer: Api.TypePeer;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class TopPeersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): TopPeersNotModified;
        }
        export class TopPeers extends VirtualClass<{
            categories: Api.TypeTopPeerCategoryPeers[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): TopPeers;
            categories: Api.TypeTopPeerCategoryPeers[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class TopPeersDisabled extends VirtualClass<void> {
            static fromReader(reader: Reader): TopPeersDisabled;
        }
    }

    export namespace messages {
        export class Dialogs extends VirtualClass<{
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Dialogs;
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class DialogsSlice extends VirtualClass<{
            count: int;
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): DialogsSlice;
            count: int;
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class DialogsNotModified extends VirtualClass<{
            count: int;
        }> {
            static fromReader(reader: Reader): DialogsNotModified;
            count: int;
        }
        export class Messages extends VirtualClass<{
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Messages;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class MessagesSlice extends VirtualClass<{
            // flags: null;
            inexact?: boolean;
            count: int;
            nextRate?: int;
            offsetIdOffset?: int;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): MessagesSlice;
            // flags: null;
            inexact?: boolean;
            count: int;
            nextRate?: int;
            offsetIdOffset?: int;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class ChannelMessages extends VirtualClass<{
            // flags: null;
            inexact?: boolean;
            pts: int;
            count: int;
            offsetIdOffset?: int;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChannelMessages;
            // flags: null;
            inexact?: boolean;
            pts: int;
            count: int;
            offsetIdOffset?: int;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class MessagesNotModified extends VirtualClass<{
            count: int;
        }> {
            static fromReader(reader: Reader): MessagesNotModified;
            count: int;
        }
        export class Chats extends VirtualClass<{
            chats: Api.TypeChat[];
        }> {
            static fromReader(reader: Reader): Chats;
            chats: Api.TypeChat[];
        }
        export class ChatsSlice extends VirtualClass<{
            count: int;
            chats: Api.TypeChat[];
        }> {
            static fromReader(reader: Reader): ChatsSlice;
            count: int;
            chats: Api.TypeChat[];
        }
        export class ChatFull extends VirtualClass<{
            fullChat: Api.TypeChatFull;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChatFull;
            fullChat: Api.TypeChatFull;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class AffectedHistory extends VirtualClass<{
            pts: int;
            ptsCount: int;
            offset: int;
        }> {
            static fromReader(reader: Reader): AffectedHistory;
            pts: int;
            ptsCount: int;
            offset: int;
        }
        export class DhConfigNotModified extends VirtualClass<{
            random: bytes;
        }> {
            static fromReader(reader: Reader): DhConfigNotModified;
            random: bytes;
        }
        export class DhConfig extends VirtualClass<{
            g: int;
            p: bytes;
            version: int;
            random: bytes;
        }> {
            static fromReader(reader: Reader): DhConfig;
            g: int;
            p: bytes;
            version: int;
            random: bytes;
        }
        export class SentEncryptedMessage extends VirtualClass<{
            date: int;
        }> {
            static fromReader(reader: Reader): SentEncryptedMessage;
            date: int;
        }
        export class SentEncryptedFile extends VirtualClass<{
            date: int;
            file: Api.TypeEncryptedFile;
        }> {
            static fromReader(reader: Reader): SentEncryptedFile;
            date: int;
            file: Api.TypeEncryptedFile;
        }
        export class StickersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): StickersNotModified;
        }
        export class Stickers extends VirtualClass<{
            hash: int;
            stickers: Api.TypeDocument[];
        }> {
            static fromReader(reader: Reader): Stickers;
            hash: int;
            stickers: Api.TypeDocument[];
        }
        export class AllStickersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): AllStickersNotModified;
        }
        export class AllStickers extends VirtualClass<{
            hash: int;
            sets: Api.TypeStickerSet[];
        }> {
            static fromReader(reader: Reader): AllStickers;
            hash: int;
            sets: Api.TypeStickerSet[];
        }
        export class AffectedMessages extends VirtualClass<{
            pts: int;
            ptsCount: int;
        }> {
            static fromReader(reader: Reader): AffectedMessages;
            pts: int;
            ptsCount: int;
        }
        export class StickerSet extends VirtualClass<{
            set: Api.TypeStickerSet;
            packs: Api.TypeStickerPack[];
            documents: Api.TypeDocument[];
        }> {
            static fromReader(reader: Reader): StickerSet;
            set: Api.TypeStickerSet;
            packs: Api.TypeStickerPack[];
            documents: Api.TypeDocument[];
        }
        export class SavedGifsNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): SavedGifsNotModified;
        }
        export class SavedGifs extends VirtualClass<{
            hash: int;
            gifs: Api.TypeDocument[];
        }> {
            static fromReader(reader: Reader): SavedGifs;
            hash: int;
            gifs: Api.TypeDocument[];
        }
        export class BotResults extends VirtualClass<{
            // flags: null;
            gallery?: boolean;
            queryId: long;
            nextOffset?: string;
            switchPm?: Api.TypeInlineBotSwitchPM;
            results: Api.TypeBotInlineResult[];
            cacheTime: int;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): BotResults;
            // flags: null;
            gallery?: boolean;
            queryId: long;
            nextOffset?: string;
            switchPm?: Api.TypeInlineBotSwitchPM;
            results: Api.TypeBotInlineResult[];
            cacheTime: int;
            users: Api.TypeUser[];
        }
        export class BotCallbackAnswer extends VirtualClass<{
            // flags: null;
            alert?: boolean;
            hasUrl?: boolean;
            nativeUi?: boolean;
            message?: string;
            url?: string;
            cacheTime: int;
        }> {
            static fromReader(reader: Reader): BotCallbackAnswer;
            // flags: null;
            alert?: boolean;
            hasUrl?: boolean;
            nativeUi?: boolean;
            message?: string;
            url?: string;
            cacheTime: int;
        }
        export class MessageEditData extends VirtualClass<{
            // flags: null;
            caption?: boolean;
        }> {
            static fromReader(reader: Reader): MessageEditData;
            // flags: null;
            caption?: boolean;
        }
        export class PeerDialogs extends VirtualClass<{
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            state: updates.TypeState;
        }> {
            static fromReader(reader: Reader): PeerDialogs;
            dialogs: Api.TypeDialog[];
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            state: updates.TypeState;
        }
        export class FeaturedStickersNotModified extends VirtualClass<{
            count: int;
        }> {
            static fromReader(reader: Reader): FeaturedStickersNotModified;
            count: int;
        }
        export class FeaturedStickers extends VirtualClass<{
            hash: int;
            count: int;
            sets: Api.TypeStickerSetCovered[];
            unread: long[];
        }> {
            static fromReader(reader: Reader): FeaturedStickers;
            hash: int;
            count: int;
            sets: Api.TypeStickerSetCovered[];
            unread: long[];
        }
        export class RecentStickersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): RecentStickersNotModified;
        }
        export class RecentStickers extends VirtualClass<{
            hash: int;
            packs: Api.TypeStickerPack[];
            stickers: Api.TypeDocument[];
            dates: int[];
        }> {
            static fromReader(reader: Reader): RecentStickers;
            hash: int;
            packs: Api.TypeStickerPack[];
            stickers: Api.TypeDocument[];
            dates: int[];
        }
        export class ArchivedStickers extends VirtualClass<{
            count: int;
            sets: Api.TypeStickerSetCovered[];
        }> {
            static fromReader(reader: Reader): ArchivedStickers;
            count: int;
            sets: Api.TypeStickerSetCovered[];
        }
        export class StickerSetInstallResultSuccess extends VirtualClass<void> {
            static fromReader(reader: Reader): StickerSetInstallResultSuccess;
        }
        export class StickerSetInstallResultArchive extends VirtualClass<{
            sets: Api.TypeStickerSetCovered[];
        }> {
            static fromReader(reader: Reader): StickerSetInstallResultArchive;
            sets: Api.TypeStickerSetCovered[];
        }
        export class HighScores extends VirtualClass<{
            scores: Api.TypeHighScore[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): HighScores;
            scores: Api.TypeHighScore[];
            users: Api.TypeUser[];
        }
        export class FavedStickersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): FavedStickersNotModified;
        }
        export class FavedStickers extends VirtualClass<{
            hash: int;
            packs: Api.TypeStickerPack[];
            stickers: Api.TypeDocument[];
        }> {
            static fromReader(reader: Reader): FavedStickers;
            hash: int;
            packs: Api.TypeStickerPack[];
            stickers: Api.TypeDocument[];
        }
        export class FoundStickerSetsNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): FoundStickerSetsNotModified;
        }
        export class FoundStickerSets extends VirtualClass<{
            hash: int;
            sets: Api.TypeStickerSetCovered[];
        }> {
            static fromReader(reader: Reader): FoundStickerSets;
            hash: int;
            sets: Api.TypeStickerSetCovered[];
        }
        export class SearchCounter extends VirtualClass<{
            // flags: null;
            inexact?: boolean;
            filter: Api.TypeMessagesFilter;
            count: int;
        }> {
            static fromReader(reader: Reader): SearchCounter;
            // flags: null;
            inexact?: boolean;
            filter: Api.TypeMessagesFilter;
            count: int;
        }
        export class InactiveChats extends VirtualClass<{
            dates: int[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): InactiveChats;
            dates: int[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class VotesList extends VirtualClass<{
            // flags: null;
            count: int;
            votes: Api.TypeMessageUserVote[];
            users: Api.TypeUser[];
            nextOffset?: string;
        }> {
            static fromReader(reader: Reader): VotesList;
            // flags: null;
            count: int;
            votes: Api.TypeMessageUserVote[];
            users: Api.TypeUser[];
            nextOffset?: string;
        }
        export class MessageViews extends VirtualClass<{
            views: Api.TypeMessageViews[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): MessageViews;
            views: Api.TypeMessageViews[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class DiscussionMessage extends VirtualClass<{
            // flags: null;
            messages: Api.TypeMessage[];
            maxId?: int;
            readInboxMaxId?: int;
            readOutboxMaxId?: int;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): DiscussionMessage;
            // flags: null;
            messages: Api.TypeMessage[];
            maxId?: int;
            readInboxMaxId?: int;
            readOutboxMaxId?: int;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class HistoryImport extends VirtualClass<{
            id: long;
        }> {
            static fromReader(reader: Reader): HistoryImport;
            id: long;
        }
        export class HistoryImportParsed extends VirtualClass<{
            // flags: null;
            pm?: boolean;
            group?: boolean;
            title?: string;
        }> {
            static fromReader(reader: Reader): HistoryImportParsed;
            // flags: null;
            pm?: boolean;
            group?: boolean;
            title?: string;
        }
        export class AffectedFoundMessages extends VirtualClass<{
            pts: int;
            ptsCount: int;
            offset: int;
            messages: int[];
        }> {
            static fromReader(reader: Reader): AffectedFoundMessages;
            pts: int;
            ptsCount: int;
            offset: int;
            messages: int[];
        }
        export class ExportedChatInvites extends VirtualClass<{
            count: int;
            invites: Api.TypeExportedChatInvite[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ExportedChatInvites;
            count: int;
            invites: Api.TypeExportedChatInvite[];
            users: Api.TypeUser[];
        }
        export class ExportedChatInvite extends VirtualClass<{
            invite: Api.TypeExportedChatInvite;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ExportedChatInvite;
            invite: Api.TypeExportedChatInvite;
            users: Api.TypeUser[];
        }
        export class ExportedChatInviteReplaced extends VirtualClass<{
            invite: Api.TypeExportedChatInvite;
            newInvite: Api.TypeExportedChatInvite;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ExportedChatInviteReplaced;
            invite: Api.TypeExportedChatInvite;
            newInvite: Api.TypeExportedChatInvite;
            users: Api.TypeUser[];
        }
        export class ChatInviteImporters extends VirtualClass<{
            count: int;
            importers: Api.TypeChatInviteImporter[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChatInviteImporters;
            count: int;
            importers: Api.TypeChatInviteImporter[];
            users: Api.TypeUser[];
        }
        export class ChatAdminsWithInvites extends VirtualClass<{
            admins: Api.TypeChatAdminWithInvites[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChatAdminsWithInvites;
            admins: Api.TypeChatAdminWithInvites[];
            users: Api.TypeUser[];
        }
        export class CheckedHistoryImportPeer extends VirtualClass<{
            confirmText: string;
        }> {
            static fromReader(reader: Reader): CheckedHistoryImportPeer;
            confirmText: string;
        }
    }

    export namespace updates {
        export class State extends VirtualClass<{
            pts: int;
            qts: int;
            date: int;
            seq: int;
            unreadCount: int;
        }> {
            static fromReader(reader: Reader): State;
            pts: int;
            qts: int;
            date: int;
            seq: int;
            unreadCount: int;
        }
        export class DifferenceEmpty extends VirtualClass<{
            date: int;
            seq: int;
        }> {
            static fromReader(reader: Reader): DifferenceEmpty;
            date: int;
            seq: int;
        }
        export class Difference extends VirtualClass<{
            newMessages: Api.TypeMessage[];
            newEncryptedMessages: Api.TypeEncryptedMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            state: updates.TypeState;
        }> {
            static fromReader(reader: Reader): Difference;
            newMessages: Api.TypeMessage[];
            newEncryptedMessages: Api.TypeEncryptedMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            state: updates.TypeState;
        }
        export class DifferenceSlice extends VirtualClass<{
            newMessages: Api.TypeMessage[];
            newEncryptedMessages: Api.TypeEncryptedMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            intermediateState: updates.TypeState;
        }> {
            static fromReader(reader: Reader): DifferenceSlice;
            newMessages: Api.TypeMessage[];
            newEncryptedMessages: Api.TypeEncryptedMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            intermediateState: updates.TypeState;
        }
        export class DifferenceTooLong extends VirtualClass<{
            pts: int;
        }> {
            static fromReader(reader: Reader): DifferenceTooLong;
            pts: int;
        }
        export class ChannelDifferenceEmpty extends VirtualClass<{
            // flags: null;
            final?: boolean;
            pts: int;
            timeout?: int;
        }> {
            static fromReader(reader: Reader): ChannelDifferenceEmpty;
            // flags: null;
            final?: boolean;
            pts: int;
            timeout?: int;
        }
        export class ChannelDifferenceTooLong extends VirtualClass<{
            // flags: null;
            final?: boolean;
            timeout?: int;
            dialog: Api.TypeDialog;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChannelDifferenceTooLong;
            // flags: null;
            final?: boolean;
            timeout?: int;
            dialog: Api.TypeDialog;
            messages: Api.TypeMessage[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class ChannelDifference extends VirtualClass<{
            // flags: null;
            final?: boolean;
            pts: int;
            timeout?: int;
            newMessages: Api.TypeMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChannelDifference;
            // flags: null;
            final?: boolean;
            pts: int;
            timeout?: int;
            newMessages: Api.TypeMessage[];
            otherUpdates: Api.TypeUpdate[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
    }

    export namespace photos {
        export class Photos extends VirtualClass<{
            photos: Api.TypePhoto[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Photos;
            photos: Api.TypePhoto[];
            users: Api.TypeUser[];
        }
        export class PhotosSlice extends VirtualClass<{
            count: int;
            photos: Api.TypePhoto[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): PhotosSlice;
            count: int;
            photos: Api.TypePhoto[];
            users: Api.TypeUser[];
        }
        export class Photo extends VirtualClass<{
            photo: Api.TypePhoto;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): Photo;
            photo: Api.TypePhoto;
            users: Api.TypeUser[];
        }
    }

    export namespace upload {
        export class File extends VirtualClass<{
            type: storage.TypeFileType;
            mtime: int;
            bytes: bytes;
        }> {
            static fromReader(reader: Reader): File;
            type: storage.TypeFileType;
            mtime: int;
            bytes: bytes;
        }
        export class FileCdnRedirect extends VirtualClass<{
            dcId: int;
            fileToken: bytes;
            encryptionKey: bytes;
            encryptionIv: bytes;
            fileHashes: Api.TypeFileHash[];
        }> {
            static fromReader(reader: Reader): FileCdnRedirect;
            dcId: int;
            fileToken: bytes;
            encryptionKey: bytes;
            encryptionIv: bytes;
            fileHashes: Api.TypeFileHash[];
        }
        export class WebFile extends VirtualClass<{
            size: int;
            mimeType: string;
            fileType: storage.TypeFileType;
            mtime: int;
            bytes: bytes;
        }> {
            static fromReader(reader: Reader): WebFile;
            size: int;
            mimeType: string;
            fileType: storage.TypeFileType;
            mtime: int;
            bytes: bytes;
        }
        export class CdnFileReuploadNeeded extends VirtualClass<{
            requestToken: bytes;
        }> {
            static fromReader(reader: Reader): CdnFileReuploadNeeded;
            requestToken: bytes;
        }
        export class CdnFile extends VirtualClass<{
            bytes: bytes;
        }> {
            static fromReader(reader: Reader): CdnFile;
            bytes: bytes;
        }
    }

    export namespace help {
        export class AppUpdate extends VirtualClass<{
            // flags: null;
            canNotSkip?: boolean;
            id: int;
            version: string;
            text: string;
            entities: Api.TypeMessageEntity[];
            document?: Api.TypeDocument;
            url?: string;
            sticker?: Api.TypeDocument;
        }> {
            static fromReader(reader: Reader): AppUpdate;
            // flags: null;
            canNotSkip?: boolean;
            id: int;
            version: string;
            text: string;
            entities: Api.TypeMessageEntity[];
            document?: Api.TypeDocument;
            url?: string;
            sticker?: Api.TypeDocument;
        }
        export class NoAppUpdate extends VirtualClass<void> {
            static fromReader(reader: Reader): NoAppUpdate;
        }
        export class InviteText extends VirtualClass<{
            message: string;
        }> {
            static fromReader(reader: Reader): InviteText;
            message: string;
        }
        export class Support extends VirtualClass<{
            phoneNumber: string;
            user: Api.TypeUser;
        }> {
            static fromReader(reader: Reader): Support;
            phoneNumber: string;
            user: Api.TypeUser;
        }
        export class TermsOfService extends VirtualClass<{
            // flags: null;
            popup?: boolean;
            id: Api.TypeDataJSON;
            text: string;
            entities: Api.TypeMessageEntity[];
            minAgeConfirm?: int;
        }> {
            static fromReader(reader: Reader): TermsOfService;
            // flags: null;
            popup?: boolean;
            id: Api.TypeDataJSON;
            text: string;
            entities: Api.TypeMessageEntity[];
            minAgeConfirm?: int;
        }
        export class RecentMeUrls extends VirtualClass<{
            urls: Api.TypeRecentMeUrl[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): RecentMeUrls;
            urls: Api.TypeRecentMeUrl[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class TermsOfServiceUpdateEmpty extends VirtualClass<{
            expires: int;
        }> {
            static fromReader(reader: Reader): TermsOfServiceUpdateEmpty;
            expires: int;
        }
        export class TermsOfServiceUpdate extends VirtualClass<{
            expires: int;
            termsOfService: help.TypeTermsOfService;
        }> {
            static fromReader(reader: Reader): TermsOfServiceUpdate;
            expires: int;
            termsOfService: help.TypeTermsOfService;
        }
        export class DeepLinkInfoEmpty extends VirtualClass<void> {
            static fromReader(reader: Reader): DeepLinkInfoEmpty;
        }
        export class DeepLinkInfo extends VirtualClass<{
            // flags: null;
            updateApp?: boolean;
            message: string;
            entities?: Api.TypeMessageEntity[];
        }> {
            static fromReader(reader: Reader): DeepLinkInfo;
            // flags: null;
            updateApp?: boolean;
            message: string;
            entities?: Api.TypeMessageEntity[];
        }
        export class PassportConfigNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): PassportConfigNotModified;
        }
        export class PassportConfig extends VirtualClass<{
            hash: int;
            countriesLangs: Api.TypeDataJSON;
        }> {
            static fromReader(reader: Reader): PassportConfig;
            hash: int;
            countriesLangs: Api.TypeDataJSON;
        }
        export class SupportName extends VirtualClass<{
            name: string;
        }> {
            static fromReader(reader: Reader): SupportName;
            name: string;
        }
        export class UserInfoEmpty extends VirtualClass<void> {
            static fromReader(reader: Reader): UserInfoEmpty;
        }
        export class UserInfo extends VirtualClass<{
            message: string;
            entities: Api.TypeMessageEntity[];
            author: string;
            date: int;
        }> {
            static fromReader(reader: Reader): UserInfo;
            message: string;
            entities: Api.TypeMessageEntity[];
            author: string;
            date: int;
        }
        export class PromoDataEmpty extends VirtualClass<{
            expires: int;
        }> {
            static fromReader(reader: Reader): PromoDataEmpty;
            expires: int;
        }
        export class PromoData extends VirtualClass<{
            // flags: null;
            proxy?: boolean;
            expires: int;
            peer: Api.TypePeer;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            psaType?: string;
            psaMessage?: string;
        }> {
            static fromReader(reader: Reader): PromoData;
            // flags: null;
            proxy?: boolean;
            expires: int;
            peer: Api.TypePeer;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            psaType?: string;
            psaMessage?: string;
        }
        export class CountryCode extends VirtualClass<{
            // flags: null;
            countryCode: string;
            prefixes?: string[];
            patterns?: string[];
        }> {
            static fromReader(reader: Reader): CountryCode;
            // flags: null;
            countryCode: string;
            prefixes?: string[];
            patterns?: string[];
        }
        export class Country extends VirtualClass<{
            // flags: null;
            hidden?: boolean;
            iso2: string;
            defaultName: string;
            name?: string;
            countryCodes: help.TypeCountryCode[];
        }> {
            static fromReader(reader: Reader): Country;
            // flags: null;
            hidden?: boolean;
            iso2: string;
            defaultName: string;
            name?: string;
            countryCodes: help.TypeCountryCode[];
        }
        export class CountriesListNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): CountriesListNotModified;
        }
        export class CountriesList extends VirtualClass<{
            countries: help.TypeCountry[];
            hash: int;
        }> {
            static fromReader(reader: Reader): CountriesList;
            countries: help.TypeCountry[];
            hash: int;
        }
        export class ConfigSimple extends VirtualClass<{
            date: int;
            expires: int;
            rules: Api.TypeAccessPointRule[];
        }> {
            static fromReader(reader: Reader): ConfigSimple;
            date: int;
            expires: int;
            rules: Api.TypeAccessPointRule[];
        }
    }

    export namespace account {
        export class PrivacyRules extends VirtualClass<{
            rules: Api.TypePrivacyRule[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): PrivacyRules;
            rules: Api.TypePrivacyRule[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class Authorizations extends VirtualClass<{
            authorizations: Api.TypeAuthorization[];
        }> {
            static fromReader(reader: Reader): Authorizations;
            authorizations: Api.TypeAuthorization[];
        }
        export class Password extends VirtualClass<{
            // flags: null;
            hasRecovery?: boolean;
            hasSecureValues?: boolean;
            hasPassword?: boolean;
            currentAlgo?: Api.TypePasswordKdfAlgo;
            srp_B?: bytes;
            srpId?: long;
            hint?: string;
            emailUnconfirmedPattern?: string;
            newAlgo: Api.TypePasswordKdfAlgo;
            newSecureAlgo: Api.TypeSecurePasswordKdfAlgo;
            secureRandom: bytes;
            pendingResetDate?: int;
        }> {
            static fromReader(reader: Reader): Password;
            // flags: null;
            hasRecovery?: boolean;
            hasSecureValues?: boolean;
            hasPassword?: boolean;
            currentAlgo?: Api.TypePasswordKdfAlgo;
            srp_B?: bytes;
            srpId?: long;
            hint?: string;
            emailUnconfirmedPattern?: string;
            newAlgo: Api.TypePasswordKdfAlgo;
            newSecureAlgo: Api.TypeSecurePasswordKdfAlgo;
            secureRandom: bytes;
            pendingResetDate?: int;
        }
        export class PasswordSettings extends VirtualClass<{
            // flags: null;
            email?: string;
            secureSettings?: Api.TypeSecureSecretSettings;
        }> {
            static fromReader(reader: Reader): PasswordSettings;
            // flags: null;
            email?: string;
            secureSettings?: Api.TypeSecureSecretSettings;
        }
        export class PasswordInputSettings extends VirtualClass<{
            // flags: null;
            newAlgo?: Api.TypePasswordKdfAlgo;
            newPasswordHash?: bytes;
            hint?: string;
            email?: string;
            newSecureSettings?: Api.TypeSecureSecretSettings;
        }> {
            static fromReader(reader: Reader): PasswordInputSettings;
            // flags: null;
            newAlgo?: Api.TypePasswordKdfAlgo;
            newPasswordHash?: bytes;
            hint?: string;
            email?: string;
            newSecureSettings?: Api.TypeSecureSecretSettings;
        }
        export class TmpPassword extends VirtualClass<{
            tmpPassword: bytes;
            validUntil: int;
        }> {
            static fromReader(reader: Reader): TmpPassword;
            tmpPassword: bytes;
            validUntil: int;
        }
        export class WebAuthorizations extends VirtualClass<{
            authorizations: Api.TypeWebAuthorization[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): WebAuthorizations;
            authorizations: Api.TypeWebAuthorization[];
            users: Api.TypeUser[];
        }
        export class AuthorizationForm extends VirtualClass<{
            // flags: null;
            requiredTypes: Api.TypeSecureRequiredType[];
            values: Api.TypeSecureValue[];
            errors: Api.TypeSecureValueError[];
            users: Api.TypeUser[];
            privacyPolicyUrl?: string;
        }> {
            static fromReader(reader: Reader): AuthorizationForm;
            // flags: null;
            requiredTypes: Api.TypeSecureRequiredType[];
            values: Api.TypeSecureValue[];
            errors: Api.TypeSecureValueError[];
            users: Api.TypeUser[];
            privacyPolicyUrl?: string;
        }
        export class SentEmailCode extends VirtualClass<{
            emailPattern: string;
            length: int;
        }> {
            static fromReader(reader: Reader): SentEmailCode;
            emailPattern: string;
            length: int;
        }
        export class Takeout extends VirtualClass<{
            id: long;
        }> {
            static fromReader(reader: Reader): Takeout;
            id: long;
        }
        export class WallPapersNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): WallPapersNotModified;
        }
        export class WallPapers extends VirtualClass<{
            hash: int;
            wallpapers: Api.TypeWallPaper[];
        }> {
            static fromReader(reader: Reader): WallPapers;
            hash: int;
            wallpapers: Api.TypeWallPaper[];
        }
        export class AutoDownloadSettings extends VirtualClass<{
            low: Api.TypeAutoDownloadSettings;
            medium: Api.TypeAutoDownloadSettings;
            high: Api.TypeAutoDownloadSettings;
        }> {
            static fromReader(reader: Reader): AutoDownloadSettings;
            low: Api.TypeAutoDownloadSettings;
            medium: Api.TypeAutoDownloadSettings;
            high: Api.TypeAutoDownloadSettings;
        }
        export class ThemesNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): ThemesNotModified;
        }
        export class Themes extends VirtualClass<{
            hash: int;
            themes: Api.TypeTheme[];
        }> {
            static fromReader(reader: Reader): Themes;
            hash: int;
            themes: Api.TypeTheme[];
        }
        export class ContentSettings extends VirtualClass<{
            // flags: null;
            sensitiveEnabled?: boolean;
            sensitiveCanChange?: boolean;
        }> {
            static fromReader(reader: Reader): ContentSettings;
            // flags: null;
            sensitiveEnabled?: boolean;
            sensitiveCanChange?: boolean;
        }
        export class ResetPasswordFailedWait extends VirtualClass<{
            retryDate: int;
        }> {
            static fromReader(reader: Reader): ResetPasswordFailedWait;
            retryDate: int;
        }
        export class ResetPasswordRequestedWait extends VirtualClass<{
            untilDate: int;
        }> {
            static fromReader(reader: Reader): ResetPasswordRequestedWait;
            untilDate: int;
        }
        export class ResetPasswordOk extends VirtualClass<void> {
            static fromReader(reader: Reader): ResetPasswordOk;
        }
    }

    export namespace channels {
        export class ChannelParticipants extends VirtualClass<{
            count: int;
            participants: Api.TypeChannelParticipant[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChannelParticipants;
            count: int;
            participants: Api.TypeChannelParticipant[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class ChannelParticipantsNotModified extends VirtualClass<void> {
            static fromReader(reader: Reader): ChannelParticipantsNotModified;
        }
        export class ChannelParticipant extends VirtualClass<{
            participant: Api.TypeChannelParticipant;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): ChannelParticipant;
            participant: Api.TypeChannelParticipant;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class AdminLogResults extends VirtualClass<{
            events: Api.TypeChannelAdminLogEvent[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): AdminLogResults;
            events: Api.TypeChannelAdminLogEvent[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
    }

    export namespace payments {
        export class PaymentForm extends VirtualClass<{
            // flags: null;
            canSaveCredentials?: boolean;
            passwordMissing?: boolean;
            formId: long;
            botId: int;
            invoice: Api.TypeInvoice;
            providerId: int;
            url: string;
            nativeProvider?: string;
            nativeParams?: Api.TypeDataJSON;
            savedInfo?: Api.TypePaymentRequestedInfo;
            savedCredentials?: Api.TypePaymentSavedCredentials;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): PaymentForm;
            // flags: null;
            canSaveCredentials?: boolean;
            passwordMissing?: boolean;
            formId: long;
            botId: int;
            invoice: Api.TypeInvoice;
            providerId: int;
            url: string;
            nativeProvider?: string;
            nativeParams?: Api.TypeDataJSON;
            savedInfo?: Api.TypePaymentRequestedInfo;
            savedCredentials?: Api.TypePaymentSavedCredentials;
            users: Api.TypeUser[];
        }
        export class ValidatedRequestedInfo extends VirtualClass<{
            // flags: null;
            id?: string;
            shippingOptions?: Api.TypeShippingOption[];
        }> {
            static fromReader(reader: Reader): ValidatedRequestedInfo;
            // flags: null;
            id?: string;
            shippingOptions?: Api.TypeShippingOption[];
        }
        export class PaymentResult extends VirtualClass<{
            updates: Api.TypeUpdates;
        }> {
            static fromReader(reader: Reader): PaymentResult;
            updates: Api.TypeUpdates;
        }
        export class PaymentVerificationNeeded extends VirtualClass<{
            url: string;
        }> {
            static fromReader(reader: Reader): PaymentVerificationNeeded;
            url: string;
        }
        export class PaymentReceipt extends VirtualClass<{
            // flags: null;
            date: int;
            botId: int;
            providerId: int;
            title: string;
            description: string;
            photo?: Api.TypeWebDocument;
            invoice: Api.TypeInvoice;
            info?: Api.TypePaymentRequestedInfo;
            shipping?: Api.TypeShippingOption;
            tipAmount?: long;
            currency: string;
            totalAmount: long;
            credentialsTitle: string;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): PaymentReceipt;
            // flags: null;
            date: int;
            botId: int;
            providerId: int;
            title: string;
            description: string;
            photo?: Api.TypeWebDocument;
            invoice: Api.TypeInvoice;
            info?: Api.TypePaymentRequestedInfo;
            shipping?: Api.TypeShippingOption;
            tipAmount?: long;
            currency: string;
            totalAmount: long;
            credentialsTitle: string;
            users: Api.TypeUser[];
        }
        export class SavedInfo extends VirtualClass<{
            // flags: null;
            hasSavedCredentials?: boolean;
            savedInfo?: Api.TypePaymentRequestedInfo;
        }> {
            static fromReader(reader: Reader): SavedInfo;
            // flags: null;
            hasSavedCredentials?: boolean;
            savedInfo?: Api.TypePaymentRequestedInfo;
        }
        export class BankCardData extends VirtualClass<{
            title: string;
            openUrls: Api.TypeBankCardOpenUrl[];
        }> {
            static fromReader(reader: Reader): BankCardData;
            title: string;
            openUrls: Api.TypeBankCardOpenUrl[];
        }
    }

    export namespace phone {
        export class PhoneCall extends VirtualClass<{
            phoneCall: Api.TypePhoneCall;
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): PhoneCall;
            phoneCall: Api.TypePhoneCall;
            users: Api.TypeUser[];
        }
        export class GroupCall extends VirtualClass<{
            call: Api.TypeGroupCall;
            participants: Api.TypeGroupCallParticipant[];
            participantsNextOffset: string;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): GroupCall;
            call: Api.TypeGroupCall;
            participants: Api.TypeGroupCallParticipant[];
            participantsNextOffset: string;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class GroupParticipants extends VirtualClass<{
            count: int;
            participants: Api.TypeGroupCallParticipant[];
            nextOffset: string;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            version: int;
        }> {
            static fromReader(reader: Reader): GroupParticipants;
            count: int;
            participants: Api.TypeGroupCallParticipant[];
            nextOffset: string;
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
            version: int;
        }
        export class JoinAsPeers extends VirtualClass<{
            peers: Api.TypePeer[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): JoinAsPeers;
            peers: Api.TypePeer[];
            chats: Api.TypeChat[];
            users: Api.TypeUser[];
        }
        export class ExportedGroupCallInvite extends VirtualClass<{
            link: string;
        }> {
            static fromReader(reader: Reader): ExportedGroupCallInvite;
            link: string;
        }
    }

    export namespace stats {
        export class BroadcastStats extends VirtualClass<{
            period: Api.TypeStatsDateRangeDays;
            followers: Api.TypeStatsAbsValueAndPrev;
            viewsPerPost: Api.TypeStatsAbsValueAndPrev;
            sharesPerPost: Api.TypeStatsAbsValueAndPrev;
            enabledNotifications: Api.TypeStatsPercentValue;
            growthGraph: Api.TypeStatsGraph;
            followersGraph: Api.TypeStatsGraph;
            muteGraph: Api.TypeStatsGraph;
            topHoursGraph: Api.TypeStatsGraph;
            interactionsGraph: Api.TypeStatsGraph;
            ivInteractionsGraph: Api.TypeStatsGraph;
            viewsBySourceGraph: Api.TypeStatsGraph;
            newFollowersBySourceGraph: Api.TypeStatsGraph;
            languagesGraph: Api.TypeStatsGraph;
            recentMessageInteractions: Api.TypeMessageInteractionCounters[];
        }> {
            static fromReader(reader: Reader): BroadcastStats;
            period: Api.TypeStatsDateRangeDays;
            followers: Api.TypeStatsAbsValueAndPrev;
            viewsPerPost: Api.TypeStatsAbsValueAndPrev;
            sharesPerPost: Api.TypeStatsAbsValueAndPrev;
            enabledNotifications: Api.TypeStatsPercentValue;
            growthGraph: Api.TypeStatsGraph;
            followersGraph: Api.TypeStatsGraph;
            muteGraph: Api.TypeStatsGraph;
            topHoursGraph: Api.TypeStatsGraph;
            interactionsGraph: Api.TypeStatsGraph;
            ivInteractionsGraph: Api.TypeStatsGraph;
            viewsBySourceGraph: Api.TypeStatsGraph;
            newFollowersBySourceGraph: Api.TypeStatsGraph;
            languagesGraph: Api.TypeStatsGraph;
            recentMessageInteractions: Api.TypeMessageInteractionCounters[];
        }
        export class MegagroupStats extends VirtualClass<{
            period: Api.TypeStatsDateRangeDays;
            members: Api.TypeStatsAbsValueAndPrev;
            messages: Api.TypeStatsAbsValueAndPrev;
            viewers: Api.TypeStatsAbsValueAndPrev;
            posters: Api.TypeStatsAbsValueAndPrev;
            growthGraph: Api.TypeStatsGraph;
            membersGraph: Api.TypeStatsGraph;
            newMembersBySourceGraph: Api.TypeStatsGraph;
            languagesGraph: Api.TypeStatsGraph;
            messagesGraph: Api.TypeStatsGraph;
            actionsGraph: Api.TypeStatsGraph;
            topHoursGraph: Api.TypeStatsGraph;
            weekdaysGraph: Api.TypeStatsGraph;
            topPosters: Api.TypeStatsGroupTopPoster[];
            topAdmins: Api.TypeStatsGroupTopAdmin[];
            topInviters: Api.TypeStatsGroupTopInviter[];
            users: Api.TypeUser[];
        }> {
            static fromReader(reader: Reader): MegagroupStats;
            period: Api.TypeStatsDateRangeDays;
            members: Api.TypeStatsAbsValueAndPrev;
            messages: Api.TypeStatsAbsValueAndPrev;
            viewers: Api.TypeStatsAbsValueAndPrev;
            posters: Api.TypeStatsAbsValueAndPrev;
            growthGraph: Api.TypeStatsGraph;
            membersGraph: Api.TypeStatsGraph;
            newMembersBySourceGraph: Api.TypeStatsGraph;
            languagesGraph: Api.TypeStatsGraph;
            messagesGraph: Api.TypeStatsGraph;
            actionsGraph: Api.TypeStatsGraph;
            topHoursGraph: Api.TypeStatsGraph;
            weekdaysGraph: Api.TypeStatsGraph;
            topPosters: Api.TypeStatsGroupTopPoster[];
            topAdmins: Api.TypeStatsGroupTopAdmin[];
            topInviters: Api.TypeStatsGroupTopInviter[];
            users: Api.TypeUser[];
        }
        export class MessageStats extends VirtualClass<{
            viewsGraph: Api.TypeStatsGraph;
        }> {
            static fromReader(reader: Reader): MessageStats;
            viewsGraph: Api.TypeStatsGraph;
        }
    }

    export namespace stickers {
        export class SuggestedShortName extends VirtualClass<{
            shortName: string;
        }> {
            static fromReader(reader: Reader): SuggestedShortName;
            shortName: string;
        }
    }

    export namespace storage {
        export type TypeFileType =
            | storage.FileUnknown
            | storage.FilePartial
            | storage.FileJpeg
            | storage.FileGif
            | storage.FilePng
            | storage.FilePdf
            | storage.FileMp3
            | storage.FileMov
            | storage.FileMp4
            | storage.FileWebp;
    }

    export namespace auth {
        export type TypeSentCode = auth.SentCode;
        export type TypeAuthorization =
            | auth.Authorization
            | auth.AuthorizationSignUpRequired;
        export type TypeExportedAuthorization = auth.ExportedAuthorization;
        export type TypePasswordRecovery = auth.PasswordRecovery;
        export type TypeCodeType =
            | auth.CodeTypeSms
            | auth.CodeTypeCall
            | auth.CodeTypeFlashCall;
        export type TypeSentCodeType =
            | auth.SentCodeTypeApp
            | auth.SentCodeTypeSms
            | auth.SentCodeTypeCall
            | auth.SentCodeTypeFlashCall;
        export type TypeLoginToken =
            | auth.LoginToken
            | auth.LoginTokenMigrateTo
            | auth.LoginTokenSuccess;
    }

    export namespace contacts {
        export type TypeContacts =
            | contacts.ContactsNotModified
            | contacts.Contacts;
        export type TypeImportedContacts = contacts.ImportedContacts;
        export type TypeBlocked = contacts.Blocked | contacts.BlockedSlice;
        export type TypeFound = contacts.Found;
        export type TypeResolvedPeer = contacts.ResolvedPeer;
        export type TypeTopPeers =
            | contacts.TopPeersNotModified
            | contacts.TopPeers
            | contacts.TopPeersDisabled;
    }

    export namespace messages {
        export type TypeDialogs =
            | messages.Dialogs
            | messages.DialogsSlice
            | messages.DialogsNotModified;
        export type TypeMessages =
            | messages.Messages
            | messages.MessagesSlice
            | messages.ChannelMessages
            | messages.MessagesNotModified;
        export type TypeChats = messages.Chats | messages.ChatsSlice;
        export type TypeChatFull = messages.ChatFull;
        export type TypeAffectedHistory = messages.AffectedHistory;
        export type TypeDhConfig =
            | messages.DhConfigNotModified
            | messages.DhConfig;
        export type TypeSentEncryptedMessage =
            | messages.SentEncryptedMessage
            | messages.SentEncryptedFile;
        export type TypeStickers =
            | messages.StickersNotModified
            | messages.Stickers;
        export type TypeAllStickers =
            | messages.AllStickersNotModified
            | messages.AllStickers;
        export type TypeAffectedMessages = messages.AffectedMessages;
        export type TypeStickerSet = messages.StickerSet;
        export type TypeSavedGifs =
            | messages.SavedGifsNotModified
            | messages.SavedGifs;
        export type TypeBotResults = messages.BotResults;
        export type TypeBotCallbackAnswer = messages.BotCallbackAnswer;
        export type TypeMessageEditData = messages.MessageEditData;
        export type TypePeerDialogs = messages.PeerDialogs;
        export type TypeFeaturedStickers =
            | messages.FeaturedStickersNotModified
            | messages.FeaturedStickers;
        export type TypeRecentStickers =
            | messages.RecentStickersNotModified
            | messages.RecentStickers;
        export type TypeArchivedStickers = messages.ArchivedStickers;
        export type TypeStickerSetInstallResult =
            | messages.StickerSetInstallResultSuccess
            | messages.StickerSetInstallResultArchive;
        export type TypeHighScores = messages.HighScores;
        export type TypeFavedStickers =
            | messages.FavedStickersNotModified
            | messages.FavedStickers;
        export type TypeFoundStickerSets =
            | messages.FoundStickerSetsNotModified
            | messages.FoundStickerSets;
        export type TypeSearchCounter = messages.SearchCounter;
        export type TypeInactiveChats = messages.InactiveChats;
        export type TypeVotesList = messages.VotesList;
        export type TypeMessageViews = messages.MessageViews;
        export type TypeDiscussionMessage = messages.DiscussionMessage;
        export type TypeHistoryImport = messages.HistoryImport;
        export type TypeHistoryImportParsed = messages.HistoryImportParsed;
        export type TypeAffectedFoundMessages = messages.AffectedFoundMessages;
        export type TypeExportedChatInvites = messages.ExportedChatInvites;
        export type TypeExportedChatInvite =
            | messages.ExportedChatInvite
            | messages.ExportedChatInviteReplaced;
        export type TypeChatInviteImporters = messages.ChatInviteImporters;
        export type TypeChatAdminsWithInvites = messages.ChatAdminsWithInvites;
        export type TypeCheckedHistoryImportPeer =
            messages.CheckedHistoryImportPeer;
    }

    export namespace updates {
        export type TypeState = updates.State;
        export type TypeDifference =
            | updates.DifferenceEmpty
            | updates.Difference
            | updates.DifferenceSlice
            | updates.DifferenceTooLong;
        export type TypeChannelDifference =
            | updates.ChannelDifferenceEmpty
            | updates.ChannelDifferenceTooLong
            | updates.ChannelDifference;
    }

    export namespace photos {
        export type TypePhotos = photos.Photos | photos.PhotosSlice;
        export type TypePhoto = photos.Photo;
    }

    export namespace upload {
        export type TypeFile = upload.File | upload.FileCdnRedirect;
        export type TypeWebFile = upload.WebFile;
        export type TypeCdnFile = upload.CdnFileReuploadNeeded | upload.CdnFile;
    }

    export namespace help {
        export type TypeAppUpdate = help.AppUpdate | help.NoAppUpdate;
        export type TypeInviteText = help.InviteText;
        export type TypeSupport = help.Support;
        export type TypeTermsOfService = help.TermsOfService;
        export type TypeRecentMeUrls = help.RecentMeUrls;
        export type TypeTermsOfServiceUpdate =
            | help.TermsOfServiceUpdateEmpty
            | help.TermsOfServiceUpdate;
        export type TypeDeepLinkInfo =
            | help.DeepLinkInfoEmpty
            | help.DeepLinkInfo;
        export type TypePassportConfig =
            | help.PassportConfigNotModified
            | help.PassportConfig;
        export type TypeSupportName = help.SupportName;
        export type TypeUserInfo = help.UserInfoEmpty | help.UserInfo;
        export type TypePromoData = help.PromoDataEmpty | help.PromoData;
        export type TypeCountryCode = help.CountryCode;
        export type TypeCountry = help.Country;
        export type TypeCountriesList =
            | help.CountriesListNotModified
            | help.CountriesList;
        export type TypeConfigSimple = help.ConfigSimple;
    }

    export namespace account {
        export type TypePrivacyRules = account.PrivacyRules;
        export type TypeAuthorizations = account.Authorizations;
        export type TypePassword = account.Password;
        export type TypePasswordSettings = account.PasswordSettings;
        export type TypePasswordInputSettings = account.PasswordInputSettings;
        export type TypeTmpPassword = account.TmpPassword;
        export type TypeWebAuthorizations = account.WebAuthorizations;
        export type TypeAuthorizationForm = account.AuthorizationForm;
        export type TypeSentEmailCode = account.SentEmailCode;
        export type TypeTakeout = account.Takeout;
        export type TypeWallPapers =
            | account.WallPapersNotModified
            | account.WallPapers;
        export type TypeAutoDownloadSettings = account.AutoDownloadSettings;
        export type TypeThemes = account.ThemesNotModified | account.Themes;
        export type TypeContentSettings = account.ContentSettings;
        export type TypeResetPasswordResult =
            | account.ResetPasswordFailedWait
            | account.ResetPasswordRequestedWait
            | account.ResetPasswordOk;
    }

    export namespace channels {
        export type TypeChannelParticipants =
            | channels.ChannelParticipants
            | channels.ChannelParticipantsNotModified;
        export type TypeChannelParticipant = channels.ChannelParticipant;
        export type TypeAdminLogResults = channels.AdminLogResults;
    }

    export namespace payments {
        export type TypePaymentForm = payments.PaymentForm;
        export type TypeValidatedRequestedInfo =
            payments.ValidatedRequestedInfo;
        export type TypePaymentResult =
            | payments.PaymentResult
            | payments.PaymentVerificationNeeded;
        export type TypePaymentReceipt = payments.PaymentReceipt;
        export type TypeSavedInfo = payments.SavedInfo;
        export type TypeBankCardData = payments.BankCardData;
    }

    export namespace phone {
        export type TypePhoneCall = phone.PhoneCall;
        export type TypeGroupCall = phone.GroupCall;
        export type TypeGroupParticipants = phone.GroupParticipants;
        export type TypeJoinAsPeers = phone.JoinAsPeers;
        export type TypeExportedGroupCallInvite = phone.ExportedGroupCallInvite;
    }

    export namespace stats {
        export type TypeBroadcastStats = stats.BroadcastStats;
        export type TypeMegagroupStats = stats.MegagroupStats;
        export type TypeMessageStats = stats.MessageStats;
    }

    export namespace stickers {
        export type TypeSuggestedShortName = stickers.SuggestedShortName;
    }

    export namespace auth {
        export class SendCode extends Request<
            Partial<{
                phoneNumber: string;
                apiId: int;
                apiHash: string;
                settings: Api.TypeCodeSettings;
            }>,
            auth.TypeSentCode
        > {
            static fromReader(reader: Reader): SendCode;
            phoneNumber: string;
            apiId: int;
            apiHash: string;
            settings: Api.TypeCodeSettings;
        }
        export class SignUp extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
                firstName: string;
                lastName: string;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): SignUp;
            phoneNumber: string;
            phoneCodeHash: string;
            firstName: string;
            lastName: string;
        }
        export class SignIn extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode: string;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): SignIn;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode: string;
        }
        export class LogOut extends Request<void, Bool> {
            static fromReader(reader: Reader): LogOut;
        }
        export class ResetAuthorizations extends Request<void, Bool> {
            static fromReader(reader: Reader): ResetAuthorizations;
        }
        export class ExportAuthorization extends Request<
            Partial<{
                dcId: int;
            }>,
            auth.TypeExportedAuthorization
        > {
            static fromReader(reader: Reader): ExportAuthorization;
            dcId: int;
        }
        export class ImportAuthorization extends Request<
            Partial<{
                id: int;
                bytes: bytes;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): ImportAuthorization;
            id: int;
            bytes: bytes;
        }
        export class BindTempAuthKey extends Request<
            Partial<{
                permAuthKeyId: long;
                nonce: long;
                expiresAt: int;
                encryptedMessage: bytes;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): BindTempAuthKey;
            permAuthKeyId: long;
            nonce: long;
            expiresAt: int;
            encryptedMessage: bytes;
        }
        export class ImportBotAuthorization extends Request<
            Partial<{
                // flags: int;
                apiId: int;
                apiHash: string;
                botAuthToken: string;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): ImportBotAuthorization;
            // flags: int;
            apiId: int;
            apiHash: string;
            botAuthToken: string;
        }
        export class CheckPassword extends Request<
            Partial<{
                password: Api.TypeInputCheckPasswordSRP;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): CheckPassword;
            password: Api.TypeInputCheckPasswordSRP;
        }
        export class RequestPasswordRecovery extends Request<
            void,
            auth.TypePasswordRecovery
        > {
            static fromReader(reader: Reader): RequestPasswordRecovery;
        }
        export class RecoverPassword extends Request<
            Partial<{
                // flags: null;
                code: string;
                newSettings?: account.TypePasswordInputSettings;
            }>,
            auth.TypeAuthorization
        > {
            static fromReader(reader: Reader): RecoverPassword;
            // flags: null;
            code: string;
            newSettings?: account.TypePasswordInputSettings;
        }
        export class ResendCode extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
            }>,
            auth.TypeSentCode
        > {
            static fromReader(reader: Reader): ResendCode;
            phoneNumber: string;
            phoneCodeHash: string;
        }
        export class CancelCode extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): CancelCode;
            phoneNumber: string;
            phoneCodeHash: string;
        }
        export class DropTempAuthKeys extends Request<
            Partial<{
                exceptAuthKeys: long[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DropTempAuthKeys;
            exceptAuthKeys: long[];
        }
        export class ExportLoginToken extends Request<
            Partial<{
                apiId: int;
                apiHash: string;
                exceptIds: int[];
            }>,
            auth.TypeLoginToken
        > {
            static fromReader(reader: Reader): ExportLoginToken;
            apiId: int;
            apiHash: string;
            exceptIds: int[];
        }
        export class ImportLoginToken extends Request<
            Partial<{
                token: bytes;
            }>,
            auth.TypeLoginToken
        > {
            static fromReader(reader: Reader): ImportLoginToken;
            token: bytes;
        }
        export class AcceptLoginToken extends Request<
            Partial<{
                token: bytes;
            }>,
            Api.TypeAuthorization
        > {
            static fromReader(reader: Reader): AcceptLoginToken;
            token: bytes;
        }
        export class CheckRecoveryPassword extends Request<
            Partial<{
                code: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): CheckRecoveryPassword;
            code: string;
        }
    }

    export namespace account {
        export class RegisterDevice extends Request<
            Partial<{
                // flags: null;
                noMuted?: boolean;
                tokenType: int;
                token: string;
                appSandbox: Bool;
                secret: bytes;
                otherUids: int[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): RegisterDevice;
            // flags: null;
            noMuted?: boolean;
            tokenType: int;
            token: string;
            appSandbox: Bool;
            secret: bytes;
            otherUids: int[];
        }
        export class UnregisterDevice extends Request<
            Partial<{
                tokenType: int;
                token: string;
                otherUids: int[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UnregisterDevice;
            tokenType: int;
            token: string;
            otherUids: int[];
        }
        export class UpdateNotifySettings extends Request<
            Partial<{
                peer: Api.TypeInputNotifyPeer;
                settings: Api.TypeInputPeerNotifySettings;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateNotifySettings;
            peer: Api.TypeInputNotifyPeer;
            settings: Api.TypeInputPeerNotifySettings;
        }
        export class GetNotifySettings extends Request<
            Partial<{
                peer: Api.TypeInputNotifyPeer;
            }>,
            Api.TypePeerNotifySettings
        > {
            static fromReader(reader: Reader): GetNotifySettings;
            peer: Api.TypeInputNotifyPeer;
        }
        export class ResetNotifySettings extends Request<void, Bool> {
            static fromReader(reader: Reader): ResetNotifySettings;
        }
        export class UpdateProfile extends Request<
            Partial<{
                // flags: null;
                firstName?: string;
                lastName?: string;
                about?: string;
            }>,
            Api.TypeUser
        > {
            static fromReader(reader: Reader): UpdateProfile;
            // flags: null;
            firstName?: string;
            lastName?: string;
            about?: string;
        }
        export class UpdateStatus extends Request<
            Partial<{
                offline: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateStatus;
            offline: Bool;
        }
        export class GetWallPapers extends Request<
            Partial<{
                hash: int;
            }>,
            account.TypeWallPapers
        > {
            static fromReader(reader: Reader): GetWallPapers;
            hash: int;
        }
        export class ReportPeer extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                reason: Api.TypeReportReason;
                message: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReportPeer;
            peer: Api.TypeEntityLike;
            reason: Api.TypeReportReason;
            message: string;
        }
        export class CheckUsername extends Request<
            Partial<{
                username: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): CheckUsername;
            username: string;
        }
        export class UpdateUsername extends Request<
            Partial<{
                username: string;
            }>,
            Api.TypeUser
        > {
            static fromReader(reader: Reader): UpdateUsername;
            username: string;
        }
        export class GetPrivacy extends Request<
            Partial<{
                key: Api.TypeInputPrivacyKey;
            }>,
            account.TypePrivacyRules
        > {
            static fromReader(reader: Reader): GetPrivacy;
            key: Api.TypeInputPrivacyKey;
        }
        export class SetPrivacy extends Request<
            Partial<{
                key: Api.TypeInputPrivacyKey;
                rules: Api.TypeInputPrivacyRule[];
            }>,
            account.TypePrivacyRules
        > {
            static fromReader(reader: Reader): SetPrivacy;
            key: Api.TypeInputPrivacyKey;
            rules: Api.TypeInputPrivacyRule[];
        }
        export class DeleteAccount extends Request<
            Partial<{
                reason: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteAccount;
            reason: string;
        }
        export class GetAccountTTL extends Request<
            void,
            Api.TypeAccountDaysTTL
        > {
            static fromReader(reader: Reader): GetAccountTTL;
        }
        export class SetAccountTTL extends Request<
            Partial<{
                ttl: Api.TypeAccountDaysTTL;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetAccountTTL;
            ttl: Api.TypeAccountDaysTTL;
        }
        export class SendChangePhoneCode extends Request<
            Partial<{
                phoneNumber: string;
                settings: Api.TypeCodeSettings;
            }>,
            auth.TypeSentCode
        > {
            static fromReader(reader: Reader): SendChangePhoneCode;
            phoneNumber: string;
            settings: Api.TypeCodeSettings;
        }
        export class ChangePhone extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode: string;
            }>,
            Api.TypeUser
        > {
            static fromReader(reader: Reader): ChangePhone;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode: string;
        }
        export class UpdateDeviceLocked extends Request<
            Partial<{
                period: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateDeviceLocked;
            period: int;
        }
        export class GetAuthorizations extends Request<
            void,
            account.TypeAuthorizations
        > {
            static fromReader(reader: Reader): GetAuthorizations;
        }
        export class ResetAuthorization extends Request<
            Partial<{
                hash: long;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ResetAuthorization;
            hash: long;
        }
        export class GetPassword extends Request<void, account.TypePassword> {
            static fromReader(reader: Reader): GetPassword;
        }
        export class GetPasswordSettings extends Request<
            Partial<{
                password: Api.TypeInputCheckPasswordSRP;
            }>,
            account.TypePasswordSettings
        > {
            static fromReader(reader: Reader): GetPasswordSettings;
            password: Api.TypeInputCheckPasswordSRP;
        }
        export class UpdatePasswordSettings extends Request<
            Partial<{
                password: Api.TypeInputCheckPasswordSRP;
                newSettings: account.TypePasswordInputSettings;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdatePasswordSettings;
            password: Api.TypeInputCheckPasswordSRP;
            newSettings: account.TypePasswordInputSettings;
        }
        export class SendConfirmPhoneCode extends Request<
            Partial<{
                hash: string;
                settings: Api.TypeCodeSettings;
            }>,
            auth.TypeSentCode
        > {
            static fromReader(reader: Reader): SendConfirmPhoneCode;
            hash: string;
            settings: Api.TypeCodeSettings;
        }
        export class ConfirmPhone extends Request<
            Partial<{
                phoneCodeHash: string;
                phoneCode: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ConfirmPhone;
            phoneCodeHash: string;
            phoneCode: string;
        }
        export class GetTmpPassword extends Request<
            Partial<{
                password: Api.TypeInputCheckPasswordSRP;
                period: int;
            }>,
            account.TypeTmpPassword
        > {
            static fromReader(reader: Reader): GetTmpPassword;
            password: Api.TypeInputCheckPasswordSRP;
            period: int;
        }
        export class GetWebAuthorizations extends Request<
            void,
            account.TypeWebAuthorizations
        > {
            static fromReader(reader: Reader): GetWebAuthorizations;
        }
        export class ResetWebAuthorization extends Request<
            Partial<{
                hash: long;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ResetWebAuthorization;
            hash: long;
        }
        export class ResetWebAuthorizations extends Request<void, Bool> {
            static fromReader(reader: Reader): ResetWebAuthorizations;
        }
        export class GetAllSecureValues extends Request<
            void,
            Api.TypeSecureValue[]
        > {
            static fromReader(reader: Reader): GetAllSecureValues;
        }
        export class GetSecureValue extends Request<
            Partial<{
                types: Api.TypeSecureValueType[];
            }>,
            Api.TypeSecureValue[]
        > {
            static fromReader(reader: Reader): GetSecureValue;
            types: Api.TypeSecureValueType[];
        }
        export class SaveSecureValue extends Request<
            Partial<{
                value: Api.TypeInputSecureValue;
                secureSecretId: long;
            }>,
            Api.TypeSecureValue
        > {
            static fromReader(reader: Reader): SaveSecureValue;
            value: Api.TypeInputSecureValue;
            secureSecretId: long;
        }
        export class DeleteSecureValue extends Request<
            Partial<{
                types: Api.TypeSecureValueType[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteSecureValue;
            types: Api.TypeSecureValueType[];
        }
        export class GetAuthorizationForm extends Request<
            Partial<{
                botId: int;
                scope: string;
                publicKey: string;
            }>,
            account.TypeAuthorizationForm
        > {
            static fromReader(reader: Reader): GetAuthorizationForm;
            botId: int;
            scope: string;
            publicKey: string;
        }
        export class AcceptAuthorization extends Request<
            Partial<{
                botId: int;
                scope: string;
                publicKey: string;
                valueHashes: Api.TypeSecureValueHash[];
                credentials: Api.TypeSecureCredentialsEncrypted;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): AcceptAuthorization;
            botId: int;
            scope: string;
            publicKey: string;
            valueHashes: Api.TypeSecureValueHash[];
            credentials: Api.TypeSecureCredentialsEncrypted;
        }
        export class SendVerifyPhoneCode extends Request<
            Partial<{
                phoneNumber: string;
                settings: Api.TypeCodeSettings;
            }>,
            auth.TypeSentCode
        > {
            static fromReader(reader: Reader): SendVerifyPhoneCode;
            phoneNumber: string;
            settings: Api.TypeCodeSettings;
        }
        export class VerifyPhone extends Request<
            Partial<{
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): VerifyPhone;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode: string;
        }
        export class SendVerifyEmailCode extends Request<
            Partial<{
                email: string;
            }>,
            account.TypeSentEmailCode
        > {
            static fromReader(reader: Reader): SendVerifyEmailCode;
            email: string;
        }
        export class VerifyEmail extends Request<
            Partial<{
                email: string;
                code: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): VerifyEmail;
            email: string;
            code: string;
        }
        export class InitTakeoutSession extends Request<
            Partial<{
                // flags: null;
                contacts?: boolean;
                messageUsers?: boolean;
                messageChats?: boolean;
                messageMegagroups?: boolean;
                messageChannels?: boolean;
                files?: boolean;
                fileMaxSize?: int;
            }>,
            account.TypeTakeout
        > {
            static fromReader(reader: Reader): InitTakeoutSession;
            // flags: null;
            contacts?: boolean;
            messageUsers?: boolean;
            messageChats?: boolean;
            messageMegagroups?: boolean;
            messageChannels?: boolean;
            files?: boolean;
            fileMaxSize?: int;
        }
        export class FinishTakeoutSession extends Request<
            Partial<{
                // flags: null;
                success?: boolean;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): FinishTakeoutSession;
            // flags: null;
            success?: boolean;
        }
        export class ConfirmPasswordEmail extends Request<
            Partial<{
                code: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ConfirmPasswordEmail;
            code: string;
        }
        export class ResendPasswordEmail extends Request<void, Bool> {
            static fromReader(reader: Reader): ResendPasswordEmail;
        }
        export class CancelPasswordEmail extends Request<void, Bool> {
            static fromReader(reader: Reader): CancelPasswordEmail;
        }
        export class GetContactSignUpNotification extends Request<void, Bool> {
            static fromReader(reader: Reader): GetContactSignUpNotification;
        }
        export class SetContactSignUpNotification extends Request<
            Partial<{
                silent: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetContactSignUpNotification;
            silent: Bool;
        }
        export class GetNotifyExceptions extends Request<
            Partial<{
                // flags: null;
                compareSound?: boolean;
                peer?: Api.TypeInputNotifyPeer;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): GetNotifyExceptions;
            // flags: null;
            compareSound?: boolean;
            peer?: Api.TypeInputNotifyPeer;
        }
        export class GetWallPaper extends Request<
            Partial<{
                wallpaper: Api.TypeInputWallPaper;
            }>,
            Api.TypeWallPaper
        > {
            static fromReader(reader: Reader): GetWallPaper;
            wallpaper: Api.TypeInputWallPaper;
        }
        export class UploadWallPaper extends Request<
            Partial<{
                file: Api.TypeInputFile;
                mimeType: string;
                settings: Api.TypeWallPaperSettings;
            }>,
            Api.TypeWallPaper
        > {
            static fromReader(reader: Reader): UploadWallPaper;
            file: Api.TypeInputFile;
            mimeType: string;
            settings: Api.TypeWallPaperSettings;
        }
        export class SaveWallPaper extends Request<
            Partial<{
                wallpaper: Api.TypeInputWallPaper;
                unsave: Bool;
                settings: Api.TypeWallPaperSettings;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveWallPaper;
            wallpaper: Api.TypeInputWallPaper;
            unsave: Bool;
            settings: Api.TypeWallPaperSettings;
        }
        export class InstallWallPaper extends Request<
            Partial<{
                wallpaper: Api.TypeInputWallPaper;
                settings: Api.TypeWallPaperSettings;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): InstallWallPaper;
            wallpaper: Api.TypeInputWallPaper;
            settings: Api.TypeWallPaperSettings;
        }
        export class ResetWallPapers extends Request<void, Bool> {
            static fromReader(reader: Reader): ResetWallPapers;
        }
        export class GetAutoDownloadSettings extends Request<
            void,
            account.TypeAutoDownloadSettings
        > {
            static fromReader(reader: Reader): GetAutoDownloadSettings;
        }
        export class SaveAutoDownloadSettings extends Request<
            Partial<{
                // flags: null;
                low?: boolean;
                high?: boolean;
                settings: Api.TypeAutoDownloadSettings;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveAutoDownloadSettings;
            // flags: null;
            low?: boolean;
            high?: boolean;
            settings: Api.TypeAutoDownloadSettings;
        }
        export class UploadTheme extends Request<
            Partial<{
                // flags: null;
                file: Api.TypeInputFile;
                thumb?: Api.TypeInputFile;
                fileName: string;
                mimeType: string;
            }>,
            Api.TypeDocument
        > {
            static fromReader(reader: Reader): UploadTheme;
            // flags: null;
            file: Api.TypeInputFile;
            thumb?: Api.TypeInputFile;
            fileName: string;
            mimeType: string;
        }
        export class CreateTheme extends Request<
            Partial<{
                // flags: null;
                slug: string;
                title: string;
                document?: Api.TypeInputDocument;
                settings?: Api.TypeInputThemeSettings;
            }>,
            Api.TypeTheme
        > {
            static fromReader(reader: Reader): CreateTheme;
            // flags: null;
            slug: string;
            title: string;
            document?: Api.TypeInputDocument;
            settings?: Api.TypeInputThemeSettings;
        }
        export class UpdateTheme extends Request<
            Partial<{
                // flags: null;
                format: string;
                theme: Api.TypeInputTheme;
                slug?: string;
                title?: string;
                document?: Api.TypeInputDocument;
                settings?: Api.TypeInputThemeSettings;
            }>,
            Api.TypeTheme
        > {
            static fromReader(reader: Reader): UpdateTheme;
            // flags: null;
            format: string;
            theme: Api.TypeInputTheme;
            slug?: string;
            title?: string;
            document?: Api.TypeInputDocument;
            settings?: Api.TypeInputThemeSettings;
        }
        export class SaveTheme extends Request<
            Partial<{
                theme: Api.TypeInputTheme;
                unsave: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveTheme;
            theme: Api.TypeInputTheme;
            unsave: Bool;
        }
        export class InstallTheme extends Request<
            Partial<{
                // flags: null;
                dark?: boolean;
                format?: string;
                theme?: Api.TypeInputTheme;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): InstallTheme;
            // flags: null;
            dark?: boolean;
            format?: string;
            theme?: Api.TypeInputTheme;
        }
        export class GetTheme extends Request<
            Partial<{
                format: string;
                theme: Api.TypeInputTheme;
                documentId: long;
            }>,
            Api.TypeTheme
        > {
            static fromReader(reader: Reader): GetTheme;
            format: string;
            theme: Api.TypeInputTheme;
            documentId: long;
        }
        export class GetThemes extends Request<
            Partial<{
                format: string;
                hash: int;
            }>,
            account.TypeThemes
        > {
            static fromReader(reader: Reader): GetThemes;
            format: string;
            hash: int;
        }
        export class SetContentSettings extends Request<
            Partial<{
                // flags: null;
                sensitiveEnabled?: boolean;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetContentSettings;
            // flags: null;
            sensitiveEnabled?: boolean;
        }
        export class GetContentSettings extends Request<
            void,
            account.TypeContentSettings
        > {
            static fromReader(reader: Reader): GetContentSettings;
        }
        export class GetMultiWallPapers extends Request<
            Partial<{
                wallpapers: Api.TypeInputWallPaper[];
            }>,
            Api.TypeWallPaper[]
        > {
            static fromReader(reader: Reader): GetMultiWallPapers;
            wallpapers: Api.TypeInputWallPaper[];
        }
        export class GetGlobalPrivacySettings extends Request<
            void,
            Api.TypeGlobalPrivacySettings
        > {
            static fromReader(reader: Reader): GetGlobalPrivacySettings;
        }
        export class SetGlobalPrivacySettings extends Request<
            Partial<{
                settings: Api.TypeGlobalPrivacySettings;
            }>,
            Api.TypeGlobalPrivacySettings
        > {
            static fromReader(reader: Reader): SetGlobalPrivacySettings;
            settings: Api.TypeGlobalPrivacySettings;
        }
        export class ReportProfilePhoto extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                photoId: Api.TypeInputPhoto;
                reason: Api.TypeReportReason;
                message: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReportProfilePhoto;
            peer: Api.TypeEntityLike;
            photoId: Api.TypeInputPhoto;
            reason: Api.TypeReportReason;
            message: string;
        }
        export class ResetPassword extends Request<
            void,
            account.TypeResetPasswordResult
        > {
            static fromReader(reader: Reader): ResetPassword;
        }
        export class DeclinePasswordReset extends Request<void, Bool> {
            static fromReader(reader: Reader): DeclinePasswordReset;
        }
    }

    export namespace users {
        export class GetUsers extends Request<
            Partial<{
                id: Api.TypeEntityLike[];
            }>,
            Api.TypeUser[]
        > {
            static fromReader(reader: Reader): GetUsers;
            id: Api.TypeEntityLike[];
        }
        export class GetFullUser extends Request<
            Partial<{
                id: Api.TypeEntityLike;
            }>,
            Api.TypeUserFull
        > {
            static fromReader(reader: Reader): GetFullUser;
            id: Api.TypeEntityLike;
        }
        export class SetSecureValueErrors extends Request<
            Partial<{
                id: Api.TypeEntityLike;
                errors: Api.TypeSecureValueError[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetSecureValueErrors;
            id: Api.TypeEntityLike;
            errors: Api.TypeSecureValueError[];
        }
    }

    export namespace contacts {
        export class GetContactIDs extends Request<
            Partial<{
                hash: int;
            }>,
            int[]
        > {
            static fromReader(reader: Reader): GetContactIDs;
            hash: int;
        }
        export class GetStatuses extends Request<
            void,
            Api.TypeContactStatus[]
        > {
            static fromReader(reader: Reader): GetStatuses;
        }
        export class GetContacts extends Request<
            Partial<{
                hash: int;
            }>,
            contacts.TypeContacts
        > {
            static fromReader(reader: Reader): GetContacts;
            hash: int;
        }
        export class ImportContacts extends Request<
            Partial<{
                contacts: Api.TypeInputContact[];
            }>,
            contacts.TypeImportedContacts
        > {
            static fromReader(reader: Reader): ImportContacts;
            contacts: Api.TypeInputContact[];
        }
        export class DeleteContacts extends Request<
            Partial<{
                id: Api.TypeEntityLike[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DeleteContacts;
            id: Api.TypeEntityLike[];
        }
        export class DeleteByPhones extends Request<
            Partial<{
                phones: string[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteByPhones;
            phones: string[];
        }
        export class Block extends Request<
            Partial<{
                id: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): Block;
            id: Api.TypeEntityLike;
        }
        export class Unblock extends Request<
            Partial<{
                id: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): Unblock;
            id: Api.TypeEntityLike;
        }
        export class GetBlocked extends Request<
            Partial<{
                offset: int;
                limit: int;
            }>,
            contacts.TypeBlocked
        > {
            static fromReader(reader: Reader): GetBlocked;
            offset: int;
            limit: int;
        }
        export class Search extends Request<
            Partial<{
                q: string;
                limit: int;
            }>,
            contacts.TypeFound
        > {
            static fromReader(reader: Reader): Search;
            q: string;
            limit: int;
        }
        export class ResolveUsername extends Request<
            Partial<{
                username: string;
            }>,
            contacts.TypeResolvedPeer
        > {
            static fromReader(reader: Reader): ResolveUsername;
            username: string;
        }
        export class GetTopPeers extends Request<
            Partial<{
                // flags: null;
                correspondents?: boolean;
                botsPm?: boolean;
                botsInline?: boolean;
                phoneCalls?: boolean;
                forwardUsers?: boolean;
                forwardChats?: boolean;
                groups?: boolean;
                channels?: boolean;
                offset: int;
                limit: int;
                hash: int;
            }>,
            contacts.TypeTopPeers
        > {
            static fromReader(reader: Reader): GetTopPeers;
            // flags: null;
            correspondents?: boolean;
            botsPm?: boolean;
            botsInline?: boolean;
            phoneCalls?: boolean;
            forwardUsers?: boolean;
            forwardChats?: boolean;
            groups?: boolean;
            channels?: boolean;
            offset: int;
            limit: int;
            hash: int;
        }
        export class ResetTopPeerRating extends Request<
            Partial<{
                category: Api.TypeTopPeerCategory;
                peer: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ResetTopPeerRating;
            category: Api.TypeTopPeerCategory;
            peer: Api.TypeEntityLike;
        }
        export class ResetSaved extends Request<void, Bool> {
            static fromReader(reader: Reader): ResetSaved;
        }
        export class GetSaved extends Request<void, Api.TypeSavedContact[]> {
            static fromReader(reader: Reader): GetSaved;
        }
        export class ToggleTopPeers extends Request<
            Partial<{
                enabled: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ToggleTopPeers;
            enabled: Bool;
        }
        export class AddContact extends Request<
            Partial<{
                // flags: null;
                addPhonePrivacyException?: boolean;
                id: Api.TypeEntityLike;
                firstName: string;
                lastName: string;
                phone: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): AddContact;
            // flags: null;
            addPhonePrivacyException?: boolean;
            id: Api.TypeEntityLike;
            firstName: string;
            lastName: string;
            phone: string;
        }
        export class AcceptContact extends Request<
            Partial<{
                id: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): AcceptContact;
            id: Api.TypeEntityLike;
        }
        export class GetLocated extends Request<
            Partial<{
                // flags: null;
                background?: boolean;
                geoPoint: Api.TypeInputGeoPoint;
                selfExpires?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): GetLocated;
            // flags: null;
            background?: boolean;
            geoPoint: Api.TypeInputGeoPoint;
            selfExpires?: int;
        }
        export class BlockFromReplies extends Request<
            Partial<{
                // flags: null;
                deleteMessage?: boolean;
                deleteHistory?: boolean;
                reportSpam?: boolean;
                msgId: MessageIDLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): BlockFromReplies;
            // flags: null;
            deleteMessage?: boolean;
            deleteHistory?: boolean;
            reportSpam?: boolean;
            msgId: MessageIDLike;
        }
    }

    export namespace messages {
        export class GetMessages extends Request<
            Partial<{
                id: Api.TypeInputMessage[];
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetMessages;
            id: Api.TypeInputMessage[];
        }
        export class GetDialogs extends Request<
            Partial<{
                // flags: null;
                excludePinned?: boolean;
                folderId?: int;
                offsetDate: int;
                offsetId: int;
                offsetPeer: Api.TypeEntityLike;
                limit: int;
                hash: int;
            }>,
            messages.TypeDialogs
        > {
            static fromReader(reader: Reader): GetDialogs;
            // flags: null;
            excludePinned?: boolean;
            folderId?: int;
            offsetDate: int;
            offsetId: int;
            offsetPeer: Api.TypeEntityLike;
            limit: int;
            hash: int;
        }
        export class GetHistory extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                offsetId: int;
                offsetDate: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetHistory;
            peer: Api.TypeEntityLike;
            offsetId: int;
            offsetDate: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: int;
        }
        export class Search extends Request<
            Partial<{
                // flags: null;
                peer: Api.TypeEntityLike;
                q: string;
                fromId?: Api.TypeEntityLike;
                topMsgId?: MessageIDLike;
                filter: Api.TypeMessagesFilter;
                minDate: int;
                maxDate: int;
                offsetId: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): Search;
            // flags: null;
            peer: Api.TypeEntityLike;
            q: string;
            fromId?: Api.TypeEntityLike;
            topMsgId?: MessageIDLike;
            filter: Api.TypeMessagesFilter;
            minDate: int;
            maxDate: int;
            offsetId: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: int;
        }
        export class ReadHistory extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                maxId: int;
            }>,
            messages.TypeAffectedMessages
        > {
            static fromReader(reader: Reader): ReadHistory;
            peer: Api.TypeEntityLike;
            maxId: int;
        }
        export class DeleteHistory extends Request<
            Partial<{
                // flags: null;
                justClear?: boolean;
                revoke?: boolean;
                peer: Api.TypeEntityLike;
                maxId: int;
            }>,
            messages.TypeAffectedHistory
        > {
            static fromReader(reader: Reader): DeleteHistory;
            // flags: null;
            justClear?: boolean;
            revoke?: boolean;
            peer: Api.TypeEntityLike;
            maxId: int;
        }
        export class DeleteMessages extends Request<
            Partial<{
                // flags: null;
                revoke?: boolean;
                id: int[];
            }>,
            messages.TypeAffectedMessages
        > {
            static fromReader(reader: Reader): DeleteMessages;
            // flags: null;
            revoke?: boolean;
            id: int[];
        }
        export class ReceivedMessages extends Request<
            Partial<{
                maxId: int;
            }>,
            Api.TypeReceivedNotifyMessage[]
        > {
            static fromReader(reader: Reader): ReceivedMessages;
            maxId: int;
        }
        export class SetTyping extends Request<
            Partial<{
                // flags: null;
                peer: Api.TypeEntityLike;
                topMsgId?: MessageIDLike;
                action: Api.TypeSendMessageAction;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetTyping;
            // flags: null;
            peer: Api.TypeEntityLike;
            topMsgId?: MessageIDLike;
            action: Api.TypeSendMessageAction;
        }
        export class SendMessage extends Request<
            Partial<{
                // flags: null;
                noWebpage?: boolean;
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                peer: Api.TypeEntityLike;
                replyToMsgId?: MessageIDLike;
                message: string;
                randomId: long;
                replyMarkup?: Api.TypeReplyMarkup;
                entities?: Api.TypeMessageEntity[];
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendMessage;
            // flags: null;
            noWebpage?: boolean;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            peer: Api.TypeEntityLike;
            replyToMsgId?: MessageIDLike;
            message: string;
            randomId: long;
            replyMarkup?: Api.TypeReplyMarkup;
            entities?: Api.TypeMessageEntity[];
            scheduleDate?: int;
        }
        export class SendMedia extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                peer: Api.TypeEntityLike;
                replyToMsgId?: MessageIDLike;
                media: Api.TypeInputMedia;
                message: string;
                randomId: long;
                replyMarkup?: Api.TypeReplyMarkup;
                entities?: Api.TypeMessageEntity[];
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendMedia;
            // flags: null;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            peer: Api.TypeEntityLike;
            replyToMsgId?: MessageIDLike;
            media: Api.TypeInputMedia;
            message: string;
            randomId: long;
            replyMarkup?: Api.TypeReplyMarkup;
            entities?: Api.TypeMessageEntity[];
            scheduleDate?: int;
        }
        export class ForwardMessages extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                background?: boolean;
                withMyScore?: boolean;
                fromPeer: Api.TypeEntityLike;
                id: int[];
                randomId: long[];
                toPeer: Api.TypeEntityLike;
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ForwardMessages;
            // flags: null;
            silent?: boolean;
            background?: boolean;
            withMyScore?: boolean;
            fromPeer: Api.TypeEntityLike;
            id: int[];
            randomId: long[];
            toPeer: Api.TypeEntityLike;
            scheduleDate?: int;
        }
        export class ReportSpam extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReportSpam;
            peer: Api.TypeEntityLike;
        }
        export class GetPeerSettings extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            Api.TypePeerSettings
        > {
            static fromReader(reader: Reader): GetPeerSettings;
            peer: Api.TypeEntityLike;
        }
        export class Report extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int[];
                reason: Api.TypeReportReason;
                message: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): Report;
            peer: Api.TypeEntityLike;
            id: int[];
            reason: Api.TypeReportReason;
            message: string;
        }
        export class GetChats extends Request<
            Partial<{
                id: int[];
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetChats;
            id: int[];
        }
        export class GetFullChat extends Request<
            Partial<{
                chatId: int;
            }>,
            messages.TypeChatFull
        > {
            static fromReader(reader: Reader): GetFullChat;
            chatId: int;
        }
        export class EditChatTitle extends Request<
            Partial<{
                chatId: int;
                title: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditChatTitle;
            chatId: int;
            title: string;
        }
        export class EditChatPhoto extends Request<
            Partial<{
                chatId: int;
                photo: Api.TypeInputChatPhoto;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditChatPhoto;
            chatId: int;
            photo: Api.TypeInputChatPhoto;
        }
        export class AddChatUser extends Request<
            Partial<{
                chatId: int;
                userId: Api.TypeEntityLike;
                fwdLimit: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): AddChatUser;
            chatId: int;
            userId: Api.TypeEntityLike;
            fwdLimit: int;
        }
        export class DeleteChatUser extends Request<
            Partial<{
                // flags: null;
                revokeHistory?: boolean;
                chatId: int;
                userId: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DeleteChatUser;
            // flags: null;
            revokeHistory?: boolean;
            chatId: int;
            userId: Api.TypeEntityLike;
        }
        export class CreateChat extends Request<
            Partial<{
                users: Api.TypeEntityLike[];
                title: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): CreateChat;
            users: Api.TypeEntityLike[];
            title: string;
        }
        export class GetDhConfig extends Request<
            Partial<{
                version: int;
                randomLength: int;
            }>,
            messages.TypeDhConfig
        > {
            static fromReader(reader: Reader): GetDhConfig;
            version: int;
            randomLength: int;
        }
        export class RequestEncryption extends Request<
            Partial<{
                userId: Api.TypeEntityLike;
                randomId: int;
                gA: bytes;
            }>,
            Api.TypeEncryptedChat
        > {
            static fromReader(reader: Reader): RequestEncryption;
            userId: Api.TypeEntityLike;
            randomId: int;
            gA: bytes;
        }
        export class AcceptEncryption extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
                gB: bytes;
                keyFingerprint: long;
            }>,
            Api.TypeEncryptedChat
        > {
            static fromReader(reader: Reader): AcceptEncryption;
            peer: Api.TypeInputEncryptedChat;
            gB: bytes;
            keyFingerprint: long;
        }
        export class DiscardEncryption extends Request<
            Partial<{
                // flags: null;
                deleteHistory?: boolean;
                chatId: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DiscardEncryption;
            // flags: null;
            deleteHistory?: boolean;
            chatId: int;
        }
        export class SetEncryptedTyping extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
                typing: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetEncryptedTyping;
            peer: Api.TypeInputEncryptedChat;
            typing: Bool;
        }
        export class ReadEncryptedHistory extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
                maxDate: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReadEncryptedHistory;
            peer: Api.TypeInputEncryptedChat;
            maxDate: int;
        }
        export class SendEncrypted extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                peer: Api.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
            }>,
            messages.TypeSentEncryptedMessage
        > {
            static fromReader(reader: Reader): SendEncrypted;
            // flags: null;
            silent?: boolean;
            peer: Api.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
        }
        export class SendEncryptedFile extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                peer: Api.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
                file: Api.TypeInputEncryptedFile;
            }>,
            messages.TypeSentEncryptedMessage
        > {
            static fromReader(reader: Reader): SendEncryptedFile;
            // flags: null;
            silent?: boolean;
            peer: Api.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
            file: Api.TypeInputEncryptedFile;
        }
        export class SendEncryptedService extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
            }>,
            messages.TypeSentEncryptedMessage
        > {
            static fromReader(reader: Reader): SendEncryptedService;
            peer: Api.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
        }
        export class ReceivedQueue extends Request<
            Partial<{
                maxQts: int;
            }>,
            long[]
        > {
            static fromReader(reader: Reader): ReceivedQueue;
            maxQts: int;
        }
        export class ReportEncryptedSpam extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReportEncryptedSpam;
            peer: Api.TypeInputEncryptedChat;
        }
        export class ReadMessageContents extends Request<
            Partial<{
                id: int[];
            }>,
            messages.TypeAffectedMessages
        > {
            static fromReader(reader: Reader): ReadMessageContents;
            id: int[];
        }
        export class GetStickers extends Request<
            Partial<{
                emoticon: string;
                hash: int;
            }>,
            messages.TypeStickers
        > {
            static fromReader(reader: Reader): GetStickers;
            emoticon: string;
            hash: int;
        }
        export class GetAllStickers extends Request<
            Partial<{
                hash: int;
            }>,
            messages.TypeAllStickers
        > {
            static fromReader(reader: Reader): GetAllStickers;
            hash: int;
        }
        export class GetWebPagePreview extends Request<
            Partial<{
                // flags: null;
                message: string;
                entities?: Api.TypeMessageEntity[];
            }>,
            Api.TypeMessageMedia
        > {
            static fromReader(reader: Reader): GetWebPagePreview;
            // flags: null;
            message: string;
            entities?: Api.TypeMessageEntity[];
        }
        export class ExportChatInvite extends Request<
            Partial<{
                // flags: null;
                legacyRevokePermanent?: boolean;
                peer: Api.TypeEntityLike;
                expireDate?: int;
                usageLimit?: int;
            }>,
            Api.TypeExportedChatInvite
        > {
            static fromReader(reader: Reader): ExportChatInvite;
            // flags: null;
            legacyRevokePermanent?: boolean;
            peer: Api.TypeEntityLike;
            expireDate?: int;
            usageLimit?: int;
        }
        export class CheckChatInvite extends Request<
            Partial<{
                hash: string;
            }>,
            Api.TypeChatInvite
        > {
            static fromReader(reader: Reader): CheckChatInvite;
            hash: string;
        }
        export class ImportChatInvite extends Request<
            Partial<{
                hash: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ImportChatInvite;
            hash: string;
        }
        export class GetStickerSet extends Request<
            Partial<{
                stickerset: Api.TypeInputStickerSet;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): GetStickerSet;
            stickerset: Api.TypeInputStickerSet;
        }
        export class InstallStickerSet extends Request<
            Partial<{
                stickerset: Api.TypeInputStickerSet;
                archived: Bool;
            }>,
            messages.TypeStickerSetInstallResult
        > {
            static fromReader(reader: Reader): InstallStickerSet;
            stickerset: Api.TypeInputStickerSet;
            archived: Bool;
        }
        export class UninstallStickerSet extends Request<
            Partial<{
                stickerset: Api.TypeInputStickerSet;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UninstallStickerSet;
            stickerset: Api.TypeInputStickerSet;
        }
        export class StartBot extends Request<
            Partial<{
                bot: Api.TypeEntityLike;
                peer: Api.TypeEntityLike;
                randomId: long;
                startParam: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): StartBot;
            bot: Api.TypeEntityLike;
            peer: Api.TypeEntityLike;
            randomId: long;
            startParam: string;
        }
        export class GetMessagesViews extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int[];
                increment: Bool;
            }>,
            messages.TypeMessageViews
        > {
            static fromReader(reader: Reader): GetMessagesViews;
            peer: Api.TypeEntityLike;
            id: int[];
            increment: Bool;
        }
        export class EditChatAdmin extends Request<
            Partial<{
                chatId: int;
                userId: Api.TypeEntityLike;
                isAdmin: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): EditChatAdmin;
            chatId: int;
            userId: Api.TypeEntityLike;
            isAdmin: Bool;
        }
        export class MigrateChat extends Request<
            Partial<{
                chatId: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): MigrateChat;
            chatId: int;
        }
        export class SearchGlobal extends Request<
            Partial<{
                // flags: null;
                folderId?: int;
                q: string;
                filter: Api.TypeMessagesFilter;
                minDate: int;
                maxDate: int;
                offsetRate: int;
                offsetPeer: Api.TypeEntityLike;
                offsetId: int;
                limit: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): SearchGlobal;
            // flags: null;
            folderId?: int;
            q: string;
            filter: Api.TypeMessagesFilter;
            minDate: int;
            maxDate: int;
            offsetRate: int;
            offsetPeer: Api.TypeEntityLike;
            offsetId: int;
            limit: int;
        }
        export class ReorderStickerSets extends Request<
            Partial<{
                // flags: null;
                masks?: boolean;
                order: long[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReorderStickerSets;
            // flags: null;
            masks?: boolean;
            order: long[];
        }
        export class GetDocumentByHash extends Request<
            Partial<{
                sha256: bytes;
                size: int;
                mimeType: string;
            }>,
            Api.TypeDocument
        > {
            static fromReader(reader: Reader): GetDocumentByHash;
            sha256: bytes;
            size: int;
            mimeType: string;
        }
        export class GetSavedGifs extends Request<
            Partial<{
                hash: int;
            }>,
            messages.TypeSavedGifs
        > {
            static fromReader(reader: Reader): GetSavedGifs;
            hash: int;
        }
        export class SaveGif extends Request<
            Partial<{
                id: Api.TypeInputDocument;
                unsave: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveGif;
            id: Api.TypeInputDocument;
            unsave: Bool;
        }
        export class GetInlineBotResults extends Request<
            Partial<{
                // flags: null;
                bot: Api.TypeEntityLike;
                peer: Api.TypeEntityLike;
                geoPoint?: Api.TypeInputGeoPoint;
                query: string;
                offset: string;
            }>,
            messages.TypeBotResults
        > {
            static fromReader(reader: Reader): GetInlineBotResults;
            // flags: null;
            bot: Api.TypeEntityLike;
            peer: Api.TypeEntityLike;
            geoPoint?: Api.TypeInputGeoPoint;
            query: string;
            offset: string;
        }
        export class SetInlineBotResults extends Request<
            Partial<{
                // flags: null;
                gallery?: boolean;
                private?: boolean;
                queryId: long;
                results: Api.TypeInputBotInlineResult[];
                cacheTime: int;
                nextOffset?: string;
                switchPm?: Api.TypeInlineBotSwitchPM;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetInlineBotResults;
            // flags: null;
            gallery?: boolean;
            private?: boolean;
            queryId: long;
            results: Api.TypeInputBotInlineResult[];
            cacheTime: int;
            nextOffset?: string;
            switchPm?: Api.TypeInlineBotSwitchPM;
        }
        export class SendInlineBotResult extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                hideVia?: boolean;
                peer: Api.TypeEntityLike;
                replyToMsgId?: MessageIDLike;
                randomId: long;
                queryId: long;
                id: string;
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendInlineBotResult;
            // flags: null;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            hideVia?: boolean;
            peer: Api.TypeEntityLike;
            replyToMsgId?: MessageIDLike;
            randomId: long;
            queryId: long;
            id: string;
            scheduleDate?: int;
        }
        export class GetMessageEditData extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int;
            }>,
            messages.TypeMessageEditData
        > {
            static fromReader(reader: Reader): GetMessageEditData;
            peer: Api.TypeEntityLike;
            id: int;
        }
        export class EditMessage extends Request<
            Partial<{
                // flags: null;
                noWebpage?: boolean;
                peer: Api.TypeEntityLike;
                id: int;
                message?: string;
                media?: Api.TypeInputMedia;
                replyMarkup?: Api.TypeReplyMarkup;
                entities?: Api.TypeMessageEntity[];
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditMessage;
            // flags: null;
            noWebpage?: boolean;
            peer: Api.TypeEntityLike;
            id: int;
            message?: string;
            media?: Api.TypeInputMedia;
            replyMarkup?: Api.TypeReplyMarkup;
            entities?: Api.TypeMessageEntity[];
            scheduleDate?: int;
        }
        export class EditInlineBotMessage extends Request<
            Partial<{
                // flags: null;
                noWebpage?: boolean;
                id: Api.TypeInputBotInlineMessageID;
                message?: string;
                media?: Api.TypeInputMedia;
                replyMarkup?: Api.TypeReplyMarkup;
                entities?: Api.TypeMessageEntity[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): EditInlineBotMessage;
            // flags: null;
            noWebpage?: boolean;
            id: Api.TypeInputBotInlineMessageID;
            message?: string;
            media?: Api.TypeInputMedia;
            replyMarkup?: Api.TypeReplyMarkup;
            entities?: Api.TypeMessageEntity[];
        }
        export class GetBotCallbackAnswer extends Request<
            Partial<{
                // flags: null;
                game?: boolean;
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                data?: bytes;
                password?: Api.TypeInputCheckPasswordSRP;
            }>,
            messages.TypeBotCallbackAnswer
        > {
            static fromReader(reader: Reader): GetBotCallbackAnswer;
            // flags: null;
            game?: boolean;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            data?: bytes;
            password?: Api.TypeInputCheckPasswordSRP;
        }
        export class SetBotCallbackAnswer extends Request<
            Partial<{
                // flags: null;
                alert?: boolean;
                queryId: long;
                message?: string;
                url?: string;
                cacheTime: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetBotCallbackAnswer;
            // flags: null;
            alert?: boolean;
            queryId: long;
            message?: string;
            url?: string;
            cacheTime: int;
        }
        export class GetPeerDialogs extends Request<
            Partial<{
                peers: Api.TypeInputDialogPeer[];
            }>,
            messages.TypePeerDialogs
        > {
            static fromReader(reader: Reader): GetPeerDialogs;
            peers: Api.TypeInputDialogPeer[];
        }
        export class SaveDraft extends Request<
            Partial<{
                // flags: null;
                noWebpage?: boolean;
                replyToMsgId?: MessageIDLike;
                peer: Api.TypeEntityLike;
                message: string;
                entities?: Api.TypeMessageEntity[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveDraft;
            // flags: null;
            noWebpage?: boolean;
            replyToMsgId?: MessageIDLike;
            peer: Api.TypeEntityLike;
            message: string;
            entities?: Api.TypeMessageEntity[];
        }
        export class GetAllDrafts extends Request<void, Api.TypeUpdates> {
            static fromReader(reader: Reader): GetAllDrafts;
        }
        export class GetFeaturedStickers extends Request<
            Partial<{
                hash: int;
            }>,
            messages.TypeFeaturedStickers
        > {
            static fromReader(reader: Reader): GetFeaturedStickers;
            hash: int;
        }
        export class ReadFeaturedStickers extends Request<
            Partial<{
                id: long[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReadFeaturedStickers;
            id: long[];
        }
        export class GetRecentStickers extends Request<
            Partial<{
                // flags: null;
                attached?: boolean;
                hash: int;
            }>,
            messages.TypeRecentStickers
        > {
            static fromReader(reader: Reader): GetRecentStickers;
            // flags: null;
            attached?: boolean;
            hash: int;
        }
        export class SaveRecentSticker extends Request<
            Partial<{
                // flags: null;
                attached?: boolean;
                id: Api.TypeInputDocument;
                unsave: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveRecentSticker;
            // flags: null;
            attached?: boolean;
            id: Api.TypeInputDocument;
            unsave: Bool;
        }
        export class ClearRecentStickers extends Request<
            Partial<{
                // flags: null;
                attached?: boolean;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ClearRecentStickers;
            // flags: null;
            attached?: boolean;
        }
        export class GetArchivedStickers extends Request<
            Partial<{
                // flags: null;
                masks?: boolean;
                offsetId: long;
                limit: int;
            }>,
            messages.TypeArchivedStickers
        > {
            static fromReader(reader: Reader): GetArchivedStickers;
            // flags: null;
            masks?: boolean;
            offsetId: long;
            limit: int;
        }
        export class GetMaskStickers extends Request<
            Partial<{
                hash: int;
            }>,
            messages.TypeAllStickers
        > {
            static fromReader(reader: Reader): GetMaskStickers;
            hash: int;
        }
        export class GetAttachedStickers extends Request<
            Partial<{
                media: Api.TypeInputStickeredMedia;
            }>,
            Api.TypeStickerSetCovered[]
        > {
            static fromReader(reader: Reader): GetAttachedStickers;
            media: Api.TypeInputStickeredMedia;
        }
        export class SetGameScore extends Request<
            Partial<{
                // flags: null;
                editMessage?: boolean;
                force?: boolean;
                peer: Api.TypeEntityLike;
                id: int;
                userId: Api.TypeEntityLike;
                score: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SetGameScore;
            // flags: null;
            editMessage?: boolean;
            force?: boolean;
            peer: Api.TypeEntityLike;
            id: int;
            userId: Api.TypeEntityLike;
            score: int;
        }
        export class SetInlineGameScore extends Request<
            Partial<{
                // flags: null;
                editMessage?: boolean;
                force?: boolean;
                id: Api.TypeInputBotInlineMessageID;
                userId: Api.TypeEntityLike;
                score: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetInlineGameScore;
            // flags: null;
            editMessage?: boolean;
            force?: boolean;
            id: Api.TypeInputBotInlineMessageID;
            userId: Api.TypeEntityLike;
            score: int;
        }
        export class GetGameHighScores extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int;
                userId: Api.TypeEntityLike;
            }>,
            messages.TypeHighScores
        > {
            static fromReader(reader: Reader): GetGameHighScores;
            peer: Api.TypeEntityLike;
            id: int;
            userId: Api.TypeEntityLike;
        }
        export class GetInlineGameHighScores extends Request<
            Partial<{
                id: Api.TypeInputBotInlineMessageID;
                userId: Api.TypeEntityLike;
            }>,
            messages.TypeHighScores
        > {
            static fromReader(reader: Reader): GetInlineGameHighScores;
            id: Api.TypeInputBotInlineMessageID;
            userId: Api.TypeEntityLike;
        }
        export class GetCommonChats extends Request<
            Partial<{
                userId: Api.TypeEntityLike;
                maxId: int;
                limit: int;
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetCommonChats;
            userId: Api.TypeEntityLike;
            maxId: int;
            limit: int;
        }
        export class GetAllChats extends Request<
            Partial<{
                exceptIds: int[];
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetAllChats;
            exceptIds: int[];
        }
        export class GetWebPage extends Request<
            Partial<{
                url: string;
                hash: int;
            }>,
            Api.TypeWebPage
        > {
            static fromReader(reader: Reader): GetWebPage;
            url: string;
            hash: int;
        }
        export class ToggleDialogPin extends Request<
            Partial<{
                // flags: null;
                pinned?: boolean;
                peer: Api.TypeInputDialogPeer;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ToggleDialogPin;
            // flags: null;
            pinned?: boolean;
            peer: Api.TypeInputDialogPeer;
        }
        export class ReorderPinnedDialogs extends Request<
            Partial<{
                // flags: null;
                force?: boolean;
                folderId: int;
                order: Api.TypeInputDialogPeer[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReorderPinnedDialogs;
            // flags: null;
            force?: boolean;
            folderId: int;
            order: Api.TypeInputDialogPeer[];
        }
        export class GetPinnedDialogs extends Request<
            Partial<{
                folderId: int;
            }>,
            messages.TypePeerDialogs
        > {
            static fromReader(reader: Reader): GetPinnedDialogs;
            folderId: int;
        }
        export class SetBotShippingResults extends Request<
            Partial<{
                // flags: null;
                queryId: long;
                error?: string;
                shippingOptions?: Api.TypeShippingOption[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetBotShippingResults;
            // flags: null;
            queryId: long;
            error?: string;
            shippingOptions?: Api.TypeShippingOption[];
        }
        export class SetBotPrecheckoutResults extends Request<
            Partial<{
                // flags: null;
                success?: boolean;
                queryId: long;
                error?: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetBotPrecheckoutResults;
            // flags: null;
            success?: boolean;
            queryId: long;
            error?: string;
        }
        export class UploadMedia extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                media: Api.TypeInputMedia;
            }>,
            Api.TypeMessageMedia
        > {
            static fromReader(reader: Reader): UploadMedia;
            peer: Api.TypeEntityLike;
            media: Api.TypeInputMedia;
        }
        export class SendScreenshotNotification extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                replyToMsgId: MessageIDLike;
                randomId: long;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendScreenshotNotification;
            peer: Api.TypeEntityLike;
            replyToMsgId: MessageIDLike;
            randomId: long;
        }
        export class GetFavedStickers extends Request<
            Partial<{
                hash: int;
            }>,
            messages.TypeFavedStickers
        > {
            static fromReader(reader: Reader): GetFavedStickers;
            hash: int;
        }
        export class FaveSticker extends Request<
            Partial<{
                id: Api.TypeInputDocument;
                unfave: Bool;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): FaveSticker;
            id: Api.TypeInputDocument;
            unfave: Bool;
        }
        export class GetUnreadMentions extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                offsetId: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetUnreadMentions;
            peer: Api.TypeEntityLike;
            offsetId: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
        }
        export class ReadMentions extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            messages.TypeAffectedHistory
        > {
            static fromReader(reader: Reader): ReadMentions;
            peer: Api.TypeEntityLike;
        }
        export class GetRecentLocations extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                limit: int;
                hash: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetRecentLocations;
            peer: Api.TypeEntityLike;
            limit: int;
            hash: int;
        }
        export class SendMultiMedia extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                peer: Api.TypeEntityLike;
                replyToMsgId?: MessageIDLike;
                multiMedia: Api.TypeInputSingleMedia[];
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendMultiMedia;
            // flags: null;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            peer: Api.TypeEntityLike;
            replyToMsgId?: MessageIDLike;
            multiMedia: Api.TypeInputSingleMedia[];
            scheduleDate?: int;
        }
        export class UploadEncryptedFile extends Request<
            Partial<{
                peer: Api.TypeInputEncryptedChat;
                file: Api.TypeInputEncryptedFile;
            }>,
            Api.TypeEncryptedFile
        > {
            static fromReader(reader: Reader): UploadEncryptedFile;
            peer: Api.TypeInputEncryptedChat;
            file: Api.TypeInputEncryptedFile;
        }
        export class SearchStickerSets extends Request<
            Partial<{
                // flags: null;
                excludeFeatured?: boolean;
                q: string;
                hash: int;
            }>,
            messages.TypeFoundStickerSets
        > {
            static fromReader(reader: Reader): SearchStickerSets;
            // flags: null;
            excludeFeatured?: boolean;
            q: string;
            hash: int;
        }
        export class GetSplitRanges extends Request<
            void,
            Api.TypeMessageRange[]
        > {
            static fromReader(reader: Reader): GetSplitRanges;
        }
        export class MarkDialogUnread extends Request<
            Partial<{
                // flags: null;
                unread?: boolean;
                peer: Api.TypeInputDialogPeer;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): MarkDialogUnread;
            // flags: null;
            unread?: boolean;
            peer: Api.TypeInputDialogPeer;
        }
        export class GetDialogUnreadMarks extends Request<
            void,
            Api.TypeDialogPeer[]
        > {
            static fromReader(reader: Reader): GetDialogUnreadMarks;
        }
        export class ClearAllDrafts extends Request<void, Bool> {
            static fromReader(reader: Reader): ClearAllDrafts;
        }
        export class UpdatePinnedMessage extends Request<
            Partial<{
                // flags: null;
                silent?: boolean;
                unpin?: boolean;
                pmOneside?: boolean;
                peer: Api.TypeEntityLike;
                id: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): UpdatePinnedMessage;
            // flags: null;
            silent?: boolean;
            unpin?: boolean;
            pmOneside?: boolean;
            peer: Api.TypeEntityLike;
            id: int;
        }
        export class SendVote extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                options: bytes[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendVote;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            options: bytes[];
        }
        export class GetPollResults extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): GetPollResults;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
        }
        export class GetOnlines extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            Api.TypeChatOnlines
        > {
            static fromReader(reader: Reader): GetOnlines;
            peer: Api.TypeEntityLike;
        }
        export class GetStatsURL extends Request<
            Partial<{
                // flags: null;
                dark?: boolean;
                peer: Api.TypeEntityLike;
                params: string;
            }>,
            Api.TypeStatsURL
        > {
            static fromReader(reader: Reader): GetStatsURL;
            // flags: null;
            dark?: boolean;
            peer: Api.TypeEntityLike;
            params: string;
        }
        export class EditChatAbout extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                about: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): EditChatAbout;
            peer: Api.TypeEntityLike;
            about: string;
        }
        export class EditChatDefaultBannedRights extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                bannedRights: Api.TypeChatBannedRights;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditChatDefaultBannedRights;
            peer: Api.TypeEntityLike;
            bannedRights: Api.TypeChatBannedRights;
        }
        export class GetEmojiKeywords extends Request<
            Partial<{
                langCode: string;
            }>,
            Api.TypeEmojiKeywordsDifference
        > {
            static fromReader(reader: Reader): GetEmojiKeywords;
            langCode: string;
        }
        export class GetEmojiKeywordsDifference extends Request<
            Partial<{
                langCode: string;
                fromVersion: int;
            }>,
            Api.TypeEmojiKeywordsDifference
        > {
            static fromReader(reader: Reader): GetEmojiKeywordsDifference;
            langCode: string;
            fromVersion: int;
        }
        export class GetEmojiKeywordsLanguages extends Request<
            Partial<{
                langCodes: string[];
            }>,
            Api.TypeEmojiLanguage[]
        > {
            static fromReader(reader: Reader): GetEmojiKeywordsLanguages;
            langCodes: string[];
        }
        export class GetEmojiURL extends Request<
            Partial<{
                langCode: string;
            }>,
            Api.TypeEmojiURL
        > {
            static fromReader(reader: Reader): GetEmojiURL;
            langCode: string;
        }
        export class GetSearchCounters extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                filters: Api.TypeMessagesFilter[];
            }>,
            messages.TypeSearchCounter[]
        > {
            static fromReader(reader: Reader): GetSearchCounters;
            peer: Api.TypeEntityLike;
            filters: Api.TypeMessagesFilter[];
        }
        export class RequestUrlAuth extends Request<
            Partial<{
                // flags: null;
                peer?: Api.TypeEntityLike;
                msgId?: MessageIDLike;
                buttonId?: int;
                url?: string;
            }>,
            Api.TypeUrlAuthResult
        > {
            static fromReader(reader: Reader): RequestUrlAuth;
            // flags: null;
            peer?: Api.TypeEntityLike;
            msgId?: MessageIDLike;
            buttonId?: int;
            url?: string;
        }
        export class AcceptUrlAuth extends Request<
            Partial<{
                // flags: null;
                writeAllowed?: boolean;
                peer?: Api.TypeEntityLike;
                msgId?: MessageIDLike;
                buttonId?: int;
                url?: string;
            }>,
            Api.TypeUrlAuthResult
        > {
            static fromReader(reader: Reader): AcceptUrlAuth;
            // flags: null;
            writeAllowed?: boolean;
            peer?: Api.TypeEntityLike;
            msgId?: MessageIDLike;
            buttonId?: int;
            url?: string;
        }
        export class HidePeerSettingsBar extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): HidePeerSettingsBar;
            peer: Api.TypeEntityLike;
        }
        export class GetScheduledHistory extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                hash: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetScheduledHistory;
            peer: Api.TypeEntityLike;
            hash: int;
        }
        export class GetScheduledMessages extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int[];
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetScheduledMessages;
            peer: Api.TypeEntityLike;
            id: int[];
        }
        export class SendScheduledMessages extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SendScheduledMessages;
            peer: Api.TypeEntityLike;
            id: int[];
        }
        export class DeleteScheduledMessages extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                id: int[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DeleteScheduledMessages;
            peer: Api.TypeEntityLike;
            id: int[];
        }
        export class GetPollVotes extends Request<
            Partial<{
                // flags: null;
                peer: Api.TypeEntityLike;
                id: int;
                option?: bytes;
                offset?: string;
                limit: int;
            }>,
            messages.TypeVotesList
        > {
            static fromReader(reader: Reader): GetPollVotes;
            // flags: null;
            peer: Api.TypeEntityLike;
            id: int;
            option?: bytes;
            offset?: string;
            limit: int;
        }
        export class ToggleStickerSets extends Request<
            Partial<{
                // flags: null;
                uninstall?: boolean;
                archive?: boolean;
                unarchive?: boolean;
                stickersets: Api.TypeInputStickerSet[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ToggleStickerSets;
            // flags: null;
            uninstall?: boolean;
            archive?: boolean;
            unarchive?: boolean;
            stickersets: Api.TypeInputStickerSet[];
        }
        export class GetDialogFilters extends Request<
            void,
            Api.TypeDialogFilter[]
        > {
            static fromReader(reader: Reader): GetDialogFilters;
        }
        export class GetSuggestedDialogFilters extends Request<
            void,
            Api.TypeDialogFilterSuggested[]
        > {
            static fromReader(reader: Reader): GetSuggestedDialogFilters;
        }
        export class UpdateDialogFilter extends Request<
            Partial<{
                // flags: null;
                id: int;
                filter?: Api.TypeDialogFilter;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateDialogFilter;
            // flags: null;
            id: int;
            filter?: Api.TypeDialogFilter;
        }
        export class UpdateDialogFiltersOrder extends Request<
            Partial<{
                order: int[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateDialogFiltersOrder;
            order: int[];
        }
        export class GetOldFeaturedStickers extends Request<
            Partial<{
                offset: int;
                limit: int;
                hash: int;
            }>,
            messages.TypeFeaturedStickers
        > {
            static fromReader(reader: Reader): GetOldFeaturedStickers;
            offset: int;
            limit: int;
            hash: int;
        }
        export class GetReplies extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                offsetId: int;
                offsetDate: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetReplies;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            offsetId: int;
            offsetDate: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: int;
        }
        export class GetDiscussionMessage extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
            }>,
            messages.TypeDiscussionMessage
        > {
            static fromReader(reader: Reader): GetDiscussionMessage;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
        }
        export class ReadDiscussion extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                readMaxId: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReadDiscussion;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            readMaxId: int;
        }
        export class UnpinAllMessages extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            messages.TypeAffectedHistory
        > {
            static fromReader(reader: Reader): UnpinAllMessages;
            peer: Api.TypeEntityLike;
        }
        export class DeleteChat extends Request<
            Partial<{
                chatId: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteChat;
            chatId: int;
        }
        export class DeletePhoneCallHistory extends Request<
            Partial<{
                // flags: null;
                revoke?: boolean;
            }>,
            messages.TypeAffectedFoundMessages
        > {
            static fromReader(reader: Reader): DeletePhoneCallHistory;
            // flags: null;
            revoke?: boolean;
        }
        export class CheckHistoryImport extends Request<
            Partial<{
                importHead: string;
            }>,
            messages.TypeHistoryImportParsed
        > {
            static fromReader(reader: Reader): CheckHistoryImport;
            importHead: string;
        }
        export class InitHistoryImport extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                file: Api.TypeInputFile;
                mediaCount: int;
            }>,
            messages.TypeHistoryImport
        > {
            static fromReader(reader: Reader): InitHistoryImport;
            peer: Api.TypeEntityLike;
            file: Api.TypeInputFile;
            mediaCount: int;
        }
        export class UploadImportedMedia extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                importId: long;
                fileName: string;
                media: Api.TypeInputMedia;
            }>,
            Api.TypeMessageMedia
        > {
            static fromReader(reader: Reader): UploadImportedMedia;
            peer: Api.TypeEntityLike;
            importId: long;
            fileName: string;
            media: Api.TypeInputMedia;
        }
        export class StartHistoryImport extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                importId: long;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): StartHistoryImport;
            peer: Api.TypeEntityLike;
            importId: long;
        }
        export class GetExportedChatInvites extends Request<
            Partial<{
                // flags: null;
                revoked?: boolean;
                peer: Api.TypeEntityLike;
                adminId: Api.TypeEntityLike;
                offsetDate?: int;
                offsetLink?: string;
                limit: int;
            }>,
            messages.TypeExportedChatInvites
        > {
            static fromReader(reader: Reader): GetExportedChatInvites;
            // flags: null;
            revoked?: boolean;
            peer: Api.TypeEntityLike;
            adminId: Api.TypeEntityLike;
            offsetDate?: int;
            offsetLink?: string;
            limit: int;
        }
        export class GetExportedChatInvite extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                link: string;
            }>,
            messages.TypeExportedChatInvite
        > {
            static fromReader(reader: Reader): GetExportedChatInvite;
            peer: Api.TypeEntityLike;
            link: string;
        }
        export class EditExportedChatInvite extends Request<
            Partial<{
                // flags: null;
                revoked?: boolean;
                peer: Api.TypeEntityLike;
                link: string;
                expireDate?: int;
                usageLimit?: int;
            }>,
            messages.TypeExportedChatInvite
        > {
            static fromReader(reader: Reader): EditExportedChatInvite;
            // flags: null;
            revoked?: boolean;
            peer: Api.TypeEntityLike;
            link: string;
            expireDate?: int;
            usageLimit?: int;
        }
        export class DeleteRevokedExportedChatInvites extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                adminId: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteRevokedExportedChatInvites;
            peer: Api.TypeEntityLike;
            adminId: Api.TypeEntityLike;
        }
        export class DeleteExportedChatInvite extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                link: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteExportedChatInvite;
            peer: Api.TypeEntityLike;
            link: string;
        }
        export class GetAdminsWithInvites extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            messages.TypeChatAdminsWithInvites
        > {
            static fromReader(reader: Reader): GetAdminsWithInvites;
            peer: Api.TypeEntityLike;
        }
        export class GetChatInviteImporters extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                link: string;
                offsetDate: int;
                offsetUser: Api.TypeEntityLike;
                limit: int;
            }>,
            messages.TypeChatInviteImporters
        > {
            static fromReader(reader: Reader): GetChatInviteImporters;
            peer: Api.TypeEntityLike;
            link: string;
            offsetDate: int;
            offsetUser: Api.TypeEntityLike;
            limit: int;
        }
        export class SetHistoryTTL extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                period: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SetHistoryTTL;
            peer: Api.TypeEntityLike;
            period: int;
        }
        export class CheckHistoryImportPeer extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            messages.TypeCheckedHistoryImportPeer
        > {
            static fromReader(reader: Reader): CheckHistoryImportPeer;
            peer: Api.TypeEntityLike;
        }
    }

    export namespace updates {
        export class GetState extends Request<void, updates.TypeState> {
            static fromReader(reader: Reader): GetState;
        }
        export class GetDifference extends Request<
            Partial<{
                // flags: null;
                pts: int;
                ptsTotalLimit?: int;
                date: int;
                qts: int;
            }>,
            updates.TypeDifference
        > {
            static fromReader(reader: Reader): GetDifference;
            // flags: null;
            pts: int;
            ptsTotalLimit?: int;
            date: int;
            qts: int;
        }
        export class GetChannelDifference extends Request<
            Partial<{
                // flags: null;
                force?: boolean;
                channel: Api.TypeEntityLike;
                filter: Api.TypeChannelMessagesFilter;
                pts: int;
                limit: int;
            }>,
            updates.TypeChannelDifference
        > {
            static fromReader(reader: Reader): GetChannelDifference;
            // flags: null;
            force?: boolean;
            channel: Api.TypeEntityLike;
            filter: Api.TypeChannelMessagesFilter;
            pts: int;
            limit: int;
        }
    }

    export namespace photos {
        export class UpdateProfilePhoto extends Request<
            Partial<{
                id: Api.TypeInputPhoto;
            }>,
            photos.TypePhoto
        > {
            static fromReader(reader: Reader): UpdateProfilePhoto;
            id: Api.TypeInputPhoto;
        }
        export class UploadProfilePhoto extends Request<
            Partial<{
                // flags: null;
                file?: Api.TypeInputFile;
                video?: Api.TypeInputFile;
                videoStartTs?: double;
            }>,
            photos.TypePhoto
        > {
            static fromReader(reader: Reader): UploadProfilePhoto;
            // flags: null;
            file?: Api.TypeInputFile;
            video?: Api.TypeInputFile;
            videoStartTs?: double;
        }
        export class DeletePhotos extends Request<
            Partial<{
                id: Api.TypeInputPhoto[];
            }>,
            long[]
        > {
            static fromReader(reader: Reader): DeletePhotos;
            id: Api.TypeInputPhoto[];
        }
        export class GetUserPhotos extends Request<
            Partial<{
                userId: Api.TypeEntityLike;
                offset: int;
                maxId: long;
                limit: int;
            }>,
            photos.TypePhotos
        > {
            static fromReader(reader: Reader): GetUserPhotos;
            userId: Api.TypeEntityLike;
            offset: int;
            maxId: long;
            limit: int;
        }
    }

    export namespace upload {
        export class SaveFilePart extends Request<
            Partial<{
                fileId: long;
                filePart: int;
                bytes: bytes;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveFilePart;
            fileId: long;
            filePart: int;
            bytes: bytes;
        }
        export class GetFile extends Request<
            Partial<{
                // flags: null;
                precise?: boolean;
                cdnSupported?: boolean;
                location: Api.TypeInputFileLocation;
                offset: int;
                limit: int;
            }>,
            upload.TypeFile
        > {
            static fromReader(reader: Reader): GetFile;
            // flags: null;
            precise?: boolean;
            cdnSupported?: boolean;
            location: Api.TypeInputFileLocation;
            offset: int;
            limit: int;
        }
        export class SaveBigFilePart extends Request<
            Partial<{
                fileId: long;
                filePart: int;
                fileTotalParts: int;
                bytes: bytes;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveBigFilePart;
            fileId: long;
            filePart: int;
            fileTotalParts: int;
            bytes: bytes;
        }
        export class GetWebFile extends Request<
            Partial<{
                location: Api.TypeInputWebFileLocation;
                offset: int;
                limit: int;
            }>,
            upload.TypeWebFile
        > {
            static fromReader(reader: Reader): GetWebFile;
            location: Api.TypeInputWebFileLocation;
            offset: int;
            limit: int;
        }
        export class GetCdnFile extends Request<
            Partial<{
                fileToken: bytes;
                offset: int;
                limit: int;
            }>,
            upload.TypeCdnFile
        > {
            static fromReader(reader: Reader): GetCdnFile;
            fileToken: bytes;
            offset: int;
            limit: int;
        }
        export class ReuploadCdnFile extends Request<
            Partial<{
                fileToken: bytes;
                requestToken: bytes;
            }>,
            Api.TypeFileHash[]
        > {
            static fromReader(reader: Reader): ReuploadCdnFile;
            fileToken: bytes;
            requestToken: bytes;
        }
        export class GetCdnFileHashes extends Request<
            Partial<{
                fileToken: bytes;
                offset: int;
            }>,
            Api.TypeFileHash[]
        > {
            static fromReader(reader: Reader): GetCdnFileHashes;
            fileToken: bytes;
            offset: int;
        }
        export class GetFileHashes extends Request<
            Partial<{
                location: Api.TypeInputFileLocation;
                offset: int;
            }>,
            Api.TypeFileHash[]
        > {
            static fromReader(reader: Reader): GetFileHashes;
            location: Api.TypeInputFileLocation;
            offset: int;
        }
    }

    export namespace help {
        export class GetConfig extends Request<void, Api.TypeConfig> {
            static fromReader(reader: Reader): GetConfig;
        }
        export class GetNearestDc extends Request<void, Api.TypeNearestDc> {
            static fromReader(reader: Reader): GetNearestDc;
        }
        export class GetAppUpdate extends Request<
            Partial<{
                source: string;
            }>,
            help.TypeAppUpdate
        > {
            static fromReader(reader: Reader): GetAppUpdate;
            source: string;
        }
        export class GetInviteText extends Request<void, help.TypeInviteText> {
            static fromReader(reader: Reader): GetInviteText;
        }
        export class GetSupport extends Request<void, help.TypeSupport> {
            static fromReader(reader: Reader): GetSupport;
        }
        export class GetAppChangelog extends Request<
            Partial<{
                prevAppVersion: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): GetAppChangelog;
            prevAppVersion: string;
        }
        export class SetBotUpdatesStatus extends Request<
            Partial<{
                pendingUpdatesCount: int;
                message: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetBotUpdatesStatus;
            pendingUpdatesCount: int;
            message: string;
        }
        export class GetCdnConfig extends Request<void, Api.TypeCdnConfig> {
            static fromReader(reader: Reader): GetCdnConfig;
        }
        export class GetRecentMeUrls extends Request<
            Partial<{
                referer: string;
            }>,
            help.TypeRecentMeUrls
        > {
            static fromReader(reader: Reader): GetRecentMeUrls;
            referer: string;
        }
        export class GetTermsOfServiceUpdate extends Request<
            void,
            help.TypeTermsOfServiceUpdate
        > {
            static fromReader(reader: Reader): GetTermsOfServiceUpdate;
        }
        export class AcceptTermsOfService extends Request<
            Partial<{
                id: Api.TypeDataJSON;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): AcceptTermsOfService;
            id: Api.TypeDataJSON;
        }
        export class GetDeepLinkInfo extends Request<
            Partial<{
                path: string;
            }>,
            help.TypeDeepLinkInfo
        > {
            static fromReader(reader: Reader): GetDeepLinkInfo;
            path: string;
        }
        export class GetAppConfig extends Request<void, Api.TypeJSONValue> {
            static fromReader(reader: Reader): GetAppConfig;
        }
        export class SaveAppLog extends Request<
            Partial<{
                events: Api.TypeInputAppEvent[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveAppLog;
            events: Api.TypeInputAppEvent[];
        }
        export class GetPassportConfig extends Request<
            Partial<{
                hash: int;
            }>,
            help.TypePassportConfig
        > {
            static fromReader(reader: Reader): GetPassportConfig;
            hash: int;
        }
        export class GetSupportName extends Request<
            void,
            help.TypeSupportName
        > {
            static fromReader(reader: Reader): GetSupportName;
        }
        export class GetUserInfo extends Request<
            Partial<{
                userId: Api.TypeEntityLike;
            }>,
            help.TypeUserInfo
        > {
            static fromReader(reader: Reader): GetUserInfo;
            userId: Api.TypeEntityLike;
        }
        export class EditUserInfo extends Request<
            Partial<{
                userId: Api.TypeEntityLike;
                message: string;
                entities: Api.TypeMessageEntity[];
            }>,
            help.TypeUserInfo
        > {
            static fromReader(reader: Reader): EditUserInfo;
            userId: Api.TypeEntityLike;
            message: string;
            entities: Api.TypeMessageEntity[];
        }
        export class GetPromoData extends Request<void, help.TypePromoData> {
            static fromReader(reader: Reader): GetPromoData;
        }
        export class HidePromoData extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): HidePromoData;
            peer: Api.TypeEntityLike;
        }
        export class DismissSuggestion extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                suggestion: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DismissSuggestion;
            peer: Api.TypeEntityLike;
            suggestion: string;
        }
        export class GetCountriesList extends Request<
            Partial<{
                langCode: string;
                hash: int;
            }>,
            help.TypeCountriesList
        > {
            static fromReader(reader: Reader): GetCountriesList;
            langCode: string;
            hash: int;
        }
    }

    export namespace channels {
        export class ReadHistory extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                maxId: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReadHistory;
            channel: Api.TypeEntityLike;
            maxId: int;
        }
        export class DeleteMessages extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                id: int[];
            }>,
            messages.TypeAffectedMessages
        > {
            static fromReader(reader: Reader): DeleteMessages;
            channel: Api.TypeEntityLike;
            id: int[];
        }
        export class DeleteUserHistory extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                userId: Api.TypeEntityLike;
            }>,
            messages.TypeAffectedHistory
        > {
            static fromReader(reader: Reader): DeleteUserHistory;
            channel: Api.TypeEntityLike;
            userId: Api.TypeEntityLike;
        }
        export class ReportSpam extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                userId: Api.TypeEntityLike;
                id: int[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReportSpam;
            channel: Api.TypeEntityLike;
            userId: Api.TypeEntityLike;
            id: int[];
        }
        export class GetMessages extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                id: Api.TypeInputMessage[];
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetMessages;
            channel: Api.TypeEntityLike;
            id: Api.TypeInputMessage[];
        }
        export class GetParticipants extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                filter: Api.TypeChannelParticipantsFilter;
                offset: int;
                limit: int;
                hash: int;
            }>,
            channels.TypeChannelParticipants
        > {
            static fromReader(reader: Reader): GetParticipants;
            channel: Api.TypeEntityLike;
            filter: Api.TypeChannelParticipantsFilter;
            offset: int;
            limit: int;
            hash: int;
        }
        export class GetParticipant extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                participant: Api.TypeEntityLike;
            }>,
            channels.TypeChannelParticipant
        > {
            static fromReader(reader: Reader): GetParticipant;
            channel: Api.TypeEntityLike;
            participant: Api.TypeEntityLike;
        }
        export class GetChannels extends Request<
            Partial<{
                id: Api.TypeEntityLike[];
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetChannels;
            id: Api.TypeEntityLike[];
        }
        export class GetFullChannel extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
            }>,
            messages.TypeChatFull
        > {
            static fromReader(reader: Reader): GetFullChannel;
            channel: Api.TypeEntityLike;
        }
        export class CreateChannel extends Request<
            Partial<{
                // flags: null;
                broadcast?: boolean;
                megagroup?: boolean;
                forImport?: boolean;
                title: string;
                about: string;
                geoPoint?: Api.TypeInputGeoPoint;
                address?: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): CreateChannel;
            // flags: null;
            broadcast?: boolean;
            megagroup?: boolean;
            forImport?: boolean;
            title: string;
            about: string;
            geoPoint?: Api.TypeInputGeoPoint;
            address?: string;
        }
        export class EditAdmin extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                userId: Api.TypeEntityLike;
                adminRights: Api.TypeChatAdminRights;
                rank: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditAdmin;
            channel: Api.TypeEntityLike;
            userId: Api.TypeEntityLike;
            adminRights: Api.TypeChatAdminRights;
            rank: string;
        }
        export class EditTitle extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                title: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditTitle;
            channel: Api.TypeEntityLike;
            title: string;
        }
        export class EditPhoto extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                photo: Api.TypeInputChatPhoto;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditPhoto;
            channel: Api.TypeEntityLike;
            photo: Api.TypeInputChatPhoto;
        }
        export class CheckUsername extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                username: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): CheckUsername;
            channel: Api.TypeEntityLike;
            username: string;
        }
        export class UpdateUsername extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                username: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): UpdateUsername;
            channel: Api.TypeEntityLike;
            username: string;
        }
        export class JoinChannel extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): JoinChannel;
            channel: Api.TypeEntityLike;
        }
        export class LeaveChannel extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): LeaveChannel;
            channel: Api.TypeEntityLike;
        }
        export class InviteToChannel extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                users: Api.TypeEntityLike[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): InviteToChannel;
            channel: Api.TypeEntityLike;
            users: Api.TypeEntityLike[];
        }
        export class DeleteChannel extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DeleteChannel;
            channel: Api.TypeEntityLike;
        }
        export class ExportMessageLink extends Request<
            Partial<{
                // flags: null;
                grouped?: boolean;
                thread?: boolean;
                channel: Api.TypeEntityLike;
                id: int;
            }>,
            Api.TypeExportedMessageLink
        > {
            static fromReader(reader: Reader): ExportMessageLink;
            // flags: null;
            grouped?: boolean;
            thread?: boolean;
            channel: Api.TypeEntityLike;
            id: int;
        }
        export class ToggleSignatures extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                enabled: Bool;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ToggleSignatures;
            channel: Api.TypeEntityLike;
            enabled: Bool;
        }
        export class GetAdminedPublicChannels extends Request<
            Partial<{
                // flags: null;
                byLocation?: boolean;
                checkLimit?: boolean;
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetAdminedPublicChannels;
            // flags: null;
            byLocation?: boolean;
            checkLimit?: boolean;
        }
        export class EditBanned extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                participant: Api.TypeEntityLike;
                bannedRights: Api.TypeChatBannedRights;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditBanned;
            channel: Api.TypeEntityLike;
            participant: Api.TypeEntityLike;
            bannedRights: Api.TypeChatBannedRights;
        }
        export class GetAdminLog extends Request<
            Partial<{
                // flags: null;
                channel: Api.TypeEntityLike;
                q: string;
                eventsFilter?: Api.TypeChannelAdminLogEventsFilter;
                admins?: Api.TypeEntityLike[];
                maxId: long;
                minId: long;
                limit: int;
            }>,
            channels.TypeAdminLogResults
        > {
            static fromReader(reader: Reader): GetAdminLog;
            // flags: null;
            channel: Api.TypeEntityLike;
            q: string;
            eventsFilter?: Api.TypeChannelAdminLogEventsFilter;
            admins?: Api.TypeEntityLike[];
            maxId: long;
            minId: long;
            limit: int;
        }
        export class SetStickers extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                stickerset: Api.TypeInputStickerSet;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetStickers;
            channel: Api.TypeEntityLike;
            stickerset: Api.TypeInputStickerSet;
        }
        export class ReadMessageContents extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                id: int[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReadMessageContents;
            channel: Api.TypeEntityLike;
            id: int[];
        }
        export class DeleteHistory extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                maxId: int;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): DeleteHistory;
            channel: Api.TypeEntityLike;
            maxId: int;
        }
        export class TogglePreHistoryHidden extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                enabled: Bool;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): TogglePreHistoryHidden;
            channel: Api.TypeEntityLike;
            enabled: Bool;
        }
        export class GetLeftChannels extends Request<
            Partial<{
                offset: int;
            }>,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetLeftChannels;
            offset: int;
        }
        export class GetGroupsForDiscussion extends Request<
            void,
            messages.TypeChats
        > {
            static fromReader(reader: Reader): GetGroupsForDiscussion;
        }
        export class SetDiscussionGroup extends Request<
            Partial<{
                broadcast: Api.TypeEntityLike;
                group: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetDiscussionGroup;
            broadcast: Api.TypeEntityLike;
            group: Api.TypeEntityLike;
        }
        export class EditCreator extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                userId: Api.TypeEntityLike;
                password: Api.TypeInputCheckPasswordSRP;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditCreator;
            channel: Api.TypeEntityLike;
            userId: Api.TypeEntityLike;
            password: Api.TypeInputCheckPasswordSRP;
        }
        export class EditLocation extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                geoPoint: Api.TypeInputGeoPoint;
                address: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): EditLocation;
            channel: Api.TypeEntityLike;
            geoPoint: Api.TypeInputGeoPoint;
            address: string;
        }
        export class ToggleSlowMode extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                seconds: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ToggleSlowMode;
            channel: Api.TypeEntityLike;
            seconds: int;
        }
        export class GetInactiveChannels extends Request<
            void,
            messages.TypeInactiveChats
        > {
            static fromReader(reader: Reader): GetInactiveChannels;
        }
        export class ConvertToGigagroup extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ConvertToGigagroup;
            channel: Api.TypeEntityLike;
        }
    }

    export namespace bots {
        export class SendCustomRequest extends Request<
            Partial<{
                customMethod: string;
                params: Api.TypeDataJSON;
            }>,
            Api.TypeDataJSON
        > {
            static fromReader(reader: Reader): SendCustomRequest;
            customMethod: string;
            params: Api.TypeDataJSON;
        }
        export class AnswerWebhookJSONQuery extends Request<
            Partial<{
                queryId: long;
                data: Api.TypeDataJSON;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): AnswerWebhookJSONQuery;
            queryId: long;
            data: Api.TypeDataJSON;
        }
        export class SetBotCommands extends Request<
            Partial<{
                scope: Api.TypeBotCommandScope;
                langCode: string;
                commands: Api.TypeBotCommand[];
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SetBotCommands;
            scope: Api.TypeBotCommandScope;
            langCode: string;
            commands: Api.TypeBotCommand[];
        }
        export class ResetBotCommands extends Request<
            Partial<{
                scope: Api.TypeBotCommandScope;
                langCode: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ResetBotCommands;
            scope: Api.TypeBotCommandScope;
            langCode: string;
        }
        export class GetBotCommands extends Request<
            Partial<{
                scope: Api.TypeBotCommandScope;
                langCode: string;
            }>,
            Api.TypeBotCommand[]
        > {
            static fromReader(reader: Reader): GetBotCommands;
            scope: Api.TypeBotCommandScope;
            langCode: string;
        }
    }

    export namespace payments {
        export class GetPaymentForm extends Request<
            Partial<{
                // flags: null;
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                themeParams?: Api.TypeDataJSON;
            }>,
            payments.TypePaymentForm
        > {
            static fromReader(reader: Reader): GetPaymentForm;
            // flags: null;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            themeParams?: Api.TypeDataJSON;
        }
        export class GetPaymentReceipt extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
            }>,
            payments.TypePaymentReceipt
        > {
            static fromReader(reader: Reader): GetPaymentReceipt;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
        }
        export class ValidateRequestedInfo extends Request<
            Partial<{
                // flags: null;
                save?: boolean;
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                info: Api.TypePaymentRequestedInfo;
            }>,
            payments.TypeValidatedRequestedInfo
        > {
            static fromReader(reader: Reader): ValidateRequestedInfo;
            // flags: null;
            save?: boolean;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            info: Api.TypePaymentRequestedInfo;
        }
        export class SendPaymentForm extends Request<
            Partial<{
                // flags: null;
                formId: long;
                peer: Api.TypeEntityLike;
                msgId: MessageIDLike;
                requestedInfoId?: string;
                shippingOptionId?: string;
                credentials: Api.TypeInputPaymentCredentials;
                tipAmount?: long;
            }>,
            payments.TypePaymentResult
        > {
            static fromReader(reader: Reader): SendPaymentForm;
            // flags: null;
            formId: long;
            peer: Api.TypeEntityLike;
            msgId: MessageIDLike;
            requestedInfoId?: string;
            shippingOptionId?: string;
            credentials: Api.TypeInputPaymentCredentials;
            tipAmount?: long;
        }
        export class GetSavedInfo extends Request<
            void,
            payments.TypeSavedInfo
        > {
            static fromReader(reader: Reader): GetSavedInfo;
        }
        export class ClearSavedInfo extends Request<
            Partial<{
                // flags: null;
                credentials?: boolean;
                info?: boolean;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ClearSavedInfo;
            // flags: null;
            credentials?: boolean;
            info?: boolean;
        }
        export class GetBankCardData extends Request<
            Partial<{
                number: string;
            }>,
            payments.TypeBankCardData
        > {
            static fromReader(reader: Reader): GetBankCardData;
            number: string;
        }
    }

    export namespace stickers {
        export class CreateStickerSet extends Request<
            Partial<{
                // flags: null;
                masks?: boolean;
                animated?: boolean;
                userId: Api.TypeEntityLike;
                title: string;
                shortName: string;
                thumb?: Api.TypeInputDocument;
                stickers: Api.TypeInputStickerSetItem[];
                software?: string;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): CreateStickerSet;
            // flags: null;
            masks?: boolean;
            animated?: boolean;
            userId: Api.TypeEntityLike;
            title: string;
            shortName: string;
            thumb?: Api.TypeInputDocument;
            stickers: Api.TypeInputStickerSetItem[];
            software?: string;
        }
        export class RemoveStickerFromSet extends Request<
            Partial<{
                sticker: Api.TypeInputDocument;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): RemoveStickerFromSet;
            sticker: Api.TypeInputDocument;
        }
        export class ChangeStickerPosition extends Request<
            Partial<{
                sticker: Api.TypeInputDocument;
                position: int;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): ChangeStickerPosition;
            sticker: Api.TypeInputDocument;
            position: int;
        }
        export class AddStickerToSet extends Request<
            Partial<{
                stickerset: Api.TypeInputStickerSet;
                sticker: Api.TypeInputStickerSetItem;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): AddStickerToSet;
            stickerset: Api.TypeInputStickerSet;
            sticker: Api.TypeInputStickerSetItem;
        }
        export class SetStickerSetThumb extends Request<
            Partial<{
                stickerset: Api.TypeInputStickerSet;
                thumb: Api.TypeInputDocument;
            }>,
            messages.TypeStickerSet
        > {
            static fromReader(reader: Reader): SetStickerSetThumb;
            stickerset: Api.TypeInputStickerSet;
            thumb: Api.TypeInputDocument;
        }
        export class CheckShortName extends Request<
            Partial<{
                shortName: string;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): CheckShortName;
            shortName: string;
        }
        export class SuggestShortName extends Request<
            Partial<{
                title: string;
            }>,
            stickers.TypeSuggestedShortName
        > {
            static fromReader(reader: Reader): SuggestShortName;
            title: string;
        }
    }

    export namespace phone {
        export class GetCallConfig extends Request<void, Api.TypeDataJSON> {
            static fromReader(reader: Reader): GetCallConfig;
        }
        export class RequestCall extends Request<
            Partial<{
                // flags: null;
                video?: boolean;
                userId: Api.TypeEntityLike;
                randomId: int;
                gAHash: bytes;
                protocol: Api.TypePhoneCallProtocol;
            }>,
            phone.TypePhoneCall
        > {
            static fromReader(reader: Reader): RequestCall;
            // flags: null;
            video?: boolean;
            userId: Api.TypeEntityLike;
            randomId: int;
            gAHash: bytes;
            protocol: Api.TypePhoneCallProtocol;
        }
        export class AcceptCall extends Request<
            Partial<{
                peer: Api.TypeInputPhoneCall;
                gB: bytes;
                protocol: Api.TypePhoneCallProtocol;
            }>,
            phone.TypePhoneCall
        > {
            static fromReader(reader: Reader): AcceptCall;
            peer: Api.TypeInputPhoneCall;
            gB: bytes;
            protocol: Api.TypePhoneCallProtocol;
        }
        export class ConfirmCall extends Request<
            Partial<{
                peer: Api.TypeInputPhoneCall;
                gA: bytes;
                keyFingerprint: long;
                protocol: Api.TypePhoneCallProtocol;
            }>,
            phone.TypePhoneCall
        > {
            static fromReader(reader: Reader): ConfirmCall;
            peer: Api.TypeInputPhoneCall;
            gA: bytes;
            keyFingerprint: long;
            protocol: Api.TypePhoneCallProtocol;
        }
        export class ReceivedCall extends Request<
            Partial<{
                peer: Api.TypeInputPhoneCall;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): ReceivedCall;
            peer: Api.TypeInputPhoneCall;
        }
        export class DiscardCall extends Request<
            Partial<{
                // flags: null;
                video?: boolean;
                peer: Api.TypeInputPhoneCall;
                duration: int;
                reason: Api.TypePhoneCallDiscardReason;
                connectionId: long;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DiscardCall;
            // flags: null;
            video?: boolean;
            peer: Api.TypeInputPhoneCall;
            duration: int;
            reason: Api.TypePhoneCallDiscardReason;
            connectionId: long;
        }
        export class SetCallRating extends Request<
            Partial<{
                // flags: null;
                userInitiative?: boolean;
                peer: Api.TypeInputPhoneCall;
                rating: int;
                comment: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): SetCallRating;
            // flags: null;
            userInitiative?: boolean;
            peer: Api.TypeInputPhoneCall;
            rating: int;
            comment: string;
        }
        export class SaveCallDebug extends Request<
            Partial<{
                peer: Api.TypeInputPhoneCall;
                debug: Api.TypeDataJSON;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveCallDebug;
            peer: Api.TypeInputPhoneCall;
            debug: Api.TypeDataJSON;
        }
        export class SendSignalingData extends Request<
            Partial<{
                peer: Api.TypeInputPhoneCall;
                data: bytes;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SendSignalingData;
            peer: Api.TypeInputPhoneCall;
            data: bytes;
        }
        export class CreateGroupCall extends Request<
            Partial<{
                // flags: null;
                peer: Api.TypeEntityLike;
                randomId: int;
                title?: string;
                scheduleDate?: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): CreateGroupCall;
            // flags: null;
            peer: Api.TypeEntityLike;
            randomId: int;
            title?: string;
            scheduleDate?: int;
        }
        export class JoinGroupCall extends Request<
            Partial<{
                // flags: null;
                muted?: boolean;
                videoStopped?: boolean;
                call: Api.TypeInputGroupCall;
                joinAs: Api.TypeEntityLike;
                inviteHash?: string;
                params: Api.TypeDataJSON;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): JoinGroupCall;
            // flags: null;
            muted?: boolean;
            videoStopped?: boolean;
            call: Api.TypeInputGroupCall;
            joinAs: Api.TypeEntityLike;
            inviteHash?: string;
            params: Api.TypeDataJSON;
        }
        export class LeaveGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                source: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): LeaveGroupCall;
            call: Api.TypeInputGroupCall;
            source: int;
        }
        export class InviteToGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                users: Api.TypeEntityLike[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): InviteToGroupCall;
            call: Api.TypeInputGroupCall;
            users: Api.TypeEntityLike[];
        }
        export class DiscardGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DiscardGroupCall;
            call: Api.TypeInputGroupCall;
        }
        export class ToggleGroupCallSettings extends Request<
            Partial<{
                // flags: null;
                resetInviteHash?: boolean;
                call: Api.TypeInputGroupCall;
                joinMuted?: Bool;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ToggleGroupCallSettings;
            // flags: null;
            resetInviteHash?: boolean;
            call: Api.TypeInputGroupCall;
            joinMuted?: Bool;
        }
        export class GetGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
            }>,
            phone.TypeGroupCall
        > {
            static fromReader(reader: Reader): GetGroupCall;
            call: Api.TypeInputGroupCall;
        }
        export class GetGroupParticipants extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                ids: Api.TypeEntityLike[];
                sources: int[];
                offset: string;
                limit: int;
            }>,
            phone.TypeGroupParticipants
        > {
            static fromReader(reader: Reader): GetGroupParticipants;
            call: Api.TypeInputGroupCall;
            ids: Api.TypeEntityLike[];
            sources: int[];
            offset: string;
            limit: int;
        }
        export class CheckGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                sources: int[];
            }>,
            int[]
        > {
            static fromReader(reader: Reader): CheckGroupCall;
            call: Api.TypeInputGroupCall;
            sources: int[];
        }
        export class ToggleGroupCallRecord extends Request<
            Partial<{
                // flags: null;
                start?: boolean;
                call: Api.TypeInputGroupCall;
                title?: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ToggleGroupCallRecord;
            // flags: null;
            start?: boolean;
            call: Api.TypeInputGroupCall;
            title?: string;
        }
        export class EditGroupCallParticipant extends Request<
            Partial<{
                // flags: null;
                call: Api.TypeInputGroupCall;
                participant: Api.TypeEntityLike;
                muted?: Bool;
                volume?: int;
                raiseHand?: Bool;
                videoStopped?: Bool;
                videoPaused?: Bool;
                presentationPaused?: Bool;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditGroupCallParticipant;
            // flags: null;
            call: Api.TypeInputGroupCall;
            participant: Api.TypeEntityLike;
            muted?: Bool;
            volume?: int;
            raiseHand?: Bool;
            videoStopped?: Bool;
            videoPaused?: Bool;
            presentationPaused?: Bool;
        }
        export class EditGroupCallTitle extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                title: string;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditGroupCallTitle;
            call: Api.TypeInputGroupCall;
            title: string;
        }
        export class GetGroupCallJoinAs extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
            }>,
            phone.TypeJoinAsPeers
        > {
            static fromReader(reader: Reader): GetGroupCallJoinAs;
            peer: Api.TypeEntityLike;
        }
        export class ExportGroupCallInvite extends Request<
            Partial<{
                // flags: null;
                canSelfUnmute?: boolean;
                call: Api.TypeInputGroupCall;
            }>,
            phone.TypeExportedGroupCallInvite
        > {
            static fromReader(reader: Reader): ExportGroupCallInvite;
            // flags: null;
            canSelfUnmute?: boolean;
            call: Api.TypeInputGroupCall;
        }
        export class ToggleGroupCallStartSubscription extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                subscribed: Bool;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): ToggleGroupCallStartSubscription;
            call: Api.TypeInputGroupCall;
            subscribed: Bool;
        }
        export class StartScheduledGroupCall extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): StartScheduledGroupCall;
            call: Api.TypeInputGroupCall;
        }
        export class SaveDefaultGroupCallJoinAs extends Request<
            Partial<{
                peer: Api.TypeEntityLike;
                joinAs: Api.TypeEntityLike;
            }>,
            Bool
        > {
            static fromReader(reader: Reader): SaveDefaultGroupCallJoinAs;
            peer: Api.TypeEntityLike;
            joinAs: Api.TypeEntityLike;
        }
        export class JoinGroupCallPresentation extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
                params: Api.TypeDataJSON;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): JoinGroupCallPresentation;
            call: Api.TypeInputGroupCall;
            params: Api.TypeDataJSON;
        }
        export class LeaveGroupCallPresentation extends Request<
            Partial<{
                call: Api.TypeInputGroupCall;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): LeaveGroupCallPresentation;
            call: Api.TypeInputGroupCall;
        }
    }

    export namespace langpack {
        export class GetLangPack extends Request<
            Partial<{
                langPack: string;
                langCode: string;
            }>,
            Api.TypeLangPackDifference
        > {
            static fromReader(reader: Reader): GetLangPack;
            langPack: string;
            langCode: string;
        }
        export class GetStrings extends Request<
            Partial<{
                langPack: string;
                langCode: string;
                keys: string[];
            }>,
            Api.TypeLangPackString[]
        > {
            static fromReader(reader: Reader): GetStrings;
            langPack: string;
            langCode: string;
            keys: string[];
        }
        export class GetDifference extends Request<
            Partial<{
                langPack: string;
                langCode: string;
                fromVersion: int;
            }>,
            Api.TypeLangPackDifference
        > {
            static fromReader(reader: Reader): GetDifference;
            langPack: string;
            langCode: string;
            fromVersion: int;
        }
        export class GetLanguages extends Request<
            Partial<{
                langPack: string;
            }>,
            Api.TypeLangPackLanguage[]
        > {
            static fromReader(reader: Reader): GetLanguages;
            langPack: string;
        }
        export class GetLanguage extends Request<
            Partial<{
                langPack: string;
                langCode: string;
            }>,
            Api.TypeLangPackLanguage
        > {
            static fromReader(reader: Reader): GetLanguage;
            langPack: string;
            langCode: string;
        }
    }

    export namespace folders {
        export class EditPeerFolders extends Request<
            Partial<{
                folderPeers: Api.TypeInputFolderPeer[];
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): EditPeerFolders;
            folderPeers: Api.TypeInputFolderPeer[];
        }
        export class DeleteFolder extends Request<
            Partial<{
                folderId: int;
            }>,
            Api.TypeUpdates
        > {
            static fromReader(reader: Reader): DeleteFolder;
            folderId: int;
        }
    }

    export namespace stats {
        export class GetBroadcastStats extends Request<
            Partial<{
                // flags: null;
                dark?: boolean;
                channel: Api.TypeEntityLike;
            }>,
            stats.TypeBroadcastStats
        > {
            static fromReader(reader: Reader): GetBroadcastStats;
            // flags: null;
            dark?: boolean;
            channel: Api.TypeEntityLike;
        }
        export class LoadAsyncGraph extends Request<
            Partial<{
                // flags: null;
                token: string;
                x?: long;
            }>,
            Api.TypeStatsGraph
        > {
            static fromReader(reader: Reader): LoadAsyncGraph;
            // flags: null;
            token: string;
            x?: long;
        }
        export class GetMegagroupStats extends Request<
            Partial<{
                // flags: null;
                dark?: boolean;
                channel: Api.TypeEntityLike;
            }>,
            stats.TypeMegagroupStats
        > {
            static fromReader(reader: Reader): GetMegagroupStats;
            // flags: null;
            dark?: boolean;
            channel: Api.TypeEntityLike;
        }
        export class GetMessagePublicForwards extends Request<
            Partial<{
                channel: Api.TypeEntityLike;
                msgId: MessageIDLike;
                offsetRate: int;
                offsetPeer: Api.TypeEntityLike;
                offsetId: int;
                limit: int;
            }>,
            messages.TypeMessages
        > {
            static fromReader(reader: Reader): GetMessagePublicForwards;
            channel: Api.TypeEntityLike;
            msgId: MessageIDLike;
            offsetRate: int;
            offsetPeer: Api.TypeEntityLike;
            offsetId: int;
            limit: int;
        }
        export class GetMessageStats extends Request<
            Partial<{
                // flags: null;
                dark?: boolean;
                channel: Api.TypeEntityLike;
                msgId: MessageIDLike;
            }>,
            stats.TypeMessageStats
        > {
            static fromReader(reader: Reader): GetMessageStats;
            // flags: null;
            dark?: boolean;
            channel: Api.TypeEntityLike;
            msgId: MessageIDLike;
        }
    }

    // Types
    export type TypeEntityLike = EntityLike;
    export type TypeInputPeer =
        | InputPeerEmpty
        | InputPeerSelf
        | InputPeerChat
        | InputPeerUser
        | InputPeerChannel
        | InputPeerUserFromMessage
        | InputPeerChannelFromMessage;
    export type TypeInputUser =
        | InputUserEmpty
        | InputUserSelf
        | InputUser
        | InputUserFromMessage;
    export type TypeInputContact = InputPhoneContact;
    export type TypeInputFile = InputFile | InputFileBig;
    export type TypeInputMedia =
        | InputMediaEmpty
        | InputMediaUploadedPhoto
        | InputMediaPhoto
        | InputMediaGeoPoint
        | InputMediaContact
        | InputMediaUploadedDocument
        | InputMediaDocument
        | InputMediaVenue
        | InputMediaPhotoExternal
        | InputMediaDocumentExternal
        | InputMediaGame
        | InputMediaInvoice
        | InputMediaGeoLive
        | InputMediaPoll
        | InputMediaDice;
    export type TypeInputChatPhoto =
        | InputChatPhotoEmpty
        | InputChatUploadedPhoto
        | InputChatPhoto;
    export type TypeInputGeoPoint = InputGeoPointEmpty | InputGeoPoint;
    export type TypeInputPhoto = InputPhotoEmpty | InputPhoto;
    export type TypeInputFileLocation =
        | InputFileLocation
        | InputEncryptedFileLocation
        | InputDocumentFileLocation
        | InputSecureFileLocation
        | InputTakeoutFileLocation
        | InputPhotoFileLocation
        | InputPhotoLegacyFileLocation
        | InputPeerPhotoFileLocation
        | InputStickerSetThumb
        | InputGroupCallStream;
    export type TypePeer = PeerUser | PeerChat | PeerChannel;
    export type TypeUser = UserEmpty | User;
    export type TypeUserProfilePhoto = UserProfilePhotoEmpty | UserProfilePhoto;
    export type TypeUserStatus =
        | UserStatusEmpty
        | UserStatusOnline
        | UserStatusOffline
        | UserStatusRecently
        | UserStatusLastWeek
        | UserStatusLastMonth;
    export type TypeChat =
        | ChatEmpty
        | Chat
        | ChatForbidden
        | Channel
        | ChannelForbidden;
    export type TypeChatFull = ChatFull | ChannelFull;
    export type TypeChatParticipant =
        | ChatParticipant
        | ChatParticipantCreator
        | ChatParticipantAdmin;
    export type TypeChatParticipants =
        | ChatParticipantsForbidden
        | ChatParticipants;
    export type TypeChatPhoto = ChatPhotoEmpty | ChatPhoto;
    export type TypeMessage = MessageEmpty | Message | MessageService;
    export type TypeMessageMedia =
        | MessageMediaEmpty
        | MessageMediaPhoto
        | MessageMediaGeo
        | MessageMediaContact
        | MessageMediaUnsupported
        | MessageMediaDocument
        | MessageMediaWebPage
        | MessageMediaVenue
        | MessageMediaGame
        | MessageMediaInvoice
        | MessageMediaGeoLive
        | MessageMediaPoll
        | MessageMediaDice;
    export type TypeMessageAction =
        | MessageActionEmpty
        | MessageActionChatCreate
        | MessageActionChatEditTitle
        | MessageActionChatEditPhoto
        | MessageActionChatDeletePhoto
        | MessageActionChatAddUser
        | MessageActionChatDeleteUser
        | MessageActionChatJoinedByLink
        | MessageActionChannelCreate
        | MessageActionChatMigrateTo
        | MessageActionChannelMigrateFrom
        | MessageActionPinMessage
        | MessageActionHistoryClear
        | MessageActionGameScore
        | MessageActionPaymentSentMe
        | MessageActionPaymentSent
        | MessageActionPhoneCall
        | MessageActionScreenshotTaken
        | MessageActionCustomAction
        | MessageActionBotAllowed
        | MessageActionSecureValuesSentMe
        | MessageActionSecureValuesSent
        | MessageActionContactSignUp
        | MessageActionGeoProximityReached
        | MessageActionGroupCall
        | MessageActionInviteToGroupCall
        | MessageActionSetMessagesTTL
        | MessageActionGroupCallScheduled;
    export type TypeDialog = Dialog | DialogFolder;
    export type TypePhoto = PhotoEmpty | Photo;
    export type TypePhotoSize =
        | PhotoSizeEmpty
        | PhotoSize
        | PhotoCachedSize
        | PhotoStrippedSize
        | PhotoSizeProgressive
        | PhotoPathSize;
    export type TypeGeoPoint = GeoPointEmpty | GeoPoint;
    export type TypeInputNotifyPeer =
        | InputNotifyPeer
        | InputNotifyUsers
        | InputNotifyChats
        | InputNotifyBroadcasts;
    export type TypeInputPeerNotifySettings = InputPeerNotifySettings;
    export type TypePeerNotifySettings = PeerNotifySettings;
    export type TypePeerSettings = PeerSettings;
    export type TypeWallPaper = WallPaper | WallPaperNoFile;
    export type TypeReportReason =
        | InputReportReasonSpam
        | InputReportReasonViolence
        | InputReportReasonPornography
        | InputReportReasonChildAbuse
        | InputReportReasonOther
        | InputReportReasonCopyright
        | InputReportReasonGeoIrrelevant
        | InputReportReasonFake;
    export type TypeUserFull = UserFull;
    export type TypeContact = Contact;
    export type TypeImportedContact = ImportedContact;
    export type TypeContactStatus = ContactStatus;
    export type TypeMessagesFilter =
        | InputMessagesFilterEmpty
        | InputMessagesFilterPhotos
        | InputMessagesFilterVideo
        | InputMessagesFilterPhotoVideo
        | InputMessagesFilterDocument
        | InputMessagesFilterUrl
        | InputMessagesFilterGif
        | InputMessagesFilterVoice
        | InputMessagesFilterMusic
        | InputMessagesFilterChatPhotos
        | InputMessagesFilterPhoneCalls
        | InputMessagesFilterRoundVoice
        | InputMessagesFilterRoundVideo
        | InputMessagesFilterMyMentions
        | InputMessagesFilterGeo
        | InputMessagesFilterContacts
        | InputMessagesFilterPinned;
    export type TypeUpdate =
        | UpdateNewMessage
        | UpdateMessageID
        | UpdateDeleteMessages
        | UpdateUserTyping
        | UpdateChatUserTyping
        | UpdateChatParticipants
        | UpdateUserStatus
        | UpdateUserName
        | UpdateUserPhoto
        | UpdateNewEncryptedMessage
        | UpdateEncryptedChatTyping
        | UpdateEncryption
        | UpdateEncryptedMessagesRead
        | UpdateChatParticipantAdd
        | UpdateChatParticipantDelete
        | UpdateDcOptions
        | UpdateNotifySettings
        | UpdateServiceNotification
        | UpdatePrivacy
        | UpdateUserPhone
        | UpdateReadHistoryInbox
        | UpdateReadHistoryOutbox
        | UpdateWebPage
        | UpdateReadMessagesContents
        | UpdateChannelTooLong
        | UpdateChannel
        | UpdateNewChannelMessage
        | UpdateReadChannelInbox
        | UpdateDeleteChannelMessages
        | UpdateChannelMessageViews
        | UpdateChatParticipantAdmin
        | UpdateNewStickerSet
        | UpdateStickerSetsOrder
        | UpdateStickerSets
        | UpdateSavedGifs
        | UpdateBotInlineQuery
        | UpdateBotInlineSend
        | UpdateEditChannelMessage
        | UpdateBotCallbackQuery
        | UpdateEditMessage
        | UpdateInlineBotCallbackQuery
        | UpdateReadChannelOutbox
        | UpdateDraftMessage
        | UpdateReadFeaturedStickers
        | UpdateRecentStickers
        | UpdateConfig
        | UpdatePtsChanged
        | UpdateChannelWebPage
        | UpdateDialogPinned
        | UpdatePinnedDialogs
        | UpdateBotWebhookJSON
        | UpdateBotWebhookJSONQuery
        | UpdateBotShippingQuery
        | UpdateBotPrecheckoutQuery
        | UpdatePhoneCall
        | UpdateLangPackTooLong
        | UpdateLangPack
        | UpdateFavedStickers
        | UpdateChannelReadMessagesContents
        | UpdateContactsReset
        | UpdateChannelAvailableMessages
        | UpdateDialogUnreadMark
        | UpdateMessagePoll
        | UpdateChatDefaultBannedRights
        | UpdateFolderPeers
        | UpdatePeerSettings
        | UpdatePeerLocated
        | UpdateNewScheduledMessage
        | UpdateDeleteScheduledMessages
        | UpdateTheme
        | UpdateGeoLiveViewed
        | UpdateLoginToken
        | UpdateMessagePollVote
        | UpdateDialogFilter
        | UpdateDialogFilterOrder
        | UpdateDialogFilters
        | UpdatePhoneCallSignalingData
        | UpdateChannelMessageForwards
        | UpdateReadChannelDiscussionInbox
        | UpdateReadChannelDiscussionOutbox
        | UpdatePeerBlocked
        | UpdateChannelUserTyping
        | UpdatePinnedMessages
        | UpdatePinnedChannelMessages
        | UpdateChat
        | UpdateGroupCallParticipants
        | UpdateGroupCall
        | UpdatePeerHistoryTTL
        | UpdateChatParticipant
        | UpdateChannelParticipant
        | UpdateBotStopped
        | UpdateGroupCallConnection
        | UpdateBotCommands;
    export type TypeUpdates =
        | UpdatesTooLong
        | UpdateShortMessage
        | UpdateShortChatMessage
        | UpdateShort
        | UpdatesCombined
        | Updates
        | UpdateShortSentMessage;
    export type TypeDcOption = DcOption;
    export type TypeConfig = Config;
    export type TypeNearestDc = NearestDc;
    export type TypeEncryptedChat =
        | EncryptedChatEmpty
        | EncryptedChatWaiting
        | EncryptedChatRequested
        | EncryptedChat
        | EncryptedChatDiscarded;
    export type TypeInputEncryptedChat = InputEncryptedChat;
    export type TypeEncryptedFile = EncryptedFileEmpty | EncryptedFile;
    export type TypeInputEncryptedFile =
        | InputEncryptedFileEmpty
        | InputEncryptedFileUploaded
        | InputEncryptedFile
        | InputEncryptedFileBigUploaded;
    export type TypeEncryptedMessage =
        | EncryptedMessage
        | EncryptedMessageService;
    export type TypeInputDocument = InputDocumentEmpty | InputDocument;
    export type TypeDocument = DocumentEmpty | Document;
    export type TypeNotifyPeer =
        | NotifyPeer
        | NotifyUsers
        | NotifyChats
        | NotifyBroadcasts;
    export type TypeSendMessageAction =
        | SendMessageTypingAction
        | SendMessageCancelAction
        | SendMessageRecordVideoAction
        | SendMessageUploadVideoAction
        | SendMessageRecordAudioAction
        | SendMessageUploadAudioAction
        | SendMessageUploadPhotoAction
        | SendMessageUploadDocumentAction
        | SendMessageGeoLocationAction
        | SendMessageChooseContactAction
        | SendMessageGamePlayAction
        | SendMessageRecordRoundAction
        | SendMessageUploadRoundAction
        | SpeakingInGroupCallAction
        | SendMessageHistoryImportAction;
    export type TypeInputPrivacyKey =
        | InputPrivacyKeyStatusTimestamp
        | InputPrivacyKeyChatInvite
        | InputPrivacyKeyPhoneCall
        | InputPrivacyKeyPhoneP2P
        | InputPrivacyKeyForwards
        | InputPrivacyKeyProfilePhoto
        | InputPrivacyKeyPhoneNumber
        | InputPrivacyKeyAddedByPhone;
    export type TypePrivacyKey =
        | PrivacyKeyStatusTimestamp
        | PrivacyKeyChatInvite
        | PrivacyKeyPhoneCall
        | PrivacyKeyPhoneP2P
        | PrivacyKeyForwards
        | PrivacyKeyProfilePhoto
        | PrivacyKeyPhoneNumber
        | PrivacyKeyAddedByPhone;
    export type TypeInputPrivacyRule =
        | InputPrivacyValueAllowContacts
        | InputPrivacyValueAllowAll
        | InputPrivacyValueAllowUsers
        | InputPrivacyValueDisallowContacts
        | InputPrivacyValueDisallowAll
        | InputPrivacyValueDisallowUsers
        | InputPrivacyValueAllowChatParticipants
        | InputPrivacyValueDisallowChatParticipants;
    export type TypePrivacyRule =
        | PrivacyValueAllowContacts
        | PrivacyValueAllowAll
        | PrivacyValueAllowUsers
        | PrivacyValueDisallowContacts
        | PrivacyValueDisallowAll
        | PrivacyValueDisallowUsers
        | PrivacyValueAllowChatParticipants
        | PrivacyValueDisallowChatParticipants;
    export type TypeAccountDaysTTL = AccountDaysTTL;
    export type TypeDocumentAttribute =
        | DocumentAttributeImageSize
        | DocumentAttributeAnimated
        | DocumentAttributeSticker
        | DocumentAttributeVideo
        | DocumentAttributeAudio
        | DocumentAttributeFilename
        | DocumentAttributeHasStickers;
    export type TypeStickerPack = StickerPack;
    export type TypeWebPage =
        | WebPageEmpty
        | WebPagePending
        | WebPage
        | WebPageNotModified;
    export type TypeAuthorization = Authorization;
    export type TypeReceivedNotifyMessage = ReceivedNotifyMessage;
    export type TypeExportedChatInvite = ChatInviteExported;
    export type TypeChatInvite =
        | ChatInviteAlready
        | ChatInvite
        | ChatInvitePeek;
    export type TypeInputStickerSet =
        | InputStickerSetEmpty
        | InputStickerSetID
        | InputStickerSetShortName
        | InputStickerSetAnimatedEmoji
        | InputStickerSetDice;
    export type TypeStickerSet = StickerSet;
    export type TypeBotCommand = BotCommand;
    export type TypeBotInfo = BotInfo;
    export type TypeKeyboardButton =
        | KeyboardButton
        | KeyboardButtonUrl
        | KeyboardButtonCallback
        | KeyboardButtonRequestPhone
        | KeyboardButtonRequestGeoLocation
        | KeyboardButtonSwitchInline
        | KeyboardButtonGame
        | KeyboardButtonBuy
        | KeyboardButtonUrlAuth
        | InputKeyboardButtonUrlAuth
        | KeyboardButtonRequestPoll;
    export type TypeKeyboardButtonRow = KeyboardButtonRow;
    export type TypeReplyMarkup =
        | ReplyKeyboardHide
        | ReplyKeyboardForceReply
        | ReplyKeyboardMarkup
        | ReplyInlineMarkup;
    export type TypeMessageEntity =
        | MessageEntityUnknown
        | MessageEntityMention
        | MessageEntityHashtag
        | MessageEntityBotCommand
        | MessageEntityUrl
        | MessageEntityEmail
        | MessageEntityBold
        | MessageEntityItalic
        | MessageEntityCode
        | MessageEntityPre
        | MessageEntityTextUrl
        | MessageEntityMentionName
        | InputMessageEntityMentionName
        | MessageEntityPhone
        | MessageEntityCashtag
        | MessageEntityUnderline
        | MessageEntityStrike
        | MessageEntityBlockquote
        | MessageEntityBankCard;
    export type TypeInputChannel =
        | InputChannelEmpty
        | InputChannel
        | InputChannelFromMessage;
    export type TypeMessageRange = MessageRange;
    export type TypeChannelMessagesFilter =
        | ChannelMessagesFilterEmpty
        | ChannelMessagesFilter;
    export type TypeChannelParticipant =
        | ChannelParticipant
        | ChannelParticipantSelf
        | ChannelParticipantCreator
        | ChannelParticipantAdmin
        | ChannelParticipantBanned
        | ChannelParticipantLeft;
    export type TypeChannelParticipantsFilter =
        | ChannelParticipantsRecent
        | ChannelParticipantsAdmins
        | ChannelParticipantsKicked
        | ChannelParticipantsBots
        | ChannelParticipantsBanned
        | ChannelParticipantsSearch
        | ChannelParticipantsContacts
        | ChannelParticipantsMentions;
    export type TypeInputBotInlineMessage =
        | InputBotInlineMessageMediaAuto
        | InputBotInlineMessageText
        | InputBotInlineMessageMediaGeo
        | InputBotInlineMessageMediaVenue
        | InputBotInlineMessageMediaContact
        | InputBotInlineMessageGame
        | InputBotInlineMessageMediaInvoice;
    export type TypeInputBotInlineResult =
        | InputBotInlineResult
        | InputBotInlineResultPhoto
        | InputBotInlineResultDocument
        | InputBotInlineResultGame;
    export type TypeBotInlineMessage =
        | BotInlineMessageMediaAuto
        | BotInlineMessageText
        | BotInlineMessageMediaGeo
        | BotInlineMessageMediaVenue
        | BotInlineMessageMediaContact
        | BotInlineMessageMediaInvoice;
    export type TypeBotInlineResult = BotInlineResult | BotInlineMediaResult;
    export type TypeExportedMessageLink = ExportedMessageLink;
    export type TypeMessageFwdHeader = MessageFwdHeader;
    export type TypeInputBotInlineMessageID = InputBotInlineMessageID;
    export type TypeInlineBotSwitchPM = InlineBotSwitchPM;
    export type TypeTopPeer = TopPeer;
    export type TypeTopPeerCategory =
        | TopPeerCategoryBotsPM
        | TopPeerCategoryBotsInline
        | TopPeerCategoryCorrespondents
        | TopPeerCategoryGroups
        | TopPeerCategoryChannels
        | TopPeerCategoryPhoneCalls
        | TopPeerCategoryForwardUsers
        | TopPeerCategoryForwardChats;
    export type TypeTopPeerCategoryPeers = TopPeerCategoryPeers;
    export type TypeDraftMessage = DraftMessageEmpty | DraftMessage;
    export type TypeStickerSetCovered =
        | StickerSetCovered
        | StickerSetMultiCovered;
    export type TypeMaskCoords = MaskCoords;
    export type TypeInputStickeredMedia =
        | InputStickeredMediaPhoto
        | InputStickeredMediaDocument;
    export type TypeGame = Game;
    export type TypeInputGame = InputGameID | InputGameShortName;
    export type TypeHighScore = HighScore;
    export type TypeRichText =
        | TextEmpty
        | TextPlain
        | TextBold
        | TextItalic
        | TextUnderline
        | TextStrike
        | TextFixed
        | TextUrl
        | TextEmail
        | TextConcat
        | TextSubscript
        | TextSuperscript
        | TextMarked
        | TextPhone
        | TextImage
        | TextAnchor;
    export type TypePageBlock =
        | PageBlockUnsupported
        | PageBlockTitle
        | PageBlockSubtitle
        | PageBlockAuthorDate
        | PageBlockHeader
        | PageBlockSubheader
        | PageBlockParagraph
        | PageBlockPreformatted
        | PageBlockFooter
        | PageBlockDivider
        | PageBlockAnchor
        | PageBlockList
        | PageBlockBlockquote
        | PageBlockPullquote
        | PageBlockPhoto
        | PageBlockVideo
        | PageBlockCover
        | PageBlockEmbed
        | PageBlockEmbedPost
        | PageBlockCollage
        | PageBlockSlideshow
        | PageBlockChannel
        | PageBlockAudio
        | PageBlockKicker
        | PageBlockTable
        | PageBlockOrderedList
        | PageBlockDetails
        | PageBlockRelatedArticles
        | PageBlockMap;
    export type TypePhoneCallDiscardReason =
        | PhoneCallDiscardReasonMissed
        | PhoneCallDiscardReasonDisconnect
        | PhoneCallDiscardReasonHangup
        | PhoneCallDiscardReasonBusy;
    export type TypeDataJSON = DataJSON;
    export type TypeLabeledPrice = LabeledPrice;
    export type TypeInvoice = Invoice;
    export type TypePaymentCharge = PaymentCharge;
    export type TypePostAddress = PostAddress;
    export type TypePaymentRequestedInfo = PaymentRequestedInfo;
    export type TypePaymentSavedCredentials = PaymentSavedCredentialsCard;
    export type TypeWebDocument = WebDocument | WebDocumentNoProxy;
    export type TypeInputWebDocument = InputWebDocument;
    export type TypeInputWebFileLocation =
        | InputWebFileLocation
        | InputWebFileGeoPointLocation;
    export type TypeInputPaymentCredentials =
        | InputPaymentCredentialsSaved
        | InputPaymentCredentials
        | InputPaymentCredentialsApplePay
        | InputPaymentCredentialsGooglePay;
    export type TypeShippingOption = ShippingOption;
    export type TypeInputStickerSetItem = InputStickerSetItem;
    export type TypeInputPhoneCall = InputPhoneCall;
    export type TypePhoneCall =
        | PhoneCallEmpty
        | PhoneCallWaiting
        | PhoneCallRequested
        | PhoneCallAccepted
        | PhoneCall
        | PhoneCallDiscarded;
    export type TypePhoneConnection = PhoneConnection | PhoneConnectionWebrtc;
    export type TypePhoneCallProtocol = PhoneCallProtocol;
    export type TypeCdnPublicKey = CdnPublicKey;
    export type TypeCdnConfig = CdnConfig;
    export type TypeLangPackString =
        | LangPackString
        | LangPackStringPluralized
        | LangPackStringDeleted;
    export type TypeLangPackDifference = LangPackDifference;
    export type TypeLangPackLanguage = LangPackLanguage;
    export type TypeChannelAdminLogEventAction =
        | ChannelAdminLogEventActionChangeTitle
        | ChannelAdminLogEventActionChangeAbout
        | ChannelAdminLogEventActionChangeUsername
        | ChannelAdminLogEventActionChangePhoto
        | ChannelAdminLogEventActionToggleInvites
        | ChannelAdminLogEventActionToggleSignatures
        | ChannelAdminLogEventActionUpdatePinned
        | ChannelAdminLogEventActionEditMessage
        | ChannelAdminLogEventActionDeleteMessage
        | ChannelAdminLogEventActionParticipantJoin
        | ChannelAdminLogEventActionParticipantLeave
        | ChannelAdminLogEventActionParticipantInvite
        | ChannelAdminLogEventActionParticipantToggleBan
        | ChannelAdminLogEventActionParticipantToggleAdmin
        | ChannelAdminLogEventActionChangeStickerSet
        | ChannelAdminLogEventActionTogglePreHistoryHidden
        | ChannelAdminLogEventActionDefaultBannedRights
        | ChannelAdminLogEventActionStopPoll
        | ChannelAdminLogEventActionChangeLinkedChat
        | ChannelAdminLogEventActionChangeLocation
        | ChannelAdminLogEventActionToggleSlowMode
        | ChannelAdminLogEventActionStartGroupCall
        | ChannelAdminLogEventActionDiscardGroupCall
        | ChannelAdminLogEventActionParticipantMute
        | ChannelAdminLogEventActionParticipantUnmute
        | ChannelAdminLogEventActionToggleGroupCallSetting
        | ChannelAdminLogEventActionParticipantJoinByInvite
        | ChannelAdminLogEventActionExportedInviteDelete
        | ChannelAdminLogEventActionExportedInviteRevoke
        | ChannelAdminLogEventActionExportedInviteEdit
        | ChannelAdminLogEventActionParticipantVolume
        | ChannelAdminLogEventActionChangeHistoryTTL;
    export type TypeChannelAdminLogEvent = ChannelAdminLogEvent;
    export type TypeChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter;
    export type TypePopularContact = PopularContact;
    export type TypeRecentMeUrl =
        | RecentMeUrlUnknown
        | RecentMeUrlUser
        | RecentMeUrlChat
        | RecentMeUrlChatInvite
        | RecentMeUrlStickerSet;
    export type TypeInputSingleMedia = InputSingleMedia;
    export type TypeWebAuthorization = WebAuthorization;
    export type TypeInputMessage =
        | InputMessageID
        | InputMessageReplyTo
        | InputMessagePinned
        | InputMessageCallbackQuery;
    export type TypeInputDialogPeer = InputDialogPeer | InputDialogPeerFolder;
    export type TypeDialogPeer = DialogPeer | DialogPeerFolder;
    export type TypeFileHash = FileHash;
    export type TypeInputClientProxy = InputClientProxy;
    export type TypeInputSecureFile = InputSecureFileUploaded | InputSecureFile;
    export type TypeSecureFile = SecureFileEmpty | SecureFile;
    export type TypeSecureData = SecureData;
    export type TypeSecurePlainData = SecurePlainPhone | SecurePlainEmail;
    export type TypeSecureValueType =
        | SecureValueTypePersonalDetails
        | SecureValueTypePassport
        | SecureValueTypeDriverLicense
        | SecureValueTypeIdentityCard
        | SecureValueTypeInternalPassport
        | SecureValueTypeAddress
        | SecureValueTypeUtilityBill
        | SecureValueTypeBankStatement
        | SecureValueTypeRentalAgreement
        | SecureValueTypePassportRegistration
        | SecureValueTypeTemporaryRegistration
        | SecureValueTypePhone
        | SecureValueTypeEmail;
    export type TypeSecureValue = SecureValue;
    export type TypeInputSecureValue = InputSecureValue;
    export type TypeSecureValueHash = SecureValueHash;
    export type TypeSecureValueError =
        | SecureValueErrorData
        | SecureValueErrorFrontSide
        | SecureValueErrorReverseSide
        | SecureValueErrorSelfie
        | SecureValueErrorFile
        | SecureValueErrorFiles
        | SecureValueError
        | SecureValueErrorTranslationFile
        | SecureValueErrorTranslationFiles;
    export type TypeSecureCredentialsEncrypted = SecureCredentialsEncrypted;
    export type TypeSavedContact = SavedPhoneContact;
    export type TypePasswordKdfAlgo =
        | PasswordKdfAlgoUnknown
        | PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
    export type TypeSecurePasswordKdfAlgo =
        | SecurePasswordKdfAlgoUnknown
        | SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000
        | SecurePasswordKdfAlgoSHA512;
    export type TypeSecureSecretSettings = SecureSecretSettings;
    export type TypeInputCheckPasswordSRP =
        | InputCheckPasswordEmpty
        | InputCheckPasswordSRP;
    export type TypeSecureRequiredType =
        | SecureRequiredType
        | SecureRequiredTypeOneOf;
    export type TypeInputAppEvent = InputAppEvent;
    export type TypeJSONObjectValue = JsonObjectValue;
    export type TypeJSONValue =
        | JsonNull
        | JsonBool
        | JsonNumber
        | JsonString
        | JsonArray
        | JsonObject;
    export type TypePageTableCell = PageTableCell;
    export type TypePageTableRow = PageTableRow;
    export type TypePageCaption = PageCaption;
    export type TypePageListItem = PageListItemText | PageListItemBlocks;
    export type TypePageListOrderedItem =
        | PageListOrderedItemText
        | PageListOrderedItemBlocks;
    export type TypePageRelatedArticle = PageRelatedArticle;
    export type TypePage = Page;
    export type TypePollAnswer = PollAnswer;
    export type TypePoll = Poll;
    export type TypePollAnswerVoters = PollAnswerVoters;
    export type TypePollResults = PollResults;
    export type TypeChatOnlines = ChatOnlines;
    export type TypeStatsURL = StatsURL;
    export type TypeChatAdminRights = ChatAdminRights;
    export type TypeChatBannedRights = ChatBannedRights;
    export type TypeInputWallPaper =
        | InputWallPaper
        | InputWallPaperSlug
        | InputWallPaperNoFile;
    export type TypeCodeSettings = CodeSettings;
    export type TypeWallPaperSettings = WallPaperSettings;
    export type TypeAutoDownloadSettings = AutoDownloadSettings;
    export type TypeEmojiKeyword = EmojiKeyword | EmojiKeywordDeleted;
    export type TypeEmojiKeywordsDifference = EmojiKeywordsDifference;
    export type TypeEmojiURL = EmojiURL;
    export type TypeEmojiLanguage = EmojiLanguage;
    export type TypeFolder = Folder;
    export type TypeInputFolderPeer = InputFolderPeer;
    export type TypeFolderPeer = FolderPeer;
    export type TypeUrlAuthResult =
        | UrlAuthResultRequest
        | UrlAuthResultAccepted
        | UrlAuthResultDefault;
    export type TypeChannelLocation = ChannelLocationEmpty | ChannelLocation;
    export type TypePeerLocated = PeerLocated | PeerSelfLocated;
    export type TypeRestrictionReason = RestrictionReason;
    export type TypeInputTheme = InputTheme | InputThemeSlug;
    export type TypeTheme = Theme;
    export type TypeBaseTheme =
        | BaseThemeClassic
        | BaseThemeDay
        | BaseThemeNight
        | BaseThemeTinted
        | BaseThemeArctic;
    export type TypeInputThemeSettings = InputThemeSettings;
    export type TypeThemeSettings = ThemeSettings;
    export type TypeWebPageAttribute = WebPageAttributeTheme;
    export type TypeMessageUserVote =
        | MessageUserVote
        | MessageUserVoteInputOption
        | MessageUserVoteMultiple;
    export type TypeBankCardOpenUrl = BankCardOpenUrl;
    export type TypeDialogFilter = DialogFilter;
    export type TypeDialogFilterSuggested = DialogFilterSuggested;
    export type TypeStatsDateRangeDays = StatsDateRangeDays;
    export type TypeStatsAbsValueAndPrev = StatsAbsValueAndPrev;
    export type TypeStatsPercentValue = StatsPercentValue;
    export type TypeStatsGraph = StatsGraphAsync | StatsGraphError | StatsGraph;
    export type TypeMessageInteractionCounters = MessageInteractionCounters;
    export type TypeVideoSize = VideoSize;
    export type TypeStatsGroupTopPoster = StatsGroupTopPoster;
    export type TypeStatsGroupTopAdmin = StatsGroupTopAdmin;
    export type TypeStatsGroupTopInviter = StatsGroupTopInviter;
    export type TypeGlobalPrivacySettings = GlobalPrivacySettings;
    export type TypeMessageViews = MessageViews;
    export type TypeMessageReplyHeader = MessageReplyHeader;
    export type TypeMessageReplies = MessageReplies;
    export type TypePeerBlocked = PeerBlocked;
    export type TypeGroupCall = GroupCallDiscarded | GroupCall;
    export type TypeInputGroupCall = InputGroupCall;
    export type TypeGroupCallParticipant = GroupCallParticipant;
    export type TypeInlineQueryPeerType =
        | InlineQueryPeerTypeSameBotPM
        | InlineQueryPeerTypePM
        | InlineQueryPeerTypeChat
        | InlineQueryPeerTypeMegagroup
        | InlineQueryPeerTypeBroadcast;
    export type TypeChatInviteImporter = ChatInviteImporter;
    export type TypeChatAdminWithInvites = ChatAdminWithInvites;
    export type TypeGroupCallParticipantVideoSourceGroup =
        GroupCallParticipantVideoSourceGroup;
    export type TypeGroupCallParticipantVideo = GroupCallParticipantVideo;
    export type TypeBotCommandScope =
        | BotCommandScopeDefault
        | BotCommandScopeUsers
        | BotCommandScopeChats
        | BotCommandScopeChatAdmins
        | BotCommandScopePeer
        | BotCommandScopePeerAdmins
        | BotCommandScopePeerUser;
    export type TypeResPQ = ResPQ;
    export type TypeP_Q_inner_data =
        | PQInnerData
        | PQInnerDataDc
        | PQInnerDataTemp
        | PQInnerDataTempDc;
    export type TypeBindAuthKeyInner = BindAuthKeyInner;
    export type TypeServer_DH_Params = ServerDHParamsFail | ServerDHParamsOk;
    export type TypeServer_DH_inner_data = ServerDHInnerData;
    export type TypeClient_DH_Inner_Data = ClientDHInnerData;
    export type TypeSet_client_DH_params_answer =
        | DhGenOk
        | DhGenRetry
        | DhGenFail;
    export type TypeDestroyAuthKeyRes =
        | DestroyAuthKeyOk
        | DestroyAuthKeyNone
        | DestroyAuthKeyFail;
    export type TypeMsgsAck = MsgsAck;
    export type TypeBadMsgNotification = BadMsgNotification | BadServerSalt;
    export type TypeMsgsStateReq = MsgsStateReq;
    export type TypeMsgsStateInfo = MsgsStateInfo;
    export type TypeMsgsAllInfo = MsgsAllInfo;
    export type TypeMsgDetailedInfo = MsgDetailedInfo | MsgNewDetailedInfo;
    export type TypeMsgResendReq = MsgResendReq;
    export type TypeRpcError = RpcError;
    export type TypeRpcDropAnswer =
        | RpcAnswerUnknown
        | RpcAnswerDroppedRunning
        | RpcAnswerDropped;
    export type TypeFutureSalt = FutureSalt;
    export type TypeFutureSalts = FutureSalts;
    export type TypePong = Pong;
    export type TypeDestroySessionRes = DestroySessionOk | DestroySessionNone;
    export type TypeNewSession = NewSessionCreated;
    export type TypeHttpWait = HttpWait;
    export type TypeIpPort = IpPort | IpPortSecret;
    export type TypeAccessPointRule = AccessPointRule;
    export type TypeTlsClientHello = TlsClientHello;
    export type TypeTlsBlock =
        | TlsBlockString
        | TlsBlockRandom
        | TlsBlockZero
        | TlsBlockDomain
        | TlsBlockGrease
        | TlsBlockPublicKey
        | TlsBlockScope;
    // All requests
    export type AnyRequest =
        | InvokeAfterMsg
        | InvokeAfterMsgs
        | InitConnection
        | InvokeWithLayer
        | InvokeWithoutUpdates
        | InvokeWithMessagesRange
        | InvokeWithTakeout
        | ReqPq
        | ReqPqMulti
        | ReqDHParams
        | SetClientDHParams
        | DestroyAuthKey
        | RpcDropAnswer
        | GetFutureSalts
        | Ping
        | PingDelayDisconnect
        | DestroySession
        | auth.SendCode
        | auth.SignUp
        | auth.SignIn
        | auth.LogOut
        | auth.ResetAuthorizations
        | auth.ExportAuthorization
        | auth.ImportAuthorization
        | auth.BindTempAuthKey
        | auth.ImportBotAuthorization
        | auth.CheckPassword
        | auth.RequestPasswordRecovery
        | auth.RecoverPassword
        | auth.ResendCode
        | auth.CancelCode
        | auth.DropTempAuthKeys
        | auth.ExportLoginToken
        | auth.ImportLoginToken
        | auth.AcceptLoginToken
        | auth.CheckRecoveryPassword
        | account.RegisterDevice
        | account.UnregisterDevice
        | account.UpdateNotifySettings
        | account.GetNotifySettings
        | account.ResetNotifySettings
        | account.UpdateProfile
        | account.UpdateStatus
        | account.GetWallPapers
        | account.ReportPeer
        | account.CheckUsername
        | account.UpdateUsername
        | account.GetPrivacy
        | account.SetPrivacy
        | account.DeleteAccount
        | account.GetAccountTTL
        | account.SetAccountTTL
        | account.SendChangePhoneCode
        | account.ChangePhone
        | account.UpdateDeviceLocked
        | account.GetAuthorizations
        | account.ResetAuthorization
        | account.GetPassword
        | account.GetPasswordSettings
        | account.UpdatePasswordSettings
        | account.SendConfirmPhoneCode
        | account.ConfirmPhone
        | account.GetTmpPassword
        | account.GetWebAuthorizations
        | account.ResetWebAuthorization
        | account.ResetWebAuthorizations
        | account.GetAllSecureValues
        | account.GetSecureValue
        | account.SaveSecureValue
        | account.DeleteSecureValue
        | account.GetAuthorizationForm
        | account.AcceptAuthorization
        | account.SendVerifyPhoneCode
        | account.VerifyPhone
        | account.SendVerifyEmailCode
        | account.VerifyEmail
        | account.InitTakeoutSession
        | account.FinishTakeoutSession
        | account.ConfirmPasswordEmail
        | account.ResendPasswordEmail
        | account.CancelPasswordEmail
        | account.GetContactSignUpNotification
        | account.SetContactSignUpNotification
        | account.GetNotifyExceptions
        | account.GetWallPaper
        | account.UploadWallPaper
        | account.SaveWallPaper
        | account.InstallWallPaper
        | account.ResetWallPapers
        | account.GetAutoDownloadSettings
        | account.SaveAutoDownloadSettings
        | account.UploadTheme
        | account.CreateTheme
        | account.UpdateTheme
        | account.SaveTheme
        | account.InstallTheme
        | account.GetTheme
        | account.GetThemes
        | account.SetContentSettings
        | account.GetContentSettings
        | account.GetMultiWallPapers
        | account.GetGlobalPrivacySettings
        | account.SetGlobalPrivacySettings
        | account.ReportProfilePhoto
        | account.ResetPassword
        | account.DeclinePasswordReset
        | users.GetUsers
        | users.GetFullUser
        | users.SetSecureValueErrors
        | contacts.GetContactIDs
        | contacts.GetStatuses
        | contacts.GetContacts
        | contacts.ImportContacts
        | contacts.DeleteContacts
        | contacts.DeleteByPhones
        | contacts.Block
        | contacts.Unblock
        | contacts.GetBlocked
        | contacts.Search
        | contacts.ResolveUsername
        | contacts.GetTopPeers
        | contacts.ResetTopPeerRating
        | contacts.ResetSaved
        | contacts.GetSaved
        | contacts.ToggleTopPeers
        | contacts.AddContact
        | contacts.AcceptContact
        | contacts.GetLocated
        | contacts.BlockFromReplies
        | messages.GetMessages
        | messages.GetDialogs
        | messages.GetHistory
        | messages.Search
        | messages.ReadHistory
        | messages.DeleteHistory
        | messages.DeleteMessages
        | messages.ReceivedMessages
        | messages.SetTyping
        | messages.SendMessage
        | messages.SendMedia
        | messages.ForwardMessages
        | messages.ReportSpam
        | messages.GetPeerSettings
        | messages.Report
        | messages.GetChats
        | messages.GetFullChat
        | messages.EditChatTitle
        | messages.EditChatPhoto
        | messages.AddChatUser
        | messages.DeleteChatUser
        | messages.CreateChat
        | messages.GetDhConfig
        | messages.RequestEncryption
        | messages.AcceptEncryption
        | messages.DiscardEncryption
        | messages.SetEncryptedTyping
        | messages.ReadEncryptedHistory
        | messages.SendEncrypted
        | messages.SendEncryptedFile
        | messages.SendEncryptedService
        | messages.ReceivedQueue
        | messages.ReportEncryptedSpam
        | messages.ReadMessageContents
        | messages.GetStickers
        | messages.GetAllStickers
        | messages.GetWebPagePreview
        | messages.ExportChatInvite
        | messages.CheckChatInvite
        | messages.ImportChatInvite
        | messages.GetStickerSet
        | messages.InstallStickerSet
        | messages.UninstallStickerSet
        | messages.StartBot
        | messages.GetMessagesViews
        | messages.EditChatAdmin
        | messages.MigrateChat
        | messages.SearchGlobal
        | messages.ReorderStickerSets
        | messages.GetDocumentByHash
        | messages.GetSavedGifs
        | messages.SaveGif
        | messages.GetInlineBotResults
        | messages.SetInlineBotResults
        | messages.SendInlineBotResult
        | messages.GetMessageEditData
        | messages.EditMessage
        | messages.EditInlineBotMessage
        | messages.GetBotCallbackAnswer
        | messages.SetBotCallbackAnswer
        | messages.GetPeerDialogs
        | messages.SaveDraft
        | messages.GetAllDrafts
        | messages.GetFeaturedStickers
        | messages.ReadFeaturedStickers
        | messages.GetRecentStickers
        | messages.SaveRecentSticker
        | messages.ClearRecentStickers
        | messages.GetArchivedStickers
        | messages.GetMaskStickers
        | messages.GetAttachedStickers
        | messages.SetGameScore
        | messages.SetInlineGameScore
        | messages.GetGameHighScores
        | messages.GetInlineGameHighScores
        | messages.GetCommonChats
        | messages.GetAllChats
        | messages.GetWebPage
        | messages.ToggleDialogPin
        | messages.ReorderPinnedDialogs
        | messages.GetPinnedDialogs
        | messages.SetBotShippingResults
        | messages.SetBotPrecheckoutResults
        | messages.UploadMedia
        | messages.SendScreenshotNotification
        | messages.GetFavedStickers
        | messages.FaveSticker
        | messages.GetUnreadMentions
        | messages.ReadMentions
        | messages.GetRecentLocations
        | messages.SendMultiMedia
        | messages.UploadEncryptedFile
        | messages.SearchStickerSets
        | messages.GetSplitRanges
        | messages.MarkDialogUnread
        | messages.GetDialogUnreadMarks
        | messages.ClearAllDrafts
        | messages.UpdatePinnedMessage
        | messages.SendVote
        | messages.GetPollResults
        | messages.GetOnlines
        | messages.GetStatsURL
        | messages.EditChatAbout
        | messages.EditChatDefaultBannedRights
        | messages.GetEmojiKeywords
        | messages.GetEmojiKeywordsDifference
        | messages.GetEmojiKeywordsLanguages
        | messages.GetEmojiURL
        | messages.GetSearchCounters
        | messages.RequestUrlAuth
        | messages.AcceptUrlAuth
        | messages.HidePeerSettingsBar
        | messages.GetScheduledHistory
        | messages.GetScheduledMessages
        | messages.SendScheduledMessages
        | messages.DeleteScheduledMessages
        | messages.GetPollVotes
        | messages.ToggleStickerSets
        | messages.GetDialogFilters
        | messages.GetSuggestedDialogFilters
        | messages.UpdateDialogFilter
        | messages.UpdateDialogFiltersOrder
        | messages.GetOldFeaturedStickers
        | messages.GetReplies
        | messages.GetDiscussionMessage
        | messages.ReadDiscussion
        | messages.UnpinAllMessages
        | messages.DeleteChat
        | messages.DeletePhoneCallHistory
        | messages.CheckHistoryImport
        | messages.InitHistoryImport
        | messages.UploadImportedMedia
        | messages.StartHistoryImport
        | messages.GetExportedChatInvites
        | messages.GetExportedChatInvite
        | messages.EditExportedChatInvite
        | messages.DeleteRevokedExportedChatInvites
        | messages.DeleteExportedChatInvite
        | messages.GetAdminsWithInvites
        | messages.GetChatInviteImporters
        | messages.SetHistoryTTL
        | messages.CheckHistoryImportPeer
        | updates.GetState
        | updates.GetDifference
        | updates.GetChannelDifference
        | photos.UpdateProfilePhoto
        | photos.UploadProfilePhoto
        | photos.DeletePhotos
        | photos.GetUserPhotos
        | upload.SaveFilePart
        | upload.GetFile
        | upload.SaveBigFilePart
        | upload.GetWebFile
        | upload.GetCdnFile
        | upload.ReuploadCdnFile
        | upload.GetCdnFileHashes
        | upload.GetFileHashes
        | help.GetConfig
        | help.GetNearestDc
        | help.GetAppUpdate
        | help.GetInviteText
        | help.GetSupport
        | help.GetAppChangelog
        | help.SetBotUpdatesStatus
        | help.GetCdnConfig
        | help.GetRecentMeUrls
        | help.GetTermsOfServiceUpdate
        | help.AcceptTermsOfService
        | help.GetDeepLinkInfo
        | help.GetAppConfig
        | help.SaveAppLog
        | help.GetPassportConfig
        | help.GetSupportName
        | help.GetUserInfo
        | help.EditUserInfo
        | help.GetPromoData
        | help.HidePromoData
        | help.DismissSuggestion
        | help.GetCountriesList
        | channels.ReadHistory
        | channels.DeleteMessages
        | channels.DeleteUserHistory
        | channels.ReportSpam
        | channels.GetMessages
        | channels.GetParticipants
        | channels.GetParticipant
        | channels.GetChannels
        | channels.GetFullChannel
        | channels.CreateChannel
        | channels.EditAdmin
        | channels.EditTitle
        | channels.EditPhoto
        | channels.CheckUsername
        | channels.UpdateUsername
        | channels.JoinChannel
        | channels.LeaveChannel
        | channels.InviteToChannel
        | channels.DeleteChannel
        | channels.ExportMessageLink
        | channels.ToggleSignatures
        | channels.GetAdminedPublicChannels
        | channels.EditBanned
        | channels.GetAdminLog
        | channels.SetStickers
        | channels.ReadMessageContents
        | channels.DeleteHistory
        | channels.TogglePreHistoryHidden
        | channels.GetLeftChannels
        | channels.GetGroupsForDiscussion
        | channels.SetDiscussionGroup
        | channels.EditCreator
        | channels.EditLocation
        | channels.ToggleSlowMode
        | channels.GetInactiveChannels
        | channels.ConvertToGigagroup
        | bots.SendCustomRequest
        | bots.AnswerWebhookJSONQuery
        | bots.SetBotCommands
        | bots.ResetBotCommands
        | bots.GetBotCommands
        | payments.GetPaymentForm
        | payments.GetPaymentReceipt
        | payments.ValidateRequestedInfo
        | payments.SendPaymentForm
        | payments.GetSavedInfo
        | payments.ClearSavedInfo
        | payments.GetBankCardData
        | stickers.CreateStickerSet
        | stickers.RemoveStickerFromSet
        | stickers.ChangeStickerPosition
        | stickers.AddStickerToSet
        | stickers.SetStickerSetThumb
        | stickers.CheckShortName
        | stickers.SuggestShortName
        | phone.GetCallConfig
        | phone.RequestCall
        | phone.AcceptCall
        | phone.ConfirmCall
        | phone.ReceivedCall
        | phone.DiscardCall
        | phone.SetCallRating
        | phone.SaveCallDebug
        | phone.SendSignalingData
        | phone.CreateGroupCall
        | phone.JoinGroupCall
        | phone.LeaveGroupCall
        | phone.InviteToGroupCall
        | phone.DiscardGroupCall
        | phone.ToggleGroupCallSettings
        | phone.GetGroupCall
        | phone.GetGroupParticipants
        | phone.CheckGroupCall
        | phone.ToggleGroupCallRecord
        | phone.EditGroupCallParticipant
        | phone.EditGroupCallTitle
        | phone.GetGroupCallJoinAs
        | phone.ExportGroupCallInvite
        | phone.ToggleGroupCallStartSubscription
        | phone.StartScheduledGroupCall
        | phone.SaveDefaultGroupCallJoinAs
        | phone.JoinGroupCallPresentation
        | phone.LeaveGroupCallPresentation
        | langpack.GetLangPack
        | langpack.GetStrings
        | langpack.GetDifference
        | langpack.GetLanguages
        | langpack.GetLanguage
        | folders.EditPeerFolders
        | folders.DeleteFolder
        | stats.GetBroadcastStats
        | stats.LoadAsyncGraph
        | stats.GetMegagroupStats
        | stats.GetMessagePublicForwards
        | stats.GetMessageStats;
}
